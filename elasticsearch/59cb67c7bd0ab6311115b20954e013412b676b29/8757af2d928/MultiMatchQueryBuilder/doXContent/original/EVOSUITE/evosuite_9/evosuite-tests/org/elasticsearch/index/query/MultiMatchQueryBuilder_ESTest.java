/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 29 21:47:39 GMT 2021
 */

package org.elasticsearch.index.query;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.collect.ImmutableSortedMap;
import groovy.lang.NonEmptySequence;
import java.io.IOException;
import java.io.OutputStream;
import org.apache.lucene.search.BoostAttributeImpl;
import org.elasticsearch.action.admin.indices.recovery.RecoveryResponse;
import org.elasticsearch.cache.recycler.PageCacheRecycler;
import org.elasticsearch.cluster.metadata.IndexMetaData;
import org.elasticsearch.common.ParseField;
import org.elasticsearch.common.ParseFieldMatcher;
import org.elasticsearch.common.bytes.BytesReference;
import org.elasticsearch.common.bytes.ReleasablePagedBytesReference;
import org.elasticsearch.common.geo.builders.LineStringBuilder;
import org.elasticsearch.common.geo.builders.MultiPolygonBuilder;
import org.elasticsearch.common.geo.builders.PolygonBuilder;
import org.elasticsearch.common.geo.builders.ShapeBuilder;
import org.elasticsearch.common.io.stream.InputStreamStreamInput;
import org.elasticsearch.common.io.stream.ReleasableBytesStreamOutput;
import org.elasticsearch.common.io.stream.StreamInput;
import org.elasticsearch.common.settings.Settings;
import org.elasticsearch.common.util.BigArrays;
import org.elasticsearch.common.xcontent.ToXContent;
import org.elasticsearch.common.xcontent.XContent;
import org.elasticsearch.common.xcontent.XContentBuilder;
import org.elasticsearch.common.xcontent.XContentBuilderString;
import org.elasticsearch.common.xcontent.XContentType;
import org.elasticsearch.common.xcontent.cbor.CborXContent;
import org.elasticsearch.common.xcontent.json.JsonXContent;
import org.elasticsearch.common.xcontent.smile.SmileXContent;
import org.elasticsearch.common.xcontent.yaml.YamlXContent;
import org.elasticsearch.http.netty.NettyHttpRequest;
import org.elasticsearch.index.query.AbstractQueryBuilder;
import org.elasticsearch.index.query.MatchQueryBuilder;
import org.elasticsearch.index.query.MissingQueryBuilder;
import org.elasticsearch.index.query.MultiMatchQueryBuilder;
import org.elasticsearch.index.query.Operator;
import org.elasticsearch.index.query.QueryShardContext;
import org.elasticsearch.index.query.QueryValidationException;
import org.elasticsearch.index.search.MatchQuery;
import org.elasticsearch.indices.breaker.CircuitBreakerService;
import org.elasticsearch.search.aggregations.InternalAggregations;
import org.elasticsearch.search.suggest.phrase.PhraseSuggestionBuilder;
import org.elasticsearch.threadpool.ThreadPool;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.jboss.netty.channel.Channel;
import org.jboss.netty.handler.codec.http.HttpRequest;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MultiMatchQueryBuilder_ESTest extends MultiMatchQueryBuilder_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test00()  throws Throwable  {
      Object object0 = null;
      String[] stringArray0 = new String[7];
      MultiMatchQueryBuilder multiMatchQueryBuilder0 = new MultiMatchQueryBuilder(object0, stringArray0);
      assertEquals(7, stringArray0.length);
      assertNotNull(multiMatchQueryBuilder0);
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertEquals(1.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      XContentBuilder xContentBuilder0 = JsonXContent.contentBuilder();
      assertNotNull(xContentBuilder0);
      assertFalse(xContentBuilder0.humanReadable());
      assertEquals(XContentType.JSON, xContentBuilder0.contentType());
      
      ToXContent.Params toXContent_Params0 = ToXContent.EMPTY_PARAMS;
      assertNotNull(toXContent_Params0);
      
      multiMatchQueryBuilder0.doXContent(xContentBuilder0, toXContent_Params0);
      assertEquals(7, stringArray0.length);
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertEquals(1.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder0.queryName());
      assertFalse(xContentBuilder0.humanReadable());
      assertEquals(XContentType.JSON, xContentBuilder0.contentType());
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
  }

  @Test(timeout = 11000)
  public void test01()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      String[] stringArray0 = new String[1];
      String string0 = "";
      stringArray0[0] = string0;
      MultiMatchQueryBuilder multiMatchQueryBuilder0 = new MultiMatchQueryBuilder(object0, stringArray0);
      assertEquals(1, stringArray0.length);
      assertNotNull(multiMatchQueryBuilder0);
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      MultiMatchQueryBuilder multiMatchQueryBuilder1 = multiMatchQueryBuilder0.analyzer(stringArray0[0]);
      assertEquals(1, stringArray0.length);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder0);
      assertNotNull(multiMatchQueryBuilder1);
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder1.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder1.getWriteableName());
      assertEquals(1.0F, multiMatchQueryBuilder1.boost(), 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      MultiMatchQueryBuilder multiMatchQueryBuilder2 = multiMatchQueryBuilder1.fuzziness(multiMatchQueryBuilder0);
      assertEquals(1, stringArray0.length);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder1);
      assertNotNull(multiMatchQueryBuilder2);
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder1.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder1.getWriteableName());
      assertEquals(1.0F, multiMatchQueryBuilder1.boost(), 0.01F);
      assertEquals(1.0F, multiMatchQueryBuilder2.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder2.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder2.getWriteableName());
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      XContentType xContentType0 = XContentType.SMILE;
      BytesReference bytesReference0 = multiMatchQueryBuilder2.buildAsBytes(xContentType0);
      assertEquals(1, stringArray0.length);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder1);
      assertNotNull(bytesReference0);
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder1.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder1.getWriteableName());
      assertEquals(1.0F, multiMatchQueryBuilder1.boost(), 0.01F);
      assertEquals(1.0F, multiMatchQueryBuilder2.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder2.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder2.getWriteableName());
      assertEquals(160, bytesReference0.length());
      assertTrue(bytesReference0.hasArray());
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
  }

  @Test(timeout = 11000)
  public void test02()  throws Throwable  {
      MultiMatchQueryBuilder multiMatchQueryBuilder0 = MultiMatchQueryBuilder.PROTOTYPE;
      assertNotNull(multiMatchQueryBuilder0);
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      int int0 = 4;
      MultiMatchQueryBuilder multiMatchQueryBuilder1 = multiMatchQueryBuilder0.prefixLength(int0);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder0);
      assertNotNull(multiMatchQueryBuilder1);
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertEquals(1.0F, multiMatchQueryBuilder1.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder1.getWriteableName());
      assertNull(multiMatchQueryBuilder1.queryName());
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      boolean boolean0 = false;
      MultiMatchQueryBuilder multiMatchQueryBuilder2 = multiMatchQueryBuilder1.lenient(boolean0);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder0);
      assertNotNull(multiMatchQueryBuilder2);
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertEquals(1.0F, multiMatchQueryBuilder1.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder1.getWriteableName());
      assertNull(multiMatchQueryBuilder1.queryName());
      assertNull(multiMatchQueryBuilder2.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder2.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder2.getWriteableName());
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      MultiMatchQueryBuilder multiMatchQueryBuilder3 = multiMatchQueryBuilder2.slop(int0);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder2);
      assertNotNull(multiMatchQueryBuilder3);
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertEquals(1.0F, multiMatchQueryBuilder1.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder1.getWriteableName());
      assertNull(multiMatchQueryBuilder1.queryName());
      assertNull(multiMatchQueryBuilder2.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder2.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder2.getWriteableName());
      assertEquals("multi_match", multiMatchQueryBuilder3.getWriteableName());
      assertNull(multiMatchQueryBuilder3.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder3.boost(), 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      XContentType xContentType0 = XContentType.YAML;
      BytesReference bytesReference0 = multiMatchQueryBuilder0.buildAsBytes(xContentType0);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder2);
      assertNotNull(bytesReference0);
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertTrue(bytesReference0.hasArray());
      assertEquals(103, bytesReference0.length());
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      // Undeclared exception!
      try { 
        multiMatchQueryBuilder0.type((Object) xContentType0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // failed to parse [java.lang.String@0000000132] query type [java.lang.String@0000000133]. unknown type.
         //
         verifyException("org.elasticsearch.index.query.MultiMatchQueryBuilder$Type", e);
      }
  }

  @Test(timeout = 11000)
  public void test03()  throws Throwable  {
      MultiMatchQueryBuilder multiMatchQueryBuilder0 = MultiMatchQueryBuilder.PROTOTYPE;
      assertNotNull(multiMatchQueryBuilder0);
      assertEquals(1.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      String string0 = "?5";
      MultiMatchQueryBuilder multiMatchQueryBuilder1 = multiMatchQueryBuilder0.rewrite(string0);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder0);
      assertNotNull(multiMatchQueryBuilder1);
      assertEquals(1.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertEquals(1.0F, multiMatchQueryBuilder1.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder1.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder1.getWriteableName());
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      MultiMatchQueryBuilder multiMatchQueryBuilder2 = multiMatchQueryBuilder1.field(string0);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder1);
      assertNotNull(multiMatchQueryBuilder2);
      assertEquals(1.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertEquals(1.0F, multiMatchQueryBuilder1.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder1.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder1.getWriteableName());
      assertEquals(1.0F, multiMatchQueryBuilder2.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder2.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder2.getWriteableName());
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      Operator operator0 = Operator.AND;
      MultiMatchQueryBuilder multiMatchQueryBuilder3 = multiMatchQueryBuilder2.operator(operator0);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder1);
      assertNotNull(multiMatchQueryBuilder3);
      assertEquals(1.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertEquals(1.0F, multiMatchQueryBuilder1.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder1.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder1.getWriteableName());
      assertEquals(1.0F, multiMatchQueryBuilder2.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder2.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder2.getWriteableName());
      assertEquals(1.0F, multiMatchQueryBuilder3.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder3.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder3.getWriteableName());
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      MultiMatchQueryBuilder multiMatchQueryBuilder4 = multiMatchQueryBuilder3.field(multiMatchQueryBuilder0.NAME, multiMatchQueryBuilder1.DEFAULT_BOOST);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder3);
      assertNotNull(multiMatchQueryBuilder4);
      assertEquals(1.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertEquals(1.0F, multiMatchQueryBuilder1.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder1.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder1.getWriteableName());
      assertEquals(1.0F, multiMatchQueryBuilder2.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder2.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder2.getWriteableName());
      assertEquals(1.0F, multiMatchQueryBuilder3.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder3.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder3.getWriteableName());
      assertNull(multiMatchQueryBuilder4.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder4.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder4.getWriteableName());
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      XContentType xContentType0 = XContentType.CBOR;
      BytesReference bytesReference0 = multiMatchQueryBuilder4.buildAsBytes(xContentType0);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder3);
      assertNotNull(bytesReference0);
      assertEquals(1.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertEquals(1.0F, multiMatchQueryBuilder1.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder1.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder1.getWriteableName());
      assertEquals(1.0F, multiMatchQueryBuilder2.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder2.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder2.getWriteableName());
      assertEquals(1.0F, multiMatchQueryBuilder3.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder3.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder3.getWriteableName());
      assertNull(multiMatchQueryBuilder4.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder4.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder4.getWriteableName());
      assertEquals(86, bytesReference0.length());
      assertTrue(bytesReference0.hasArray());
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
  }

  @Test(timeout = 11000)
  public void test04()  throws Throwable  {
      MultiMatchQueryBuilder multiMatchQueryBuilder0 = MultiMatchQueryBuilder.PROTOTYPE;
      assertNotNull(multiMatchQueryBuilder0);
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      MultiMatchQueryBuilder multiMatchQueryBuilder1 = multiMatchQueryBuilder0.cutoffFrequency(multiMatchQueryBuilder0.DEFAULT_BOOST);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder0);
      assertNotNull(multiMatchQueryBuilder1);
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertEquals(1.0F, multiMatchQueryBuilder1.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder1.getWriteableName());
      assertNull(multiMatchQueryBuilder1.queryName());
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      MultiMatchQueryBuilder multiMatchQueryBuilder2 = multiMatchQueryBuilder0.fuzzyRewrite(multiMatchQueryBuilder1.NAME);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder0);
      assertNotNull(multiMatchQueryBuilder2);
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertEquals(1.0F, multiMatchQueryBuilder1.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder1.getWriteableName());
      assertNull(multiMatchQueryBuilder1.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder2.getWriteableName());
      assertNull(multiMatchQueryBuilder2.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder2.boost(), 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      boolean boolean0 = true;
      MultiMatchQueryBuilder multiMatchQueryBuilder3 = multiMatchQueryBuilder1.useDisMax(boolean0);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder0);
      assertNotNull(multiMatchQueryBuilder3);
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertEquals(1.0F, multiMatchQueryBuilder1.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder1.getWriteableName());
      assertNull(multiMatchQueryBuilder1.queryName());
      assertNull(multiMatchQueryBuilder3.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder3.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder3.getWriteableName());
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      String string0 = multiMatchQueryBuilder3.toString();
      assertEquals("{\n  \"multi_match\" : {\n    \"query\" : null,\n    \"fields\" : [ ],\n    \"fuzzy_rewrite\" : \"multi_match\",\n    \"use_dis_max\" : true,\n    \"cutoff_frequency\" : 1.0,\n    \"boost\" : 1.0\n  }\n}", string0);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder0);
      assertNotNull(string0);
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertEquals(1.0F, multiMatchQueryBuilder1.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder1.getWriteableName());
      assertNull(multiMatchQueryBuilder1.queryName());
      assertNull(multiMatchQueryBuilder3.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder3.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder3.getWriteableName());
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      String string1 = multiMatchQueryBuilder3.getWriteableName();
      assertEquals("multi_match", string1);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder0);
      assertNotSame(string1, string0);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertEquals(1.0F, multiMatchQueryBuilder1.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder1.getWriteableName());
      assertNull(multiMatchQueryBuilder1.queryName());
      assertNull(multiMatchQueryBuilder3.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder3.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder3.getWriteableName());
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
  }

  @Test(timeout = 11000)
  public void test05()  throws Throwable  {
      MultiMatchQueryBuilder.Type multiMatchQueryBuilder_Type0 = MultiMatchQueryBuilder.Type.CROSS_FIELDS;
      assertEquals(MultiMatchQueryBuilder.Type.CROSS_FIELDS, multiMatchQueryBuilder_Type0);
      assertEquals(MatchQuery.Type.BOOLEAN, multiMatchQueryBuilder_Type0.matchQueryType());
      assertEquals(0.0F, multiMatchQueryBuilder_Type0.tieBreaker(), 0.01F);
      
      float float0 = multiMatchQueryBuilder_Type0.tieBreaker();
      assertEquals(0.0F, float0, 0.01F);
      assertEquals(MatchQuery.Type.BOOLEAN, multiMatchQueryBuilder_Type0.matchQueryType());
      assertEquals(0.0F, multiMatchQueryBuilder_Type0.tieBreaker(), 0.01F);
      
      MultiMatchQueryBuilder multiMatchQueryBuilder0 = MultiMatchQueryBuilder.PROTOTYPE;
      assertNotNull(multiMatchQueryBuilder0);
      assertEquals(1.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      MultiMatchQueryBuilder.Type multiMatchQueryBuilder_Type1 = MultiMatchQueryBuilder.Type.PHRASE;
      MultiMatchQueryBuilder multiMatchQueryBuilder1 = multiMatchQueryBuilder0.type(multiMatchQueryBuilder_Type1);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder1);
      assertNotSame(multiMatchQueryBuilder_Type1, multiMatchQueryBuilder_Type0);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder0);
      assertNotNull(multiMatchQueryBuilder1);
      assertFalse(multiMatchQueryBuilder_Type1.equals((Object)multiMatchQueryBuilder_Type0));
      assertEquals(1.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertNull(multiMatchQueryBuilder1.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder1.getWriteableName());
      assertEquals(1.0F, multiMatchQueryBuilder1.boost(), 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      int int0 = 3221;
      MultiMatchQueryBuilder multiMatchQueryBuilder2 = multiMatchQueryBuilder1.maxExpansions(int0);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder2);
      assertNotSame(multiMatchQueryBuilder_Type1, multiMatchQueryBuilder_Type0);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder0);
      assertNotNull(multiMatchQueryBuilder2);
      assertFalse(multiMatchQueryBuilder_Type1.equals((Object)multiMatchQueryBuilder_Type0));
      assertEquals(1.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertNull(multiMatchQueryBuilder1.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder1.getWriteableName());
      assertEquals(1.0F, multiMatchQueryBuilder1.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder2.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder2.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder2.getWriteableName());
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      MultiMatchQueryBuilder multiMatchQueryBuilder3 = multiMatchQueryBuilder2.tieBreaker(int0);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder2);
      assertNotSame(multiMatchQueryBuilder_Type1, multiMatchQueryBuilder_Type0);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder2);
      assertNotNull(multiMatchQueryBuilder3);
      assertFalse(multiMatchQueryBuilder_Type1.equals((Object)multiMatchQueryBuilder_Type0));
      assertEquals(1.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertNull(multiMatchQueryBuilder1.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder1.getWriteableName());
      assertEquals(1.0F, multiMatchQueryBuilder1.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder2.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder2.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder2.getWriteableName());
      assertNull(multiMatchQueryBuilder3.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder3.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder3.getWriteableName());
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      MultiMatchQueryBuilder multiMatchQueryBuilder4 = multiMatchQueryBuilder2.minimumShouldMatch(multiMatchQueryBuilder0.NAME);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder2);
      assertNotSame(multiMatchQueryBuilder_Type1, multiMatchQueryBuilder_Type0);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder0);
      assertNotNull(multiMatchQueryBuilder4);
      assertFalse(multiMatchQueryBuilder_Type1.equals((Object)multiMatchQueryBuilder_Type0));
      assertEquals(1.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertNull(multiMatchQueryBuilder1.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder1.getWriteableName());
      assertEquals(1.0F, multiMatchQueryBuilder1.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder2.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder2.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder2.getWriteableName());
      assertEquals("multi_match", multiMatchQueryBuilder4.getWriteableName());
      assertNull(multiMatchQueryBuilder4.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder4.boost(), 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      MatchQueryBuilder.ZeroTermsQuery matchQueryBuilder_ZeroTermsQuery0 = MatchQueryBuilder.ZeroTermsQuery.ALL;
      MultiMatchQueryBuilder multiMatchQueryBuilder5 = multiMatchQueryBuilder3.zeroTermsQuery(matchQueryBuilder_ZeroTermsQuery0);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder2);
      assertNotSame(multiMatchQueryBuilder_Type1, multiMatchQueryBuilder_Type0);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder5, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder5, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder5, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder5, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder5, multiMatchQueryBuilder3);
      assertNotNull(multiMatchQueryBuilder5);
      assertFalse(multiMatchQueryBuilder_Type1.equals((Object)multiMatchQueryBuilder_Type0));
      assertEquals(1.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertNull(multiMatchQueryBuilder1.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder1.getWriteableName());
      assertEquals(1.0F, multiMatchQueryBuilder1.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder2.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder2.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder2.getWriteableName());
      assertNull(multiMatchQueryBuilder3.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder3.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder3.getWriteableName());
      assertEquals(1.0F, multiMatchQueryBuilder5.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder5.getWriteableName());
      assertNull(multiMatchQueryBuilder5.queryName());
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      String string0 = multiMatchQueryBuilder4.toString();
      assertEquals("{\n  \"multi_match\" : {\n    \"query\" : null,\n    \"fields\" : [ ],\n    \"type\" : \"phrase\",\n    \"max_expansions\" : 3221,\n    \"minimum_should_match\" : \"multi_match\",\n    \"tie_breaker\" : 3221.0,\n    \"zero_terms_query\" : \"ALL\",\n    \"boost\" : 1.0\n  }\n}", string0);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder2);
      assertNotSame(multiMatchQueryBuilder_Type1, multiMatchQueryBuilder_Type0);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder5);
      assertNotNull(string0);
      assertFalse(multiMatchQueryBuilder_Type1.equals((Object)multiMatchQueryBuilder_Type0));
      assertEquals(1.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertNull(multiMatchQueryBuilder1.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder1.getWriteableName());
      assertEquals(1.0F, multiMatchQueryBuilder1.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder2.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder2.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder2.getWriteableName());
      assertEquals("multi_match", multiMatchQueryBuilder4.getWriteableName());
      assertNull(multiMatchQueryBuilder4.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder4.boost(), 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      Object object0 = null;
      MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder1.type(object0);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder6);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder2);
      assertNotSame(multiMatchQueryBuilder_Type1, multiMatchQueryBuilder_Type0);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder6);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder6, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder6, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder6, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder6, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder6, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder6, multiMatchQueryBuilder2);
      assertNotNull(multiMatchQueryBuilder6);
      assertFalse(multiMatchQueryBuilder_Type1.equals((Object)multiMatchQueryBuilder_Type0));
      assertEquals(1.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertNull(multiMatchQueryBuilder1.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder1.getWriteableName());
      assertEquals(1.0F, multiMatchQueryBuilder1.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder6.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder6.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder6.getWriteableName());
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      MultiMatchQueryBuilder multiMatchQueryBuilder7 = multiMatchQueryBuilder6.slop(int0);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder7);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder6);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder2);
      assertNotSame(multiMatchQueryBuilder_Type1, multiMatchQueryBuilder_Type0);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder6);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder7);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder6, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder6, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder6, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder6, multiMatchQueryBuilder7);
      assertSame(multiMatchQueryBuilder6, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder6, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder6, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder7, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder7, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder7, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder7, multiMatchQueryBuilder6);
      assertSame(multiMatchQueryBuilder7, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder7, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder7, multiMatchQueryBuilder3);
      assertNotNull(multiMatchQueryBuilder7);
      assertFalse(multiMatchQueryBuilder_Type1.equals((Object)multiMatchQueryBuilder_Type0));
      assertEquals(1.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertNull(multiMatchQueryBuilder1.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder1.getWriteableName());
      assertEquals(1.0F, multiMatchQueryBuilder1.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder6.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder6.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder6.getWriteableName());
      assertEquals("multi_match", multiMatchQueryBuilder7.getWriteableName());
      assertEquals(1.0F, multiMatchQueryBuilder7.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder7.queryName());
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
  }

  @Test(timeout = 11000)
  public void test06()  throws Throwable  {
      ParseFieldMatcher parseFieldMatcher0 = ParseFieldMatcher.EMPTY;
      assertNotNull(parseFieldMatcher0);
      
      String string0 = "cross_fields";
      MultiMatchQueryBuilder.Type multiMatchQueryBuilder_Type0 = MultiMatchQueryBuilder.Type.parse(string0, parseFieldMatcher0);
      assertEquals(MultiMatchQueryBuilder.Type.CROSS_FIELDS, multiMatchQueryBuilder_Type0);
      assertEquals(MatchQuery.Type.BOOLEAN, multiMatchQueryBuilder_Type0.matchQueryType());
      assertEquals(0.0F, multiMatchQueryBuilder_Type0.tieBreaker(), 0.01F);
      
      byte byte0 = (byte)1;
  }

  @Test(timeout = 11000)
  public void test07()  throws Throwable  {
      MultiMatchQueryBuilder multiMatchQueryBuilder0 = MultiMatchQueryBuilder.PROTOTYPE;
      assertNotNull(multiMatchQueryBuilder0);
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      MultiMatchQueryBuilder multiMatchQueryBuilder1 = multiMatchQueryBuilder0.field(multiMatchQueryBuilder0.NAME, multiMatchQueryBuilder0.DEFAULT_BOOST);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder0);
      assertNotNull(multiMatchQueryBuilder1);
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertEquals(1.0F, multiMatchQueryBuilder1.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder1.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder1.getWriteableName());
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      MultiMatchQueryBuilder multiMatchQueryBuilder2 = multiMatchQueryBuilder1.field(multiMatchQueryBuilder0.NAME, multiMatchQueryBuilder0.DEFAULT_BOOST);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder1);
      assertNotNull(multiMatchQueryBuilder2);
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertEquals(1.0F, multiMatchQueryBuilder1.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder1.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder1.getWriteableName());
      assertEquals(1.0F, multiMatchQueryBuilder2.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder2.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder2.getWriteableName());
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
  }

  @Test(timeout = 11000)
  public void test08()  throws Throwable  {
      MultiMatchQueryBuilder.Type multiMatchQueryBuilder_Type0 = MultiMatchQueryBuilder.Type.MOST_FIELDS;
      assertEquals(MultiMatchQueryBuilder.Type.MOST_FIELDS, multiMatchQueryBuilder_Type0);
      assertEquals(MatchQuery.Type.BOOLEAN, multiMatchQueryBuilder_Type0.matchQueryType());
      assertEquals(1.0F, multiMatchQueryBuilder_Type0.tieBreaker(), 0.01F);
      
      MatchQuery.Type matchQuery_Type0 = multiMatchQueryBuilder_Type0.matchQueryType();
      assertEquals(MatchQuery.Type.BOOLEAN, matchQuery_Type0);
      assertEquals(MatchQuery.Type.BOOLEAN, multiMatchQueryBuilder_Type0.matchQueryType());
      assertEquals(1.0F, multiMatchQueryBuilder_Type0.tieBreaker(), 0.01F);
  }

  @Test(timeout = 11000)
  public void test09()  throws Throwable  {
      MultiMatchQueryBuilder multiMatchQueryBuilder0 = MultiMatchQueryBuilder.PROTOTYPE;
      assertNotNull(multiMatchQueryBuilder0);
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      String string0 = "";
      MultiMatchQueryBuilder multiMatchQueryBuilder1 = multiMatchQueryBuilder0.rewrite(string0);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder0);
      assertNotNull(multiMatchQueryBuilder1);
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertEquals("multi_match", multiMatchQueryBuilder1.getWriteableName());
      assertNull(multiMatchQueryBuilder1.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder1.boost(), 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      MultiMatchQueryBuilder multiMatchQueryBuilder2 = multiMatchQueryBuilder1.fuzziness(multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder1);
      assertNotNull(multiMatchQueryBuilder2);
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertEquals("multi_match", multiMatchQueryBuilder1.getWriteableName());
      assertNull(multiMatchQueryBuilder1.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder1.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder2.getWriteableName());
      assertNull(multiMatchQueryBuilder2.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder2.boost(), 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      MultiMatchQueryBuilder.Type multiMatchQueryBuilder_Type0 = MultiMatchQueryBuilder.Type.PHRASE;
      MultiMatchQueryBuilder multiMatchQueryBuilder3 = multiMatchQueryBuilder2.type(multiMatchQueryBuilder_Type0);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder2);
      assertNotNull(multiMatchQueryBuilder3);
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertEquals("multi_match", multiMatchQueryBuilder1.getWriteableName());
      assertNull(multiMatchQueryBuilder1.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder1.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder2.getWriteableName());
      assertNull(multiMatchQueryBuilder2.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder2.boost(), 0.01F);
      assertEquals(1.0F, multiMatchQueryBuilder3.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder3.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder3.getWriteableName());
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      boolean boolean0 = true;
      MultiMatchQueryBuilder multiMatchQueryBuilder4 = multiMatchQueryBuilder3.useDisMax(boolean0);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder2);
      assertNotNull(multiMatchQueryBuilder4);
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertEquals("multi_match", multiMatchQueryBuilder1.getWriteableName());
      assertNull(multiMatchQueryBuilder1.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder1.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder2.getWriteableName());
      assertNull(multiMatchQueryBuilder2.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder2.boost(), 0.01F);
      assertEquals(1.0F, multiMatchQueryBuilder3.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder3.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder3.getWriteableName());
      assertNull(multiMatchQueryBuilder4.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder4.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder4.getWriteableName());
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      Operator operator0 = Operator.OR;
      MultiMatchQueryBuilder multiMatchQueryBuilder5 = multiMatchQueryBuilder4.operator(operator0);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder5, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder5, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder5, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder5, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder5, multiMatchQueryBuilder4);
      assertNotNull(multiMatchQueryBuilder5);
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertEquals("multi_match", multiMatchQueryBuilder1.getWriteableName());
      assertNull(multiMatchQueryBuilder1.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder1.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder2.getWriteableName());
      assertNull(multiMatchQueryBuilder2.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder2.boost(), 0.01F);
      assertEquals(1.0F, multiMatchQueryBuilder3.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder3.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder3.getWriteableName());
      assertNull(multiMatchQueryBuilder4.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder4.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder4.getWriteableName());
      assertNull(multiMatchQueryBuilder5.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder5.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder5.getWriteableName());
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder5.useDisMax(boolean0);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder6);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder6);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder6);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder6);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder6);
      assertSame(multiMatchQueryBuilder5, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder5, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder5, multiMatchQueryBuilder6);
      assertSame(multiMatchQueryBuilder5, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder5, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder5, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder6, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder6, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder6, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder6, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder6, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder6, multiMatchQueryBuilder3);
      assertNotNull(multiMatchQueryBuilder6);
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertEquals("multi_match", multiMatchQueryBuilder1.getWriteableName());
      assertNull(multiMatchQueryBuilder1.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder1.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder2.getWriteableName());
      assertNull(multiMatchQueryBuilder2.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder2.boost(), 0.01F);
      assertEquals(1.0F, multiMatchQueryBuilder3.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder3.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder3.getWriteableName());
      assertNull(multiMatchQueryBuilder4.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder4.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder4.getWriteableName());
      assertNull(multiMatchQueryBuilder5.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder5.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder5.getWriteableName());
      assertEquals(1.0F, multiMatchQueryBuilder6.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder6.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder6.getWriteableName());
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
  }

  @Test(timeout = 11000)
  public void test10()  throws Throwable  {
      MultiMatchQueryBuilder multiMatchQueryBuilder0 = MultiMatchQueryBuilder.PROTOTYPE;
      assertNotNull(multiMatchQueryBuilder0);
      assertEquals(1.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      String string0 = "A";
      MultiMatchQueryBuilder multiMatchQueryBuilder1 = multiMatchQueryBuilder0.analyzer(string0);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder0);
      assertNotNull(multiMatchQueryBuilder1);
      assertEquals(1.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertNull(multiMatchQueryBuilder1.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder1.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder1.getWriteableName());
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
  }

  @Test(timeout = 11000)
  public void test11()  throws Throwable  {
      MultiMatchQueryBuilder multiMatchQueryBuilder0 = MultiMatchQueryBuilder.PROTOTYPE;
      assertNotNull(multiMatchQueryBuilder0);
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertEquals(1.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      Operator operator0 = Operator.AND;
      MultiMatchQueryBuilder multiMatchQueryBuilder1 = multiMatchQueryBuilder0.operator(operator0);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder0);
      assertNotNull(multiMatchQueryBuilder1);
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertEquals(1.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder1.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder1.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder1.getWriteableName());
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      int int0 = 1;
      MultiMatchQueryBuilder multiMatchQueryBuilder2 = multiMatchQueryBuilder1.slop(int0);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder1);
      assertNotNull(multiMatchQueryBuilder2);
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertEquals(1.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder1.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder1.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder1.getWriteableName());
      assertEquals(1.0F, multiMatchQueryBuilder2.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder2.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder2.getWriteableName());
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
  }

  @Test(timeout = 11000)
  public void test12()  throws Throwable  {
      MultiMatchQueryBuilder multiMatchQueryBuilder0 = MultiMatchQueryBuilder.PROTOTYPE;
      assertNotNull(multiMatchQueryBuilder0);
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      int int0 = 0;
      MultiMatchQueryBuilder multiMatchQueryBuilder1 = multiMatchQueryBuilder0.prefixLength(int0);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder0);
      assertNotNull(multiMatchQueryBuilder1);
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertEquals(1.0F, multiMatchQueryBuilder1.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder1.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder1.getWriteableName());
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      boolean boolean0 = true;
      MultiMatchQueryBuilder multiMatchQueryBuilder2 = multiMatchQueryBuilder1.useDisMax(boolean0);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder1);
      assertNotNull(multiMatchQueryBuilder2);
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertEquals(1.0F, multiMatchQueryBuilder1.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder1.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder1.getWriteableName());
      assertEquals(1.0F, multiMatchQueryBuilder2.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder2.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder2.getWriteableName());
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      int int1 = 0;
      MultiMatchQueryBuilder multiMatchQueryBuilder3 = multiMatchQueryBuilder2.slop(int1);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder0);
      assertNotNull(multiMatchQueryBuilder3);
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertEquals(1.0F, multiMatchQueryBuilder1.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder1.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder1.getWriteableName());
      assertEquals(1.0F, multiMatchQueryBuilder2.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder2.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder2.getWriteableName());
      assertEquals(1.0F, multiMatchQueryBuilder3.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder3.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder3.getWriteableName());
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      String string0 = ";2Sw=.P";
      MultiMatchQueryBuilder multiMatchQueryBuilder4 = multiMatchQueryBuilder3.fuzzyRewrite(string0);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder0);
      assertNotNull(multiMatchQueryBuilder4);
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertEquals(1.0F, multiMatchQueryBuilder1.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder1.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder1.getWriteableName());
      assertEquals(1.0F, multiMatchQueryBuilder2.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder2.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder2.getWriteableName());
      assertEquals(1.0F, multiMatchQueryBuilder3.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder3.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder3.getWriteableName());
      assertNull(multiMatchQueryBuilder4.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder4.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder4.getWriteableName());
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
  }

  @Test(timeout = 11000)
  public void test13()  throws Throwable  {
      MultiMatchQueryBuilder multiMatchQueryBuilder0 = MultiMatchQueryBuilder.PROTOTYPE;
      assertNotNull(multiMatchQueryBuilder0);
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      String string0 = "";
      MultiMatchQueryBuilder multiMatchQueryBuilder1 = multiMatchQueryBuilder0.analyzer(string0);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder0);
      assertNotNull(multiMatchQueryBuilder1);
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertNull(multiMatchQueryBuilder1.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder1.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder1.getWriteableName());
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      boolean boolean0 = true;
      MultiMatchQueryBuilder multiMatchQueryBuilder2 = multiMatchQueryBuilder1.lenient(boolean0);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder0);
      assertNotNull(multiMatchQueryBuilder2);
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertNull(multiMatchQueryBuilder1.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder1.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder1.getWriteableName());
      assertEquals(1.0F, multiMatchQueryBuilder2.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder2.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder2.getWriteableName());
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      int int0 = 1211;
      MultiMatchQueryBuilder multiMatchQueryBuilder3 = multiMatchQueryBuilder2.slop(int0);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder0);
      assertNotNull(multiMatchQueryBuilder3);
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertNull(multiMatchQueryBuilder1.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder1.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder1.getWriteableName());
      assertEquals(1.0F, multiMatchQueryBuilder2.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder2.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder2.getWriteableName());
      assertEquals(1.0F, multiMatchQueryBuilder3.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder3.getWriteableName());
      assertNull(multiMatchQueryBuilder3.queryName());
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      MultiMatchQueryBuilder multiMatchQueryBuilder4 = multiMatchQueryBuilder3.rewrite(string0);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder2);
      assertNotNull(multiMatchQueryBuilder4);
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertNull(multiMatchQueryBuilder1.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder1.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder1.getWriteableName());
      assertEquals(1.0F, multiMatchQueryBuilder2.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder2.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder2.getWriteableName());
      assertEquals(1.0F, multiMatchQueryBuilder3.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder3.getWriteableName());
      assertNull(multiMatchQueryBuilder3.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder4.getWriteableName());
      assertEquals(1.0F, multiMatchQueryBuilder4.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder4.queryName());
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      MultiMatchQueryBuilder multiMatchQueryBuilder5 = multiMatchQueryBuilder4.useDisMax(boolean0);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder5, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder5, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder5, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder5, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder5, multiMatchQueryBuilder1);
      assertNotNull(multiMatchQueryBuilder5);
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertNull(multiMatchQueryBuilder1.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder1.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder1.getWriteableName());
      assertEquals(1.0F, multiMatchQueryBuilder2.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder2.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder2.getWriteableName());
      assertEquals(1.0F, multiMatchQueryBuilder3.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder3.getWriteableName());
      assertNull(multiMatchQueryBuilder3.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder4.getWriteableName());
      assertEquals(1.0F, multiMatchQueryBuilder4.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder4.queryName());
      assertNull(multiMatchQueryBuilder5.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder5.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder5.getWriteableName());
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
  }

  @Test(timeout = 11000)
  public void test14()  throws Throwable  {
      MultiMatchQueryBuilder multiMatchQueryBuilder0 = MultiMatchQueryBuilder.PROTOTYPE;
      assertNotNull(multiMatchQueryBuilder0);
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      QueryValidationException queryValidationException0 = multiMatchQueryBuilder0.validate();
      assertNull(queryValidationException0);
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      MultiMatchQueryBuilder.Type multiMatchQueryBuilder_Type0 = MultiMatchQueryBuilder.Type.PHRASE_PREFIX;
      MultiMatchQueryBuilder multiMatchQueryBuilder1 = multiMatchQueryBuilder0.type(multiMatchQueryBuilder_Type0);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder0);
      assertNotNull(multiMatchQueryBuilder1);
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder1.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder1.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder1.getWriteableName());
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      int int0 = multiMatchQueryBuilder0.doHashCode();
      assertEquals(18, int0);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder1);
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      boolean boolean0 = multiMatchQueryBuilder1.equals(multiMatchQueryBuilder0);
      assertTrue(boolean0);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder0);
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder1.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder1.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder1.getWriteableName());
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      MultiMatchQueryBuilder multiMatchQueryBuilder2 = multiMatchQueryBuilder1.queryName(multiMatchQueryBuilder0.NAME);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder1);
      assertNotNull(multiMatchQueryBuilder2);
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertEquals("multi_match", multiMatchQueryBuilder0.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder1.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder1.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder1.getWriteableName());
      assertEquals("multi_match", multiMatchQueryBuilder2.getWriteableName());
      assertEquals(1.0F, multiMatchQueryBuilder2.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder2.queryName());
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      MultiMatchQueryBuilder multiMatchQueryBuilder3 = multiMatchQueryBuilder1.cutoffFrequency(multiMatchQueryBuilder0.DEFAULT_BOOST);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder2);
      assertNotNull(multiMatchQueryBuilder3);
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertEquals("multi_match", multiMatchQueryBuilder0.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder1.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder1.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder1.getWriteableName());
      assertEquals("multi_match", multiMatchQueryBuilder3.getWriteableName());
      assertEquals("multi_match", multiMatchQueryBuilder3.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder3.boost(), 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      int int1 = 2966;
      MultiMatchQueryBuilder multiMatchQueryBuilder4 = multiMatchQueryBuilder0.prefixLength(int1);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder2);
      assertNotNull(multiMatchQueryBuilder4);
      assertFalse(int1 == int0);
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertEquals("multi_match", multiMatchQueryBuilder0.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertEquals(1.0F, multiMatchQueryBuilder4.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder4.getWriteableName());
      assertEquals("multi_match", multiMatchQueryBuilder4.queryName());
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
  }

  @Test(timeout = 11000)
  public void test15()  throws Throwable  {
      ShapeBuilder.Orientation shapeBuilder_Orientation0 = ShapeBuilder.Orientation.RIGHT;
      PolygonBuilder polygonBuilder0 = new PolygonBuilder(shapeBuilder_Orientation0);
      assertNotNull(polygonBuilder0);
      assertEquals(ShapeBuilder.GeoShapeType.POLYGON, polygonBuilder0.type());
      assertEquals(180.0, ShapeBuilder.DATELINE, 0.01);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = polygonBuilder0.FIELD_COORDINATES;
      stringArray0[1] = polygonBuilder0.FIELD_ORIENTATION;
      stringArray0[2] = polygonBuilder0.FIELD_ORIENTATION;
      stringArray0[3] = polygonBuilder0.FIELD_ORIENTATION;
      MultiMatchQueryBuilder multiMatchQueryBuilder0 = new MultiMatchQueryBuilder(polygonBuilder0, stringArray0);
      assertEquals(4, stringArray0.length);
      assertNotNull(multiMatchQueryBuilder0);
      assertEquals(ShapeBuilder.GeoShapeType.POLYGON, polygonBuilder0.type());
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertEquals(180.0, ShapeBuilder.DATELINE, 0.01);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      MultiMatchQueryBuilder multiMatchQueryBuilder1 = multiMatchQueryBuilder0.rewrite(stringArray0[1]);
      assertEquals(4, stringArray0.length);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder0);
      assertNotNull(multiMatchQueryBuilder1);
      assertEquals(ShapeBuilder.GeoShapeType.POLYGON, polygonBuilder0.type());
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder1.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder1.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder1.getWriteableName());
      assertEquals(180.0, ShapeBuilder.DATELINE, 0.01);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
  }

  @Test(timeout = 11000)
  public void test16()  throws Throwable  {
      MultiMatchQueryBuilder multiMatchQueryBuilder0 = MultiMatchQueryBuilder.PROTOTYPE;
      assertNotNull(multiMatchQueryBuilder0);
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      String string0 = "";
      MultiMatchQueryBuilder multiMatchQueryBuilder1 = multiMatchQueryBuilder0.field(string0);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder0);
      assertNotNull(multiMatchQueryBuilder1);
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertEquals("multi_match", multiMatchQueryBuilder1.getWriteableName());
      assertEquals(1.0F, multiMatchQueryBuilder1.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder1.queryName());
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      float float0 = 2698.7405F;
      MultiMatchQueryBuilder multiMatchQueryBuilder2 = multiMatchQueryBuilder1.tieBreaker(float0);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder0);
      assertNotNull(multiMatchQueryBuilder2);
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertEquals("multi_match", multiMatchQueryBuilder1.getWriteableName());
      assertEquals(1.0F, multiMatchQueryBuilder1.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder1.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder2.getWriteableName());
      assertEquals(1.0F, multiMatchQueryBuilder2.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder2.queryName());
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      MultiMatchQueryBuilder multiMatchQueryBuilder3 = multiMatchQueryBuilder2.fuzzyRewrite(multiMatchQueryBuilder0.NAME);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder0);
      assertNotNull(multiMatchQueryBuilder3);
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertEquals("multi_match", multiMatchQueryBuilder1.getWriteableName());
      assertEquals(1.0F, multiMatchQueryBuilder1.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder1.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder2.getWriteableName());
      assertEquals(1.0F, multiMatchQueryBuilder2.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder2.queryName());
      assertNull(multiMatchQueryBuilder3.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder3.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder3.getWriteableName());
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      MultiMatchQueryBuilder.Type multiMatchQueryBuilder_Type0 = MultiMatchQueryBuilder.Type.BEST_FIELDS;
      MultiMatchQueryBuilder multiMatchQueryBuilder4 = multiMatchQueryBuilder3.type(multiMatchQueryBuilder_Type0);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder0);
      assertNotNull(multiMatchQueryBuilder4);
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertEquals("multi_match", multiMatchQueryBuilder1.getWriteableName());
      assertEquals(1.0F, multiMatchQueryBuilder1.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder1.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder2.getWriteableName());
      assertEquals(1.0F, multiMatchQueryBuilder2.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder2.queryName());
      assertNull(multiMatchQueryBuilder3.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder3.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder3.getWriteableName());
      assertNull(multiMatchQueryBuilder4.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder4.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder4.getWriteableName());
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      // Undeclared exception!
      try { 
        multiMatchQueryBuilder4.type((Object) multiMatchQueryBuilder1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // failed to parse [java.lang.String@0000000070] query type [java.lang.String@0000000071]. unknown type.
         //
         verifyException("org.elasticsearch.index.query.MultiMatchQueryBuilder$Type", e);
      }
  }

  @Test(timeout = 11000)
  public void test17()  throws Throwable  {
      MultiMatchQueryBuilder.Type[] multiMatchQueryBuilder_TypeArray0 = MultiMatchQueryBuilder.Type.values();
      assertEquals(5, multiMatchQueryBuilder_TypeArray0.length);
      assertNotNull(multiMatchQueryBuilder_TypeArray0);
      
      MultiMatchQueryBuilder multiMatchQueryBuilder0 = MultiMatchQueryBuilder.PROTOTYPE;
      assertNotNull(multiMatchQueryBuilder0);
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertEquals(1.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      MatchQueryBuilder.ZeroTermsQuery matchQueryBuilder_ZeroTermsQuery0 = MatchQueryBuilder.ZeroTermsQuery.ALL;
      MultiMatchQueryBuilder multiMatchQueryBuilder1 = multiMatchQueryBuilder0.zeroTermsQuery(matchQueryBuilder_ZeroTermsQuery0);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder0);
      assertNotNull(multiMatchQueryBuilder1);
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertEquals(1.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder1.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder1.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder1.getWriteableName());
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      int int0 = 1020399;
      MultiMatchQueryBuilder multiMatchQueryBuilder2 = multiMatchQueryBuilder1.prefixLength(int0);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder1);
      assertNotNull(multiMatchQueryBuilder2);
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertEquals(1.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder1.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder1.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder1.getWriteableName());
      assertEquals("multi_match", multiMatchQueryBuilder2.getWriteableName());
      assertNull(multiMatchQueryBuilder2.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder2.boost(), 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      boolean boolean0 = true;
      MultiMatchQueryBuilder multiMatchQueryBuilder3 = multiMatchQueryBuilder2.useDisMax(boolean0);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder0);
      assertNotNull(multiMatchQueryBuilder3);
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertEquals(1.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder1.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder1.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder1.getWriteableName());
      assertEquals("multi_match", multiMatchQueryBuilder2.getWriteableName());
      assertNull(multiMatchQueryBuilder2.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder2.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder3.getWriteableName());
      assertNull(multiMatchQueryBuilder3.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder3.boost(), 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      // Undeclared exception!
      try { 
        multiMatchQueryBuilder3.type((Object) matchQueryBuilder_ZeroTermsQuery0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // failed to parse [java.lang.String@0000000053] query type [java.lang.String@0000000054]. unknown type.
         //
         verifyException("org.elasticsearch.index.query.MultiMatchQueryBuilder$Type", e);
      }
  }

  @Test(timeout = 11000)
  public void test18()  throws Throwable  {
      MultiMatchQueryBuilder multiMatchQueryBuilder0 = MultiMatchQueryBuilder.PROTOTYPE;
      assertNotNull(multiMatchQueryBuilder0);
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertEquals(1.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      String string0 = "POST";
      float float0 = (-1252.1F);
      MultiMatchQueryBuilder multiMatchQueryBuilder1 = multiMatchQueryBuilder0.field(string0, float0);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder0);
      assertNotNull(multiMatchQueryBuilder1);
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertEquals(1.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder0.queryName());
      assertNull(multiMatchQueryBuilder1.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder1.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder1.getWriteableName());
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      IndexMetaData indexMetaData0 = IndexMetaData.PROTO;
      assertNotNull(indexMetaData0);
      assertEquals("", indexMetaData0.getIndex());
      assertEquals("", indexMetaData0.index());
      assertFalse(indexMetaData0.getRoutingUseType());
      assertFalse(indexMetaData0.routingUseType());
      assertEquals(IndexMetaData.State.OPEN, indexMetaData0.state());
      assertEquals(1, indexMetaData0.totalNumberOfShards());
      assertEquals(IndexMetaData.State.OPEN, indexMetaData0.getState());
      assertEquals(1, indexMetaData0.getTotalNumberOfShards());
      assertEquals(1L, indexMetaData0.version());
      assertEquals(1L, indexMetaData0.getVersion());
      
      Settings settings0 = indexMetaData0.getSettings();
      assertNotNull(settings0);
      assertEquals("", indexMetaData0.getIndex());
      assertEquals("", indexMetaData0.index());
      assertFalse(indexMetaData0.getRoutingUseType());
      assertFalse(indexMetaData0.routingUseType());
      assertEquals(IndexMetaData.State.OPEN, indexMetaData0.state());
      assertEquals(1, indexMetaData0.totalNumberOfShards());
      assertEquals(IndexMetaData.State.OPEN, indexMetaData0.getState());
      assertEquals(1, indexMetaData0.getTotalNumberOfShards());
      assertEquals(1L, indexMetaData0.version());
      assertEquals(1L, indexMetaData0.getVersion());
      assertTrue(settings0.getSettingsRequireUnits());
      
      ParseFieldMatcher parseFieldMatcher0 = new ParseFieldMatcher(settings0);
      assertNotNull(parseFieldMatcher0);
      assertEquals("", indexMetaData0.getIndex());
      assertEquals("", indexMetaData0.index());
      assertFalse(indexMetaData0.getRoutingUseType());
      assertFalse(indexMetaData0.routingUseType());
      assertEquals(IndexMetaData.State.OPEN, indexMetaData0.state());
      assertEquals(1, indexMetaData0.totalNumberOfShards());
      assertEquals(IndexMetaData.State.OPEN, indexMetaData0.getState());
      assertEquals(1, indexMetaData0.getTotalNumberOfShards());
      assertEquals(1L, indexMetaData0.version());
      assertEquals(1L, indexMetaData0.getVersion());
      assertTrue(settings0.getSettingsRequireUnits());
      
      // Undeclared exception!
      try { 
        MultiMatchQueryBuilder.Type.parse(string0, parseFieldMatcher0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // failed to parse [java.lang.String@0000000022] query type [java.lang.String@0000000003]. unknown type.
         //
         verifyException("org.elasticsearch.index.query.MultiMatchQueryBuilder$Type", e);
      }
  }

  @Test(timeout = 11000)
  public void test19()  throws Throwable  {
      MultiMatchQueryBuilder.Type multiMatchQueryBuilder_Type0 = MultiMatchQueryBuilder.Type.BEST_FIELDS;
      assertEquals(MultiMatchQueryBuilder.Type.BEST_FIELDS, multiMatchQueryBuilder_Type0);
      assertEquals(0.0F, multiMatchQueryBuilder_Type0.tieBreaker(), 0.01F);
      assertEquals(MatchQuery.Type.BOOLEAN, multiMatchQueryBuilder_Type0.matchQueryType());
      
      ParseField parseField0 = multiMatchQueryBuilder_Type0.parseField();
      assertNotNull(parseField0);
      assertEquals(0.0F, multiMatchQueryBuilder_Type0.tieBreaker(), 0.01F);
      assertEquals(MatchQuery.Type.BOOLEAN, multiMatchQueryBuilder_Type0.matchQueryType());
      assertEquals("best_fields", parseField0.getPreferredName());
      assertEquals("best_fields", parseField0.toString());
      
      MultiMatchQueryBuilder multiMatchQueryBuilder0 = MultiMatchQueryBuilder.PROTOTYPE;
      assertNotNull(multiMatchQueryBuilder0);
      assertEquals(1.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      int int0 = 0;
      String string0 = multiMatchQueryBuilder0.toString();
      assertEquals("{\n  \"multi_match\" : {\n    \"query\" : null,\n    \"fields\" : [ ],\n    \"boost\" : 1.0\n  }\n}", string0);
      assertNotNull(string0);
      assertEquals(1.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      MultiMatchQueryBuilder multiMatchQueryBuilder1 = multiMatchQueryBuilder0.slop(int0);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder0);
      assertNotNull(multiMatchQueryBuilder1);
      assertEquals(1.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertNull(multiMatchQueryBuilder1.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder1.getWriteableName());
      assertEquals(1.0F, multiMatchQueryBuilder1.boost(), 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      int int1 = 603;
      MultiMatchQueryBuilder multiMatchQueryBuilder2 = multiMatchQueryBuilder1.maxExpansions(int1);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder1);
      assertNotNull(multiMatchQueryBuilder2);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(1.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertNull(multiMatchQueryBuilder1.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder1.getWriteableName());
      assertEquals(1.0F, multiMatchQueryBuilder1.boost(), 0.01F);
      assertEquals(1.0F, multiMatchQueryBuilder2.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder2.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder2.getWriteableName());
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      MatchQueryBuilder.ZeroTermsQuery matchQueryBuilder_ZeroTermsQuery0 = MatchQueryBuilder.ZeroTermsQuery.NONE;
      MultiMatchQueryBuilder multiMatchQueryBuilder3 = multiMatchQueryBuilder2.zeroTermsQuery(matchQueryBuilder_ZeroTermsQuery0);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder1);
      assertNotNull(multiMatchQueryBuilder3);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(1.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertNull(multiMatchQueryBuilder1.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder1.getWriteableName());
      assertEquals(1.0F, multiMatchQueryBuilder1.boost(), 0.01F);
      assertEquals(1.0F, multiMatchQueryBuilder2.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder2.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder2.getWriteableName());
      assertEquals("multi_match", multiMatchQueryBuilder3.getWriteableName());
      assertNull(multiMatchQueryBuilder3.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder3.boost(), 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      MultiMatchQueryBuilder.Type multiMatchQueryBuilder_Type1 = MultiMatchQueryBuilder.Type.CROSS_FIELDS;
      MultiMatchQueryBuilder multiMatchQueryBuilder4 = multiMatchQueryBuilder3.type(multiMatchQueryBuilder_Type1);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder1);
      assertNotSame(multiMatchQueryBuilder_Type1, multiMatchQueryBuilder_Type0);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder0);
      assertNotNull(multiMatchQueryBuilder4);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(multiMatchQueryBuilder_Type1.equals((Object)multiMatchQueryBuilder_Type0));
      assertEquals(1.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertNull(multiMatchQueryBuilder1.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder1.getWriteableName());
      assertEquals(1.0F, multiMatchQueryBuilder1.boost(), 0.01F);
      assertEquals(1.0F, multiMatchQueryBuilder2.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder2.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder2.getWriteableName());
      assertEquals("multi_match", multiMatchQueryBuilder3.getWriteableName());
      assertNull(multiMatchQueryBuilder3.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder3.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder4.getWriteableName());
      assertEquals(1.0F, multiMatchQueryBuilder4.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder4.queryName());
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
  }

  @Test(timeout = 11000)
  public void test20()  throws Throwable  {
      MultiMatchQueryBuilder multiMatchQueryBuilder0 = MultiMatchQueryBuilder.PROTOTYPE;
      assertNotNull(multiMatchQueryBuilder0);
      assertEquals(1.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      Operator operator0 = Operator.OR;
      MultiMatchQueryBuilder multiMatchQueryBuilder1 = multiMatchQueryBuilder0.operator(operator0);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder0);
      assertNotNull(multiMatchQueryBuilder1);
      assertEquals(1.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder1.getWriteableName());
      assertEquals(1.0F, multiMatchQueryBuilder1.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder1.queryName());
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      String string0 = "";
      multiMatchQueryBuilder1.queryName = string0;
      assertEquals(1.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertEquals("", multiMatchQueryBuilder0.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder1.getWriteableName());
      assertEquals(1.0F, multiMatchQueryBuilder1.boost(), 0.01F);
      assertEquals("", multiMatchQueryBuilder1.queryName());
      
      MatchQueryBuilder.ZeroTermsQuery matchQueryBuilder_ZeroTermsQuery0 = MatchQueryBuilder.ZeroTermsQuery.NONE;
      MultiMatchQueryBuilder multiMatchQueryBuilder2 = multiMatchQueryBuilder1.zeroTermsQuery(matchQueryBuilder_ZeroTermsQuery0);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder0);
      assertNotNull(multiMatchQueryBuilder2);
      assertEquals(1.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertEquals("", multiMatchQueryBuilder0.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder1.getWriteableName());
      assertEquals(1.0F, multiMatchQueryBuilder1.boost(), 0.01F);
      assertEquals("", multiMatchQueryBuilder1.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder2.boost(), 0.01F);
      assertEquals("", multiMatchQueryBuilder2.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder2.getWriteableName());
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      int int0 = (-1463);
      MultiMatchQueryBuilder multiMatchQueryBuilder3 = multiMatchQueryBuilder1.slop(int0);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder2);
      assertNotNull(multiMatchQueryBuilder3);
      assertEquals(1.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertEquals("", multiMatchQueryBuilder0.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder1.getWriteableName());
      assertEquals(1.0F, multiMatchQueryBuilder1.boost(), 0.01F);
      assertEquals("", multiMatchQueryBuilder1.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder3.getWriteableName());
      assertEquals("", multiMatchQueryBuilder3.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder3.boost(), 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      int int1 = (-1659);
      MultiMatchQueryBuilder multiMatchQueryBuilder4 = multiMatchQueryBuilder2.slop(int1);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder3);
      assertNotNull(multiMatchQueryBuilder4);
      assertFalse(int1 == int0);
      assertEquals(1.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertEquals("", multiMatchQueryBuilder0.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder1.getWriteableName());
      assertEquals(1.0F, multiMatchQueryBuilder1.boost(), 0.01F);
      assertEquals("", multiMatchQueryBuilder1.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder2.boost(), 0.01F);
      assertEquals("", multiMatchQueryBuilder2.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder2.getWriteableName());
      assertEquals("multi_match", multiMatchQueryBuilder4.getWriteableName());
      assertEquals(1.0F, multiMatchQueryBuilder4.boost(), 0.01F);
      assertEquals("", multiMatchQueryBuilder4.queryName());
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      String string1 = multiMatchQueryBuilder4.getWriteableName();
      assertEquals("multi_match", string1);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder3);
      assertNotSame(string1, string0);
      assertNotNull(string1);
      assertFalse(int1 == int0);
      assertFalse(string1.equals((Object)string0));
      assertEquals(1.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertEquals("", multiMatchQueryBuilder0.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder1.getWriteableName());
      assertEquals(1.0F, multiMatchQueryBuilder1.boost(), 0.01F);
      assertEquals("", multiMatchQueryBuilder1.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder2.boost(), 0.01F);
      assertEquals("", multiMatchQueryBuilder2.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder2.getWriteableName());
      assertEquals("multi_match", multiMatchQueryBuilder4.getWriteableName());
      assertEquals(1.0F, multiMatchQueryBuilder4.boost(), 0.01F);
      assertEquals("", multiMatchQueryBuilder4.queryName());
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      boolean boolean0 = false;
      MultiMatchQueryBuilder multiMatchQueryBuilder5 = multiMatchQueryBuilder4.lenient(boolean0);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder5, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder5, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder5, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder5, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder5, multiMatchQueryBuilder1);
      assertNotNull(multiMatchQueryBuilder5);
      assertFalse(int1 == int0);
      assertEquals(1.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertEquals("", multiMatchQueryBuilder0.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder1.getWriteableName());
      assertEquals(1.0F, multiMatchQueryBuilder1.boost(), 0.01F);
      assertEquals("", multiMatchQueryBuilder1.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder2.boost(), 0.01F);
      assertEquals("", multiMatchQueryBuilder2.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder2.getWriteableName());
      assertEquals("multi_match", multiMatchQueryBuilder4.getWriteableName());
      assertEquals(1.0F, multiMatchQueryBuilder4.boost(), 0.01F);
      assertEquals("", multiMatchQueryBuilder4.queryName());
      assertEquals("", multiMatchQueryBuilder5.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder5.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder5.getWriteableName());
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      String string2 = multiMatchQueryBuilder5.getName();
      assertEquals("multi_match", string2);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder5, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder5, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder5, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder5, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder5, multiMatchQueryBuilder1);
      assertSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotNull(string2);
      assertFalse(int1 == int0);
      assertFalse(string2.equals((Object)string0));
      assertEquals(1.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertEquals("", multiMatchQueryBuilder0.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder1.getWriteableName());
      assertEquals(1.0F, multiMatchQueryBuilder1.boost(), 0.01F);
      assertEquals("", multiMatchQueryBuilder1.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder2.boost(), 0.01F);
      assertEquals("", multiMatchQueryBuilder2.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder2.getWriteableName());
      assertEquals("multi_match", multiMatchQueryBuilder4.getWriteableName());
      assertEquals(1.0F, multiMatchQueryBuilder4.boost(), 0.01F);
      assertEquals("", multiMatchQueryBuilder4.queryName());
      assertEquals("", multiMatchQueryBuilder5.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder5.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder5.getWriteableName());
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      String string3 = multiMatchQueryBuilder5.toString();
      assertEquals("{\n  \"multi_match\" : {\n    \"query\" : null,\n    \"fields\" : [ ],\n    \"operator\" : \"OR\",\n    \"slop\" : -1659,\n    \"lenient\" : false,\n    \"zero_terms_query\" : \"NONE\",\n    \"boost\" : 1.0,\n    \"_name\" : \"\"\n  }\n}", string3);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder5, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder5, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder5, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder5, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder5, multiMatchQueryBuilder1);
      assertNotSame(string3, string2);
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
      assertNotNull(string3);
      assertFalse(int1 == int0);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals(1.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertEquals("", multiMatchQueryBuilder0.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder1.getWriteableName());
      assertEquals(1.0F, multiMatchQueryBuilder1.boost(), 0.01F);
      assertEquals("", multiMatchQueryBuilder1.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder2.boost(), 0.01F);
      assertEquals("", multiMatchQueryBuilder2.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder2.getWriteableName());
      assertEquals("multi_match", multiMatchQueryBuilder4.getWriteableName());
      assertEquals(1.0F, multiMatchQueryBuilder4.boost(), 0.01F);
      assertEquals("", multiMatchQueryBuilder4.queryName());
      assertEquals("", multiMatchQueryBuilder5.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder5.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder5.getWriteableName());
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      String string4 = multiMatchQueryBuilder3.getWriteableName();
      assertEquals("multi_match", string4);
      assertSame(string4, string1);
      assertNotSame(string4, string3);
      assertNotSame(string4, string0);
      assertSame(string4, string2);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder5);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(int0 == int1);
      assertEquals(1.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertEquals("", multiMatchQueryBuilder0.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder1.getWriteableName());
      assertEquals(1.0F, multiMatchQueryBuilder1.boost(), 0.01F);
      assertEquals("", multiMatchQueryBuilder1.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder3.getWriteableName());
      assertEquals("", multiMatchQueryBuilder3.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder3.boost(), 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      float float0 = 0.0F;
      MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder0.cutoffFrequency(float0);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder6);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder6, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder6, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder6, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder6, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder6, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder6, multiMatchQueryBuilder2);
      assertNotNull(multiMatchQueryBuilder6);
      assertEquals(1.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertEquals("", multiMatchQueryBuilder0.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder6.getWriteableName());
      assertEquals(1.0F, multiMatchQueryBuilder6.boost(), 0.01F);
      assertEquals("", multiMatchQueryBuilder6.queryName());
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      MultiMatchQueryBuilder multiMatchQueryBuilder7 = multiMatchQueryBuilder5.maxExpansions(int1);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder7);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder6);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder6);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder7);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder7, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder7, multiMatchQueryBuilder6);
      assertSame(multiMatchQueryBuilder7, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder7, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder7, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder7, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder7, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder7);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder6);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder7);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder6);
      assertSame(multiMatchQueryBuilder5, multiMatchQueryBuilder6);
      assertSame(multiMatchQueryBuilder5, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder5, multiMatchQueryBuilder7);
      assertSame(multiMatchQueryBuilder5, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder5, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder5, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder5, multiMatchQueryBuilder1);
      assertNotNull(multiMatchQueryBuilder7);
      assertFalse(int1 == int0);
      assertEquals(1.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertEquals("", multiMatchQueryBuilder0.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder1.getWriteableName());
      assertEquals(1.0F, multiMatchQueryBuilder1.boost(), 0.01F);
      assertEquals("", multiMatchQueryBuilder1.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder7.getWriteableName());
      assertEquals("", multiMatchQueryBuilder7.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder7.boost(), 0.01F);
      assertEquals(1.0F, multiMatchQueryBuilder2.boost(), 0.01F);
      assertEquals("", multiMatchQueryBuilder2.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder2.getWriteableName());
      assertEquals("multi_match", multiMatchQueryBuilder4.getWriteableName());
      assertEquals(1.0F, multiMatchQueryBuilder4.boost(), 0.01F);
      assertEquals("", multiMatchQueryBuilder4.queryName());
      assertEquals("", multiMatchQueryBuilder5.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder5.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder5.getWriteableName());
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      Operator operator1 = Operator.AND;
      MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder6.operator(operator1);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder7);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder8);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder6);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder6, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder6, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder6, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder6, multiMatchQueryBuilder7);
      assertSame(multiMatchQueryBuilder6, multiMatchQueryBuilder8);
      assertSame(multiMatchQueryBuilder6, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder6, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder6, multiMatchQueryBuilder2);
      assertNotSame(operator1, operator0);
      assertSame(multiMatchQueryBuilder8, multiMatchQueryBuilder6);
      assertSame(multiMatchQueryBuilder8, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder8, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder8, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder8, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder8, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder8, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder8, multiMatchQueryBuilder7);
      assertNotNull(multiMatchQueryBuilder8);
      assertFalse(operator1.equals((Object)operator0));
      assertEquals(1.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertEquals("", multiMatchQueryBuilder0.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder6.getWriteableName());
      assertEquals(1.0F, multiMatchQueryBuilder6.boost(), 0.01F);
      assertEquals("", multiMatchQueryBuilder6.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder8.boost(), 0.01F);
      assertEquals("", multiMatchQueryBuilder8.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder8.getWriteableName());
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
  }

  @Test(timeout = 11000)
  public void test21()  throws Throwable  {
      MultiMatchQueryBuilder multiMatchQueryBuilder0 = MultiMatchQueryBuilder.PROTOTYPE;
      assertNotNull(multiMatchQueryBuilder0);
      assertEquals(1.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      String string0 = "Expected a numeric value in [missing] but got [";
      MultiMatchQueryBuilder multiMatchQueryBuilder1 = multiMatchQueryBuilder0.fuzzyRewrite(string0);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder0);
      assertNotNull(multiMatchQueryBuilder1);
      assertEquals(1.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertEquals(1.0F, multiMatchQueryBuilder1.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder1.getWriteableName());
      assertNull(multiMatchQueryBuilder1.queryName());
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      int int0 = 4;
      MultiMatchQueryBuilder multiMatchQueryBuilder2 = multiMatchQueryBuilder1.prefixLength(int0);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder0);
      assertNotNull(multiMatchQueryBuilder2);
      assertEquals(1.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertEquals(1.0F, multiMatchQueryBuilder1.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder1.getWriteableName());
      assertNull(multiMatchQueryBuilder1.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder2.getWriteableName());
      assertEquals(1.0F, multiMatchQueryBuilder2.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder2.queryName());
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      boolean boolean0 = true;
      MultiMatchQueryBuilder multiMatchQueryBuilder3 = multiMatchQueryBuilder2.lenient(boolean0);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder2);
      assertNotNull(multiMatchQueryBuilder3);
      assertEquals(1.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertEquals(1.0F, multiMatchQueryBuilder1.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder1.getWriteableName());
      assertNull(multiMatchQueryBuilder1.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder2.getWriteableName());
      assertEquals(1.0F, multiMatchQueryBuilder2.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder2.queryName());
      assertNull(multiMatchQueryBuilder3.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder3.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder3.getWriteableName());
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      MultiMatchQueryBuilder multiMatchQueryBuilder4 = multiMatchQueryBuilder3.slop(int0);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder1);
      assertNotNull(multiMatchQueryBuilder4);
      assertEquals(1.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertEquals(1.0F, multiMatchQueryBuilder1.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder1.getWriteableName());
      assertNull(multiMatchQueryBuilder1.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder2.getWriteableName());
      assertEquals(1.0F, multiMatchQueryBuilder2.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder2.queryName());
      assertNull(multiMatchQueryBuilder3.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder3.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder3.getWriteableName());
      assertEquals(1.0F, multiMatchQueryBuilder4.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder4.getWriteableName());
      assertNull(multiMatchQueryBuilder4.queryName());
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      Settings settings0 = Settings.Builder.EMPTY_SETTINGS;
      assertNotNull(settings0);
      assertTrue(settings0.getSettingsRequireUnits());
      
      ThreadPool threadPool0 = new ThreadPool(multiMatchQueryBuilder0.NAME);
      assertNotNull(threadPool0);
      assertEquals(1.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      XContentType xContentType0 = XContentType.YAML;
      BytesReference bytesReference0 = multiMatchQueryBuilder0.buildAsBytes(xContentType0);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder2);
      assertNotNull(bytesReference0);
      assertEquals(1.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertEquals(169, bytesReference0.length());
      assertTrue(bytesReference0.hasArray());
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      PageCacheRecycler pageCacheRecycler0 = new PageCacheRecycler(settings0, threadPool0);
      assertNotNull(pageCacheRecycler0);
      assertEquals(1.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertTrue(settings0.getSettingsRequireUnits());
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      CircuitBreakerService circuitBreakerService0 = null;
      BigArrays bigArrays0 = new BigArrays(pageCacheRecycler0, circuitBreakerService0);
      assertNotNull(bigArrays0);
      assertEquals(1.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertTrue(settings0.getSettingsRequireUnits());
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      
      ReleasableBytesStreamOutput releasableBytesStreamOutput0 = new ReleasableBytesStreamOutput(bigArrays0);
      assertNotNull(releasableBytesStreamOutput0);
      assertEquals(1.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertTrue(settings0.getSettingsRequireUnits());
      assertEquals(0L, releasableBytesStreamOutput0.position());
      assertEquals(0, releasableBytesStreamOutput0.size());
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      
      ReleasablePagedBytesReference releasablePagedBytesReference0 = releasableBytesStreamOutput0.bytes();
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder2);
      assertNotNull(releasablePagedBytesReference0);
      assertTrue(releasablePagedBytesReference0.hasArray());
      assertEquals(0, releasablePagedBytesReference0.length());
      assertEquals(1.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertTrue(settings0.getSettingsRequireUnits());
      assertEquals(0L, releasableBytesStreamOutput0.position());
      assertEquals(0, releasableBytesStreamOutput0.size());
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      
      StreamInput streamInput0 = releasablePagedBytesReference0.streamInput();
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder2);
      assertNotNull(streamInput0);
      assertTrue(releasablePagedBytesReference0.hasArray());
      assertEquals(0, releasablePagedBytesReference0.length());
      assertEquals(1.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertTrue(settings0.getSettingsRequireUnits());
      assertEquals(0L, releasableBytesStreamOutput0.position());
      assertEquals(0, releasableBytesStreamOutput0.size());
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      
      // Undeclared exception!
      try { 
        multiMatchQueryBuilder4.doReadFrom(streamInput0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.index.query.AbstractQueryBuilder", e);
      }
  }

  @Test(timeout = 11000)
  public void test22()  throws Throwable  {
      MultiMatchQueryBuilder multiMatchQueryBuilder0 = MultiMatchQueryBuilder.PROTOTYPE;
      assertNotNull(multiMatchQueryBuilder0);
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      BoostAttributeImpl boostAttributeImpl0 = new BoostAttributeImpl();
      assertNotNull(boostAttributeImpl0);
      assertEquals(1.0F, boostAttributeImpl0.getBoost(), 0.01F);
      
      BoostAttributeImpl boostAttributeImpl1 = (BoostAttributeImpl)AbstractQueryBuilder.convertToStringIfBytesRef(boostAttributeImpl0);
      assertSame(boostAttributeImpl0, boostAttributeImpl1);
      assertSame(boostAttributeImpl1, boostAttributeImpl0);
      assertNotNull(boostAttributeImpl1);
      assertEquals(1.0F, boostAttributeImpl0.getBoost(), 0.01F);
      assertEquals(1.0F, boostAttributeImpl1.getBoost(), 0.01F);
      
      // Undeclared exception!
      try { 
        multiMatchQueryBuilder0.type((Object) boostAttributeImpl1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // failed to parse [java.lang.String@0000000002] query type [java.lang.String@0000000003]. unknown type.
         //
         verifyException("org.elasticsearch.index.query.MultiMatchQueryBuilder$Type", e);
      }
  }

  @Test(timeout = 11000)
  public void test23()  throws Throwable  {
      MultiMatchQueryBuilder multiMatchQueryBuilder0 = MultiMatchQueryBuilder.PROTOTYPE;
      assertNotNull(multiMatchQueryBuilder0);
      assertEquals(1.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      String string0 = "CbP)gh%";
      MultiMatchQueryBuilder multiMatchQueryBuilder1 = multiMatchQueryBuilder0.field(string0);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder0);
      assertNotNull(multiMatchQueryBuilder1);
      assertEquals(1.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertEquals("multi_match", multiMatchQueryBuilder1.getWriteableName());
      assertEquals(1.0F, multiMatchQueryBuilder1.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder1.queryName());
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      Operator operator0 = Operator.OR;
      MultiMatchQueryBuilder multiMatchQueryBuilder2 = multiMatchQueryBuilder1.operator(operator0);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder1);
      assertNotNull(multiMatchQueryBuilder2);
      assertEquals(1.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertEquals("multi_match", multiMatchQueryBuilder1.getWriteableName());
      assertEquals(1.0F, multiMatchQueryBuilder1.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder1.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder2.getWriteableName());
      assertEquals(1.0F, multiMatchQueryBuilder2.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder2.queryName());
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      int int0 = (-1);
      MultiMatchQueryBuilder multiMatchQueryBuilder3 = multiMatchQueryBuilder2.slop(int0);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder1);
      assertNotNull(multiMatchQueryBuilder3);
      assertEquals(1.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertEquals("multi_match", multiMatchQueryBuilder1.getWriteableName());
      assertEquals(1.0F, multiMatchQueryBuilder1.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder1.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder2.getWriteableName());
      assertEquals(1.0F, multiMatchQueryBuilder2.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder2.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder3.getWriteableName());
      assertNull(multiMatchQueryBuilder3.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder3.boost(), 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
  }

  @Test(timeout = 11000)
  public void test24()  throws Throwable  {
      MultiMatchQueryBuilder multiMatchQueryBuilder0 = MultiMatchQueryBuilder.PROTOTYPE;
      assertNotNull(multiMatchQueryBuilder0);
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertEquals(1.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      String string0 = "";
      float float0 = (-433.30975F);
      MultiMatchQueryBuilder multiMatchQueryBuilder1 = multiMatchQueryBuilder0.field(string0, float0);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder0);
      assertNotNull(multiMatchQueryBuilder1);
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertEquals(1.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder1.getWriteableName());
      assertEquals(1.0F, multiMatchQueryBuilder1.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder1.queryName());
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      int int0 = (-1939);
      MultiMatchQueryBuilder multiMatchQueryBuilder2 = multiMatchQueryBuilder1.slop(int0);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder0);
      assertNotNull(multiMatchQueryBuilder2);
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertEquals(1.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder1.getWriteableName());
      assertEquals(1.0F, multiMatchQueryBuilder1.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder1.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder2.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder2.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder2.getWriteableName());
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      MultiMatchQueryBuilder.Type multiMatchQueryBuilder_Type0 = MultiMatchQueryBuilder.Type.PHRASE_PREFIX;
      MultiMatchQueryBuilder multiMatchQueryBuilder3 = multiMatchQueryBuilder2.type(multiMatchQueryBuilder_Type0);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder2);
      assertNotNull(multiMatchQueryBuilder3);
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertEquals(1.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder1.getWriteableName());
      assertEquals(1.0F, multiMatchQueryBuilder1.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder1.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder2.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder2.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder2.getWriteableName());
      assertEquals("multi_match", multiMatchQueryBuilder3.getWriteableName());
      assertNull(multiMatchQueryBuilder3.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder3.boost(), 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      MultiMatchQueryBuilder multiMatchQueryBuilder4 = multiMatchQueryBuilder3.tieBreaker(multiMatchQueryBuilder0.DEFAULT_BOOST);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder1);
      assertNotNull(multiMatchQueryBuilder4);
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertEquals(1.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder1.getWriteableName());
      assertEquals(1.0F, multiMatchQueryBuilder1.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder1.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder2.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder2.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder2.getWriteableName());
      assertEquals("multi_match", multiMatchQueryBuilder3.getWriteableName());
      assertNull(multiMatchQueryBuilder3.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder3.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder4.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder4.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder4.getWriteableName());
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      MultiMatchQueryBuilder multiMatchQueryBuilder5 = multiMatchQueryBuilder4.minimumShouldMatch(string0);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder5, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder5, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder5, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder5, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder5, multiMatchQueryBuilder3);
      assertNotNull(multiMatchQueryBuilder5);
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertEquals(1.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder1.getWriteableName());
      assertEquals(1.0F, multiMatchQueryBuilder1.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder1.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder2.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder2.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder2.getWriteableName());
      assertEquals("multi_match", multiMatchQueryBuilder3.getWriteableName());
      assertNull(multiMatchQueryBuilder3.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder3.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder4.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder4.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder4.getWriteableName());
      assertNull(multiMatchQueryBuilder5.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder5.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder5.getWriteableName());
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
  }

  @Test(timeout = 11000)
  public void test25()  throws Throwable  {
      MultiMatchQueryBuilder.Type multiMatchQueryBuilder_Type0 = MultiMatchQueryBuilder.Type.CROSS_FIELDS;
      assertEquals(MultiMatchQueryBuilder.Type.CROSS_FIELDS, multiMatchQueryBuilder_Type0);
      assertEquals(0.0F, multiMatchQueryBuilder_Type0.tieBreaker(), 0.01F);
      assertEquals(MatchQuery.Type.BOOLEAN, multiMatchQueryBuilder_Type0.matchQueryType());
      
      float float0 = multiMatchQueryBuilder_Type0.tieBreaker();
      assertEquals(0.0F, float0, 0.01F);
      assertEquals(0.0F, multiMatchQueryBuilder_Type0.tieBreaker(), 0.01F);
      assertEquals(MatchQuery.Type.BOOLEAN, multiMatchQueryBuilder_Type0.matchQueryType());
      
      MultiMatchQueryBuilder multiMatchQueryBuilder0 = MultiMatchQueryBuilder.PROTOTYPE;
      assertNotNull(multiMatchQueryBuilder0);
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertEquals(1.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      MultiMatchQueryBuilder.Type multiMatchQueryBuilder_Type1 = MultiMatchQueryBuilder.Type.CROSS_FIELDS;
      MultiMatchQueryBuilder multiMatchQueryBuilder1 = multiMatchQueryBuilder0.type(multiMatchQueryBuilder_Type1);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder_Type1, multiMatchQueryBuilder_Type0);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder0);
      assertNotNull(multiMatchQueryBuilder1);
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertEquals(1.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder0.queryName());
      assertNull(multiMatchQueryBuilder1.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder1.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder1.getWriteableName());
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      int int0 = 3221;
      MultiMatchQueryBuilder multiMatchQueryBuilder2 = multiMatchQueryBuilder1.maxExpansions(int0);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder_Type1, multiMatchQueryBuilder_Type0);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder1);
      assertNotNull(multiMatchQueryBuilder2);
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertEquals(1.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder0.queryName());
      assertNull(multiMatchQueryBuilder1.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder1.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder1.getWriteableName());
      assertEquals("multi_match", multiMatchQueryBuilder2.getWriteableName());
      assertNull(multiMatchQueryBuilder2.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder2.boost(), 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      MultiMatchQueryBuilder multiMatchQueryBuilder3 = multiMatchQueryBuilder2.minimumShouldMatch(multiMatchQueryBuilder0.NAME);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder_Type1, multiMatchQueryBuilder_Type0);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder1);
      assertNotNull(multiMatchQueryBuilder3);
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertEquals(1.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder0.queryName());
      assertNull(multiMatchQueryBuilder1.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder1.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder1.getWriteableName());
      assertEquals("multi_match", multiMatchQueryBuilder2.getWriteableName());
      assertNull(multiMatchQueryBuilder2.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder2.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder3.getWriteableName());
      assertNull(multiMatchQueryBuilder3.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder3.boost(), 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      MatchQueryBuilder.ZeroTermsQuery matchQueryBuilder_ZeroTermsQuery0 = MatchQueryBuilder.ZeroTermsQuery.ALL;
      MultiMatchQueryBuilder multiMatchQueryBuilder4 = multiMatchQueryBuilder3.zeroTermsQuery(matchQueryBuilder_ZeroTermsQuery0);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder_Type1, multiMatchQueryBuilder_Type0);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder3);
      assertNotNull(multiMatchQueryBuilder4);
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertEquals(1.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder0.queryName());
      assertNull(multiMatchQueryBuilder1.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder1.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder1.getWriteableName());
      assertEquals("multi_match", multiMatchQueryBuilder2.getWriteableName());
      assertNull(multiMatchQueryBuilder2.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder2.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder3.getWriteableName());
      assertNull(multiMatchQueryBuilder3.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder3.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder4.getWriteableName());
      assertNull(multiMatchQueryBuilder4.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder4.boost(), 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      Object object0 = null;
      MultiMatchQueryBuilder multiMatchQueryBuilder5 = multiMatchQueryBuilder4.type(object0);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder_Type1, multiMatchQueryBuilder_Type0);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder5, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder5, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder5, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder5, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder5, multiMatchQueryBuilder0);
      assertNotNull(multiMatchQueryBuilder5);
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertEquals(1.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder0.queryName());
      assertNull(multiMatchQueryBuilder1.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder1.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder1.getWriteableName());
      assertEquals("multi_match", multiMatchQueryBuilder2.getWriteableName());
      assertNull(multiMatchQueryBuilder2.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder2.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder3.getWriteableName());
      assertNull(multiMatchQueryBuilder3.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder3.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder4.getWriteableName());
      assertNull(multiMatchQueryBuilder4.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder4.boost(), 0.01F);
      assertEquals(1.0F, multiMatchQueryBuilder5.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder5.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder5.getWriteableName());
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      // Undeclared exception!
      try { 
        multiMatchQueryBuilder5.type((Object) matchQueryBuilder_ZeroTermsQuery0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // failed to parse [java.lang.String@0000000087] query type [java.lang.String@0000000088]. unknown type.
         //
         verifyException("org.elasticsearch.index.query.MultiMatchQueryBuilder$Type", e);
      }
  }

  @Test(timeout = 11000)
  public void test26()  throws Throwable  {
      MultiMatchQueryBuilder multiMatchQueryBuilder0 = MultiMatchQueryBuilder.PROTOTYPE;
      assertNotNull(multiMatchQueryBuilder0);
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      Object object0 = null;
      // Undeclared exception!
      try { 
        multiMatchQueryBuilder0.fuzziness(object0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 11000)
  public void test27()  throws Throwable  {
      int int0 = (-1);
      Integer integer0 = new Integer(int0);
      assertEquals((-1), (int)integer0);
      assertNotNull(integer0);
      assertTrue(integer0.equals((Object)int0));
      
      String[] stringArray0 = new String[0];
      MultiMatchQueryBuilder multiMatchQueryBuilder0 = new MultiMatchQueryBuilder(integer0, stringArray0);
      assertEquals(0, stringArray0.length);
      assertNotNull(multiMatchQueryBuilder0);
      assertTrue(integer0.equals((Object)int0));
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      Object object0 = null;
      MultiMatchQueryBuilder multiMatchQueryBuilder1 = multiMatchQueryBuilder0.type(object0);
      assertEquals(0, stringArray0.length);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder0);
      assertNotNull(multiMatchQueryBuilder1);
      assertTrue(integer0.equals((Object)int0));
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertNull(multiMatchQueryBuilder1.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder1.getWriteableName());
      assertEquals(1.0F, multiMatchQueryBuilder1.boost(), 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      int int1 = multiMatchQueryBuilder1.doHashCode();
      assertEquals(0, stringArray0.length);
      assertEquals(1, int1);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder0);
      assertTrue(integer0.equals((Object)int0));
      assertFalse(int1 == int0);
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertNull(multiMatchQueryBuilder1.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder1.getWriteableName());
      assertEquals(1.0F, multiMatchQueryBuilder1.boost(), 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      String string0 = "";
      MultiMatchQueryBuilder multiMatchQueryBuilder2 = multiMatchQueryBuilder1.fuzzyRewrite(string0);
      assertEquals(0, stringArray0.length);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder1);
      assertNotNull(multiMatchQueryBuilder2);
      assertFalse(int0 == int1);
      assertFalse(integer0.equals((Object)int1));
      assertTrue(integer0.equals((Object)int0));
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertNull(multiMatchQueryBuilder1.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder1.getWriteableName());
      assertEquals(1.0F, multiMatchQueryBuilder1.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder2.getWriteableName());
      assertNull(multiMatchQueryBuilder2.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder2.boost(), 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      boolean boolean0 = multiMatchQueryBuilder2.equals(multiMatchQueryBuilder1);
      assertEquals(0, stringArray0.length);
      assertTrue(boolean0);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder1);
      assertFalse(int0 == int1);
      assertFalse(integer0.equals((Object)int1));
      assertTrue(integer0.equals((Object)int0));
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertNull(multiMatchQueryBuilder1.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder1.getWriteableName());
      assertEquals(1.0F, multiMatchQueryBuilder1.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder2.getWriteableName());
      assertNull(multiMatchQueryBuilder2.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder2.boost(), 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      MultiMatchQueryBuilder.Type multiMatchQueryBuilder_Type0 = MultiMatchQueryBuilder.Type.PHRASE_PREFIX;
      assertEquals(MultiMatchQueryBuilder.Type.PHRASE_PREFIX, multiMatchQueryBuilder_Type0);
      assertEquals(0.0F, multiMatchQueryBuilder_Type0.tieBreaker(), 0.01F);
      assertEquals(MatchQuery.Type.PHRASE_PREFIX, multiMatchQueryBuilder_Type0.matchQueryType());
      
      ParseField parseField0 = multiMatchQueryBuilder_Type0.parseField();
      assertNotNull(parseField0);
      assertEquals(0.0F, multiMatchQueryBuilder_Type0.tieBreaker(), 0.01F);
      assertEquals(MatchQuery.Type.PHRASE_PREFIX, multiMatchQueryBuilder_Type0.matchQueryType());
      assertEquals("phrase_prefix", parseField0.toString());
      assertEquals("phrase_prefix", parseField0.getPreferredName());
      
      MatchQuery.Type matchQuery_Type0 = multiMatchQueryBuilder_Type0.matchQueryType();
      assertEquals(MatchQuery.Type.PHRASE_PREFIX, matchQuery_Type0);
      assertEquals(0.0F, multiMatchQueryBuilder_Type0.tieBreaker(), 0.01F);
      assertEquals(MatchQuery.Type.PHRASE_PREFIX, multiMatchQueryBuilder_Type0.matchQueryType());
      
      String string1 = "";
      MultiMatchQueryBuilder multiMatchQueryBuilder3 = multiMatchQueryBuilder0.rewrite(string1);
      assertEquals(0, stringArray0.length);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder2);
      assertSame(string1, string0);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder2);
      assertNotNull(multiMatchQueryBuilder3);
      assertFalse(int0 == int1);
      assertFalse(integer0.equals((Object)int1));
      assertTrue(integer0.equals((Object)int0));
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertEquals("multi_match", multiMatchQueryBuilder3.getWriteableName());
      assertNull(multiMatchQueryBuilder3.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder3.boost(), 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
  }

  @Test(timeout = 11000)
  public void test28()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      String[] stringArray0 = new String[1];
      String string0 = "";
      stringArray0[0] = string0;
      MultiMatchQueryBuilder multiMatchQueryBuilder0 = new MultiMatchQueryBuilder(object0, stringArray0);
      assertEquals(1, stringArray0.length);
      assertNotNull(multiMatchQueryBuilder0);
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertEquals(1.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      MultiMatchQueryBuilder multiMatchQueryBuilder1 = multiMatchQueryBuilder0.analyzer(stringArray0[0]);
      assertEquals(1, stringArray0.length);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder0);
      assertNotNull(multiMatchQueryBuilder1);
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertEquals(1.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder1.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder1.getWriteableName());
      assertNull(multiMatchQueryBuilder1.queryName());
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      String string1 = multiMatchQueryBuilder0.toString();
      assertEquals(1, stringArray0.length);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder1);
      assertNotSame(string1, string0);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertEquals(1.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      MultiMatchQueryBuilder multiMatchQueryBuilder2 = multiMatchQueryBuilder1.fuzzyRewrite(stringArray0[0]);
      assertEquals(1, stringArray0.length);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder1);
      assertNotNull(multiMatchQueryBuilder2);
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertEquals(1.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder1.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder1.getWriteableName());
      assertNull(multiMatchQueryBuilder1.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder2.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder2.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder2.getWriteableName());
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      int int0 = 141;
      MultiMatchQueryBuilder multiMatchQueryBuilder3 = multiMatchQueryBuilder2.maxExpansions(int0);
      assertEquals(1, stringArray0.length);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder1);
      assertNotNull(multiMatchQueryBuilder3);
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertEquals(1.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder1.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder1.getWriteableName());
      assertNull(multiMatchQueryBuilder1.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder2.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder2.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder2.getWriteableName());
      assertEquals("multi_match", multiMatchQueryBuilder3.getWriteableName());
      assertNull(multiMatchQueryBuilder3.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder3.boost(), 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        StreamInput.wrap(byteArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.common.io.stream.StreamInput", e);
      }
  }

  @Test(timeout = 11000)
  public void test29()  throws Throwable  {
      MultiMatchQueryBuilder multiMatchQueryBuilder0 = MultiMatchQueryBuilder.PROTOTYPE;
      assertNotNull(multiMatchQueryBuilder0);
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      String string0 = "";
      MultiMatchQueryBuilder multiMatchQueryBuilder1 = multiMatchQueryBuilder0.rewrite(string0);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder0);
      assertNotNull(multiMatchQueryBuilder1);
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertEquals(1.0F, multiMatchQueryBuilder1.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder1.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder1.getWriteableName());
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      MultiMatchQueryBuilder multiMatchQueryBuilder2 = multiMatchQueryBuilder1.field(string0);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder1);
      assertNotNull(multiMatchQueryBuilder2);
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertEquals(1.0F, multiMatchQueryBuilder1.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder1.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder1.getWriteableName());
      assertEquals("multi_match", multiMatchQueryBuilder2.getWriteableName());
      assertNull(multiMatchQueryBuilder2.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder2.boost(), 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      Operator operator0 = Operator.OR;
      MultiMatchQueryBuilder multiMatchQueryBuilder3 = multiMatchQueryBuilder2.operator(operator0);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder0);
      assertNotNull(multiMatchQueryBuilder3);
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertEquals(1.0F, multiMatchQueryBuilder1.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder1.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder1.getWriteableName());
      assertEquals("multi_match", multiMatchQueryBuilder2.getWriteableName());
      assertNull(multiMatchQueryBuilder2.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder2.boost(), 0.01F);
      assertEquals(1.0F, multiMatchQueryBuilder3.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder3.getWriteableName());
      assertNull(multiMatchQueryBuilder3.queryName());
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      String string1 = "phrase_prefix";
      float float0 = Float.NEGATIVE_INFINITY;
      MultiMatchQueryBuilder multiMatchQueryBuilder4 = multiMatchQueryBuilder3.field(string1, float0);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder1);
      assertNotSame(string0, string1);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder4);
      assertNotSame(string1, string0);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder0);
      assertNotNull(multiMatchQueryBuilder4);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertEquals(1.0F, multiMatchQueryBuilder1.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder1.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder1.getWriteableName());
      assertEquals("multi_match", multiMatchQueryBuilder2.getWriteableName());
      assertNull(multiMatchQueryBuilder2.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder2.boost(), 0.01F);
      assertEquals(1.0F, multiMatchQueryBuilder3.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder3.getWriteableName());
      assertNull(multiMatchQueryBuilder3.queryName());
      assertNull(multiMatchQueryBuilder4.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder4.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder4.getWriteableName());
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      XContentType xContentType0 = XContentType.CBOR;
      BytesReference bytesReference0 = multiMatchQueryBuilder4.buildAsBytes(xContentType0);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder1);
      assertNotSame(string0, string1);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder4);
      assertNotSame(string1, string0);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder0);
      assertNotNull(bytesReference0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertEquals(1.0F, multiMatchQueryBuilder1.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder1.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder1.getWriteableName());
      assertEquals("multi_match", multiMatchQueryBuilder2.getWriteableName());
      assertNull(multiMatchQueryBuilder2.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder2.boost(), 0.01F);
      assertEquals(1.0F, multiMatchQueryBuilder3.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder3.getWriteableName());
      assertNull(multiMatchQueryBuilder3.queryName());
      assertNull(multiMatchQueryBuilder4.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder4.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder4.getWriteableName());
      assertEquals(90, bytesReference0.length());
      assertTrue(bytesReference0.hasArray());
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      MatchQueryBuilder.ZeroTermsQuery matchQueryBuilder_ZeroTermsQuery0 = MatchQueryBuilder.ZeroTermsQuery.NONE;
      MultiMatchQueryBuilder multiMatchQueryBuilder5 = multiMatchQueryBuilder4.zeroTermsQuery(matchQueryBuilder_ZeroTermsQuery0);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder1);
      assertNotSame(string0, string1);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder5);
      assertNotSame(string1, string0);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder5, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder5, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder5, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder5, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder5, multiMatchQueryBuilder2);
      assertNotNull(multiMatchQueryBuilder5);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertEquals(1.0F, multiMatchQueryBuilder1.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder1.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder1.getWriteableName());
      assertEquals("multi_match", multiMatchQueryBuilder2.getWriteableName());
      assertNull(multiMatchQueryBuilder2.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder2.boost(), 0.01F);
      assertEquals(1.0F, multiMatchQueryBuilder3.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder3.getWriteableName());
      assertNull(multiMatchQueryBuilder3.queryName());
      assertNull(multiMatchQueryBuilder4.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder4.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder4.getWriteableName());
      assertEquals(1.0F, multiMatchQueryBuilder5.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder5.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder5.getWriteableName());
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      byte[] byteArray0 = new byte[6];
      byte byte0 = (byte)0;
      byteArray0[0] = byte0;
      byte byte1 = (byte)0;
      byteArray0[1] = byte1;
      byte byte2 = (byte)85;
      byteArray0[2] = byte2;
      byte byte3 = (byte)85;
      byteArray0[3] = byte3;
      byte byte4 = (byte) (-112);
      byteArray0[4] = byte4;
      byte byte5 = (byte)0;
      byteArray0[5] = byte5;
      int int0 = 0;
      StreamInput streamInput0 = StreamInput.wrap(byteArray0, int0, (int) byte2);
      assertEquals(6, byteArray0.length);
      assertNotNull(streamInput0);
      assertFalse(byte2 == byte5);
      assertFalse(byte2 == byte1);
      assertFalse(byte2 == byte0);
      assertFalse(byte2 == byte4);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)85, (byte)85, (byte) (-112), (byte)0}, byteArray0);
      
      // Undeclared exception!
      try { 
        multiMatchQueryBuilder5.readFrom(streamInput0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.index.query.AbstractQueryBuilder", e);
      }
  }

  @Test(timeout = 11000)
  public void test30()  throws Throwable  {
      MultiMatchQueryBuilder multiMatchQueryBuilder0 = MultiMatchQueryBuilder.PROTOTYPE;
      assertNotNull(multiMatchQueryBuilder0);
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertEquals(1.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      String string0 = "";
      MultiMatchQueryBuilder multiMatchQueryBuilder1 = multiMatchQueryBuilder0.fuzzyRewrite(string0);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder0);
      assertNotNull(multiMatchQueryBuilder1);
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertEquals(1.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder1.getWriteableName());
      assertEquals(1.0F, multiMatchQueryBuilder1.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder1.queryName());
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      MultiMatchQueryBuilder multiMatchQueryBuilder2 = multiMatchQueryBuilder1.minimumShouldMatch(string0);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder0);
      assertNotNull(multiMatchQueryBuilder2);
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertEquals(1.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder1.getWriteableName());
      assertEquals(1.0F, multiMatchQueryBuilder1.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder1.queryName());
      assertNull(multiMatchQueryBuilder2.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder2.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder2.getWriteableName());
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      String string1 = "type";
      MultiMatchQueryBuilder multiMatchQueryBuilder3 = multiMatchQueryBuilder2.field(string1, multiMatchQueryBuilder0.DEFAULT_BOOST);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder1);
      assertNotSame(string0, string1);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder0);
      assertNotSame(string1, string0);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder0);
      assertNotNull(multiMatchQueryBuilder3);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertEquals(1.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder1.getWriteableName());
      assertEquals(1.0F, multiMatchQueryBuilder1.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder1.queryName());
      assertNull(multiMatchQueryBuilder2.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder2.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder2.getWriteableName());
      assertEquals(1.0F, multiMatchQueryBuilder3.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder3.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder3.getWriteableName());
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      int int0 = 1;
      MultiMatchQueryBuilder multiMatchQueryBuilder4 = multiMatchQueryBuilder3.slop(int0);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder1);
      assertNotSame(string0, string1);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder4);
      assertNotSame(string1, string0);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder2);
      assertNotNull(multiMatchQueryBuilder4);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertEquals(1.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder1.getWriteableName());
      assertEquals(1.0F, multiMatchQueryBuilder1.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder1.queryName());
      assertNull(multiMatchQueryBuilder2.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder2.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder2.getWriteableName());
      assertEquals(1.0F, multiMatchQueryBuilder3.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder3.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder3.getWriteableName());
      assertEquals(1.0F, multiMatchQueryBuilder4.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder4.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder4.getWriteableName());
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      MultiMatchQueryBuilder multiMatchQueryBuilder5 = multiMatchQueryBuilder4.analyzer(multiMatchQueryBuilder1.NAME);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder5);
      assertNotSame(string0, string1);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder4);
      assertNotSame(string1, string0);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder5, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder5, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder5, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder5, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder5, multiMatchQueryBuilder3);
      assertNotNull(multiMatchQueryBuilder5);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertEquals(1.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder1.getWriteableName());
      assertEquals(1.0F, multiMatchQueryBuilder1.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder1.queryName());
      assertNull(multiMatchQueryBuilder2.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder2.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder2.getWriteableName());
      assertEquals(1.0F, multiMatchQueryBuilder3.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder3.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder3.getWriteableName());
      assertEquals(1.0F, multiMatchQueryBuilder4.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder4.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder4.getWriteableName());
      assertEquals("multi_match", multiMatchQueryBuilder5.getWriteableName());
      assertEquals(1.0F, multiMatchQueryBuilder5.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder5.queryName());
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      String string2 = null;
      float float0 = 557.7F;
      MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder5.field(string2, float0);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder6);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder5);
      assertNotSame(string0, string1);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder6);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder6);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder4);
      assertNotSame(string1, string0);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder6);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder6);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder5, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder5, multiMatchQueryBuilder6);
      assertSame(multiMatchQueryBuilder5, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder5, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder5, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder5, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder6, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder6, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder6, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder6, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder6, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder6, multiMatchQueryBuilder4);
      assertNotNull(multiMatchQueryBuilder6);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertEquals(1.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder1.getWriteableName());
      assertEquals(1.0F, multiMatchQueryBuilder1.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder1.queryName());
      assertNull(multiMatchQueryBuilder2.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder2.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder2.getWriteableName());
      assertEquals(1.0F, multiMatchQueryBuilder3.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder3.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder3.getWriteableName());
      assertEquals(1.0F, multiMatchQueryBuilder4.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder4.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder4.getWriteableName());
      assertEquals("multi_match", multiMatchQueryBuilder5.getWriteableName());
      assertEquals(1.0F, multiMatchQueryBuilder5.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder5.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder6.getWriteableName());
      assertNull(multiMatchQueryBuilder6.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder6.boost(), 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      MultiMatchQueryBuilder.Type multiMatchQueryBuilder_Type0 = MultiMatchQueryBuilder.Type.PHRASE;
      assertEquals(MultiMatchQueryBuilder.Type.PHRASE, multiMatchQueryBuilder_Type0);
      assertEquals(MatchQuery.Type.PHRASE, multiMatchQueryBuilder_Type0.matchQueryType());
      assertEquals(0.0F, multiMatchQueryBuilder_Type0.tieBreaker(), 0.01F);
      
      MatchQuery.Type matchQuery_Type0 = multiMatchQueryBuilder_Type0.matchQueryType();
      assertEquals(MatchQuery.Type.PHRASE, matchQuery_Type0);
      assertEquals(MatchQuery.Type.PHRASE, multiMatchQueryBuilder_Type0.matchQueryType());
      assertEquals(0.0F, multiMatchQueryBuilder_Type0.tieBreaker(), 0.01F);
      
      Operator operator0 = Operator.OR;
      MultiMatchQueryBuilder multiMatchQueryBuilder7 = multiMatchQueryBuilder4.operator(operator0);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder6);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder7);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder5);
      assertNotSame(string0, string1);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder7);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder6);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder6);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder7);
      assertNotSame(string1, string0);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder7);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder6);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder7);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder6);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder7, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder7, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder7, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder7, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder7, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder7, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder7, multiMatchQueryBuilder6);
      assertNotNull(multiMatchQueryBuilder7);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertEquals(1.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder1.getWriteableName());
      assertEquals(1.0F, multiMatchQueryBuilder1.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder1.queryName());
      assertNull(multiMatchQueryBuilder2.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder2.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder2.getWriteableName());
      assertEquals(1.0F, multiMatchQueryBuilder3.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder3.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder3.getWriteableName());
      assertEquals(1.0F, multiMatchQueryBuilder4.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder4.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder4.getWriteableName());
      assertEquals(1.0F, multiMatchQueryBuilder7.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder7.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder7.getWriteableName());
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
  }

  @Test(timeout = 11000)
  public void test31()  throws Throwable  {
      int int0 = 595;
      Integer integer0 = new Integer(int0);
      assertEquals(595, (int)integer0);
      assertNotNull(integer0);
      assertTrue(integer0.equals((Object)int0));
      
      String[] stringArray0 = null;
      MultiMatchQueryBuilder multiMatchQueryBuilder0 = null;
      try {
        multiMatchQueryBuilder0 = new MultiMatchQueryBuilder(integer0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 11000)
  public void test32()  throws Throwable  {
      MultiMatchQueryBuilder multiMatchQueryBuilder0 = MultiMatchQueryBuilder.PROTOTYPE;
      assertNotNull(multiMatchQueryBuilder0);
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      float float0 = (-794.0F);
      MultiMatchQueryBuilder multiMatchQueryBuilder1 = multiMatchQueryBuilder0.cutoffFrequency(float0);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder0);
      assertNotNull(multiMatchQueryBuilder1);
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertNull(multiMatchQueryBuilder1.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder1.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder1.getWriteableName());
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      String string0 = "Vz|Q";
      MultiMatchQueryBuilder multiMatchQueryBuilder2 = multiMatchQueryBuilder1.fuzzyRewrite(string0);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder1);
      assertNotNull(multiMatchQueryBuilder2);
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertNull(multiMatchQueryBuilder1.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder1.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder1.getWriteableName());
      assertEquals(1.0F, multiMatchQueryBuilder2.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder2.getWriteableName());
      assertNull(multiMatchQueryBuilder2.queryName());
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      int int0 = 0;
      MultiMatchQueryBuilder multiMatchQueryBuilder3 = multiMatchQueryBuilder2.maxExpansions(int0);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder1);
      assertNotNull(multiMatchQueryBuilder3);
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertNull(multiMatchQueryBuilder1.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder1.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder1.getWriteableName());
      assertEquals(1.0F, multiMatchQueryBuilder2.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder2.getWriteableName());
      assertNull(multiMatchQueryBuilder2.queryName());
      assertNull(multiMatchQueryBuilder3.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder3.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder3.getWriteableName());
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      MultiMatchQueryBuilder multiMatchQueryBuilder4 = multiMatchQueryBuilder3.fuzzyRewrite(string0);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder2);
      assertNotNull(multiMatchQueryBuilder4);
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertNull(multiMatchQueryBuilder1.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder1.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder1.getWriteableName());
      assertEquals(1.0F, multiMatchQueryBuilder2.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder2.getWriteableName());
      assertNull(multiMatchQueryBuilder2.queryName());
      assertNull(multiMatchQueryBuilder3.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder3.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder3.getWriteableName());
      assertEquals(1.0F, multiMatchQueryBuilder4.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder4.getWriteableName());
      assertNull(multiMatchQueryBuilder4.queryName());
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      boolean boolean0 = true;
      MultiMatchQueryBuilder multiMatchQueryBuilder5 = multiMatchQueryBuilder1.useDisMax(boolean0);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder5, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder5, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder5, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder5, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder5, multiMatchQueryBuilder3);
      assertNotNull(multiMatchQueryBuilder5);
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertNull(multiMatchQueryBuilder1.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder1.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder1.getWriteableName());
      assertEquals(1.0F, multiMatchQueryBuilder5.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder5.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder5.getWriteableName());
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      String string1 = "";
      MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.queryName(string1);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder6);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder6);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder0);
      assertNotSame(string0, string1);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder6);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder6);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder6);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder2);
      assertNotSame(string1, string0);
      assertSame(multiMatchQueryBuilder6, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder6, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder6, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder6, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder6, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder6, multiMatchQueryBuilder2);
      assertNotNull(multiMatchQueryBuilder6);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals("", multiMatchQueryBuilder0.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertEquals("", multiMatchQueryBuilder1.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder1.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder1.getWriteableName());
      assertEquals(1.0F, multiMatchQueryBuilder2.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder2.getWriteableName());
      assertEquals("", multiMatchQueryBuilder2.queryName());
      assertEquals("", multiMatchQueryBuilder3.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder3.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder3.getWriteableName());
      assertEquals(1.0F, multiMatchQueryBuilder4.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder4.getWriteableName());
      assertEquals("", multiMatchQueryBuilder4.queryName());
      assertEquals("", multiMatchQueryBuilder6.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder6.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder6.getWriteableName());
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      String string2 = multiMatchQueryBuilder5.toString();
      assertEquals("{\n  \"multi_match\" : {\n    \"query\" : null,\n    \"fields\" : [ ],\n    \"max_expansions\" : 0,\n    \"fuzzy_rewrite\" : \"Vz|Q\",\n    \"use_dis_max\" : true,\n    \"cutoff_frequency\" : -794.0,\n    \"boost\" : 1.0,\n    \"_name\" : \"\"\n  }\n}", string2);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder6);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder6);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder5, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder5, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder5, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder5, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder5, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder5, multiMatchQueryBuilder6);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", multiMatchQueryBuilder0.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertEquals("", multiMatchQueryBuilder1.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder1.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder1.getWriteableName());
      assertEquals(1.0F, multiMatchQueryBuilder5.boost(), 0.01F);
      assertEquals("", multiMatchQueryBuilder5.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder5.getWriteableName());
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      String string3 = multiMatchQueryBuilder3.getWriteableName();
      assertEquals("multi_match", string3);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder6);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder6);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder0);
      assertNotSame(string0, string1);
      assertNotSame(string0, string3);
      assertNotSame(string0, string2);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder6);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder6);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder5);
      assertNotSame(string3, string1);
      assertNotSame(string3, string2);
      assertNotSame(string3, string0);
      assertNotNull(string3);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("", multiMatchQueryBuilder0.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertEquals("", multiMatchQueryBuilder1.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder1.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder1.getWriteableName());
      assertEquals(1.0F, multiMatchQueryBuilder2.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder2.getWriteableName());
      assertEquals("", multiMatchQueryBuilder2.queryName());
      assertEquals("", multiMatchQueryBuilder3.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder3.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder3.getWriteableName());
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      MatchQueryBuilder.ZeroTermsQuery matchQueryBuilder_ZeroTermsQuery0 = MatchQueryBuilder.ZeroTermsQuery.ALL;
      MultiMatchQueryBuilder multiMatchQueryBuilder7 = multiMatchQueryBuilder1.zeroTermsQuery(matchQueryBuilder_ZeroTermsQuery0);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder7);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder6);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder7);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder6);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder7, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder7, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder7, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder7, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder7, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder7, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder7, multiMatchQueryBuilder6);
      assertNotNull(multiMatchQueryBuilder7);
      assertEquals("", multiMatchQueryBuilder0.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertEquals("", multiMatchQueryBuilder1.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder1.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder1.getWriteableName());
      assertEquals(1.0F, multiMatchQueryBuilder7.boost(), 0.01F);
      assertEquals("", multiMatchQueryBuilder7.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder7.getWriteableName());
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      ShapeBuilder.Orientation shapeBuilder_Orientation0 = ShapeBuilder.Orientation.RIGHT;
      MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder3.fuzzyRewrite(multiMatchQueryBuilder4.NAME);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder8);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder7);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder6);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder8, multiMatchQueryBuilder6);
      assertSame(multiMatchQueryBuilder8, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder8, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder8, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder8, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder8, multiMatchQueryBuilder7);
      assertSame(multiMatchQueryBuilder8, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder8, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder7);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder8);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder6);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder0);
      assertNotSame(string0, string1);
      assertNotSame(string0, string3);
      assertNotSame(string0, string2);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder6);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder8);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder7);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder8);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder7);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder6);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder6);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder7);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder8);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder2);
      assertNotNull(multiMatchQueryBuilder8);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertEquals("", multiMatchQueryBuilder0.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertEquals(1.0F, multiMatchQueryBuilder8.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder8.getWriteableName());
      assertEquals("", multiMatchQueryBuilder8.queryName());
      assertEquals("", multiMatchQueryBuilder1.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder1.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder1.getWriteableName());
      assertEquals(1.0F, multiMatchQueryBuilder2.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder2.getWriteableName());
      assertEquals("", multiMatchQueryBuilder2.queryName());
      assertEquals("", multiMatchQueryBuilder3.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder3.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder3.getWriteableName());
      assertEquals(1.0F, multiMatchQueryBuilder4.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder4.getWriteableName());
      assertEquals("", multiMatchQueryBuilder4.queryName());
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      PolygonBuilder polygonBuilder0 = new PolygonBuilder(shapeBuilder_Orientation0);
      assertNotNull(polygonBuilder0);
      assertEquals(ShapeBuilder.GeoShapeType.POLYGON, polygonBuilder0.type());
      assertEquals(180.0, ShapeBuilder.DATELINE, 0.01);
      
      // Undeclared exception!
      try { 
        multiMatchQueryBuilder0.type((Object) polygonBuilder0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // failed to parse [java.lang.String@0000000139] query type [java.lang.String@0000000140]. unknown type.
         //
         verifyException("org.elasticsearch.index.query.MultiMatchQueryBuilder$Type", e);
      }
  }

  @Test(timeout = 11000)
  public void test33()  throws Throwable  {
      String[] stringArray0 = new String[3];
      String string0 = "";
      stringArray0[0] = string0;
      String string1 = "org.elasticsearch.common.network.NetworkService";
      stringArray0[1] = string1;
      String string2 = "FilterStrategy must not be null";
      stringArray0[2] = string2;
      MatchQueryBuilder.ZeroTermsQuery matchQueryBuilder_ZeroTermsQuery0 = MatchQueryBuilder.ZeroTermsQuery.ALL;
      int int0 = 0;
      float float0 = (-3159.97F);
      MultiMatchQueryBuilder multiMatchQueryBuilder0 = new MultiMatchQueryBuilder(stringArray0[0], stringArray0);
      assertEquals(3, stringArray0.length);
      assertNotNull(multiMatchQueryBuilder0);
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      MultiMatchQueryBuilder.Type multiMatchQueryBuilder_Type0 = MultiMatchQueryBuilder.Type.MOST_FIELDS;
      MultiMatchQueryBuilder multiMatchQueryBuilder1 = multiMatchQueryBuilder0.type(multiMatchQueryBuilder_Type0);
      assertEquals(3, stringArray0.length);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder0);
      assertNotNull(multiMatchQueryBuilder1);
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertEquals(1.0F, multiMatchQueryBuilder1.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder1.getWriteableName());
      assertNull(multiMatchQueryBuilder1.queryName());
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      MultiMatchQueryBuilder multiMatchQueryBuilder2 = multiMatchQueryBuilder1.slop(int0);
      assertEquals(3, stringArray0.length);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder0);
      assertNotNull(multiMatchQueryBuilder2);
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertEquals(1.0F, multiMatchQueryBuilder1.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder1.getWriteableName());
      assertNull(multiMatchQueryBuilder1.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder2.getWriteableName());
      assertNull(multiMatchQueryBuilder2.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder2.boost(), 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      String string3 = "t[-0b|&n";
      String string4 = multiMatchQueryBuilder1.toString();
      assertEquals(3, stringArray0.length);
      assertEquals("{\n  \"multi_match\" : {\n    \"query\" : \"\",\n    \"fields\" : [ \"\", \"org.elasticsearch.common.network.NetworkService\", \"FilterStrategy must not be null\" ],\n    \"type\" : \"most_fields\",\n    \"slop\" : 0,\n    \"boost\" : 1.0\n  }\n}", string4);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder0);
      assertNotSame(string4, string1);
      assertNotSame(string4, string0);
      assertNotSame(string4, string3);
      assertNotSame(string4, string2);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertEquals(1.0F, multiMatchQueryBuilder1.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder1.getWriteableName());
      assertNull(multiMatchQueryBuilder1.queryName());
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      MultiMatchQueryBuilder multiMatchQueryBuilder3 = multiMatchQueryBuilder2.fuzzyRewrite(string3);
      assertEquals(3, stringArray0.length);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder0);
      assertNotSame(string3, string1);
      assertNotSame(string3, string0);
      assertNotSame(string3, string4);
      assertNotSame(string3, string2);
      assertNotNull(multiMatchQueryBuilder3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string4));
      assertFalse(string3.equals((Object)string2));
      assertNull(multiMatchQueryBuilder3.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder3.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder3.getWriteableName());
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertEquals(1.0F, multiMatchQueryBuilder1.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder1.getWriteableName());
      assertNull(multiMatchQueryBuilder1.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder2.getWriteableName());
      assertNull(multiMatchQueryBuilder2.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder2.boost(), 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      // Undeclared exception!
      try { 
        multiMatchQueryBuilder3.type((Object) string1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // failed to parse [java.lang.String@0000000071] query type [java.lang.String@0000000072]. unknown type.
         //
         verifyException("org.elasticsearch.index.query.MultiMatchQueryBuilder$Type", e);
      }
  }

  @Test(timeout = 11000)
  public void test34()  throws Throwable  {
      MultiMatchQueryBuilder multiMatchQueryBuilder0 = MultiMatchQueryBuilder.PROTOTYPE;
      assertNotNull(multiMatchQueryBuilder0);
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertEquals(1.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      float float0 = (-1224.22F);
      MultiMatchQueryBuilder multiMatchQueryBuilder1 = multiMatchQueryBuilder0.tieBreaker(float0);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder0);
      assertNotNull(multiMatchQueryBuilder1);
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertEquals(1.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder1.getWriteableName());
      assertNull(multiMatchQueryBuilder1.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder1.boost(), 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      String string0 = "%Nz;Q{_dAX =d05WR<";
      MultiMatchQueryBuilder multiMatchQueryBuilder2 = multiMatchQueryBuilder1.analyzer(string0);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder1);
      assertNotNull(multiMatchQueryBuilder2);
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertEquals(1.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder1.getWriteableName());
      assertNull(multiMatchQueryBuilder1.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder1.boost(), 0.01F);
      assertEquals(1.0F, multiMatchQueryBuilder2.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder2.getWriteableName());
      assertNull(multiMatchQueryBuilder2.queryName());
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      int int0 = 563;
      MultiMatchQueryBuilder multiMatchQueryBuilder3 = multiMatchQueryBuilder2.prefixLength(int0);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder1);
      assertNotNull(multiMatchQueryBuilder3);
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertEquals(1.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder1.getWriteableName());
      assertNull(multiMatchQueryBuilder1.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder1.boost(), 0.01F);
      assertEquals(1.0F, multiMatchQueryBuilder2.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder2.getWriteableName());
      assertNull(multiMatchQueryBuilder2.queryName());
      assertNull(multiMatchQueryBuilder3.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder3.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder3.getWriteableName());
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      MultiMatchQueryBuilder multiMatchQueryBuilder4 = multiMatchQueryBuilder3.analyzer(multiMatchQueryBuilder0.NAME);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder2);
      assertNotNull(multiMatchQueryBuilder4);
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertEquals(1.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder1.getWriteableName());
      assertNull(multiMatchQueryBuilder1.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder1.boost(), 0.01F);
      assertEquals(1.0F, multiMatchQueryBuilder2.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder2.getWriteableName());
      assertNull(multiMatchQueryBuilder2.queryName());
      assertNull(multiMatchQueryBuilder3.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder3.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder3.getWriteableName());
      assertNull(multiMatchQueryBuilder4.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder4.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder4.getWriteableName());
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      float float1 = 0.0F;
      multiMatchQueryBuilder4.boost = float1;
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertEquals(0.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder1.getWriteableName());
      assertNull(multiMatchQueryBuilder1.queryName());
      assertEquals(0.0F, multiMatchQueryBuilder1.boost(), 0.01F);
      assertEquals(0.0F, multiMatchQueryBuilder2.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder2.getWriteableName());
      assertNull(multiMatchQueryBuilder2.queryName());
      assertNull(multiMatchQueryBuilder3.queryName());
      assertEquals(0.0F, multiMatchQueryBuilder3.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder3.getWriteableName());
      assertNull(multiMatchQueryBuilder4.queryName());
      assertEquals(0.0F, multiMatchQueryBuilder4.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder4.getWriteableName());
      
      MatchQueryBuilder.ZeroTermsQuery matchQueryBuilder_ZeroTermsQuery0 = MatchQueryBuilder.ZeroTermsQuery.NONE;
      MultiMatchQueryBuilder multiMatchQueryBuilder5 = multiMatchQueryBuilder3.zeroTermsQuery(matchQueryBuilder_ZeroTermsQuery0);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder5, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder5, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder5, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder5, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder5, multiMatchQueryBuilder3);
      assertNotNull(multiMatchQueryBuilder5);
      assertNotEquals(float0, float1, 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertEquals(0.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder1.getWriteableName());
      assertNull(multiMatchQueryBuilder1.queryName());
      assertEquals(0.0F, multiMatchQueryBuilder1.boost(), 0.01F);
      assertEquals(0.0F, multiMatchQueryBuilder2.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder2.getWriteableName());
      assertNull(multiMatchQueryBuilder2.queryName());
      assertNull(multiMatchQueryBuilder3.queryName());
      assertEquals(0.0F, multiMatchQueryBuilder3.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder3.getWriteableName());
      assertNull(multiMatchQueryBuilder5.queryName());
      assertEquals(0.0F, multiMatchQueryBuilder5.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder5.getWriteableName());
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
  }

  @Test(timeout = 11000)
  public void test35()  throws Throwable  {
      MultiMatchQueryBuilder multiMatchQueryBuilder0 = MultiMatchQueryBuilder.PROTOTYPE;
      assertNotNull(multiMatchQueryBuilder0);
      assertEquals(1.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      float float0 = (-2.4F);
      MultiMatchQueryBuilder multiMatchQueryBuilder1 = multiMatchQueryBuilder0.boost(float0);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder0);
      assertNotNull(multiMatchQueryBuilder1);
      assertEquals((-2.4F), multiMatchQueryBuilder0.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertEquals((-2.4F), multiMatchQueryBuilder1.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder1.getWriteableName());
      assertNull(multiMatchQueryBuilder1.queryName());
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      Object object0 = null;
      boolean boolean0 = multiMatchQueryBuilder0.equals(object0);
      assertFalse(boolean0);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder1);
      assertEquals((-2.4F), multiMatchQueryBuilder0.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      MultiMatchQueryBuilder multiMatchQueryBuilder2 = multiMatchQueryBuilder0.type(object0);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder0);
      assertNotNull(multiMatchQueryBuilder2);
      assertEquals((-2.4F), multiMatchQueryBuilder0.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertEquals((-2.4F), multiMatchQueryBuilder2.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder2.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder2.getWriteableName());
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      int int0 = 0;
      MultiMatchQueryBuilder multiMatchQueryBuilder3 = multiMatchQueryBuilder1.slop(int0);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder2);
      assertNotNull(multiMatchQueryBuilder3);
      assertEquals((-2.4F), multiMatchQueryBuilder0.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertEquals((-2.4F), multiMatchQueryBuilder1.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder1.getWriteableName());
      assertNull(multiMatchQueryBuilder1.queryName());
      assertNull(multiMatchQueryBuilder3.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder3.getWriteableName());
      assertEquals((-2.4F), multiMatchQueryBuilder3.boost(), 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte) (-41);
      byteArray0[0] = byte0;
      byte byte1 = (byte)24;
      byteArray0[1] = byte1;
      byte byte2 = (byte)1;
      byteArray0[2] = byte2;
      byte byte3 = (byte) (-27);
      byteArray0[3] = byte3;
      InputStreamStreamInput inputStreamStreamInput0 = (InputStreamStreamInput)StreamInput.wrap(byteArray0);
      assertEquals(4, byteArray0.length);
      assertNotNull(inputStreamStreamInput0);
      assertArrayEquals(new byte[] {(byte) (-41), (byte)24, (byte)1, (byte) (-27)}, byteArray0);
      
      // Undeclared exception!
      try { 
        multiMatchQueryBuilder3.readFrom(inputStreamStreamInput0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.index.query.AbstractQueryBuilder", e);
      }
  }

  @Test(timeout = 11000)
  public void test36()  throws Throwable  {
      LineStringBuilder lineStringBuilder0 = new LineStringBuilder();
      assertNotNull(lineStringBuilder0);
      assertEquals(ShapeBuilder.GeoShapeType.LINESTRING, lineStringBuilder0.type());
      assertEquals(180.0, ShapeBuilder.DATELINE, 0.01);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = lineStringBuilder0.FIELD_GEOMETRIES;
      MultiMatchQueryBuilder multiMatchQueryBuilder0 = new MultiMatchQueryBuilder(lineStringBuilder0, stringArray0);
      assertEquals(1, stringArray0.length);
      assertNotNull(multiMatchQueryBuilder0);
      assertEquals(ShapeBuilder.GeoShapeType.LINESTRING, lineStringBuilder0.type());
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertEquals(180.0, ShapeBuilder.DATELINE, 0.01);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      float float0 = 171.51373F;
      MultiMatchQueryBuilder multiMatchQueryBuilder1 = multiMatchQueryBuilder0.tieBreaker(float0);
      assertEquals(1, stringArray0.length);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder0);
      assertNotNull(multiMatchQueryBuilder1);
      assertEquals(ShapeBuilder.GeoShapeType.LINESTRING, lineStringBuilder0.type());
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertEquals("multi_match", multiMatchQueryBuilder1.getWriteableName());
      assertNull(multiMatchQueryBuilder1.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder1.boost(), 0.01F);
      assertEquals(180.0, ShapeBuilder.DATELINE, 0.01);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      String string0 = "";
      MultiMatchQueryBuilder multiMatchQueryBuilder2 = multiMatchQueryBuilder1.fuzzyRewrite(string0);
      assertEquals(1, stringArray0.length);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder0);
      assertNotNull(multiMatchQueryBuilder2);
      assertEquals(ShapeBuilder.GeoShapeType.LINESTRING, lineStringBuilder0.type());
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertEquals("multi_match", multiMatchQueryBuilder1.getWriteableName());
      assertNull(multiMatchQueryBuilder1.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder1.boost(), 0.01F);
      assertEquals(1.0F, multiMatchQueryBuilder2.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder2.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder2.getWriteableName());
      assertEquals(180.0, ShapeBuilder.DATELINE, 0.01);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      float float1 = 0.0F;
      MultiMatchQueryBuilder multiMatchQueryBuilder3 = multiMatchQueryBuilder2.cutoffFrequency(float1);
      assertEquals(1, stringArray0.length);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder1);
      assertNotNull(multiMatchQueryBuilder3);
      assertNotEquals(float0, float1, 0.01F);
      assertNotEquals(float1, float0, 0.01F);
      assertEquals(ShapeBuilder.GeoShapeType.LINESTRING, lineStringBuilder0.type());
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertEquals("multi_match", multiMatchQueryBuilder1.getWriteableName());
      assertNull(multiMatchQueryBuilder1.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder1.boost(), 0.01F);
      assertEquals(1.0F, multiMatchQueryBuilder2.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder2.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder2.getWriteableName());
      assertEquals("multi_match", multiMatchQueryBuilder3.getWriteableName());
      assertEquals(1.0F, multiMatchQueryBuilder3.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder3.queryName());
      assertEquals(180.0, ShapeBuilder.DATELINE, 0.01);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      MultiMatchQueryBuilder multiMatchQueryBuilder4 = multiMatchQueryBuilder3.fuzziness(multiMatchQueryBuilder2);
      assertEquals(1, stringArray0.length);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder1);
      assertNotNull(multiMatchQueryBuilder4);
      assertNotEquals(float0, float1, 0.01F);
      assertNotEquals(float1, float0, 0.01F);
      assertEquals(ShapeBuilder.GeoShapeType.LINESTRING, lineStringBuilder0.type());
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertEquals("multi_match", multiMatchQueryBuilder1.getWriteableName());
      assertNull(multiMatchQueryBuilder1.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder1.boost(), 0.01F);
      assertEquals(1.0F, multiMatchQueryBuilder2.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder2.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder2.getWriteableName());
      assertEquals("multi_match", multiMatchQueryBuilder3.getWriteableName());
      assertEquals(1.0F, multiMatchQueryBuilder3.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder3.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder4.getWriteableName());
      assertEquals(1.0F, multiMatchQueryBuilder4.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder4.queryName());
      assertEquals(180.0, ShapeBuilder.DATELINE, 0.01);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      XContentType xContentType0 = XContentType.CBOR;
      BytesReference bytesReference0 = multiMatchQueryBuilder0.buildAsBytes(xContentType0);
      assertEquals(1, stringArray0.length);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder2);
      assertNotNull(bytesReference0);
      assertEquals(ShapeBuilder.GeoShapeType.LINESTRING, lineStringBuilder0.type());
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertEquals(214, bytesReference0.length());
      assertTrue(bytesReference0.hasArray());
      assertEquals(180.0, ShapeBuilder.DATELINE, 0.01);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      String string1 = "";
      MultiMatchQueryBuilder multiMatchQueryBuilder5 = multiMatchQueryBuilder2.minimumShouldMatch(string1);
      assertEquals(1, stringArray0.length);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder5);
      assertSame(string0, string1);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder0);
      assertSame(string1, string0);
      assertSame(multiMatchQueryBuilder5, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder5, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder5, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder5, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder5, multiMatchQueryBuilder1);
      assertNotNull(multiMatchQueryBuilder5);
      assertNotEquals(float0, float1, 0.01F);
      assertEquals(ShapeBuilder.GeoShapeType.LINESTRING, lineStringBuilder0.type());
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertEquals("multi_match", multiMatchQueryBuilder1.getWriteableName());
      assertNull(multiMatchQueryBuilder1.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder1.boost(), 0.01F);
      assertEquals(1.0F, multiMatchQueryBuilder2.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder2.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder2.getWriteableName());
      assertEquals("multi_match", multiMatchQueryBuilder5.getWriteableName());
      assertEquals(1.0F, multiMatchQueryBuilder5.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder5.queryName());
      assertEquals(180.0, ShapeBuilder.DATELINE, 0.01);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      String string2 = "!tX5";
      MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.analyzer(string2);
      assertEquals(1, stringArray0.length);
      assertSame(multiMatchQueryBuilder6, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder6, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder6, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder6, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder6, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder6, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder6);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder6);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder5);
      assertNotSame(string0, string2);
      assertSame(string0, string1);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder6);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder6);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder6);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder1);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotNull(multiMatchQueryBuilder6);
      assertNotEquals(float0, float1, 0.01F);
      assertFalse(string0.equals((Object)string2));
      assertNotEquals(float1, float0, 0.01F);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(1.0F, multiMatchQueryBuilder6.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder6.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder6.getWriteableName());
      assertEquals(ShapeBuilder.GeoShapeType.LINESTRING, lineStringBuilder0.type());
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertEquals("multi_match", multiMatchQueryBuilder1.getWriteableName());
      assertNull(multiMatchQueryBuilder1.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder1.boost(), 0.01F);
      assertEquals(1.0F, multiMatchQueryBuilder2.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder2.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder2.getWriteableName());
      assertEquals("multi_match", multiMatchQueryBuilder3.getWriteableName());
      assertEquals(1.0F, multiMatchQueryBuilder3.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder3.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder4.getWriteableName());
      assertEquals(1.0F, multiMatchQueryBuilder4.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder4.queryName());
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(180.0, ShapeBuilder.DATELINE, 0.01);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      MultiMatchQueryBuilder multiMatchQueryBuilder7 = multiMatchQueryBuilder6.analyzer(lineStringBuilder0.FIELD_ORIENTATION);
      assertEquals(1, stringArray0.length);
      assertSame(multiMatchQueryBuilder6, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder6, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder6, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder6, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder6, multiMatchQueryBuilder7);
      assertSame(multiMatchQueryBuilder6, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder6, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder7, multiMatchQueryBuilder6);
      assertSame(multiMatchQueryBuilder7, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder7, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder7, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder7, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder7, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder7, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder7);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder6);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder7);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder6);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder5);
      assertNotSame(string0, string2);
      assertSame(string0, string1);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder7);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder6);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder7);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder6);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder7);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder6);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder1);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotNull(multiMatchQueryBuilder7);
      assertNotEquals(float0, float1, 0.01F);
      assertFalse(string0.equals((Object)string2));
      assertNotEquals(float1, float0, 0.01F);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(1.0F, multiMatchQueryBuilder6.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder6.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder6.getWriteableName());
      assertEquals(ShapeBuilder.GeoShapeType.LINESTRING, lineStringBuilder0.type());
      assertEquals(1.0F, multiMatchQueryBuilder7.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder7.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder7.getWriteableName());
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertEquals("multi_match", multiMatchQueryBuilder1.getWriteableName());
      assertNull(multiMatchQueryBuilder1.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder1.boost(), 0.01F);
      assertEquals(1.0F, multiMatchQueryBuilder2.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder2.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder2.getWriteableName());
      assertEquals("multi_match", multiMatchQueryBuilder3.getWriteableName());
      assertEquals(1.0F, multiMatchQueryBuilder3.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder3.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder4.getWriteableName());
      assertEquals(1.0F, multiMatchQueryBuilder4.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder4.queryName());
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(180.0, ShapeBuilder.DATELINE, 0.01);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
  }

  @Test(timeout = 11000)
  public void test37()  throws Throwable  {
      MultiMatchQueryBuilder multiMatchQueryBuilder0 = MultiMatchQueryBuilder.PROTOTYPE;
      assertNotNull(multiMatchQueryBuilder0);
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertEquals(1.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      float float0 = (-375.23752F);
      MultiMatchQueryBuilder multiMatchQueryBuilder1 = multiMatchQueryBuilder0.boost(float0);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder0);
      assertNotNull(multiMatchQueryBuilder1);
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertEquals((-375.23752F), multiMatchQueryBuilder0.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals((-375.23752F), multiMatchQueryBuilder1.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder1.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder1.getWriteableName());
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      MultiMatchQueryBuilder.Type multiMatchQueryBuilder_Type0 = MultiMatchQueryBuilder.Type.PHRASE;
      MultiMatchQueryBuilder multiMatchQueryBuilder2 = multiMatchQueryBuilder1.fuzzyRewrite(multiMatchQueryBuilder0.NAME);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder1);
      assertNotNull(multiMatchQueryBuilder2);
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertEquals((-375.23752F), multiMatchQueryBuilder0.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals((-375.23752F), multiMatchQueryBuilder1.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder1.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder1.getWriteableName());
      assertEquals("multi_match", multiMatchQueryBuilder2.getWriteableName());
      assertEquals((-375.23752F), multiMatchQueryBuilder2.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder2.queryName());
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      MultiMatchQueryBuilder multiMatchQueryBuilder3 = multiMatchQueryBuilder0.type(multiMatchQueryBuilder_Type0);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder1);
      assertNotNull(multiMatchQueryBuilder3);
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertEquals((-375.23752F), multiMatchQueryBuilder0.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder0.queryName());
      assertNull(multiMatchQueryBuilder3.queryName());
      assertEquals((-375.23752F), multiMatchQueryBuilder3.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder3.getWriteableName());
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      // Undeclared exception!
      try { 
        multiMatchQueryBuilder1.type((Object) multiMatchQueryBuilder_Type0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // failed to parse [java.lang.String@0000000036] query type [java.lang.String@0000000037]. unknown type.
         //
         verifyException("org.elasticsearch.index.query.MultiMatchQueryBuilder$Type", e);
      }
  }

  @Test(timeout = 11000)
  public void test38()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      String string0 = "phrase";
      boolean boolean0 = FileSystemHandling.appendLineToFile(evoSuiteFile0, string0);
      assertFalse(boolean0);
      
      EvoSuiteFile evoSuiteFile1 = null;
      String string1 = "JPuRs,UH";
      boolean boolean1 = FileSystemHandling.appendStringToFile(evoSuiteFile1, string1);
      assertFalse(boolean1);
      assertNotSame(string1, string0);
      assertFalse(string1.equals((Object)string0));
      assertTrue(boolean1 == boolean0);
      
      EvoSuiteFile evoSuiteFile2 = null;
      String string2 = " WGxt$y>B3%O";
      boolean boolean2 = FileSystemHandling.appendStringToFile(evoSuiteFile2, string2);
      assertFalse(boolean2);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      long long0 = 1000000000000L;
      System.setCurrentTimeMillis(long0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = string2;
      boolean boolean3 = FileSystemHandling.appendLineToFile(evoSuiteFile1, stringArray0[0]);
      assertEquals(1, stringArray0.length);
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      
      MultiMatchQueryBuilder multiMatchQueryBuilder0 = new MultiMatchQueryBuilder(evoSuiteFile2, stringArray0);
      assertEquals(1, stringArray0.length);
      assertNotNull(multiMatchQueryBuilder0);
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      MultiMatchQueryBuilder multiMatchQueryBuilder1 = multiMatchQueryBuilder0.useDisMax(boolean2);
      assertEquals(1, stringArray0.length);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder0);
      assertNotNull(multiMatchQueryBuilder1);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertTrue(boolean2 == boolean3);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertEquals(1.0F, multiMatchQueryBuilder1.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder1.getWriteableName());
      assertNull(multiMatchQueryBuilder1.queryName());
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      MultiMatchQueryBuilder multiMatchQueryBuilder2 = multiMatchQueryBuilder1.tieBreaker(multiMatchQueryBuilder0.DEFAULT_BOOST);
      assertEquals(1, stringArray0.length);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder0);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder0);
      assertNotNull(multiMatchQueryBuilder2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertTrue(boolean2 == boolean3);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertEquals("multi_match", multiMatchQueryBuilder2.getWriteableName());
      assertNull(multiMatchQueryBuilder2.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder2.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertEquals(1.0F, multiMatchQueryBuilder1.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder1.getWriteableName());
      assertNull(multiMatchQueryBuilder1.queryName());
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      float float0 = 0.0F;
      multiMatchQueryBuilder2.boost = float0;
      assertEquals("multi_match", multiMatchQueryBuilder2.getWriteableName());
      assertNull(multiMatchQueryBuilder2.queryName());
      assertEquals(0.0F, multiMatchQueryBuilder2.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals(0.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertEquals(0.0F, multiMatchQueryBuilder1.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder1.getWriteableName());
      assertNull(multiMatchQueryBuilder1.queryName());
      
      MultiMatchQueryBuilder.Type multiMatchQueryBuilder_Type0 = MultiMatchQueryBuilder.Type.MOST_FIELDS;
      MultiMatchQueryBuilder multiMatchQueryBuilder3 = multiMatchQueryBuilder2.type(multiMatchQueryBuilder_Type0);
      assertEquals(1, stringArray0.length);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder2);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder0);
      assertNotNull(multiMatchQueryBuilder3);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertTrue(boolean2 == boolean3);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertEquals("multi_match", multiMatchQueryBuilder2.getWriteableName());
      assertNull(multiMatchQueryBuilder2.queryName());
      assertEquals(0.0F, multiMatchQueryBuilder2.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder3.queryName());
      assertEquals(0.0F, multiMatchQueryBuilder3.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder3.getWriteableName());
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals(0.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertEquals(0.0F, multiMatchQueryBuilder1.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder1.getWriteableName());
      assertNull(multiMatchQueryBuilder1.queryName());
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      MultiMatchQueryBuilder multiMatchQueryBuilder4 = multiMatchQueryBuilder2.rewrite(multiMatchQueryBuilder1.NAME);
      assertEquals(1, stringArray0.length);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder3);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder0);
      assertNotNull(multiMatchQueryBuilder4);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertTrue(boolean2 == boolean3);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertEquals("multi_match", multiMatchQueryBuilder2.getWriteableName());
      assertNull(multiMatchQueryBuilder2.queryName());
      assertEquals(0.0F, multiMatchQueryBuilder2.boost(), 0.01F);
      assertEquals(0.0F, multiMatchQueryBuilder4.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder4.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder4.getWriteableName());
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals(0.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertEquals(0.0F, multiMatchQueryBuilder1.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder1.getWriteableName());
      assertNull(multiMatchQueryBuilder1.queryName());
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      boolean boolean4 = false;
      MultiMatchQueryBuilder multiMatchQueryBuilder5 = multiMatchQueryBuilder4.lenient(boolean4);
      assertEquals(1, stringArray0.length);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder5, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder5, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder5, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder5, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder5, multiMatchQueryBuilder0);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder0);
      assertNotNull(multiMatchQueryBuilder5);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertTrue(boolean2 == boolean4);
      assertTrue(boolean2 == boolean3);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertEquals("multi_match", multiMatchQueryBuilder2.getWriteableName());
      assertNull(multiMatchQueryBuilder2.queryName());
      assertEquals(0.0F, multiMatchQueryBuilder2.boost(), 0.01F);
      assertEquals(0.0F, multiMatchQueryBuilder4.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder4.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder4.getWriteableName());
      assertEquals("multi_match", multiMatchQueryBuilder5.getWriteableName());
      assertNull(multiMatchQueryBuilder5.queryName());
      assertEquals(0.0F, multiMatchQueryBuilder5.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals(0.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertEquals(0.0F, multiMatchQueryBuilder1.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder1.getWriteableName());
      assertNull(multiMatchQueryBuilder1.queryName());
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder5.field(multiMatchQueryBuilder4.NAME);
      assertEquals(1, stringArray0.length);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder6);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder6);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder5, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder5, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder5, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder5, multiMatchQueryBuilder6);
      assertSame(multiMatchQueryBuilder5, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder5, multiMatchQueryBuilder0);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertSame(multiMatchQueryBuilder6, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder6, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder6, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder6, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder6, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder6, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder6);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder6);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder0);
      assertNotNull(multiMatchQueryBuilder6);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertTrue(boolean2 == boolean4);
      assertTrue(boolean2 == boolean3);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertEquals("multi_match", multiMatchQueryBuilder2.getWriteableName());
      assertNull(multiMatchQueryBuilder2.queryName());
      assertEquals(0.0F, multiMatchQueryBuilder2.boost(), 0.01F);
      assertEquals(0.0F, multiMatchQueryBuilder4.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder4.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder4.getWriteableName());
      assertEquals("multi_match", multiMatchQueryBuilder5.getWriteableName());
      assertNull(multiMatchQueryBuilder5.queryName());
      assertEquals(0.0F, multiMatchQueryBuilder5.boost(), 0.01F);
      assertEquals(0.0F, multiMatchQueryBuilder6.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder6.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder6.getWriteableName());
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals(0.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertEquals(0.0F, multiMatchQueryBuilder1.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder1.getWriteableName());
      assertNull(multiMatchQueryBuilder1.queryName());
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      String string3 = "P2bs3Vt8]YPi>;t'\"";
      multiMatchQueryBuilder6.queryName = string3;
      assertEquals("P2bs3Vt8]YPi>;t'\"", multiMatchQueryBuilder2.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder2.getWriteableName());
      assertEquals(0.0F, multiMatchQueryBuilder2.boost(), 0.01F);
      assertEquals("P2bs3Vt8]YPi>;t'\"", multiMatchQueryBuilder4.queryName());
      assertEquals(0.0F, multiMatchQueryBuilder4.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder4.getWriteableName());
      assertEquals("multi_match", multiMatchQueryBuilder5.getWriteableName());
      assertEquals("P2bs3Vt8]YPi>;t'\"", multiMatchQueryBuilder5.queryName());
      assertEquals(0.0F, multiMatchQueryBuilder5.boost(), 0.01F);
      assertEquals(0.0F, multiMatchQueryBuilder6.boost(), 0.01F);
      assertEquals("P2bs3Vt8]YPi>;t'\"", multiMatchQueryBuilder6.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder6.getWriteableName());
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertEquals("P2bs3Vt8]YPi>;t'\"", multiMatchQueryBuilder0.queryName());
      assertEquals(0.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertEquals(0.0F, multiMatchQueryBuilder1.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder1.getWriteableName());
      assertEquals("P2bs3Vt8]YPi>;t'\"", multiMatchQueryBuilder1.queryName());
      
      String string4 = "query";
      MultiMatchQueryBuilder multiMatchQueryBuilder7 = multiMatchQueryBuilder5.fuzzyRewrite(string4);
      assertEquals(1, stringArray0.length);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder6);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder7);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder6);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder7);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder5, multiMatchQueryBuilder7);
      assertSame(multiMatchQueryBuilder5, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder5, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder5, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder5, multiMatchQueryBuilder6);
      assertSame(multiMatchQueryBuilder5, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder5, multiMatchQueryBuilder0);
      assertNotSame(string2, string3);
      assertNotSame(string2, string0);
      assertNotSame(string2, string4);
      assertNotSame(string2, string1);
      assertNotSame(string4, string3);
      assertNotSame(string4, string0);
      assertNotSame(string4, string2);
      assertNotSame(string4, string1);
      assertSame(multiMatchQueryBuilder7, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder7, multiMatchQueryBuilder6);
      assertSame(multiMatchQueryBuilder7, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder7, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder7, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder7, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder7, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder7);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder6);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder7);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder6);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder0);
      assertNotNull(multiMatchQueryBuilder7);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean2);
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string4));
      assertFalse(string2.equals((Object)string1));
      assertTrue(boolean2 == boolean4);
      assertTrue(boolean2 == boolean3);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertEquals("P2bs3Vt8]YPi>;t'\"", multiMatchQueryBuilder2.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder2.getWriteableName());
      assertEquals(0.0F, multiMatchQueryBuilder2.boost(), 0.01F);
      assertEquals("P2bs3Vt8]YPi>;t'\"", multiMatchQueryBuilder4.queryName());
      assertEquals(0.0F, multiMatchQueryBuilder4.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder4.getWriteableName());
      assertEquals("multi_match", multiMatchQueryBuilder5.getWriteableName());
      assertEquals("P2bs3Vt8]YPi>;t'\"", multiMatchQueryBuilder5.queryName());
      assertEquals(0.0F, multiMatchQueryBuilder5.boost(), 0.01F);
      assertEquals("P2bs3Vt8]YPi>;t'\"", multiMatchQueryBuilder7.queryName());
      assertEquals(0.0F, multiMatchQueryBuilder7.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder7.getWriteableName());
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertEquals("P2bs3Vt8]YPi>;t'\"", multiMatchQueryBuilder0.queryName());
      assertEquals(0.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertEquals(0.0F, multiMatchQueryBuilder1.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder1.getWriteableName());
      assertEquals("P2bs3Vt8]YPi>;t'\"", multiMatchQueryBuilder1.queryName());
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder5.field(string4, float0);
      assertEquals(1, stringArray0.length);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder6);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder8);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder7);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder6);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder7);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder8);
      assertSame(multiMatchQueryBuilder5, multiMatchQueryBuilder7);
      assertSame(multiMatchQueryBuilder5, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder5, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder5, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder5, multiMatchQueryBuilder8);
      assertSame(multiMatchQueryBuilder5, multiMatchQueryBuilder6);
      assertSame(multiMatchQueryBuilder5, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder5, multiMatchQueryBuilder0);
      assertNotSame(string2, string3);
      assertNotSame(string2, string0);
      assertNotSame(string2, string4);
      assertNotSame(string2, string1);
      assertNotSame(string4, string3);
      assertNotSame(string4, string0);
      assertNotSame(string4, string2);
      assertNotSame(string4, string1);
      assertSame(multiMatchQueryBuilder8, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder8, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder8, multiMatchQueryBuilder7);
      assertSame(multiMatchQueryBuilder8, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder8, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder8, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder8, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder8, multiMatchQueryBuilder6);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder7);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder6);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder8);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder7);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder8);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder6);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder0);
      assertNotNull(multiMatchQueryBuilder8);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean2);
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string4));
      assertFalse(string2.equals((Object)string1));
      assertTrue(boolean2 == boolean4);
      assertTrue(boolean2 == boolean3);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertEquals("P2bs3Vt8]YPi>;t'\"", multiMatchQueryBuilder2.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder2.getWriteableName());
      assertEquals(0.0F, multiMatchQueryBuilder2.boost(), 0.01F);
      assertEquals("P2bs3Vt8]YPi>;t'\"", multiMatchQueryBuilder4.queryName());
      assertEquals(0.0F, multiMatchQueryBuilder4.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder4.getWriteableName());
      assertEquals("multi_match", multiMatchQueryBuilder5.getWriteableName());
      assertEquals("P2bs3Vt8]YPi>;t'\"", multiMatchQueryBuilder5.queryName());
      assertEquals(0.0F, multiMatchQueryBuilder5.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder8.getWriteableName());
      assertEquals("P2bs3Vt8]YPi>;t'\"", multiMatchQueryBuilder8.queryName());
      assertEquals(0.0F, multiMatchQueryBuilder8.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertEquals("P2bs3Vt8]YPi>;t'\"", multiMatchQueryBuilder0.queryName());
      assertEquals(0.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertEquals(0.0F, multiMatchQueryBuilder1.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder1.getWriteableName());
      assertEquals("P2bs3Vt8]YPi>;t'\"", multiMatchQueryBuilder1.queryName());
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      int int0 = 728;
      MultiMatchQueryBuilder multiMatchQueryBuilder9 = multiMatchQueryBuilder0.maxExpansions(int0);
      assertEquals(1, stringArray0.length);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder9);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder7);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder6);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder8);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder9, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder9, multiMatchQueryBuilder7);
      assertSame(multiMatchQueryBuilder9, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder9, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder9, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder9, multiMatchQueryBuilder8);
      assertSame(multiMatchQueryBuilder9, multiMatchQueryBuilder6);
      assertSame(multiMatchQueryBuilder9, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder9, multiMatchQueryBuilder4);
      assertNotNull(multiMatchQueryBuilder9);
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertEquals("P2bs3Vt8]YPi>;t'\"", multiMatchQueryBuilder0.queryName());
      assertEquals(0.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder9.getWriteableName());
      assertEquals("P2bs3Vt8]YPi>;t'\"", multiMatchQueryBuilder9.queryName());
      assertEquals(0.0F, multiMatchQueryBuilder9.boost(), 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      long long1 = (-876L);
      System.setCurrentTimeMillis(long1);
      assertFalse(long1 == long0);
      
      Random.setNextRandom(int0);
      String string5 = multiMatchQueryBuilder7.getWriteableName();
      assertEquals(1, stringArray0.length);
      assertEquals("multi_match", string5);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder6);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder8);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder9);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder7);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder4);
      assertNotSame(string5, string0);
      assertNotSame(string5, string1);
      assertNotSame(string5, string2);
      assertNotSame(string5, string4);
      assertNotSame(string5, string3);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder6);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder7);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder9);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder8);
      assertSame(multiMatchQueryBuilder5, multiMatchQueryBuilder9);
      assertSame(multiMatchQueryBuilder5, multiMatchQueryBuilder7);
      assertSame(multiMatchQueryBuilder5, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder5, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder5, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder5, multiMatchQueryBuilder8);
      assertSame(multiMatchQueryBuilder5, multiMatchQueryBuilder6);
      assertSame(multiMatchQueryBuilder5, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder5, multiMatchQueryBuilder0);
      assertNotSame(string2, string3);
      assertNotSame(string2, string0);
      assertNotSame(string2, string5);
      assertNotSame(string2, string4);
      assertNotSame(string2, string1);
      assertNotSame(string4, string3);
      assertNotSame(string4, string5);
      assertNotSame(string4, string0);
      assertNotSame(string4, string2);
      assertNotSame(string4, string1);
      assertSame(multiMatchQueryBuilder7, multiMatchQueryBuilder8);
      assertSame(multiMatchQueryBuilder7, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder7, multiMatchQueryBuilder6);
      assertSame(multiMatchQueryBuilder7, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder7, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder7, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder7, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder7, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder7, multiMatchQueryBuilder9);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder9);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder7);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder6);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder8);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder7);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder8);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder6);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder9);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder0);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean2);
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string4));
      assertFalse(string2.equals((Object)string1));
      assertTrue(boolean2 == boolean4);
      assertTrue(boolean2 == boolean3);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertEquals("P2bs3Vt8]YPi>;t'\"", multiMatchQueryBuilder2.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder2.getWriteableName());
      assertEquals(0.0F, multiMatchQueryBuilder2.boost(), 0.01F);
      assertEquals("P2bs3Vt8]YPi>;t'\"", multiMatchQueryBuilder4.queryName());
      assertEquals(0.0F, multiMatchQueryBuilder4.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder4.getWriteableName());
      assertEquals("multi_match", multiMatchQueryBuilder5.getWriteableName());
      assertEquals("P2bs3Vt8]YPi>;t'\"", multiMatchQueryBuilder5.queryName());
      assertEquals(0.0F, multiMatchQueryBuilder5.boost(), 0.01F);
      assertEquals("P2bs3Vt8]YPi>;t'\"", multiMatchQueryBuilder7.queryName());
      assertEquals(0.0F, multiMatchQueryBuilder7.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder7.getWriteableName());
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertEquals("P2bs3Vt8]YPi>;t'\"", multiMatchQueryBuilder0.queryName());
      assertEquals(0.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertEquals(0.0F, multiMatchQueryBuilder1.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder1.getWriteableName());
      assertEquals("P2bs3Vt8]YPi>;t'\"", multiMatchQueryBuilder1.queryName());
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
  }

  @Test(timeout = 11000)
  public void test39()  throws Throwable  {
      MultiMatchQueryBuilder multiMatchQueryBuilder0 = MultiMatchQueryBuilder.PROTOTYPE;
      assertNotNull(multiMatchQueryBuilder0);
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertEquals(1.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      String string0 = "";
      MultiMatchQueryBuilder multiMatchQueryBuilder1 = multiMatchQueryBuilder0.rewrite(string0);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder0);
      assertNotNull(multiMatchQueryBuilder1);
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertEquals(1.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder0.queryName());
      assertNull(multiMatchQueryBuilder1.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder1.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder1.getWriteableName());
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      MultiMatchQueryBuilder multiMatchQueryBuilder2 = multiMatchQueryBuilder1.field(string0);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder1);
      assertNotNull(multiMatchQueryBuilder2);
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertEquals(1.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder0.queryName());
      assertNull(multiMatchQueryBuilder1.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder1.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder1.getWriteableName());
      assertEquals("multi_match", multiMatchQueryBuilder2.getWriteableName());
      assertEquals(1.0F, multiMatchQueryBuilder2.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder2.queryName());
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      Operator operator0 = Operator.OR;
      MultiMatchQueryBuilder multiMatchQueryBuilder3 = multiMatchQueryBuilder2.operator(operator0);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder2);
      assertNotNull(multiMatchQueryBuilder3);
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertEquals(1.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder0.queryName());
      assertNull(multiMatchQueryBuilder1.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder1.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder1.getWriteableName());
      assertEquals("multi_match", multiMatchQueryBuilder2.getWriteableName());
      assertEquals(1.0F, multiMatchQueryBuilder2.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder2.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder3.getWriteableName());
      assertEquals(1.0F, multiMatchQueryBuilder3.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder3.queryName());
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      String string1 = "phrase_prefix";
      float float0 = Float.NEGATIVE_INFINITY;
      MultiMatchQueryBuilder multiMatchQueryBuilder4 = multiMatchQueryBuilder3.field(string1, float0);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder4);
      assertNotSame(string0, string1);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder2);
      assertNotSame(string1, string0);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder2);
      assertNotNull(multiMatchQueryBuilder4);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertEquals(1.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder0.queryName());
      assertNull(multiMatchQueryBuilder1.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder1.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder1.getWriteableName());
      assertEquals("multi_match", multiMatchQueryBuilder2.getWriteableName());
      assertEquals(1.0F, multiMatchQueryBuilder2.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder2.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder3.getWriteableName());
      assertEquals(1.0F, multiMatchQueryBuilder3.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder3.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder4.getWriteableName());
      assertEquals(1.0F, multiMatchQueryBuilder4.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder4.queryName());
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      XContentType xContentType0 = XContentType.CBOR;
      BytesReference bytesReference0 = multiMatchQueryBuilder4.buildAsBytes(xContentType0);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder4);
      assertNotSame(string0, string1);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder2);
      assertNotSame(string1, string0);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder2);
      assertNotNull(bytesReference0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertEquals(1.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder0.queryName());
      assertNull(multiMatchQueryBuilder1.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder1.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder1.getWriteableName());
      assertEquals("multi_match", multiMatchQueryBuilder2.getWriteableName());
      assertEquals(1.0F, multiMatchQueryBuilder2.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder2.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder3.getWriteableName());
      assertEquals(1.0F, multiMatchQueryBuilder3.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder3.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder4.getWriteableName());
      assertEquals(1.0F, multiMatchQueryBuilder4.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder4.queryName());
      assertTrue(bytesReference0.hasArray());
      assertEquals(90, bytesReference0.length());
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      MatchQueryBuilder.ZeroTermsQuery matchQueryBuilder_ZeroTermsQuery0 = MatchQueryBuilder.ZeroTermsQuery.NONE;
      MultiMatchQueryBuilder multiMatchQueryBuilder5 = multiMatchQueryBuilder4.zeroTermsQuery(matchQueryBuilder_ZeroTermsQuery0);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder4);
      assertNotSame(string0, string1);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder2);
      assertNotSame(string1, string0);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder5, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder5, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder5, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder5, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder5, multiMatchQueryBuilder1);
      assertNotNull(multiMatchQueryBuilder5);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertEquals(1.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder0.queryName());
      assertNull(multiMatchQueryBuilder1.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder1.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder1.getWriteableName());
      assertEquals("multi_match", multiMatchQueryBuilder2.getWriteableName());
      assertEquals(1.0F, multiMatchQueryBuilder2.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder2.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder3.getWriteableName());
      assertEquals(1.0F, multiMatchQueryBuilder3.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder3.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder4.getWriteableName());
      assertEquals(1.0F, multiMatchQueryBuilder4.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder4.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder5.getWriteableName());
      assertEquals(1.0F, multiMatchQueryBuilder5.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder5.queryName());
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      byte[] byteArray0 = new byte[6];
      byte byte0 = (byte)0;
      byteArray0[0] = byte0;
      byte byte1 = (byte)0;
      byteArray0[1] = byte1;
      MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder3.prefixLength(byte1);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder6);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder4);
      assertNotSame(string0, string1);
      assertSame(multiMatchQueryBuilder6, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder6, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder6, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder6, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder6, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder6, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder6);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder6);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder6);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder2);
      assertNotNull(multiMatchQueryBuilder6);
      assertFalse(string0.equals((Object)string1));
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertEquals(1.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder0.queryName());
      assertNull(multiMatchQueryBuilder6.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder6.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder6.getWriteableName());
      assertNull(multiMatchQueryBuilder1.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder1.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder1.getWriteableName());
      assertEquals("multi_match", multiMatchQueryBuilder2.getWriteableName());
      assertEquals(1.0F, multiMatchQueryBuilder2.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder2.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder3.getWriteableName());
      assertEquals(1.0F, multiMatchQueryBuilder3.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder3.queryName());
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      byte byte2 = (byte)85;
      byteArray0[2] = byte2;
      byte byte3 = (byte)85;
      byteArray0[3] = byte3;
      byte byte4 = (byte) (-112);
      byteArray0[4] = byte4;
      byte byte5 = (byte)0;
      byteArray0[5] = byte5;
      int int0 = 0;
      StreamInput streamInput0 = StreamInput.wrap(byteArray0, int0, (int) byte2);
      assertEquals(6, byteArray0.length);
      assertNotNull(streamInput0);
      assertFalse(byte2 == byte0);
      assertFalse(byte2 == byte1);
      assertFalse(byte2 == byte4);
      assertFalse(byte2 == byte5);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)85, (byte)85, (byte) (-112), (byte)0}, byteArray0);
      
      String string2 = streamInput0.readOptionalString();
      assertEquals(6, byteArray0.length);
      assertNull(string2);
      assertFalse(byte2 == byte0);
      assertFalse(byte2 == byte1);
      assertFalse(byte2 == byte4);
      assertFalse(byte2 == byte5);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)85, (byte)85, (byte) (-112), (byte)0}, byteArray0);
      
      // Undeclared exception!
      try { 
        multiMatchQueryBuilder5.readFrom(streamInput0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.index.query.AbstractQueryBuilder", e);
      }
  }

  @Test(timeout = 11000)
  public void test40()  throws Throwable  {
      MultiMatchQueryBuilder multiMatchQueryBuilder0 = MultiMatchQueryBuilder.PROTOTYPE;
      assertNotNull(multiMatchQueryBuilder0);
      assertEquals(1.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      float float0 = (-772.5F);
      MultiMatchQueryBuilder multiMatchQueryBuilder1 = multiMatchQueryBuilder0.cutoffFrequency(float0);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder0);
      assertNotNull(multiMatchQueryBuilder1);
      assertEquals(1.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertEquals(1.0F, multiMatchQueryBuilder1.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder1.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder1.getWriteableName());
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      int int0 = 631;
      MultiMatchQueryBuilder multiMatchQueryBuilder2 = multiMatchQueryBuilder1.slop(int0);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder0);
      assertNotNull(multiMatchQueryBuilder2);
      assertEquals(1.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertEquals(1.0F, multiMatchQueryBuilder1.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder1.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder1.getWriteableName());
      assertEquals(1.0F, multiMatchQueryBuilder2.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder2.getWriteableName());
      assertNull(multiMatchQueryBuilder2.queryName());
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      boolean boolean0 = true;
      MultiMatchQueryBuilder multiMatchQueryBuilder3 = multiMatchQueryBuilder2.useDisMax(boolean0);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder1);
      assertNotNull(multiMatchQueryBuilder3);
      assertEquals(1.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertEquals(1.0F, multiMatchQueryBuilder1.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder1.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder1.getWriteableName());
      assertEquals(1.0F, multiMatchQueryBuilder2.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder2.getWriteableName());
      assertNull(multiMatchQueryBuilder2.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder3.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder3.getWriteableName());
      assertNull(multiMatchQueryBuilder3.queryName());
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      String string0 = "'Lql!R2^Cp~x}7 & ";
      float float1 = 0.0F;
      MultiMatchQueryBuilder multiMatchQueryBuilder4 = multiMatchQueryBuilder3.field(string0, float1);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder1);
      assertNotNull(multiMatchQueryBuilder4);
      assertNotEquals(float0, float1, 0.01F);
      assertNotEquals(float1, float0, 0.01F);
      assertEquals(1.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertEquals(1.0F, multiMatchQueryBuilder1.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder1.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder1.getWriteableName());
      assertEquals(1.0F, multiMatchQueryBuilder2.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder2.getWriteableName());
      assertNull(multiMatchQueryBuilder2.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder3.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder3.getWriteableName());
      assertNull(multiMatchQueryBuilder3.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder4.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder4.getWriteableName());
      assertNull(multiMatchQueryBuilder4.queryName());
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      float float2 = 0.0F;
      MultiMatchQueryBuilder multiMatchQueryBuilder5 = multiMatchQueryBuilder2.boost(float2);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder5, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder5, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder5, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder5, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder5, multiMatchQueryBuilder1);
      assertNotNull(multiMatchQueryBuilder5);
      assertNotEquals(float0, float2, 0.01F);
      assertNotEquals(float0, float1, 0.01F);
      assertEquals(float2, float1, 0.01F);
      assertNotEquals(float2, float0, 0.01F);
      assertEquals(0.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertEquals(0.0F, multiMatchQueryBuilder1.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder1.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder1.getWriteableName());
      assertEquals(0.0F, multiMatchQueryBuilder2.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder2.getWriteableName());
      assertNull(multiMatchQueryBuilder2.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder5.getWriteableName());
      assertEquals(0.0F, multiMatchQueryBuilder5.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder5.queryName());
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      MatchQueryBuilder.ZeroTermsQuery matchQueryBuilder_ZeroTermsQuery0 = MatchQueryBuilder.ZeroTermsQuery.ALL;
      MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.zeroTermsQuery(matchQueryBuilder_ZeroTermsQuery0);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder6);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder6);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder6);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder6);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder6);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder6, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder6, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder6, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder6, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder6, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder6, multiMatchQueryBuilder0);
      assertNotNull(multiMatchQueryBuilder6);
      assertNotEquals(float0, float2, 0.01F);
      assertNotEquals(float0, float1, 0.01F);
      assertEquals(float1, float2, 0.01F);
      assertNotEquals(float1, float0, 0.01F);
      assertEquals(0.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertEquals(0.0F, multiMatchQueryBuilder1.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder1.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder1.getWriteableName());
      assertEquals(0.0F, multiMatchQueryBuilder2.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder2.getWriteableName());
      assertNull(multiMatchQueryBuilder2.queryName());
      assertEquals(0.0F, multiMatchQueryBuilder3.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder3.getWriteableName());
      assertNull(multiMatchQueryBuilder3.queryName());
      assertEquals(0.0F, multiMatchQueryBuilder4.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder4.getWriteableName());
      assertNull(multiMatchQueryBuilder4.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder6.getWriteableName());
      assertNull(multiMatchQueryBuilder6.queryName());
      assertEquals(0.0F, multiMatchQueryBuilder6.boost(), 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      Operator operator0 = Operator.AND;
      MultiMatchQueryBuilder multiMatchQueryBuilder7 = multiMatchQueryBuilder6.operator(operator0);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder7);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder6);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder6);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder7);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder6);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder7);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder7);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder6);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder7);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder6);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder6, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder6, multiMatchQueryBuilder7);
      assertSame(multiMatchQueryBuilder6, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder6, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder6, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder6, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder6, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder7, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder7, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder7, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder7, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder7, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder7, multiMatchQueryBuilder6);
      assertSame(multiMatchQueryBuilder7, multiMatchQueryBuilder1);
      assertNotNull(multiMatchQueryBuilder7);
      assertNotEquals(float0, float2, 0.01F);
      assertNotEquals(float0, float1, 0.01F);
      assertEquals(float1, float2, 0.01F);
      assertNotEquals(float1, float0, 0.01F);
      assertEquals(0.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertEquals(0.0F, multiMatchQueryBuilder1.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder1.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder1.getWriteableName());
      assertEquals(0.0F, multiMatchQueryBuilder2.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder2.getWriteableName());
      assertNull(multiMatchQueryBuilder2.queryName());
      assertEquals(0.0F, multiMatchQueryBuilder3.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder3.getWriteableName());
      assertNull(multiMatchQueryBuilder3.queryName());
      assertEquals(0.0F, multiMatchQueryBuilder4.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder4.getWriteableName());
      assertNull(multiMatchQueryBuilder4.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder6.getWriteableName());
      assertNull(multiMatchQueryBuilder6.queryName());
      assertEquals(0.0F, multiMatchQueryBuilder6.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder7.queryName());
      assertEquals(0.0F, multiMatchQueryBuilder7.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder7.getWriteableName());
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      int int1 = 1642;
      MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder0.slop(int1);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder7);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder8);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder6);
      assertSame(multiMatchQueryBuilder8, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder8, multiMatchQueryBuilder6);
      assertSame(multiMatchQueryBuilder8, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder8, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder8, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder8, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder8, multiMatchQueryBuilder7);
      assertSame(multiMatchQueryBuilder8, multiMatchQueryBuilder3);
      assertNotNull(multiMatchQueryBuilder8);
      assertFalse(int1 == int0);
      assertEquals(0.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertEquals("multi_match", multiMatchQueryBuilder8.getWriteableName());
      assertNull(multiMatchQueryBuilder8.queryName());
      assertEquals(0.0F, multiMatchQueryBuilder8.boost(), 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
  }

  @Test(timeout = 11000)
  public void test41()  throws Throwable  {
      Object object0 = null;
      String[] stringArray0 = new String[7];
      String string0 = "qNof";
      stringArray0[0] = string0;
      String string1 = "org.elasticsearch.search.aggregations.bucket.filter.FilterAggregator";
      stringArray0[1] = string1;
      String string2 = "bool field can't be tokenized";
      stringArray0[2] = string2;
      String string3 = "";
      stringArray0[3] = string3;
      String string4 = "";
      stringArray0[4] = string4;
      String string5 = "CF#b$>";
      stringArray0[5] = string5;
      String string6 = "?h#@5ITan{{)W[^/K!";
      stringArray0[6] = string6;
      MultiMatchQueryBuilder multiMatchQueryBuilder0 = new MultiMatchQueryBuilder(object0, stringArray0);
      assertEquals(7, stringArray0.length);
      assertNotNull(multiMatchQueryBuilder0);
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertEquals(1.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      MultiMatchQueryBuilder.Type multiMatchQueryBuilder_Type0 = MultiMatchQueryBuilder.Type.PHRASE_PREFIX;
      MultiMatchQueryBuilder multiMatchQueryBuilder1 = multiMatchQueryBuilder0.type(multiMatchQueryBuilder_Type0);
      assertEquals(7, stringArray0.length);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder0);
      assertNotNull(multiMatchQueryBuilder1);
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertEquals(1.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder0.queryName());
      assertNull(multiMatchQueryBuilder1.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder1.getWriteableName());
      assertEquals(1.0F, multiMatchQueryBuilder1.boost(), 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      MultiMatchQueryBuilder multiMatchQueryBuilder2 = multiMatchQueryBuilder1.cutoffFrequency(multiMatchQueryBuilder0.DEFAULT_BOOST);
      assertEquals(7, stringArray0.length);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder0);
      assertNotNull(multiMatchQueryBuilder2);
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertEquals(1.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder0.queryName());
      assertNull(multiMatchQueryBuilder1.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder1.getWriteableName());
      assertEquals(1.0F, multiMatchQueryBuilder1.boost(), 0.01F);
      assertEquals(1.0F, multiMatchQueryBuilder2.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder2.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder2.getWriteableName());
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      MultiMatchQueryBuilder multiMatchQueryBuilder3 = multiMatchQueryBuilder2.field(stringArray0[5], multiMatchQueryBuilder1.DEFAULT_BOOST);
      assertEquals(7, stringArray0.length);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder1);
      assertNotNull(multiMatchQueryBuilder3);
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertEquals(1.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder0.queryName());
      assertNull(multiMatchQueryBuilder1.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder1.getWriteableName());
      assertEquals(1.0F, multiMatchQueryBuilder1.boost(), 0.01F);
      assertEquals(1.0F, multiMatchQueryBuilder2.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder2.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder2.getWriteableName());
      assertEquals(1.0F, multiMatchQueryBuilder3.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder3.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder3.getWriteableName());
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      MultiMatchQueryBuilder multiMatchQueryBuilder4 = multiMatchQueryBuilder3.analyzer(stringArray0[6]);
      assertEquals(7, stringArray0.length);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder1);
      assertNotNull(multiMatchQueryBuilder4);
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertEquals(1.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder0.queryName());
      assertNull(multiMatchQueryBuilder1.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder1.getWriteableName());
      assertEquals(1.0F, multiMatchQueryBuilder1.boost(), 0.01F);
      assertEquals(1.0F, multiMatchQueryBuilder2.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder2.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder2.getWriteableName());
      assertEquals(1.0F, multiMatchQueryBuilder3.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder3.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder3.getWriteableName());
      assertEquals("multi_match", multiMatchQueryBuilder4.getWriteableName());
      assertEquals(1.0F, multiMatchQueryBuilder4.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder4.queryName());
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      String string7 = "Fk:-";
      MultiMatchQueryBuilder multiMatchQueryBuilder5 = multiMatchQueryBuilder4.rewrite(string7);
      assertEquals(7, stringArray0.length);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder1);
      assertNotSame(string7, string4);
      assertNotSame(string7, string2);
      assertNotSame(string7, string6);
      assertNotSame(string7, string0);
      assertNotSame(string7, string1);
      assertNotSame(string7, string3);
      assertNotSame(string7, string5);
      assertSame(multiMatchQueryBuilder5, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder5, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder5, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder5, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder5, multiMatchQueryBuilder1);
      assertNotNull(multiMatchQueryBuilder5);
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string5));
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertEquals(1.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder0.queryName());
      assertNull(multiMatchQueryBuilder1.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder1.getWriteableName());
      assertEquals(1.0F, multiMatchQueryBuilder1.boost(), 0.01F);
      assertEquals(1.0F, multiMatchQueryBuilder2.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder2.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder2.getWriteableName());
      assertEquals(1.0F, multiMatchQueryBuilder3.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder3.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder3.getWriteableName());
      assertEquals("multi_match", multiMatchQueryBuilder4.getWriteableName());
      assertEquals(1.0F, multiMatchQueryBuilder4.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder4.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder5.getWriteableName());
      assertNull(multiMatchQueryBuilder5.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder5.boost(), 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      float float0 = (-3667.69F);
      multiMatchQueryBuilder3.boost = float0;
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertEquals((-3667.69F), multiMatchQueryBuilder0.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals((-3667.69F), multiMatchQueryBuilder1.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder1.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder1.getWriteableName());
      assertNull(multiMatchQueryBuilder2.queryName());
      assertEquals((-3667.69F), multiMatchQueryBuilder2.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder2.getWriteableName());
      assertNull(multiMatchQueryBuilder3.queryName());
      assertEquals((-3667.69F), multiMatchQueryBuilder3.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder3.getWriteableName());
      
      MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder5.field(string4, multiMatchQueryBuilder2.DEFAULT_BOOST);
      assertEquals(7, stringArray0.length);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder6);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder6);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder6);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder6);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder6);
      assertNotSame(string7, string4);
      assertNotSame(string7, string2);
      assertNotSame(string7, string6);
      assertNotSame(string7, string0);
      assertNotSame(string7, string1);
      assertNotSame(string7, string3);
      assertNotSame(string7, string5);
      assertSame(multiMatchQueryBuilder5, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder5, multiMatchQueryBuilder6);
      assertSame(multiMatchQueryBuilder5, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder5, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder5, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder5, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder6, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder6, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder6, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder6, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder6, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder6, multiMatchQueryBuilder4);
      assertNotSame(string4, string0);
      assertSame(string4, string3);
      assertNotSame(string4, string6);
      assertNotSame(string4, string5);
      assertNotSame(string4, string1);
      assertNotSame(string4, string2);
      assertNotSame(string4, string7);
      assertNotNull(multiMatchQueryBuilder6);
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string6));
      assertFalse(string4.equals((Object)string5));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string7));
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertEquals((-3667.69F), multiMatchQueryBuilder0.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals((-3667.69F), multiMatchQueryBuilder1.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder1.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder1.getWriteableName());
      assertNull(multiMatchQueryBuilder2.queryName());
      assertEquals((-3667.69F), multiMatchQueryBuilder2.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder2.getWriteableName());
      assertNull(multiMatchQueryBuilder3.queryName());
      assertEquals((-3667.69F), multiMatchQueryBuilder3.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder3.getWriteableName());
      assertEquals((-3667.69F), multiMatchQueryBuilder4.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder4.getWriteableName());
      assertNull(multiMatchQueryBuilder4.queryName());
      assertEquals((-3667.69F), multiMatchQueryBuilder5.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder5.getWriteableName());
      assertNull(multiMatchQueryBuilder5.queryName());
      assertEquals((-3667.69F), multiMatchQueryBuilder6.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder6.getWriteableName());
      assertNull(multiMatchQueryBuilder6.queryName());
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      MultiMatchQueryBuilder multiMatchQueryBuilder7 = multiMatchQueryBuilder4.minimumShouldMatch(multiMatchQueryBuilder5.NAME);
      assertEquals(7, stringArray0.length);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder7);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder6);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder6);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder7);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder6);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder7);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder7);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder6);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder7);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder6);
      assertNotSame(string7, string4);
      assertNotSame(string7, string2);
      assertNotSame(string7, string6);
      assertNotSame(string7, string0);
      assertNotSame(string7, string1);
      assertNotSame(string7, string3);
      assertNotSame(string7, string5);
      assertSame(multiMatchQueryBuilder5, multiMatchQueryBuilder7);
      assertSame(multiMatchQueryBuilder5, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder5, multiMatchQueryBuilder6);
      assertSame(multiMatchQueryBuilder5, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder5, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder5, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder5, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder7, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder7, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder7, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder7, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder7, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder7, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder7, multiMatchQueryBuilder6);
      assertNotNull(multiMatchQueryBuilder7);
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string5));
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertEquals((-3667.69F), multiMatchQueryBuilder0.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals((-3667.69F), multiMatchQueryBuilder1.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder1.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder1.getWriteableName());
      assertNull(multiMatchQueryBuilder2.queryName());
      assertEquals((-3667.69F), multiMatchQueryBuilder2.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder2.getWriteableName());
      assertNull(multiMatchQueryBuilder3.queryName());
      assertEquals((-3667.69F), multiMatchQueryBuilder3.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder3.getWriteableName());
      assertEquals((-3667.69F), multiMatchQueryBuilder4.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder4.getWriteableName());
      assertNull(multiMatchQueryBuilder4.queryName());
      assertEquals((-3667.69F), multiMatchQueryBuilder5.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder5.getWriteableName());
      assertNull(multiMatchQueryBuilder5.queryName());
      assertEquals((-3667.69F), multiMatchQueryBuilder7.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder7.getWriteableName());
      assertNull(multiMatchQueryBuilder7.queryName());
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
  }

  @Test(timeout = 11000)
  public void test42()  throws Throwable  {
      int int0 = (-2416);
      Random.setNextRandom(int0);
      MultiMatchQueryBuilder multiMatchQueryBuilder0 = MultiMatchQueryBuilder.PROTOTYPE;
      assertNotNull(multiMatchQueryBuilder0);
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      CborXContent cborXContent0 = CborXContent.cborXContent;
      assertNotNull(cborXContent0);
      assertEquals(XContentType.CBOR, cborXContent0.type());
      
      XContentBuilder xContentBuilder0 = XContentBuilder.builder((XContent) cborXContent0);
      assertNotNull(xContentBuilder0);
      assertEquals(XContentType.CBOR, cborXContent0.type());
      assertFalse(xContentBuilder0.humanReadable());
      assertEquals(XContentType.CBOR, xContentBuilder0.contentType());
      
      HttpRequest httpRequest0 = null;
      Channel channel0 = null;
      String string0 = "";
      XContentBuilderString xContentBuilderString0 = new XContentBuilderString(string0);
      assertNotNull(xContentBuilderString0);
      
      int[] intArray0 = new int[0];
      XContentBuilder xContentBuilder1 = xContentBuilder0.field(xContentBuilderString0, intArray0);
      assertEquals(0, intArray0.length);
      assertSame(xContentBuilder0, xContentBuilder1);
      assertSame(xContentBuilder1, xContentBuilder0);
      assertNotNull(xContentBuilder1);
      assertEquals(XContentType.CBOR, cborXContent0.type());
      assertFalse(xContentBuilder0.humanReadable());
      assertEquals(XContentType.CBOR, xContentBuilder0.contentType());
      assertEquals(XContentType.CBOR, xContentBuilder1.contentType());
      assertFalse(xContentBuilder1.humanReadable());
      assertArrayEquals(new int[] {}, intArray0);
      
      multiMatchQueryBuilder0.boost = (float) int0;
      assertEquals((-2416.0F), multiMatchQueryBuilder0.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      
      boolean boolean0 = true;
      MultiMatchQueryBuilder multiMatchQueryBuilder1 = multiMatchQueryBuilder0.lenient(boolean0);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder0);
      assertNotNull(multiMatchQueryBuilder1);
      assertEquals((-2416.0F), multiMatchQueryBuilder0.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertEquals("multi_match", multiMatchQueryBuilder1.getWriteableName());
      assertEquals((-2416.0F), multiMatchQueryBuilder1.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder1.queryName());
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      NettyHttpRequest nettyHttpRequest0 = null;
      try {
        nettyHttpRequest0 = new NettyHttpRequest(httpRequest0, channel0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.http.netty.NettyHttpRequest", e);
      }
  }

  @Test(timeout = 11000)
  public void test43()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      String string0 = "1Q2@lq_";
      boolean boolean0 = FileSystemHandling.appendStringToFile(evoSuiteFile0, string0);
      assertFalse(boolean0);
      
      MultiMatchQueryBuilder multiMatchQueryBuilder0 = MultiMatchQueryBuilder.PROTOTYPE;
      assertNotNull(multiMatchQueryBuilder0);
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertEquals(1.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      NonEmptySequence nonEmptySequence0 = new NonEmptySequence();
      assertNotNull(nonEmptySequence0);
      assertEquals(0, nonEmptySequence0.size());
      assertTrue(nonEmptySequence0.isEmpty());
      
      float float0 = 0.0F;
      multiMatchQueryBuilder0.boost = float0;
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertEquals(0.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder0.queryName());
      
      MultiMatchQueryBuilder multiMatchQueryBuilder1 = multiMatchQueryBuilder0.fuzziness(nonEmptySequence0);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder0);
      assertNotNull(multiMatchQueryBuilder1);
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertEquals(0.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals(0, nonEmptySequence0.size());
      assertTrue(nonEmptySequence0.isEmpty());
      assertNull(multiMatchQueryBuilder1.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder1.getWriteableName());
      assertEquals(0.0F, multiMatchQueryBuilder1.boost(), 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      boolean boolean1 = nonEmptySequence0.add((Object) multiMatchQueryBuilder0);
      assertTrue(boolean1);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder1);
      assertFalse(boolean1 == boolean0);
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertEquals(0.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder0.queryName());
      assertFalse(nonEmptySequence0.isEmpty());
      assertEquals(1, nonEmptySequence0.size());
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      int int0 = (-250);
      Random.setNextRandom(int0);
      MultiMatchQueryBuilder.Type multiMatchQueryBuilder_Type0 = MultiMatchQueryBuilder.Type.CROSS_FIELDS;
      MultiMatchQueryBuilder multiMatchQueryBuilder2 = multiMatchQueryBuilder1.type(multiMatchQueryBuilder_Type0);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder1);
      assertNotNull(multiMatchQueryBuilder2);
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertEquals(0.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder0.queryName());
      assertFalse(nonEmptySequence0.isEmpty());
      assertEquals(1, nonEmptySequence0.size());
      assertNull(multiMatchQueryBuilder1.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder1.getWriteableName());
      assertEquals(0.0F, multiMatchQueryBuilder1.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder2.queryName());
      assertEquals(0.0F, multiMatchQueryBuilder2.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder2.getWriteableName());
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      int int1 = (-4049);
      // Undeclared exception!
      try { 
        nonEmptySequence0.listIterator(int1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -4049
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 11000)
  public void test44()  throws Throwable  {
      MultiMatchQueryBuilder multiMatchQueryBuilder0 = MultiMatchQueryBuilder.PROTOTYPE;
      assertNotNull(multiMatchQueryBuilder0);
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertEquals(1.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      MultiMatchQueryBuilder.Type multiMatchQueryBuilder_Type0 = MultiMatchQueryBuilder.Type.MOST_FIELDS;
      MultiMatchQueryBuilder multiMatchQueryBuilder1 = multiMatchQueryBuilder0.type(multiMatchQueryBuilder_Type0);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder0);
      assertNotNull(multiMatchQueryBuilder1);
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertEquals(1.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder1.getWriteableName());
      assertNull(multiMatchQueryBuilder1.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder1.boost(), 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      int int0 = 2960;
      MultiMatchQueryBuilder multiMatchQueryBuilder2 = multiMatchQueryBuilder1.maxExpansions(int0);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder1);
      assertNotNull(multiMatchQueryBuilder2);
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertEquals(1.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder1.getWriteableName());
      assertNull(multiMatchQueryBuilder1.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder1.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder2.getWriteableName());
      assertEquals(1.0F, multiMatchQueryBuilder2.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder2.queryName());
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      multiMatchQueryBuilder2.boost = multiMatchQueryBuilder1.DEFAULT_BOOST;
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertEquals(1.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder1.getWriteableName());
      assertNull(multiMatchQueryBuilder1.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder1.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder2.getWriteableName());
      assertEquals(1.0F, multiMatchQueryBuilder2.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder2.queryName());
      
      MultiMatchQueryBuilder multiMatchQueryBuilder3 = multiMatchQueryBuilder2.field(multiMatchQueryBuilder1.NAME, (float) int0);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder2);
      assertNotNull(multiMatchQueryBuilder3);
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertEquals(1.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder1.getWriteableName());
      assertNull(multiMatchQueryBuilder1.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder1.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder2.getWriteableName());
      assertEquals(1.0F, multiMatchQueryBuilder2.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder2.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder3.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder3.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder3.getWriteableName());
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = true;
      float float0 = 0.0F;
      multiMatchQueryBuilder0.boost = float0;
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertEquals(0.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder0.queryName());
      
      boolean boolean1 = false;
      boolean boolean2 = FileSystemHandling.setPermissions(evoSuiteFile0, boolean0, boolean1, boolean0);
      assertFalse(boolean2);
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      boolean boolean3 = FileSystemHandling.appendStringToFile(evoSuiteFile0, multiMatchQueryBuilder1.NAME);
      assertFalse(boolean3);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder0);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertEquals(0.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder1.getWriteableName());
      assertNull(multiMatchQueryBuilder1.queryName());
      assertEquals(0.0F, multiMatchQueryBuilder1.boost(), 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      MultiMatchQueryBuilder multiMatchQueryBuilder4 = multiMatchQueryBuilder3.cutoffFrequency(multiMatchQueryBuilder0.DEFAULT_BOOST);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder3);
      assertNotNull(multiMatchQueryBuilder4);
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertEquals(0.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder1.getWriteableName());
      assertNull(multiMatchQueryBuilder1.queryName());
      assertEquals(0.0F, multiMatchQueryBuilder1.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder2.getWriteableName());
      assertEquals(0.0F, multiMatchQueryBuilder2.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder2.queryName());
      assertEquals(0.0F, multiMatchQueryBuilder3.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder3.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder3.getWriteableName());
      assertEquals(0.0F, multiMatchQueryBuilder4.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder4.getWriteableName());
      assertNull(multiMatchQueryBuilder4.queryName());
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      MultiMatchQueryBuilder multiMatchQueryBuilder5 = multiMatchQueryBuilder4.slop(int0);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder5, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder5, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder5, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder5, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder5, multiMatchQueryBuilder2);
      assertNotNull(multiMatchQueryBuilder5);
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertEquals(0.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder1.getWriteableName());
      assertNull(multiMatchQueryBuilder1.queryName());
      assertEquals(0.0F, multiMatchQueryBuilder1.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder2.getWriteableName());
      assertEquals(0.0F, multiMatchQueryBuilder2.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder2.queryName());
      assertEquals(0.0F, multiMatchQueryBuilder3.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder3.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder3.getWriteableName());
      assertEquals(0.0F, multiMatchQueryBuilder4.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder4.getWriteableName());
      assertNull(multiMatchQueryBuilder4.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder5.getWriteableName());
      assertNull(multiMatchQueryBuilder5.queryName());
      assertEquals(0.0F, multiMatchQueryBuilder5.boost(), 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder0.analyzer(multiMatchQueryBuilder1.NAME);
      assertSame(multiMatchQueryBuilder6, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder6, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder6, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder6, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder6, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder6, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder6);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder6);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder0);
      assertNotNull(multiMatchQueryBuilder6);
      assertEquals("multi_match", multiMatchQueryBuilder6.getWriteableName());
      assertEquals(0.0F, multiMatchQueryBuilder6.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder6.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertEquals(0.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder1.getWriteableName());
      assertNull(multiMatchQueryBuilder1.queryName());
      assertEquals(0.0F, multiMatchQueryBuilder1.boost(), 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      String string0 = "zero_terms_query";
      MultiMatchQueryBuilder multiMatchQueryBuilder7 = multiMatchQueryBuilder0.analyzer(string0);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder6);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder7);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder7, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder7, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder7, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder7, multiMatchQueryBuilder6);
      assertSame(multiMatchQueryBuilder7, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder7, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder7, multiMatchQueryBuilder1);
      assertNotNull(multiMatchQueryBuilder7);
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertEquals(0.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder0.queryName());
      assertNull(multiMatchQueryBuilder7.queryName());
      assertEquals(0.0F, multiMatchQueryBuilder7.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder7.getWriteableName());
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      Operator operator0 = Operator.OR;
      MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder7.operator(operator0);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder6);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder7);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder8);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder7, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder7, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder7, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder7, multiMatchQueryBuilder6);
      assertSame(multiMatchQueryBuilder7, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder7, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder7, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder7, multiMatchQueryBuilder8);
      assertSame(multiMatchQueryBuilder8, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder8, multiMatchQueryBuilder7);
      assertSame(multiMatchQueryBuilder8, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder8, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder8, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder8, multiMatchQueryBuilder6);
      assertSame(multiMatchQueryBuilder8, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder8, multiMatchQueryBuilder1);
      assertNotNull(multiMatchQueryBuilder8);
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertEquals(0.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder0.queryName());
      assertNull(multiMatchQueryBuilder7.queryName());
      assertEquals(0.0F, multiMatchQueryBuilder7.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder7.getWriteableName());
      assertNull(multiMatchQueryBuilder8.queryName());
      assertEquals(0.0F, multiMatchQueryBuilder8.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder8.getWriteableName());
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      int int1 = 110;
      Random.setNextRandom(int1);
      assertFalse(int1 == int0);
      
      LineStringBuilder lineStringBuilder0 = ShapeBuilder.newLineString();
      assertNotNull(lineStringBuilder0);
      assertEquals(ShapeBuilder.GeoShapeType.LINESTRING, lineStringBuilder0.type());
      assertEquals(180.0, ShapeBuilder.DATELINE, 0.01);
      
      // Undeclared exception!
      try { 
        lineStringBuilder0.build();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.elasticsearch.common.geo.builders.BaseLineStringBuilder", e);
      }
  }

  @Test(timeout = 11000)
  public void test45()  throws Throwable  {
      MultiMatchQueryBuilder.Type multiMatchQueryBuilder_Type0 = MultiMatchQueryBuilder.Type.CROSS_FIELDS;
      assertEquals(MultiMatchQueryBuilder.Type.CROSS_FIELDS, multiMatchQueryBuilder_Type0);
      assertEquals(0.0F, multiMatchQueryBuilder_Type0.tieBreaker(), 0.01F);
      assertEquals(MatchQuery.Type.BOOLEAN, multiMatchQueryBuilder_Type0.matchQueryType());
      
      float float0 = multiMatchQueryBuilder_Type0.tieBreaker();
      assertEquals(0.0F, float0, 0.01F);
      assertEquals(0.0F, multiMatchQueryBuilder_Type0.tieBreaker(), 0.01F);
      assertEquals(MatchQuery.Type.BOOLEAN, multiMatchQueryBuilder_Type0.matchQueryType());
      
      MultiMatchQueryBuilder multiMatchQueryBuilder0 = MultiMatchQueryBuilder.PROTOTYPE;
      assertNotNull(multiMatchQueryBuilder0);
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      MultiMatchQueryBuilder.Type multiMatchQueryBuilder_Type1 = MultiMatchQueryBuilder.Type.CROSS_FIELDS;
      MultiMatchQueryBuilder multiMatchQueryBuilder1 = multiMatchQueryBuilder0.type(multiMatchQueryBuilder_Type1);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder_Type1, multiMatchQueryBuilder_Type0);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder0);
      assertNotNull(multiMatchQueryBuilder1);
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertNull(multiMatchQueryBuilder1.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder1.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder1.getWriteableName());
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      int int0 = 3221;
      MultiMatchQueryBuilder multiMatchQueryBuilder2 = multiMatchQueryBuilder1.maxExpansions(int0);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder_Type1, multiMatchQueryBuilder_Type0);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder1);
      assertNotNull(multiMatchQueryBuilder2);
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertNull(multiMatchQueryBuilder1.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder1.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder1.getWriteableName());
      assertNull(multiMatchQueryBuilder2.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder2.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder2.getWriteableName());
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      MultiMatchQueryBuilder multiMatchQueryBuilder3 = multiMatchQueryBuilder2.minimumShouldMatch(multiMatchQueryBuilder0.NAME);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder_Type1, multiMatchQueryBuilder_Type0);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder0);
      assertNotNull(multiMatchQueryBuilder3);
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertNull(multiMatchQueryBuilder1.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder1.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder1.getWriteableName());
      assertNull(multiMatchQueryBuilder2.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder2.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder2.getWriteableName());
      assertEquals("multi_match", multiMatchQueryBuilder3.getWriteableName());
      assertNull(multiMatchQueryBuilder3.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder3.boost(), 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      MultiMatchQueryBuilder multiMatchQueryBuilder4 = (MultiMatchQueryBuilder)AbstractQueryBuilder.convertToBytesRefIfString(multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder_Type1, multiMatchQueryBuilder_Type0);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder0);
      assertNotNull(multiMatchQueryBuilder4);
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertNull(multiMatchQueryBuilder1.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder1.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder1.getWriteableName());
      assertEquals("multi_match", multiMatchQueryBuilder4.getWriteableName());
      assertNull(multiMatchQueryBuilder4.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder4.boost(), 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      MatchQueryBuilder.ZeroTermsQuery matchQueryBuilder_ZeroTermsQuery0 = MatchQueryBuilder.ZeroTermsQuery.ALL;
      String string0 = multiMatchQueryBuilder3.toString();
      assertEquals("{\n  \"multi_match\" : {\n    \"query\" : null,\n    \"fields\" : [ ],\n    \"type\" : \"cross_fields\",\n    \"max_expansions\" : 3221,\n    \"minimum_should_match\" : \"multi_match\",\n    \"boost\" : 1.0\n  }\n}", string0);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder_Type1, multiMatchQueryBuilder_Type0);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder0);
      assertNotNull(string0);
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertNull(multiMatchQueryBuilder1.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder1.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder1.getWriteableName());
      assertNull(multiMatchQueryBuilder2.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder2.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder2.getWriteableName());
      assertEquals("multi_match", multiMatchQueryBuilder3.getWriteableName());
      assertNull(multiMatchQueryBuilder3.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder3.boost(), 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      MultiMatchQueryBuilder multiMatchQueryBuilder5 = multiMatchQueryBuilder3.zeroTermsQuery(matchQueryBuilder_ZeroTermsQuery0);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder_Type1, multiMatchQueryBuilder_Type0);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder5, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder5, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder5, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder5, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder5, multiMatchQueryBuilder1);
      assertNotNull(multiMatchQueryBuilder5);
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertNull(multiMatchQueryBuilder1.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder1.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder1.getWriteableName());
      assertNull(multiMatchQueryBuilder2.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder2.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder2.getWriteableName());
      assertEquals("multi_match", multiMatchQueryBuilder3.getWriteableName());
      assertNull(multiMatchQueryBuilder3.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder3.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder5.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder5.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder5.getWriteableName());
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      Object object0 = null;
      MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder5.type(object0);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder6);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder_Type1, multiMatchQueryBuilder_Type0);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder6);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder6);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder6);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder5, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder5, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder5, multiMatchQueryBuilder6);
      assertSame(multiMatchQueryBuilder5, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder5, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder5, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder6, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder6, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder6, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder6, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder6, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder6, multiMatchQueryBuilder5);
      assertNotNull(multiMatchQueryBuilder6);
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertNull(multiMatchQueryBuilder1.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder1.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder1.getWriteableName());
      assertNull(multiMatchQueryBuilder2.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder2.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder2.getWriteableName());
      assertEquals("multi_match", multiMatchQueryBuilder3.getWriteableName());
      assertNull(multiMatchQueryBuilder3.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder3.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder5.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder5.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder5.getWriteableName());
      assertEquals("multi_match", multiMatchQueryBuilder6.getWriteableName());
      assertEquals(1.0F, multiMatchQueryBuilder6.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder6.queryName());
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      // Undeclared exception!
      try { 
        multiMatchQueryBuilder6.type((Object) matchQueryBuilder_ZeroTermsQuery0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // failed to parse [java.lang.String@0000000104] query type [java.lang.String@0000000105]. unknown type.
         //
         verifyException("org.elasticsearch.index.query.MultiMatchQueryBuilder$Type", e);
      }
  }

  @Test(timeout = 11000)
  public void test46()  throws Throwable  {
      MultiMatchQueryBuilder multiMatchQueryBuilder0 = MultiMatchQueryBuilder.PROTOTYPE;
      assertNotNull(multiMatchQueryBuilder0);
      assertEquals(1.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      String string0 = "zero_terms_query";
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
      assertFalse(boolean0);
      
      MultiMatchQueryBuilder multiMatchQueryBuilder1 = multiMatchQueryBuilder0.minimumShouldMatch(string0);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder0);
      assertNotNull(multiMatchQueryBuilder1);
      assertEquals(1.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder1.getWriteableName());
      assertEquals(1.0F, multiMatchQueryBuilder1.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder1.queryName());
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      String string1 = "";
      float float0 = 0.0F;
      MultiMatchQueryBuilder multiMatchQueryBuilder2 = multiMatchQueryBuilder0.boost(float0);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder1);
      assertNotNull(multiMatchQueryBuilder2);
      assertEquals(0.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder2.getWriteableName());
      assertEquals(0.0F, multiMatchQueryBuilder2.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder2.queryName());
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      MultiMatchQueryBuilder multiMatchQueryBuilder3 = multiMatchQueryBuilder1.field(string1, float0);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder3);
      assertNotSame(string0, string1);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder0);
      assertNotSame(string1, string0);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder1);
      assertNotNull(multiMatchQueryBuilder3);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals(0.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder1.getWriteableName());
      assertEquals(0.0F, multiMatchQueryBuilder1.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder1.queryName());
      assertNull(multiMatchQueryBuilder3.queryName());
      assertEquals(0.0F, multiMatchQueryBuilder3.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder3.getWriteableName());
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      MultiMatchQueryBuilder multiMatchQueryBuilder4 = multiMatchQueryBuilder3.tieBreaker(float0);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder3);
      assertNotSame(string0, string1);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder0);
      assertNotSame(string1, string0);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder2);
      assertNotNull(multiMatchQueryBuilder4);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals(0.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder1.getWriteableName());
      assertEquals(0.0F, multiMatchQueryBuilder1.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder1.queryName());
      assertNull(multiMatchQueryBuilder3.queryName());
      assertEquals(0.0F, multiMatchQueryBuilder3.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder3.getWriteableName());
      assertEquals(0.0F, multiMatchQueryBuilder4.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder4.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder4.getWriteableName());
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      String string2 = "";
      MultiMatchQueryBuilder multiMatchQueryBuilder5 = multiMatchQueryBuilder4.analyzer(string2);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder3);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder0);
      assertSame(string1, string2);
      assertNotSame(string1, string0);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder2);
      assertNotSame(string2, string0);
      assertSame(string2, string1);
      assertSame(multiMatchQueryBuilder5, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder5, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder5, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder5, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder5, multiMatchQueryBuilder3);
      assertNotNull(multiMatchQueryBuilder5);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      assertEquals(0.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder1.getWriteableName());
      assertEquals(0.0F, multiMatchQueryBuilder1.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder1.queryName());
      assertNull(multiMatchQueryBuilder3.queryName());
      assertEquals(0.0F, multiMatchQueryBuilder3.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder3.getWriteableName());
      assertEquals(0.0F, multiMatchQueryBuilder4.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder4.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder4.getWriteableName());
      assertNull(multiMatchQueryBuilder5.queryName());
      assertEquals(0.0F, multiMatchQueryBuilder5.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder5.getWriteableName());
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      NonEmptySequence nonEmptySequence0 = new NonEmptySequence();
      assertNotNull(nonEmptySequence0);
      assertTrue(nonEmptySequence0.isEmpty());
      assertEquals(0, nonEmptySequence0.size());
      
      int int0 = (-533);
      MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder2.maxExpansions(int0);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder6);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder6);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder6, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder6, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder6, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder6, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder6, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder6, multiMatchQueryBuilder1);
      assertNotNull(multiMatchQueryBuilder6);
      assertEquals(0.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder2.getWriteableName());
      assertEquals(0.0F, multiMatchQueryBuilder2.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder2.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder6.getWriteableName());
      assertEquals(0.0F, multiMatchQueryBuilder6.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder6.queryName());
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      int int1 = 0;
      MultiMatchQueryBuilder multiMatchQueryBuilder7 = multiMatchQueryBuilder4.slop(int1);
      assertSame(multiMatchQueryBuilder7, multiMatchQueryBuilder6);
      assertSame(multiMatchQueryBuilder7, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder7, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder7, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder7, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder7, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder7, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder6);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder7);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder5);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder6);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder7);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder0);
      assertSame(string1, string2);
      assertNotSame(string1, string0);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder7);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder6);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder6);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder7);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder2);
      assertNotNull(multiMatchQueryBuilder7);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(int1 == int0);
      assertEquals(0.0F, multiMatchQueryBuilder7.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder7.getWriteableName());
      assertNull(multiMatchQueryBuilder7.queryName());
      assertEquals(0.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder1.getWriteableName());
      assertEquals(0.0F, multiMatchQueryBuilder1.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder1.queryName());
      assertNull(multiMatchQueryBuilder3.queryName());
      assertEquals(0.0F, multiMatchQueryBuilder3.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder3.getWriteableName());
      assertEquals(0.0F, multiMatchQueryBuilder4.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder4.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder4.getWriteableName());
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      // Undeclared exception!
      try { 
        multiMatchQueryBuilder5.type((Object) nonEmptySequence0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // failed to parse [java.lang.String@0000000107] query type [java.lang.String@0000000108]. unknown type.
         //
         verifyException("org.elasticsearch.index.query.MultiMatchQueryBuilder$Type", e);
      }
  }

  @Test(timeout = 11000)
  public void test47()  throws Throwable  {
      Object object0 = null;
      String[] stringArray0 = new String[7];
      String string0 = "qNof";
      stringArray0[0] = string0;
      String string1 = "org.elasticsearch.search.aggregations.bucket.filter.FilterAggregator";
      stringArray0[1] = string1;
      String string2 = "bool field can't be tokenized";
      stringArray0[2] = string2;
      String string3 = "";
      stringArray0[3] = string3;
      String string4 = "";
      stringArray0[4] = string4;
      String string5 = "CF#b$>";
      stringArray0[1] = string5;
      stringArray0[6] = stringArray0[0];
      MultiMatchQueryBuilder multiMatchQueryBuilder0 = new MultiMatchQueryBuilder(object0, stringArray0);
      assertEquals(7, stringArray0.length);
      assertNotNull(multiMatchQueryBuilder0);
      assertEquals(1.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      MultiMatchQueryBuilder.Type multiMatchQueryBuilder_Type0 = MultiMatchQueryBuilder.Type.PHRASE_PREFIX;
      MultiMatchQueryBuilder multiMatchQueryBuilder1 = multiMatchQueryBuilder0.type(multiMatchQueryBuilder_Type0);
      assertEquals(7, stringArray0.length);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder1);
      assertNotNull(multiMatchQueryBuilder1);
      assertEquals(1.0F, multiMatchQueryBuilder1.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder1.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder1.getWriteableName());
      assertEquals(1.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      MultiMatchQueryBuilder multiMatchQueryBuilder2 = multiMatchQueryBuilder1.cutoffFrequency(multiMatchQueryBuilder0.DEFAULT_BOOST);
      assertEquals(7, stringArray0.length);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder2);
      assertNotNull(multiMatchQueryBuilder2);
      assertEquals(1.0F, multiMatchQueryBuilder1.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder1.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder1.getWriteableName());
      assertEquals("multi_match", multiMatchQueryBuilder2.getWriteableName());
      assertNull(multiMatchQueryBuilder2.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder2.boost(), 0.01F);
      assertEquals(1.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      MultiMatchQueryBuilder multiMatchQueryBuilder3 = multiMatchQueryBuilder2.field(stringArray0[5], multiMatchQueryBuilder1.DEFAULT_BOOST);
      assertEquals(7, stringArray0.length);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder3);
      assertNotNull(multiMatchQueryBuilder3);
      assertEquals(1.0F, multiMatchQueryBuilder1.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder1.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder1.getWriteableName());
      assertEquals("multi_match", multiMatchQueryBuilder2.getWriteableName());
      assertNull(multiMatchQueryBuilder2.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder2.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder3.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder3.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder3.getWriteableName());
      assertEquals(1.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      MultiMatchQueryBuilder multiMatchQueryBuilder4 = multiMatchQueryBuilder3.analyzer(stringArray0[6]);
      assertEquals(7, stringArray0.length);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder4);
      assertNotNull(multiMatchQueryBuilder4);
      assertEquals(1.0F, multiMatchQueryBuilder1.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder1.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder1.getWriteableName());
      assertEquals("multi_match", multiMatchQueryBuilder2.getWriteableName());
      assertNull(multiMatchQueryBuilder2.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder2.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder3.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder3.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder3.getWriteableName());
      assertEquals(1.0F, multiMatchQueryBuilder4.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder4.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder4.getWriteableName());
      assertEquals(1.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      String string6 = "Fk:-";
      MultiMatchQueryBuilder multiMatchQueryBuilder5 = multiMatchQueryBuilder4.rewrite(string6);
      assertEquals(7, stringArray0.length);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder3);
      assertNotSame(string6, string4);
      assertNotSame(string6, string1);
      assertNotSame(string6, string2);
      assertNotSame(string6, string3);
      assertNotSame(string6, string0);
      assertNotSame(string6, string5);
      assertSame(multiMatchQueryBuilder5, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder5, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder5, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder5, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder5, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder4);
      assertNotNull(multiMatchQueryBuilder5);
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertEquals(1.0F, multiMatchQueryBuilder1.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder1.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder1.getWriteableName());
      assertEquals("multi_match", multiMatchQueryBuilder2.getWriteableName());
      assertNull(multiMatchQueryBuilder2.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder2.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder3.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder3.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder3.getWriteableName());
      assertEquals(1.0F, multiMatchQueryBuilder4.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder4.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder4.getWriteableName());
      assertEquals("multi_match", multiMatchQueryBuilder5.getWriteableName());
      assertNull(multiMatchQueryBuilder5.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder5.boost(), 0.01F);
      assertEquals(1.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder5.field(string4, multiMatchQueryBuilder2.DEFAULT_BOOST);
      assertEquals(7, stringArray0.length);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder6);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder6);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder6);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder6);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder3);
      assertNotSame(string6, string4);
      assertNotSame(string6, string1);
      assertNotSame(string6, string2);
      assertNotSame(string6, string3);
      assertNotSame(string6, string0);
      assertNotSame(string6, string5);
      assertSame(multiMatchQueryBuilder5, multiMatchQueryBuilder6);
      assertSame(multiMatchQueryBuilder5, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder5, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder5, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder5, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder5, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder6, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder6, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder6, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder6, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder6, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder6, multiMatchQueryBuilder1);
      assertNotSame(string4, string5);
      assertNotSame(string4, string2);
      assertNotSame(string4, string0);
      assertNotSame(string4, string1);
      assertNotSame(string4, string6);
      assertSame(string4, string3);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder6);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder4);
      assertNotNull(multiMatchQueryBuilder6);
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string5));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string6));
      assertEquals(1.0F, multiMatchQueryBuilder1.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder1.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder1.getWriteableName());
      assertEquals("multi_match", multiMatchQueryBuilder2.getWriteableName());
      assertNull(multiMatchQueryBuilder2.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder2.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder3.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder3.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder3.getWriteableName());
      assertEquals(1.0F, multiMatchQueryBuilder4.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder4.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder4.getWriteableName());
      assertEquals("multi_match", multiMatchQueryBuilder5.getWriteableName());
      assertNull(multiMatchQueryBuilder5.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder5.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder6.getWriteableName());
      assertNull(multiMatchQueryBuilder6.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder6.boost(), 0.01F);
      assertEquals(1.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      Operator operator0 = Operator.OR;
      MultiMatchQueryBuilder multiMatchQueryBuilder7 = multiMatchQueryBuilder4.operator(operator0);
      assertEquals(7, stringArray0.length);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder7);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder6);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder6);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder7);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder7);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder6);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder6);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder7);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder7, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder7, multiMatchQueryBuilder6);
      assertSame(multiMatchQueryBuilder7, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder7, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder7, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder7, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder7, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder7);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder6);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder4);
      assertNotNull(multiMatchQueryBuilder7);
      assertEquals(1.0F, multiMatchQueryBuilder1.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder1.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder1.getWriteableName());
      assertEquals("multi_match", multiMatchQueryBuilder2.getWriteableName());
      assertNull(multiMatchQueryBuilder2.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder2.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder3.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder3.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder3.getWriteableName());
      assertEquals(1.0F, multiMatchQueryBuilder4.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder4.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder4.getWriteableName());
      assertNull(multiMatchQueryBuilder7.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder7.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder7.getWriteableName());
      assertEquals(1.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      String string7 = "vp6'W@6u<%GG})Kf<j";
      MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder3.minimumShouldMatch(string7);
      assertEquals(7, stringArray0.length);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder8);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder7);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder6);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder8);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder6);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder7);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder7);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder8);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder6);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder1);
      assertNotSame(string7, string0);
      assertNotSame(string7, string6);
      assertNotSame(string7, string4);
      assertNotSame(string7, string5);
      assertNotSame(string7, string1);
      assertNotSame(string7, string3);
      assertNotSame(string7, string2);
      assertSame(multiMatchQueryBuilder8, multiMatchQueryBuilder6);
      assertSame(multiMatchQueryBuilder8, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder8, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder8, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder8, multiMatchQueryBuilder7);
      assertSame(multiMatchQueryBuilder8, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder8, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder8, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder7);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder8);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder6);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder4);
      assertNotNull(multiMatchQueryBuilder8);
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string2));
      assertEquals(1.0F, multiMatchQueryBuilder1.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder1.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder1.getWriteableName());
      assertEquals("multi_match", multiMatchQueryBuilder2.getWriteableName());
      assertNull(multiMatchQueryBuilder2.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder2.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder3.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder3.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder3.getWriteableName());
      assertEquals("multi_match", multiMatchQueryBuilder8.getWriteableName());
      assertNull(multiMatchQueryBuilder8.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder8.boost(), 0.01F);
      assertEquals(1.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      XContentBuilder xContentBuilder0 = null;
      ToXContent.Params toXContent_Params0 = null;
      // Undeclared exception!
      try { 
        multiMatchQueryBuilder5.doXContent(xContentBuilder0, toXContent_Params0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.index.query.MultiMatchQueryBuilder", e);
      }
  }

  @Test(timeout = 11000)
  public void test48()  throws Throwable  {
      MultiMatchQueryBuilder multiMatchQueryBuilder0 = MultiMatchQueryBuilder.PROTOTYPE;
      assertNotNull(multiMatchQueryBuilder0);
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      int int0 = (-3);
      MultiMatchQueryBuilder multiMatchQueryBuilder1 = multiMatchQueryBuilder0.prefixLength(int0);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder0);
      assertNotNull(multiMatchQueryBuilder1);
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertEquals(1.0F, multiMatchQueryBuilder1.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder1.getWriteableName());
      assertNull(multiMatchQueryBuilder1.queryName());
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      float float0 = (-405.091F);
      MultiMatchQueryBuilder multiMatchQueryBuilder2 = multiMatchQueryBuilder1.cutoffFrequency(float0);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder0);
      assertNotNull(multiMatchQueryBuilder2);
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertEquals(1.0F, multiMatchQueryBuilder1.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder1.getWriteableName());
      assertNull(multiMatchQueryBuilder1.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder2.getWriteableName());
      assertEquals(1.0F, multiMatchQueryBuilder2.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder2.queryName());
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      InternalAggregations internalAggregations0 = InternalAggregations.EMPTY;
      assertNotNull(internalAggregations0);
      
      PhraseSuggestionBuilder.Laplace phraseSuggestionBuilder_Laplace0 = new PhraseSuggestionBuilder.Laplace(multiMatchQueryBuilder1.DEFAULT_BOOST);
      assertNotNull(phraseSuggestionBuilder_Laplace0);
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertEquals(1.0F, multiMatchQueryBuilder1.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder1.getWriteableName());
      assertNull(multiMatchQueryBuilder1.queryName());
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      JsonXContent jsonXContent0 = JsonXContent.jsonXContent;
      assertNotNull(jsonXContent0);
      assertEquals(XContentType.JSON, jsonXContent0.type());
      assertEquals((byte)10, jsonXContent0.streamSeparator());
      
      OutputStream outputStream0 = null;
      String[] stringArray0 = new String[7];
      stringArray0[0] = multiMatchQueryBuilder0.NAME;
      stringArray0[1] = multiMatchQueryBuilder0.NAME;
      stringArray0[2] = multiMatchQueryBuilder1.NAME;
      stringArray0[3] = multiMatchQueryBuilder2.NAME;
      stringArray0[4] = multiMatchQueryBuilder0.NAME;
      stringArray0[5] = multiMatchQueryBuilder1.NAME;
      String string0 = "";
      stringArray0[6] = string0;
      XContentBuilder xContentBuilder0 = new XContentBuilder(jsonXContent0, outputStream0, stringArray0);
      assertEquals(7, stringArray0.length);
      assertNotNull(xContentBuilder0);
      assertEquals(XContentType.JSON, xContentBuilder0.contentType());
      assertFalse(xContentBuilder0.humanReadable());
      assertEquals(XContentType.JSON, jsonXContent0.type());
      assertEquals((byte)10, jsonXContent0.streamSeparator());
      
      ToXContent.Params toXContent_Params0 = ToXContent.EMPTY_PARAMS;
      assertNotNull(toXContent_Params0);
      
      XContentBuilder xContentBuilder1 = phraseSuggestionBuilder_Laplace0.toXContent(xContentBuilder0, toXContent_Params0);
      assertEquals(7, stringArray0.length);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder2);
      assertSame(xContentBuilder0, xContentBuilder1);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder0);
      assertSame(xContentBuilder1, xContentBuilder0);
      assertNotNull(xContentBuilder1);
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertEquals(XContentType.JSON, xContentBuilder0.contentType());
      assertFalse(xContentBuilder0.humanReadable());
      assertEquals(1.0F, multiMatchQueryBuilder1.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder1.getWriteableName());
      assertNull(multiMatchQueryBuilder1.queryName());
      assertFalse(xContentBuilder1.humanReadable());
      assertEquals(XContentType.JSON, xContentBuilder1.contentType());
      assertEquals(XContentType.JSON, jsonXContent0.type());
      assertEquals((byte)10, jsonXContent0.streamSeparator());
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      XContentBuilder xContentBuilder2 = internalAggregations0.toXContentInternal(xContentBuilder1, toXContent_Params0);
      assertEquals(7, stringArray0.length);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder2);
      assertSame(xContentBuilder0, xContentBuilder2);
      assertSame(xContentBuilder0, xContentBuilder1);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder0);
      assertSame(xContentBuilder1, xContentBuilder2);
      assertSame(xContentBuilder1, xContentBuilder0);
      assertSame(xContentBuilder2, xContentBuilder0);
      assertSame(xContentBuilder2, xContentBuilder1);
      assertNotNull(xContentBuilder2);
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertEquals(XContentType.JSON, xContentBuilder0.contentType());
      assertFalse(xContentBuilder0.humanReadable());
      assertEquals(1.0F, multiMatchQueryBuilder1.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder1.getWriteableName());
      assertNull(multiMatchQueryBuilder1.queryName());
      assertFalse(xContentBuilder1.humanReadable());
      assertEquals(XContentType.JSON, xContentBuilder1.contentType());
      assertFalse(xContentBuilder2.humanReadable());
      assertEquals(XContentType.JSON, xContentBuilder2.contentType());
      assertEquals(XContentType.JSON, jsonXContent0.type());
      assertEquals((byte)10, jsonXContent0.streamSeparator());
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      try { 
        multiMatchQueryBuilder2.doXContent(xContentBuilder2, toXContent_Params0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 11000)
  public void test49()  throws Throwable  {
      MissingQueryBuilder missingQueryBuilder0 = MissingQueryBuilder.PROTOTYPE;
      assertNotNull(missingQueryBuilder0);
      assertEquals(1.0F, missingQueryBuilder0.boost(), 0.01F);
      assertNull(missingQueryBuilder0.queryName());
      assertFalse(missingQueryBuilder0.nullValue());
      assertTrue(missingQueryBuilder0.existence());
      assertEquals("missing", missingQueryBuilder0.getWriteableName());
      assertNull(missingQueryBuilder0.fieldPattern());
      assertTrue(MissingQueryBuilder.DEFAULT_EXISTENCE_VALUE);
      assertFalse(MissingQueryBuilder.DEFAULT_NULL_VALUE);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = missingQueryBuilder0.NAME;
      stringArray0[1] = missingQueryBuilder0.NAME;
      stringArray0[2] = missingQueryBuilder0.NAME;
      MultiMatchQueryBuilder multiMatchQueryBuilder0 = new MultiMatchQueryBuilder(missingQueryBuilder0, stringArray0);
      assertEquals(3, stringArray0.length);
      assertNotNull(multiMatchQueryBuilder0);
      assertEquals(1.0F, missingQueryBuilder0.boost(), 0.01F);
      assertNull(missingQueryBuilder0.queryName());
      assertFalse(missingQueryBuilder0.nullValue());
      assertTrue(missingQueryBuilder0.existence());
      assertEquals("missing", missingQueryBuilder0.getWriteableName());
      assertNull(missingQueryBuilder0.fieldPattern());
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertEquals(1.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder0.queryName());
      assertTrue(MissingQueryBuilder.DEFAULT_EXISTENCE_VALUE);
      assertFalse(MissingQueryBuilder.DEFAULT_NULL_VALUE);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
      assertFalse(boolean0);
      
      MultiMatchQueryBuilder multiMatchQueryBuilder1 = multiMatchQueryBuilder0.field(stringArray0[1]);
      assertEquals(3, stringArray0.length);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder0);
      assertNotNull(multiMatchQueryBuilder1);
      assertEquals(1.0F, missingQueryBuilder0.boost(), 0.01F);
      assertNull(missingQueryBuilder0.queryName());
      assertFalse(missingQueryBuilder0.nullValue());
      assertTrue(missingQueryBuilder0.existence());
      assertEquals("missing", missingQueryBuilder0.getWriteableName());
      assertNull(missingQueryBuilder0.fieldPattern());
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertEquals(1.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder0.queryName());
      assertNull(multiMatchQueryBuilder1.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder1.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder1.getWriteableName());
      assertTrue(MissingQueryBuilder.DEFAULT_EXISTENCE_VALUE);
      assertFalse(MissingQueryBuilder.DEFAULT_NULL_VALUE);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      MultiMatchQueryBuilder multiMatchQueryBuilder2 = multiMatchQueryBuilder1.fuzzyRewrite(missingQueryBuilder0.NAME);
      assertEquals(3, stringArray0.length);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder0);
      assertNotNull(multiMatchQueryBuilder2);
      assertEquals(1.0F, missingQueryBuilder0.boost(), 0.01F);
      assertNull(missingQueryBuilder0.queryName());
      assertFalse(missingQueryBuilder0.nullValue());
      assertTrue(missingQueryBuilder0.existence());
      assertEquals("missing", missingQueryBuilder0.getWriteableName());
      assertNull(missingQueryBuilder0.fieldPattern());
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertEquals(1.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder0.queryName());
      assertNull(multiMatchQueryBuilder1.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder1.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder1.getWriteableName());
      assertEquals("multi_match", multiMatchQueryBuilder2.getWriteableName());
      assertNull(multiMatchQueryBuilder2.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder2.boost(), 0.01F);
      assertTrue(MissingQueryBuilder.DEFAULT_EXISTENCE_VALUE);
      assertFalse(MissingQueryBuilder.DEFAULT_NULL_VALUE);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      MultiMatchQueryBuilder multiMatchQueryBuilder3 = multiMatchQueryBuilder1.field(missingQueryBuilder0.NAME);
      assertEquals(3, stringArray0.length);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder1);
      assertNotNull(multiMatchQueryBuilder3);
      assertEquals(1.0F, missingQueryBuilder0.boost(), 0.01F);
      assertNull(missingQueryBuilder0.queryName());
      assertFalse(missingQueryBuilder0.nullValue());
      assertTrue(missingQueryBuilder0.existence());
      assertEquals("missing", missingQueryBuilder0.getWriteableName());
      assertNull(missingQueryBuilder0.fieldPattern());
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertEquals(1.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder0.queryName());
      assertNull(multiMatchQueryBuilder1.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder1.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder1.getWriteableName());
      assertNull(multiMatchQueryBuilder3.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder3.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder3.getWriteableName());
      assertTrue(MissingQueryBuilder.DEFAULT_EXISTENCE_VALUE);
      assertFalse(MissingQueryBuilder.DEFAULT_NULL_VALUE);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      String string0 = "";
      MultiMatchQueryBuilder multiMatchQueryBuilder4 = multiMatchQueryBuilder0.rewrite(string0);
      assertEquals(3, stringArray0.length);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder0);
      assertNotNull(multiMatchQueryBuilder4);
      assertEquals(1.0F, missingQueryBuilder0.boost(), 0.01F);
      assertNull(missingQueryBuilder0.queryName());
      assertFalse(missingQueryBuilder0.nullValue());
      assertTrue(missingQueryBuilder0.existence());
      assertEquals("missing", missingQueryBuilder0.getWriteableName());
      assertNull(missingQueryBuilder0.fieldPattern());
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertEquals(1.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder4.getWriteableName());
      assertNull(multiMatchQueryBuilder4.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder4.boost(), 0.01F);
      assertTrue(MissingQueryBuilder.DEFAULT_EXISTENCE_VALUE);
      assertFalse(MissingQueryBuilder.DEFAULT_NULL_VALUE);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      float float0 = (-2050.3F);
      multiMatchQueryBuilder2.boost = float0;
      assertEquals(1.0F, missingQueryBuilder0.boost(), 0.01F);
      assertNull(missingQueryBuilder0.queryName());
      assertFalse(missingQueryBuilder0.nullValue());
      assertTrue(missingQueryBuilder0.existence());
      assertEquals("missing", missingQueryBuilder0.getWriteableName());
      assertNull(missingQueryBuilder0.fieldPattern());
      assertEquals((-2050.3F), multiMatchQueryBuilder0.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertNull(multiMatchQueryBuilder0.queryName());
      assertNull(multiMatchQueryBuilder1.queryName());
      assertEquals((-2050.3F), multiMatchQueryBuilder1.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder1.getWriteableName());
      assertEquals((-2050.3F), multiMatchQueryBuilder2.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder2.getWriteableName());
      assertNull(multiMatchQueryBuilder2.queryName());
      
      Operator operator0 = Operator.AND;
      MultiMatchQueryBuilder multiMatchQueryBuilder5 = multiMatchQueryBuilder0.operator(operator0);
      assertEquals(3, stringArray0.length);
      assertSame(multiMatchQueryBuilder5, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder5, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder5, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder5, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder5, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder5);
      assertNotNull(multiMatchQueryBuilder5);
      assertEquals(1.0F, missingQueryBuilder0.boost(), 0.01F);
      assertNull(missingQueryBuilder0.queryName());
      assertFalse(missingQueryBuilder0.nullValue());
      assertTrue(missingQueryBuilder0.existence());
      assertEquals("missing", missingQueryBuilder0.getWriteableName());
      assertNull(missingQueryBuilder0.fieldPattern());
      assertEquals((-2050.3F), multiMatchQueryBuilder5.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder5.getWriteableName());
      assertNull(multiMatchQueryBuilder5.queryName());
      assertEquals((-2050.3F), multiMatchQueryBuilder0.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertNull(multiMatchQueryBuilder0.queryName());
      assertTrue(MissingQueryBuilder.DEFAULT_EXISTENCE_VALUE);
      assertFalse(MissingQueryBuilder.DEFAULT_NULL_VALUE);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      MissingQueryBuilder missingQueryBuilder1 = MissingQueryBuilder.PROTOTYPE;
      assertSame(missingQueryBuilder1, missingQueryBuilder0);
      assertNotNull(missingQueryBuilder1);
      assertNull(missingQueryBuilder1.fieldPattern());
      assertEquals(1.0F, missingQueryBuilder1.boost(), 0.01F);
      assertFalse(missingQueryBuilder1.nullValue());
      assertEquals("missing", missingQueryBuilder1.getWriteableName());
      assertNull(missingQueryBuilder1.queryName());
      assertTrue(missingQueryBuilder1.existence());
      assertFalse(MissingQueryBuilder.DEFAULT_NULL_VALUE);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertTrue(MissingQueryBuilder.DEFAULT_EXISTENCE_VALUE);
      
      String string1 = "";
      MissingQueryBuilder missingQueryBuilder2 = missingQueryBuilder1.queryName(string1);
      assertSame(missingQueryBuilder1, missingQueryBuilder2);
      assertSame(missingQueryBuilder1, missingQueryBuilder0);
      assertSame(string1, string0);
      assertSame(missingQueryBuilder2, missingQueryBuilder0);
      assertSame(missingQueryBuilder2, missingQueryBuilder1);
      assertNotNull(missingQueryBuilder2);
      assertNull(missingQueryBuilder1.fieldPattern());
      assertEquals(1.0F, missingQueryBuilder1.boost(), 0.01F);
      assertFalse(missingQueryBuilder1.nullValue());
      assertEquals("missing", missingQueryBuilder1.getWriteableName());
      assertEquals("", missingQueryBuilder1.queryName());
      assertTrue(missingQueryBuilder1.existence());
      assertFalse(missingQueryBuilder2.nullValue());
      assertEquals(1.0F, missingQueryBuilder2.boost(), 0.01F);
      assertEquals("missing", missingQueryBuilder2.getWriteableName());
      assertNull(missingQueryBuilder2.fieldPattern());
      assertEquals("", missingQueryBuilder2.queryName());
      assertTrue(missingQueryBuilder2.existence());
      assertFalse(MissingQueryBuilder.DEFAULT_NULL_VALUE);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertTrue(MissingQueryBuilder.DEFAULT_EXISTENCE_VALUE);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertFalse(MissingQueryBuilder.DEFAULT_NULL_VALUE);
      assertTrue(MissingQueryBuilder.DEFAULT_EXISTENCE_VALUE);
      
      // Undeclared exception!
      try { 
        multiMatchQueryBuilder2.type((Object) missingQueryBuilder1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // failed to parse [java.lang.String@0000000093] query type [java.lang.String@0000000094]. unknown type.
         //
         verifyException("org.elasticsearch.index.query.MultiMatchQueryBuilder$Type", e);
      }
  }

  @Test(timeout = 11000)
  public void test50()  throws Throwable  {
      MultiMatchQueryBuilder multiMatchQueryBuilder0 = MultiMatchQueryBuilder.PROTOTYPE;
      assertNotNull(multiMatchQueryBuilder0);
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      String string0 = "&]fEQtcJmOhq";
      float float0 = 0.0F;
      MultiMatchQueryBuilder multiMatchQueryBuilder1 = multiMatchQueryBuilder0.field(string0, float0);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder0);
      assertNotNull(multiMatchQueryBuilder1);
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertEquals(1.0F, multiMatchQueryBuilder1.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder1.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder1.getWriteableName());
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      String string1 = "6L[m^ ";
      MultiMatchQueryBuilder multiMatchQueryBuilder2 = multiMatchQueryBuilder1.rewrite(string1);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder1);
      assertNotSame(string0, string1);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder2);
      assertNotSame(string1, string0);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder0);
      assertNotNull(multiMatchQueryBuilder2);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertEquals(1.0F, multiMatchQueryBuilder1.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder1.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder1.getWriteableName());
      assertNull(multiMatchQueryBuilder2.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder2.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder2.getWriteableName());
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      XContentType xContentType0 = XContentType.YAML;
      BytesReference bytesReference0 = multiMatchQueryBuilder2.buildAsBytes(xContentType0);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder1);
      assertNotSame(string0, string1);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder2);
      assertNotSame(string1, string0);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder0);
      assertNotNull(bytesReference0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertEquals(1.0F, multiMatchQueryBuilder1.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder1.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder1.getWriteableName());
      assertNull(multiMatchQueryBuilder2.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder2.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder2.getWriteableName());
      assertTrue(bytesReference0.hasArray());
      assertEquals(97, bytesReference0.length());
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      MultiMatchQueryBuilder multiMatchQueryBuilder3 = multiMatchQueryBuilder2.cutoffFrequency(float0);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder1);
      assertNotSame(string0, string1);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder2);
      assertNotSame(string1, string0);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder2);
      assertNotNull(multiMatchQueryBuilder3);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertEquals(1.0F, multiMatchQueryBuilder1.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder1.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder1.getWriteableName());
      assertNull(multiMatchQueryBuilder2.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder2.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder2.getWriteableName());
      assertEquals("multi_match", multiMatchQueryBuilder3.getWriteableName());
      assertNull(multiMatchQueryBuilder3.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder3.boost(), 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      String string2 = "1%!:_@X]1bK#yw${L%)";
      float float1 = (-550.0F);
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      multiMatchQueryBuilder3.boost = float1;
      assertEquals((-550.0F), multiMatchQueryBuilder0.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals((-550.0F), multiMatchQueryBuilder1.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder1.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder1.getWriteableName());
      assertNull(multiMatchQueryBuilder2.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder2.getWriteableName());
      assertEquals((-550.0F), multiMatchQueryBuilder2.boost(), 0.01F);
      assertEquals((-550.0F), multiMatchQueryBuilder3.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder3.getWriteableName());
      assertNull(multiMatchQueryBuilder3.queryName());
      
      MultiMatchQueryBuilder multiMatchQueryBuilder4 = multiMatchQueryBuilder3.analyzer(string2);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder1);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder2);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder2);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder3);
      assertNotNull(multiMatchQueryBuilder4);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertNotEquals(float0, float1, 0.01F);
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals((-550.0F), multiMatchQueryBuilder0.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals((-550.0F), multiMatchQueryBuilder1.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder1.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder1.getWriteableName());
      assertNull(multiMatchQueryBuilder2.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder2.getWriteableName());
      assertEquals((-550.0F), multiMatchQueryBuilder2.boost(), 0.01F);
      assertEquals((-550.0F), multiMatchQueryBuilder3.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder3.getWriteableName());
      assertNull(multiMatchQueryBuilder3.queryName());
      assertNull(multiMatchQueryBuilder4.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder4.getWriteableName());
      assertEquals((-550.0F), multiMatchQueryBuilder4.boost(), 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      String string3 = null;
      MultiMatchQueryBuilder multiMatchQueryBuilder5 = multiMatchQueryBuilder4.rewrite(string3);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder5);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder2);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder2);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder5, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder5, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder5, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder5, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder5, multiMatchQueryBuilder2);
      assertNotNull(multiMatchQueryBuilder5);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertNotEquals(float0, float1, 0.01F);
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals((-550.0F), multiMatchQueryBuilder0.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals((-550.0F), multiMatchQueryBuilder1.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder1.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder1.getWriteableName());
      assertNull(multiMatchQueryBuilder2.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder2.getWriteableName());
      assertEquals((-550.0F), multiMatchQueryBuilder2.boost(), 0.01F);
      assertEquals((-550.0F), multiMatchQueryBuilder3.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder3.getWriteableName());
      assertNull(multiMatchQueryBuilder3.queryName());
      assertNull(multiMatchQueryBuilder4.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder4.getWriteableName());
      assertEquals((-550.0F), multiMatchQueryBuilder4.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder5.getWriteableName());
      assertEquals((-550.0F), multiMatchQueryBuilder5.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder5.queryName());
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder3.tieBreaker(multiMatchQueryBuilder1.DEFAULT_BOOST);
      assertSame(multiMatchQueryBuilder6, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder6, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder6, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder6, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder6, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder6, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder6);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder5);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder6);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder2);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder6);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder6);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder2);
      assertNotNull(multiMatchQueryBuilder6);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertNotEquals(float0, float1, 0.01F);
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertNull(multiMatchQueryBuilder6.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder6.getWriteableName());
      assertEquals((-550.0F), multiMatchQueryBuilder6.boost(), 0.01F);
      assertEquals((-550.0F), multiMatchQueryBuilder0.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals((-550.0F), multiMatchQueryBuilder1.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder1.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder1.getWriteableName());
      assertNull(multiMatchQueryBuilder2.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder2.getWriteableName());
      assertEquals((-550.0F), multiMatchQueryBuilder2.boost(), 0.01F);
      assertEquals((-550.0F), multiMatchQueryBuilder3.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder3.getWriteableName());
      assertNull(multiMatchQueryBuilder3.queryName());
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      MultiMatchQueryBuilder multiMatchQueryBuilder7 = multiMatchQueryBuilder3.fuzziness(string0);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder7);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder6);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder7, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder7, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder7, multiMatchQueryBuilder6);
      assertSame(multiMatchQueryBuilder7, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder7, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder7, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder7, multiMatchQueryBuilder5);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder6);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder7);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder7);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder6);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder7);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder6);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder2);
      assertNotNull(multiMatchQueryBuilder7);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertNotEquals(float0, float1, 0.01F);
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertEquals((-550.0F), multiMatchQueryBuilder0.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder7.getWriteableName());
      assertEquals((-550.0F), multiMatchQueryBuilder7.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder7.queryName());
      assertEquals((-550.0F), multiMatchQueryBuilder1.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder1.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder1.getWriteableName());
      assertNull(multiMatchQueryBuilder2.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder2.getWriteableName());
      assertEquals((-550.0F), multiMatchQueryBuilder2.boost(), 0.01F);
      assertEquals((-550.0F), multiMatchQueryBuilder3.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder3.getWriteableName());
      assertNull(multiMatchQueryBuilder3.queryName());
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      boolean boolean1 = true;
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean2 = FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder3.useDisMax(boolean1);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder7);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder6);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder8);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder5);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder6);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder7);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder8);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertSame(multiMatchQueryBuilder8, multiMatchQueryBuilder7);
      assertSame(multiMatchQueryBuilder8, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder8, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder8, multiMatchQueryBuilder6);
      assertSame(multiMatchQueryBuilder8, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder8, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder8, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder8, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder8);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder7);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder6);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder7);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder6);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder8);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder2);
      assertNotNull(multiMatchQueryBuilder8);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(boolean1 == boolean2);
      assertTrue(boolean1 == boolean0);
      assertNotEquals(float0, float1, 0.01F);
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertEquals((-550.0F), multiMatchQueryBuilder0.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals((-550.0F), multiMatchQueryBuilder1.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder1.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder1.getWriteableName());
      assertEquals((-550.0F), multiMatchQueryBuilder8.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder8.getWriteableName());
      assertNull(multiMatchQueryBuilder8.queryName());
      assertNull(multiMatchQueryBuilder2.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder2.getWriteableName());
      assertEquals((-550.0F), multiMatchQueryBuilder2.boost(), 0.01F);
      assertEquals((-550.0F), multiMatchQueryBuilder3.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder3.getWriteableName());
      assertNull(multiMatchQueryBuilder3.queryName());
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      String string4 = multiMatchQueryBuilder0.getWriteableName();
      assertEquals("multi_match", string4);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder7);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder6);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder8);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder5);
      assertNotSame(string4, string0);
      assertNotSame(string4, string1);
      assertNotSame(string4, string2);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertEquals((-550.0F), multiMatchQueryBuilder0.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      int int0 = (-9);
      MultiMatchQueryBuilder multiMatchQueryBuilder9 = multiMatchQueryBuilder7.prefixLength(int0);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder7);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder6);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder8);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder9);
      assertSame(multiMatchQueryBuilder7, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder7, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder7, multiMatchQueryBuilder8);
      assertSame(multiMatchQueryBuilder7, multiMatchQueryBuilder6);
      assertSame(multiMatchQueryBuilder7, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder7, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder7, multiMatchQueryBuilder9);
      assertSame(multiMatchQueryBuilder7, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder7, multiMatchQueryBuilder5);
      assertNotSame(string0, string1);
      assertNotSame(string0, string4);
      assertNotSame(string0, string2);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder6);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder9);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder7);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder8);
      assertNotSame(string1, string4);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder8);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder9);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder7);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder6);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder9, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder9, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder9, multiMatchQueryBuilder8);
      assertSame(multiMatchQueryBuilder9, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder9, multiMatchQueryBuilder6);
      assertSame(multiMatchQueryBuilder9, multiMatchQueryBuilder7);
      assertSame(multiMatchQueryBuilder9, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder9, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder9, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder7);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder6);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder8);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder9);
      assertNotNull(multiMatchQueryBuilder9);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string2));
      assertNotEquals(float0, float1, 0.01F);
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertEquals((-550.0F), multiMatchQueryBuilder0.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder7.getWriteableName());
      assertEquals((-550.0F), multiMatchQueryBuilder7.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder7.queryName());
      assertEquals((-550.0F), multiMatchQueryBuilder1.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder1.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder1.getWriteableName());
      assertNull(multiMatchQueryBuilder2.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder2.getWriteableName());
      assertEquals((-550.0F), multiMatchQueryBuilder2.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder9.getWriteableName());
      assertEquals((-550.0F), multiMatchQueryBuilder9.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder9.queryName());
      assertEquals((-550.0F), multiMatchQueryBuilder3.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder3.getWriteableName());
      assertNull(multiMatchQueryBuilder3.queryName());
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      Operator operator0 = Operator.AND;
      MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder2.operator(operator0);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder7);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder10);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder6);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder8);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder9);
      assertNotSame(string0, string1);
      assertNotSame(string0, string4);
      assertNotSame(string0, string2);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder10);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder6);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder9);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder7);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder8);
      assertNotSame(string1, string4);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder8);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder10);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder9);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder7);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder6);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder10, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder10, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder10, multiMatchQueryBuilder8);
      assertSame(multiMatchQueryBuilder10, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder10, multiMatchQueryBuilder7);
      assertSame(multiMatchQueryBuilder10, multiMatchQueryBuilder9);
      assertSame(multiMatchQueryBuilder10, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder10, multiMatchQueryBuilder6);
      assertSame(multiMatchQueryBuilder10, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder10, multiMatchQueryBuilder4);
      assertNotNull(multiMatchQueryBuilder10);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string2));
      assertNotEquals(float0, float1, 0.01F);
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertEquals((-550.0F), multiMatchQueryBuilder0.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals((-550.0F), multiMatchQueryBuilder1.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder1.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder1.getWriteableName());
      assertNull(multiMatchQueryBuilder2.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder2.getWriteableName());
      assertEquals((-550.0F), multiMatchQueryBuilder2.boost(), 0.01F);
      assertEquals((-550.0F), multiMatchQueryBuilder10.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder10.getWriteableName());
      assertNull(multiMatchQueryBuilder10.queryName());
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      String string5 = "org.elasticsearch.index.query.MultiMatchQueryBuilder$Type";
      String string6 = "/^^^oHu_$G";
      MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder1.field(string6);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder11);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder7);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder10);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder6);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder8);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder9);
      assertNotSame(string0, string1);
      assertNotSame(string0, string5);
      assertNotSame(string0, string6);
      assertNotSame(string0, string4);
      assertNotSame(string0, string2);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder10);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder6);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder9);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder11);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder7);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder8);
      assertNotSame(string6, string1);
      assertNotSame(string6, string0);
      assertNotSame(string6, string2);
      assertNotSame(string6, string4);
      assertNotSame(string6, string5);
      assertSame(multiMatchQueryBuilder11, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder11, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder11, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder11, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder11, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder11, multiMatchQueryBuilder9);
      assertSame(multiMatchQueryBuilder11, multiMatchQueryBuilder10);
      assertSame(multiMatchQueryBuilder11, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder11, multiMatchQueryBuilder6);
      assertSame(multiMatchQueryBuilder11, multiMatchQueryBuilder7);
      assertSame(multiMatchQueryBuilder11, multiMatchQueryBuilder8);
      assertNotNull(multiMatchQueryBuilder11);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string5));
      assertFalse(string0.equals((Object)string6));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string2));
      assertNotEquals(float0, float1, 0.01F);
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertEquals((-550.0F), multiMatchQueryBuilder0.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals((-550.0F), multiMatchQueryBuilder1.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder1.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder1.getWriteableName());
      assertEquals("multi_match", multiMatchQueryBuilder11.getWriteableName());
      assertEquals((-550.0F), multiMatchQueryBuilder11.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder11.queryName());
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder4.field(string5);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder11);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder12);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder7);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder10);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder6);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder8);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder9);
      assertNotSame(string0, string1);
      assertNotSame(string0, string5);
      assertNotSame(string0, string6);
      assertNotSame(string0, string4);
      assertNotSame(string0, string2);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder10);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder12);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder6);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder9);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder11);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder7);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder8);
      assertNotSame(string1, string5);
      assertNotSame(string1, string4);
      assertNotSame(string1, string2);
      assertNotSame(string1, string6);
      assertNotSame(string1, string0);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder8);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder10);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder9);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder7);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder12);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder11);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder6);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder7);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder12);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder10);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder11);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder6);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder8);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder9);
      assertNotSame(string2, string5);
      assertNotSame(string2, string0);
      assertNotSame(string2, string6);
      assertNotSame(string2, string4);
      assertNotSame(string2, string1);
      assertNotSame(string5, string1);
      assertNotSame(string5, string0);
      assertNotSame(string5, string6);
      assertNotSame(string5, string4);
      assertNotSame(string5, string2);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder8);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder9);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder12);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder11);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder7);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder10);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder6);
      assertSame(multiMatchQueryBuilder12, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder12, multiMatchQueryBuilder7);
      assertSame(multiMatchQueryBuilder12, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder12, multiMatchQueryBuilder10);
      assertSame(multiMatchQueryBuilder12, multiMatchQueryBuilder11);
      assertSame(multiMatchQueryBuilder12, multiMatchQueryBuilder9);
      assertSame(multiMatchQueryBuilder12, multiMatchQueryBuilder6);
      assertSame(multiMatchQueryBuilder12, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder12, multiMatchQueryBuilder8);
      assertSame(multiMatchQueryBuilder12, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder12, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder12, multiMatchQueryBuilder2);
      assertNotNull(multiMatchQueryBuilder12);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string5));
      assertFalse(string0.equals((Object)string6));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string2));
      assertNotEquals(float0, float1, 0.01F);
      assertFalse(string1.equals((Object)string5));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string6));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string5));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string6));
      assertFalse(string2.equals((Object)string4));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string6));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertEquals((-550.0F), multiMatchQueryBuilder0.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals((-550.0F), multiMatchQueryBuilder1.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder1.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder1.getWriteableName());
      assertNull(multiMatchQueryBuilder2.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder2.getWriteableName());
      assertEquals((-550.0F), multiMatchQueryBuilder2.boost(), 0.01F);
      assertEquals((-550.0F), multiMatchQueryBuilder3.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder3.getWriteableName());
      assertNull(multiMatchQueryBuilder3.queryName());
      assertNull(multiMatchQueryBuilder4.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder4.getWriteableName());
      assertEquals((-550.0F), multiMatchQueryBuilder4.boost(), 0.01F);
      assertEquals((-550.0F), multiMatchQueryBuilder12.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder12.getWriteableName());
      assertNull(multiMatchQueryBuilder12.queryName());
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      MultiMatchQueryBuilder.Type multiMatchQueryBuilder_Type0 = MultiMatchQueryBuilder.Type.BEST_FIELDS;
      MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder1.type(multiMatchQueryBuilder_Type0);
      assertSame(multiMatchQueryBuilder13, multiMatchQueryBuilder10);
      assertSame(multiMatchQueryBuilder13, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder13, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder13, multiMatchQueryBuilder11);
      assertSame(multiMatchQueryBuilder13, multiMatchQueryBuilder9);
      assertSame(multiMatchQueryBuilder13, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder13, multiMatchQueryBuilder8);
      assertSame(multiMatchQueryBuilder13, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder13, multiMatchQueryBuilder12);
      assertSame(multiMatchQueryBuilder13, multiMatchQueryBuilder6);
      assertSame(multiMatchQueryBuilder13, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder13, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder13, multiMatchQueryBuilder7);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder12);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder7);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder6);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder8);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder9);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder11);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder10);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder13);
      assertNotSame(string0, string1);
      assertNotSame(string0, string5);
      assertNotSame(string0, string6);
      assertNotSame(string0, string4);
      assertNotSame(string0, string2);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder13);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder12);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder6);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder11);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder7);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder10);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder9);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder8);
      assertNotNull(multiMatchQueryBuilder13);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string5));
      assertFalse(string0.equals((Object)string6));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string2));
      assertNotEquals(float0, float1, 0.01F);
      assertEquals((-550.0F), multiMatchQueryBuilder13.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder13.getWriteableName());
      assertNull(multiMatchQueryBuilder13.queryName());
      assertEquals((-550.0F), multiMatchQueryBuilder0.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals((-550.0F), multiMatchQueryBuilder1.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder1.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder1.getWriteableName());
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
  }

  @Test(timeout = 11000)
  public void test51()  throws Throwable  {
      MultiMatchQueryBuilder.Type multiMatchQueryBuilder_Type0 = MultiMatchQueryBuilder.Type.CROSS_FIELDS;
      assertEquals(MultiMatchQueryBuilder.Type.CROSS_FIELDS, multiMatchQueryBuilder_Type0);
      assertEquals(0.0F, multiMatchQueryBuilder_Type0.tieBreaker(), 0.01F);
      assertEquals(MatchQuery.Type.BOOLEAN, multiMatchQueryBuilder_Type0.matchQueryType());
      
      float float0 = multiMatchQueryBuilder_Type0.tieBreaker();
      assertEquals(0.0F, float0, 0.01F);
      assertEquals(0.0F, multiMatchQueryBuilder_Type0.tieBreaker(), 0.01F);
      assertEquals(MatchQuery.Type.BOOLEAN, multiMatchQueryBuilder_Type0.matchQueryType());
      
      MultiMatchQueryBuilder multiMatchQueryBuilder0 = MultiMatchQueryBuilder.PROTOTYPE;
      assertNotNull(multiMatchQueryBuilder0);
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      MultiMatchQueryBuilder.Type multiMatchQueryBuilder_Type1 = MultiMatchQueryBuilder.Type.CROSS_FIELDS;
      MultiMatchQueryBuilder multiMatchQueryBuilder1 = multiMatchQueryBuilder0.type(multiMatchQueryBuilder_Type1);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder_Type1, multiMatchQueryBuilder_Type0);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder0);
      assertNotNull(multiMatchQueryBuilder1);
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertEquals(1.0F, multiMatchQueryBuilder1.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder1.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder1.getWriteableName());
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      int int0 = 3221;
      MultiMatchQueryBuilder multiMatchQueryBuilder2 = multiMatchQueryBuilder1.maxExpansions(int0);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder_Type1, multiMatchQueryBuilder_Type0);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder0);
      assertNotNull(multiMatchQueryBuilder2);
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertEquals(1.0F, multiMatchQueryBuilder1.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder1.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder1.getWriteableName());
      assertNull(multiMatchQueryBuilder2.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder2.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder2.getWriteableName());
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      MultiMatchQueryBuilder multiMatchQueryBuilder3 = multiMatchQueryBuilder2.tieBreaker(int0);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder_Type1, multiMatchQueryBuilder_Type0);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder2);
      assertNotNull(multiMatchQueryBuilder3);
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertEquals(1.0F, multiMatchQueryBuilder1.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder1.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder1.getWriteableName());
      assertNull(multiMatchQueryBuilder2.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder2.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder2.getWriteableName());
      assertEquals(1.0F, multiMatchQueryBuilder3.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder3.getWriteableName());
      assertNull(multiMatchQueryBuilder3.queryName());
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      MultiMatchQueryBuilder multiMatchQueryBuilder4 = multiMatchQueryBuilder2.minimumShouldMatch(multiMatchQueryBuilder0.NAME);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder_Type1, multiMatchQueryBuilder_Type0);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder0);
      assertNotNull(multiMatchQueryBuilder4);
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertEquals(1.0F, multiMatchQueryBuilder1.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder1.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder1.getWriteableName());
      assertNull(multiMatchQueryBuilder2.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder2.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder2.getWriteableName());
      assertNull(multiMatchQueryBuilder4.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder4.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder4.getWriteableName());
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      float float1 = 0.0F;
      multiMatchQueryBuilder2.boost = float1;
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals(0.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertEquals(0.0F, multiMatchQueryBuilder1.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder1.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder1.getWriteableName());
      assertNull(multiMatchQueryBuilder2.queryName());
      assertEquals(0.0F, multiMatchQueryBuilder2.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder2.getWriteableName());
      
      MultiMatchQueryBuilder multiMatchQueryBuilder5 = (MultiMatchQueryBuilder)AbstractQueryBuilder.convertToBytesRefIfString(multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder_Type1, multiMatchQueryBuilder_Type0);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder5, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder5, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder5, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder5, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder5, multiMatchQueryBuilder1);
      assertNotNull(multiMatchQueryBuilder5);
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals(0.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertEquals(0.0F, multiMatchQueryBuilder1.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder1.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder1.getWriteableName());
      assertEquals("multi_match", multiMatchQueryBuilder5.getWriteableName());
      assertEquals(0.0F, multiMatchQueryBuilder5.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder5.queryName());
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder5.queryName(multiMatchQueryBuilder0.NAME);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder6);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder_Type1, multiMatchQueryBuilder_Type0);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder6);
      assertSame(multiMatchQueryBuilder5, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder5, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder5, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder5, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder5, multiMatchQueryBuilder6);
      assertSame(multiMatchQueryBuilder5, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder6, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder6, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder6, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder6, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder6, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder6, multiMatchQueryBuilder4);
      assertNotNull(multiMatchQueryBuilder6);
      assertEquals("multi_match", multiMatchQueryBuilder0.queryName());
      assertEquals(0.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertEquals(0.0F, multiMatchQueryBuilder1.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder1.getWriteableName());
      assertEquals("multi_match", multiMatchQueryBuilder1.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder5.getWriteableName());
      assertEquals(0.0F, multiMatchQueryBuilder5.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder5.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder6.queryName());
      assertEquals(0.0F, multiMatchQueryBuilder6.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder6.getWriteableName());
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      MatchQueryBuilder.ZeroTermsQuery matchQueryBuilder_ZeroTermsQuery0 = MatchQueryBuilder.ZeroTermsQuery.NONE;
      MultiMatchQueryBuilder multiMatchQueryBuilder7 = multiMatchQueryBuilder6.zeroTermsQuery(matchQueryBuilder_ZeroTermsQuery0);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder7);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder6);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder_Type1, multiMatchQueryBuilder_Type0);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder7);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder6);
      assertSame(multiMatchQueryBuilder5, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder5, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder5, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder5, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder5, multiMatchQueryBuilder6);
      assertSame(multiMatchQueryBuilder5, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder5, multiMatchQueryBuilder7);
      assertSame(multiMatchQueryBuilder6, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder6, multiMatchQueryBuilder7);
      assertSame(multiMatchQueryBuilder6, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder6, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder6, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder6, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder6, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder7, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder7, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder7, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder7, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder7, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder7, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder7, multiMatchQueryBuilder6);
      assertNotNull(multiMatchQueryBuilder7);
      assertEquals("multi_match", multiMatchQueryBuilder0.queryName());
      assertEquals(0.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertEquals(0.0F, multiMatchQueryBuilder1.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder1.getWriteableName());
      assertEquals("multi_match", multiMatchQueryBuilder1.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder5.getWriteableName());
      assertEquals(0.0F, multiMatchQueryBuilder5.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder5.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder6.queryName());
      assertEquals(0.0F, multiMatchQueryBuilder6.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder6.getWriteableName());
      assertEquals("multi_match", multiMatchQueryBuilder7.getWriteableName());
      assertEquals(0.0F, multiMatchQueryBuilder7.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder7.queryName());
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      MatchQueryBuilder.ZeroTermsQuery matchQueryBuilder_ZeroTermsQuery1 = MatchQueryBuilder.ZeroTermsQuery.ALL;
      String string0 = multiMatchQueryBuilder4.toString();
      assertEquals("{\n  \"multi_match\" : {\n    \"query\" : null,\n    \"fields\" : [ ],\n    \"type\" : \"cross_fields\",\n    \"max_expansions\" : 3221,\n    \"minimum_should_match\" : \"multi_match\",\n    \"tie_breaker\" : 3221.0,\n    \"zero_terms_query\" : \"NONE\",\n    \"boost\" : 0.0,\n    \"_name\" : \"multi_match\"\n  }\n}", string0);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder7);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder6);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder_Type1, multiMatchQueryBuilder_Type0);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder7);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder6);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder7);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder6);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder6);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder7);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder0);
      assertNotNull(string0);
      assertEquals("multi_match", multiMatchQueryBuilder0.queryName());
      assertEquals(0.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertEquals(0.0F, multiMatchQueryBuilder1.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder1.getWriteableName());
      assertEquals("multi_match", multiMatchQueryBuilder1.queryName());
      assertEquals(0.0F, multiMatchQueryBuilder2.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder2.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder2.getWriteableName());
      assertEquals("multi_match", multiMatchQueryBuilder4.queryName());
      assertEquals(0.0F, multiMatchQueryBuilder4.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder4.getWriteableName());
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.zeroTermsQuery(matchQueryBuilder_ZeroTermsQuery1);
      assertSame(multiMatchQueryBuilder8, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder8, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder8, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder8, multiMatchQueryBuilder6);
      assertSame(multiMatchQueryBuilder8, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder8, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder8, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder8, multiMatchQueryBuilder7);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder8);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder7);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder6);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder_Type1, multiMatchQueryBuilder_Type0);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder8);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder7);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder6);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder7);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder8);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder6);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder8);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder6);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder7);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder0);
      assertNotSame(matchQueryBuilder_ZeroTermsQuery1, matchQueryBuilder_ZeroTermsQuery0);
      assertNotNull(multiMatchQueryBuilder8);
      assertFalse(matchQueryBuilder_ZeroTermsQuery1.equals((Object)matchQueryBuilder_ZeroTermsQuery0));
      assertEquals(0.0F, multiMatchQueryBuilder8.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder8.getWriteableName());
      assertEquals("multi_match", multiMatchQueryBuilder8.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder0.queryName());
      assertEquals(0.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertEquals(0.0F, multiMatchQueryBuilder1.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder1.getWriteableName());
      assertEquals("multi_match", multiMatchQueryBuilder1.queryName());
      assertEquals(0.0F, multiMatchQueryBuilder2.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder2.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder2.getWriteableName());
      assertEquals("multi_match", multiMatchQueryBuilder4.queryName());
      assertEquals(0.0F, multiMatchQueryBuilder4.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder4.getWriteableName());
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      Object object0 = null;
      MultiMatchQueryBuilder multiMatchQueryBuilder9 = multiMatchQueryBuilder8.type(object0);
      assertSame(multiMatchQueryBuilder8, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder8, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder8, multiMatchQueryBuilder9);
      assertSame(multiMatchQueryBuilder8, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder8, multiMatchQueryBuilder6);
      assertSame(multiMatchQueryBuilder8, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder8, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder8, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder8, multiMatchQueryBuilder7);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder8);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder9);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder7);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder6);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder9, multiMatchQueryBuilder7);
      assertSame(multiMatchQueryBuilder9, multiMatchQueryBuilder6);
      assertSame(multiMatchQueryBuilder9, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder9, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder9, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder9, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder9, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder9, multiMatchQueryBuilder8);
      assertSame(multiMatchQueryBuilder9, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder_Type1, multiMatchQueryBuilder_Type0);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder8);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder7);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder9);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder6);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder7);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder8);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder6);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder9);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder8);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder9);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder6);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder7);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder0);
      assertNotSame(matchQueryBuilder_ZeroTermsQuery1, matchQueryBuilder_ZeroTermsQuery0);
      assertNotNull(multiMatchQueryBuilder9);
      assertFalse(matchQueryBuilder_ZeroTermsQuery1.equals((Object)matchQueryBuilder_ZeroTermsQuery0));
      assertEquals(0.0F, multiMatchQueryBuilder8.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder8.getWriteableName());
      assertEquals("multi_match", multiMatchQueryBuilder8.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder0.queryName());
      assertEquals(0.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertEquals(0.0F, multiMatchQueryBuilder9.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder9.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder9.getWriteableName());
      assertEquals(0.0F, multiMatchQueryBuilder1.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder1.getWriteableName());
      assertEquals("multi_match", multiMatchQueryBuilder1.queryName());
      assertEquals(0.0F, multiMatchQueryBuilder2.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder2.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder2.getWriteableName());
      assertEquals("multi_match", multiMatchQueryBuilder4.queryName());
      assertEquals(0.0F, multiMatchQueryBuilder4.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder4.getWriteableName());
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      // Undeclared exception!
      try { 
        multiMatchQueryBuilder9.type((Object) matchQueryBuilder_ZeroTermsQuery1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // failed to parse [java.lang.String@0000000138] query type [java.lang.String@0000000139]. unknown type.
         //
         verifyException("org.elasticsearch.index.query.MultiMatchQueryBuilder$Type", e);
      }
  }

  @Test(timeout = 11000)
  public void test52()  throws Throwable  {
      MultiMatchQueryBuilder multiMatchQueryBuilder0 = MultiMatchQueryBuilder.PROTOTYPE;
      assertNotNull(multiMatchQueryBuilder0);
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      MultiMatchQueryBuilder.Type multiMatchQueryBuilder_Type0 = MultiMatchQueryBuilder.Type.MOST_FIELDS;
      MultiMatchQueryBuilder multiMatchQueryBuilder1 = multiMatchQueryBuilder0.type(multiMatchQueryBuilder_Type0);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder0);
      assertNotNull(multiMatchQueryBuilder1);
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertEquals("multi_match", multiMatchQueryBuilder1.getWriteableName());
      assertEquals(1.0F, multiMatchQueryBuilder1.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder1.queryName());
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      int int0 = 2960;
      MultiMatchQueryBuilder multiMatchQueryBuilder2 = multiMatchQueryBuilder1.maxExpansions(int0);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder1);
      assertNotNull(multiMatchQueryBuilder2);
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertEquals("multi_match", multiMatchQueryBuilder1.getWriteableName());
      assertEquals(1.0F, multiMatchQueryBuilder1.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder1.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder2.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder2.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder2.getWriteableName());
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      multiMatchQueryBuilder2.boost = multiMatchQueryBuilder1.DEFAULT_BOOST;
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertEquals("multi_match", multiMatchQueryBuilder1.getWriteableName());
      assertEquals(1.0F, multiMatchQueryBuilder1.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder1.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder2.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder2.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder2.getWriteableName());
      
      MultiMatchQueryBuilder multiMatchQueryBuilder3 = multiMatchQueryBuilder2.field(multiMatchQueryBuilder1.NAME, (float) int0);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder2);
      assertNotNull(multiMatchQueryBuilder3);
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertEquals("multi_match", multiMatchQueryBuilder1.getWriteableName());
      assertEquals(1.0F, multiMatchQueryBuilder1.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder1.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder2.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder2.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder2.getWriteableName());
      assertNull(multiMatchQueryBuilder3.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder3.getWriteableName());
      assertEquals(1.0F, multiMatchQueryBuilder3.boost(), 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = true;
      float float0 = 0.0F;
      multiMatchQueryBuilder0.boost = float0;
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals(0.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      
      boolean boolean1 = false;
      boolean boolean2 = FileSystemHandling.setPermissions(evoSuiteFile0, boolean0, boolean1, boolean0);
      assertFalse(boolean2);
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      boolean boolean3 = FileSystemHandling.appendStringToFile(evoSuiteFile0, multiMatchQueryBuilder1.NAME);
      assertFalse(boolean3);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder2);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals(0.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertEquals("multi_match", multiMatchQueryBuilder1.getWriteableName());
      assertEquals(0.0F, multiMatchQueryBuilder1.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder1.queryName());
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      MultiMatchQueryBuilder multiMatchQueryBuilder4 = multiMatchQueryBuilder3.cutoffFrequency(multiMatchQueryBuilder0.DEFAULT_BOOST);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder3);
      assertNotNull(multiMatchQueryBuilder4);
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals(0.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertEquals("multi_match", multiMatchQueryBuilder1.getWriteableName());
      assertEquals(0.0F, multiMatchQueryBuilder1.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder1.queryName());
      assertEquals(0.0F, multiMatchQueryBuilder2.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder2.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder2.getWriteableName());
      assertNull(multiMatchQueryBuilder3.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder3.getWriteableName());
      assertEquals(0.0F, multiMatchQueryBuilder3.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder4.queryName());
      assertEquals(0.0F, multiMatchQueryBuilder4.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder4.getWriteableName());
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      MultiMatchQueryBuilder multiMatchQueryBuilder5 = multiMatchQueryBuilder4.slop(int0);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder5, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder5, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder5, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder5, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder5, multiMatchQueryBuilder0);
      assertNotNull(multiMatchQueryBuilder5);
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals(0.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertEquals("multi_match", multiMatchQueryBuilder1.getWriteableName());
      assertEquals(0.0F, multiMatchQueryBuilder1.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder1.queryName());
      assertEquals(0.0F, multiMatchQueryBuilder2.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder2.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder2.getWriteableName());
      assertNull(multiMatchQueryBuilder3.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder3.getWriteableName());
      assertEquals(0.0F, multiMatchQueryBuilder3.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder4.queryName());
      assertEquals(0.0F, multiMatchQueryBuilder4.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder4.getWriteableName());
      assertEquals(0.0F, multiMatchQueryBuilder5.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder5.getWriteableName());
      assertNull(multiMatchQueryBuilder5.queryName());
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder0.analyzer(multiMatchQueryBuilder1.NAME);
      assertSame(multiMatchQueryBuilder6, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder6, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder6, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder6, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder6, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder6, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder6);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder6);
      assertNotNull(multiMatchQueryBuilder6);
      assertNull(multiMatchQueryBuilder6.queryName());
      assertEquals(0.0F, multiMatchQueryBuilder6.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder6.getWriteableName());
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals(0.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertEquals("multi_match", multiMatchQueryBuilder1.getWriteableName());
      assertEquals(0.0F, multiMatchQueryBuilder1.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder1.queryName());
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      String string0 = "zero_terms_query";
      MultiMatchQueryBuilder multiMatchQueryBuilder7 = multiMatchQueryBuilder0.analyzer(string0);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder6);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder7);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder7, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder7, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder7, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder7, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder7, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder7, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder7, multiMatchQueryBuilder6);
      assertNotNull(multiMatchQueryBuilder7);
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals(0.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertEquals("multi_match", multiMatchQueryBuilder7.getWriteableName());
      assertEquals(0.0F, multiMatchQueryBuilder7.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder7.queryName());
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      String string1 = "IDhxK{t.hSNj^ed5Ppz";
      MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder7.minimumShouldMatch(string1);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder6);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder8);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder7);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder3);
      assertNotSame(string0, string1);
      assertSame(multiMatchQueryBuilder7, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder7, multiMatchQueryBuilder8);
      assertSame(multiMatchQueryBuilder7, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder7, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder7, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder7, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder7, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder7, multiMatchQueryBuilder6);
      assertNotSame(string1, string0);
      assertSame(multiMatchQueryBuilder8, multiMatchQueryBuilder6);
      assertSame(multiMatchQueryBuilder8, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder8, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder8, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder8, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder8, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder8, multiMatchQueryBuilder7);
      assertSame(multiMatchQueryBuilder8, multiMatchQueryBuilder5);
      assertNotNull(multiMatchQueryBuilder8);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals(0.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertEquals("multi_match", multiMatchQueryBuilder7.getWriteableName());
      assertEquals(0.0F, multiMatchQueryBuilder7.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder7.queryName());
      assertNull(multiMatchQueryBuilder8.queryName());
      assertEquals(0.0F, multiMatchQueryBuilder8.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder8.getWriteableName());
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      Operator operator0 = Operator.OR;
      MultiMatchQueryBuilder multiMatchQueryBuilder9 = multiMatchQueryBuilder7.operator(operator0);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder9);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder6);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder8);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder7);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder3);
      assertNotSame(string0, string1);
      assertSame(multiMatchQueryBuilder7, multiMatchQueryBuilder9);
      assertSame(multiMatchQueryBuilder7, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder7, multiMatchQueryBuilder8);
      assertSame(multiMatchQueryBuilder7, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder7, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder7, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder7, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder7, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder7, multiMatchQueryBuilder6);
      assertSame(multiMatchQueryBuilder9, multiMatchQueryBuilder8);
      assertSame(multiMatchQueryBuilder9, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder9, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder9, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder9, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder9, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder9, multiMatchQueryBuilder6);
      assertSame(multiMatchQueryBuilder9, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder9, multiMatchQueryBuilder7);
      assertNotNull(multiMatchQueryBuilder9);
      assertFalse(string0.equals((Object)string1));
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals(0.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertEquals("multi_match", multiMatchQueryBuilder7.getWriteableName());
      assertEquals(0.0F, multiMatchQueryBuilder7.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder7.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder9.getWriteableName());
      assertNull(multiMatchQueryBuilder9.queryName());
      assertEquals(0.0F, multiMatchQueryBuilder9.boost(), 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      int int1 = 110;
      Random.setNextRandom(int1);
      assertFalse(int1 == int0);
      
      LineStringBuilder lineStringBuilder0 = ShapeBuilder.newLineString();
      assertNotNull(lineStringBuilder0);
      assertEquals(ShapeBuilder.GeoShapeType.LINESTRING, lineStringBuilder0.type());
      assertEquals(180.0, ShapeBuilder.DATELINE, 0.01);
      
      // Undeclared exception!
      try { 
        lineStringBuilder0.build();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.elasticsearch.common.geo.builders.BaseLineStringBuilder", e);
      }
  }

  @Test(timeout = 11000)
  public void test53()  throws Throwable  {
      MultiMatchQueryBuilder multiMatchQueryBuilder0 = MultiMatchQueryBuilder.PROTOTYPE;
      assertNotNull(multiMatchQueryBuilder0);
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      String string0 = "";
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      MultiMatchQueryBuilder multiMatchQueryBuilder1 = multiMatchQueryBuilder0.minimumShouldMatch(string0);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder0);
      assertNotNull(multiMatchQueryBuilder1);
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertEquals(1.0F, multiMatchQueryBuilder1.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder1.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder1.getWriteableName());
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      String string1 = "";
      MultiMatchQueryBuilder multiMatchQueryBuilder2 = multiMatchQueryBuilder1.rewrite(string1);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder1);
      assertSame(string0, string1);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder2);
      assertSame(string1, string0);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder0);
      assertNotNull(multiMatchQueryBuilder2);
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertEquals(1.0F, multiMatchQueryBuilder1.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder1.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder1.getWriteableName());
      assertNull(multiMatchQueryBuilder2.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder2.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder2.getWriteableName());
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      String string2 = "Failed to parse";
      multiMatchQueryBuilder2.queryName = string2;
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertEquals("Failed to parse", multiMatchQueryBuilder0.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertEquals(1.0F, multiMatchQueryBuilder1.boost(), 0.01F);
      assertEquals("Failed to parse", multiMatchQueryBuilder1.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder1.getWriteableName());
      assertEquals(1.0F, multiMatchQueryBuilder2.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder2.getWriteableName());
      assertEquals("Failed to parse", multiMatchQueryBuilder2.queryName());
      
      MultiMatchQueryBuilder multiMatchQueryBuilder3 = multiMatchQueryBuilder2.tieBreaker(multiMatchQueryBuilder0.DEFAULT_BOOST);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder1);
      assertSame(string0, string1);
      assertNotSame(string0, string2);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder2);
      assertNotSame(string1, string2);
      assertSame(string1, string0);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder0);
      assertNotNull(multiMatchQueryBuilder3);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string2));
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertEquals("Failed to parse", multiMatchQueryBuilder0.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertEquals(1.0F, multiMatchQueryBuilder1.boost(), 0.01F);
      assertEquals("Failed to parse", multiMatchQueryBuilder1.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder1.getWriteableName());
      assertEquals(1.0F, multiMatchQueryBuilder2.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder2.getWriteableName());
      assertEquals("Failed to parse", multiMatchQueryBuilder2.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder3.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder3.getWriteableName());
      assertEquals("Failed to parse", multiMatchQueryBuilder3.queryName());
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      MultiMatchQueryBuilder.Type[] multiMatchQueryBuilder_TypeArray0 = MultiMatchQueryBuilder.Type.values();
      assertEquals(5, multiMatchQueryBuilder_TypeArray0.length);
      assertNotNull(multiMatchQueryBuilder_TypeArray0);
      
      MultiMatchQueryBuilder multiMatchQueryBuilder4 = multiMatchQueryBuilder1.minimumShouldMatch(multiMatchQueryBuilder2.NAME);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder1);
      assertSame(string0, string1);
      assertNotSame(string0, string2);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder4);
      assertNotSame(string1, string2);
      assertSame(string1, string0);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder0);
      assertNotNull(multiMatchQueryBuilder4);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string2));
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertEquals("Failed to parse", multiMatchQueryBuilder0.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertEquals(1.0F, multiMatchQueryBuilder1.boost(), 0.01F);
      assertEquals("Failed to parse", multiMatchQueryBuilder1.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder1.getWriteableName());
      assertEquals(1.0F, multiMatchQueryBuilder2.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder2.getWriteableName());
      assertEquals("Failed to parse", multiMatchQueryBuilder2.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder4.getWriteableName());
      assertEquals(1.0F, multiMatchQueryBuilder4.boost(), 0.01F);
      assertEquals("Failed to parse", multiMatchQueryBuilder4.queryName());
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      Object object0 = AbstractQueryBuilder.convertToStringIfBytesRef(string2);
      assertEquals("Failed to parse", object0);
      assertSame(string2, object0);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(object0, string0);
      assertNotSame(object0, string1);
      assertSame(object0, string2);
      assertNotNull(object0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(object0.equals((Object)string0));
      assertFalse(object0.equals((Object)string1));
      
      String string3 = multiMatchQueryBuilder4.getWriteableName();
      assertEquals("multi_match", string3);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder1);
      assertNotSame(string0, object0);
      assertSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string0, string3);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder4);
      assertNotSame(string1, string2);
      assertNotSame(string1, object0);
      assertNotSame(string1, string3);
      assertSame(string1, string0);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder0);
      assertNotSame(string3, string2);
      assertNotSame(string3, object0);
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
      assertNotNull(string3);
      assertFalse(string0.equals((Object)object0));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)object0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)object0));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertEquals("Failed to parse", multiMatchQueryBuilder0.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertEquals(1.0F, multiMatchQueryBuilder1.boost(), 0.01F);
      assertEquals("Failed to parse", multiMatchQueryBuilder1.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder1.getWriteableName());
      assertEquals(1.0F, multiMatchQueryBuilder2.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder2.getWriteableName());
      assertEquals("Failed to parse", multiMatchQueryBuilder2.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder4.getWriteableName());
      assertEquals(1.0F, multiMatchQueryBuilder4.boost(), 0.01F);
      assertEquals("Failed to parse", multiMatchQueryBuilder4.queryName());
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      int int0 = 1412;
      MultiMatchQueryBuilder multiMatchQueryBuilder5 = multiMatchQueryBuilder0.prefixLength(int0);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder5, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder5, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder5, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder5, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder5, multiMatchQueryBuilder0);
      assertNotNull(multiMatchQueryBuilder5);
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertEquals("Failed to parse", multiMatchQueryBuilder0.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder5.getWriteableName());
      assertEquals("Failed to parse", multiMatchQueryBuilder5.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder5.boost(), 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      float float0 = (-423.49F);
      multiMatchQueryBuilder5.boost = float0;
      assertEquals((-423.49F), multiMatchQueryBuilder0.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertEquals("Failed to parse", multiMatchQueryBuilder0.queryName());
      assertEquals((-423.49F), multiMatchQueryBuilder5.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder5.getWriteableName());
      assertEquals("Failed to parse", multiMatchQueryBuilder5.queryName());
      
      MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder2.maxExpansions(int0);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder6);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder6, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder6, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder6, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder6, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder6, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder6, multiMatchQueryBuilder4);
      assertNotSame(string0, object0);
      assertSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string0, string3);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder6);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder4);
      assertNotSame(string1, string2);
      assertNotSame(string1, object0);
      assertNotSame(string1, string3);
      assertSame(string1, string0);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder6);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder0);
      assertNotNull(multiMatchQueryBuilder6);
      assertFalse(string0.equals((Object)object0));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)object0));
      assertFalse(string1.equals((Object)string3));
      assertEquals((-423.49F), multiMatchQueryBuilder0.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertEquals("Failed to parse", multiMatchQueryBuilder0.queryName());
      assertEquals("Failed to parse", multiMatchQueryBuilder6.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder6.getWriteableName());
      assertEquals((-423.49F), multiMatchQueryBuilder6.boost(), 0.01F);
      assertEquals((-423.49F), multiMatchQueryBuilder1.boost(), 0.01F);
      assertEquals("Failed to parse", multiMatchQueryBuilder1.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder1.getWriteableName());
      assertEquals("multi_match", multiMatchQueryBuilder2.getWriteableName());
      assertEquals((-423.49F), multiMatchQueryBuilder2.boost(), 0.01F);
      assertEquals("Failed to parse", multiMatchQueryBuilder2.queryName());
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      String string4 = "JW7skV!N:j~uc";
      MultiMatchQueryBuilder multiMatchQueryBuilder7 = multiMatchQueryBuilder3.rewrite(string4);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder7);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder6);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder1);
      assertNotSame(string0, object0);
      assertSame(string0, string1);
      assertNotSame(string0, string4);
      assertNotSame(string0, string2);
      assertNotSame(string0, string3);
      assertNotSame(string4, object0);
      assertNotSame(string4, string2);
      assertNotSame(string4, string0);
      assertNotSame(string4, string1);
      assertNotSame(string4, string3);
      assertSame(multiMatchQueryBuilder7, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder7, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder7, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder7, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder7, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder7, multiMatchQueryBuilder6);
      assertSame(multiMatchQueryBuilder7, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder7);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder6);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder4);
      assertNotSame(string1, string2);
      assertNotSame(string1, object0);
      assertNotSame(string1, string3);
      assertNotSame(string1, string4);
      assertSame(string1, string0);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder7);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder6);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder6);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder7);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder0);
      assertNotNull(multiMatchQueryBuilder7);
      assertFalse(string0.equals((Object)object0));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string4.equals((Object)object0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)object0));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string4));
      assertEquals((-423.49F), multiMatchQueryBuilder0.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertEquals("Failed to parse", multiMatchQueryBuilder0.queryName());
      assertEquals((-423.49F), multiMatchQueryBuilder7.boost(), 0.01F);
      assertEquals("Failed to parse", multiMatchQueryBuilder7.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder7.getWriteableName());
      assertEquals((-423.49F), multiMatchQueryBuilder1.boost(), 0.01F);
      assertEquals("Failed to parse", multiMatchQueryBuilder1.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder1.getWriteableName());
      assertEquals("multi_match", multiMatchQueryBuilder2.getWriteableName());
      assertEquals((-423.49F), multiMatchQueryBuilder2.boost(), 0.01F);
      assertEquals("Failed to parse", multiMatchQueryBuilder2.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder3.getWriteableName());
      assertEquals((-423.49F), multiMatchQueryBuilder3.boost(), 0.01F);
      assertEquals("Failed to parse", multiMatchQueryBuilder3.queryName());
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      // Undeclared exception!
      try { 
        MultiMatchQueryBuilder.Type.valueOf(multiMatchQueryBuilder6.NAME);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.multi_match
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 11000)
  public void test54()  throws Throwable  {
      MultiMatchQueryBuilder multiMatchQueryBuilder0 = MultiMatchQueryBuilder.PROTOTYPE;
      assertNotNull(multiMatchQueryBuilder0);
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      String string0 = "Expected a numeric value in [missing] but got [";
      float float0 = 0.0F;
      multiMatchQueryBuilder0.boost = float0;
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals(0.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      
      MultiMatchQueryBuilder multiMatchQueryBuilder1 = multiMatchQueryBuilder0.fuzzyRewrite(string0);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder0);
      assertNotNull(multiMatchQueryBuilder1);
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals(0.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder1.getWriteableName());
      assertNull(multiMatchQueryBuilder1.queryName());
      assertEquals(0.0F, multiMatchQueryBuilder1.boost(), 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      int int0 = 4;
      MultiMatchQueryBuilder multiMatchQueryBuilder2 = multiMatchQueryBuilder1.prefixLength(int0);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder0);
      assertNotNull(multiMatchQueryBuilder2);
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals(0.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder1.getWriteableName());
      assertNull(multiMatchQueryBuilder1.queryName());
      assertEquals(0.0F, multiMatchQueryBuilder1.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder2.queryName());
      assertEquals(0.0F, multiMatchQueryBuilder2.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder2.getWriteableName());
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      boolean boolean0 = true;
      MultiMatchQueryBuilder multiMatchQueryBuilder3 = multiMatchQueryBuilder2.lenient(boolean0);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder1);
      assertNotNull(multiMatchQueryBuilder3);
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals(0.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder1.getWriteableName());
      assertNull(multiMatchQueryBuilder1.queryName());
      assertEquals(0.0F, multiMatchQueryBuilder1.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder2.queryName());
      assertEquals(0.0F, multiMatchQueryBuilder2.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder2.getWriteableName());
      assertEquals("multi_match", multiMatchQueryBuilder3.getWriteableName());
      assertEquals(0.0F, multiMatchQueryBuilder3.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder3.queryName());
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      MultiMatchQueryBuilder multiMatchQueryBuilder4 = multiMatchQueryBuilder3.slop(int0);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder3);
      assertNotNull(multiMatchQueryBuilder4);
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals(0.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder1.getWriteableName());
      assertNull(multiMatchQueryBuilder1.queryName());
      assertEquals(0.0F, multiMatchQueryBuilder1.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder2.queryName());
      assertEquals(0.0F, multiMatchQueryBuilder2.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder2.getWriteableName());
      assertEquals("multi_match", multiMatchQueryBuilder3.getWriteableName());
      assertEquals(0.0F, multiMatchQueryBuilder3.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder3.queryName());
      assertNull(multiMatchQueryBuilder4.queryName());
      assertEquals(0.0F, multiMatchQueryBuilder4.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder4.getWriteableName());
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      Settings settings0 = Settings.Builder.EMPTY_SETTINGS;
      assertNotNull(settings0);
      assertTrue(settings0.getSettingsRequireUnits());
      
      CircuitBreakerService circuitBreakerService0 = null;
      Object object0 = null;
      MultiMatchQueryBuilder multiMatchQueryBuilder5 = multiMatchQueryBuilder0.type(object0);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder5, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder5, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder5, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder5, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder5, multiMatchQueryBuilder4);
      assertNotNull(multiMatchQueryBuilder5);
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals(0.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder5.getWriteableName());
      assertEquals(0.0F, multiMatchQueryBuilder5.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder5.queryName());
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      Object object1 = null;
      // Undeclared exception!
      try { 
        multiMatchQueryBuilder3.fuzziness(object1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 11000)
  public void test55()  throws Throwable  {
      MultiMatchQueryBuilder multiMatchQueryBuilder0 = MultiMatchQueryBuilder.PROTOTYPE;
      assertNotNull(multiMatchQueryBuilder0);
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertEquals(1.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      String string0 = "Expected a numeric value in [missing] but got [";
      int int0 = 4;
      MultiMatchQueryBuilder multiMatchQueryBuilder1 = multiMatchQueryBuilder0.prefixLength(int0);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder0);
      assertNotNull(multiMatchQueryBuilder1);
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertEquals(1.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder1.getWriteableName());
      assertNull(multiMatchQueryBuilder1.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder1.boost(), 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      boolean boolean0 = true;
      MultiMatchQueryBuilder multiMatchQueryBuilder2 = multiMatchQueryBuilder1.lenient(boolean0);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder1);
      assertNotNull(multiMatchQueryBuilder2);
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertEquals(1.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder1.getWriteableName());
      assertNull(multiMatchQueryBuilder1.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder1.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder2.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder2.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder2.getWriteableName());
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      MultiMatchQueryBuilder multiMatchQueryBuilder3 = multiMatchQueryBuilder2.slop(int0);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder2);
      assertNotNull(multiMatchQueryBuilder3);
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertEquals(1.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder1.getWriteableName());
      assertNull(multiMatchQueryBuilder1.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder1.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder2.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder2.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder2.getWriteableName());
      assertEquals(1.0F, multiMatchQueryBuilder3.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder3.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder3.getWriteableName());
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      Settings settings0 = Settings.Builder.EMPTY_SETTINGS;
      assertNotNull(settings0);
      assertTrue(settings0.getSettingsRequireUnits());
      
      XContentType xContentType0 = XContentType.YAML;
      BytesReference bytesReference0 = multiMatchQueryBuilder0.buildAsBytes(xContentType0);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder2);
      assertNotNull(bytesReference0);
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertEquals(1.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertTrue(bytesReference0.hasArray());
      assertEquals(102, bytesReference0.length());
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      CircuitBreakerService circuitBreakerService0 = null;
      Object object0 = null;
      MultiMatchQueryBuilder multiMatchQueryBuilder4 = multiMatchQueryBuilder0.type(object0);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder1);
      assertNotNull(multiMatchQueryBuilder4);
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertEquals(1.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertEquals(1.0F, multiMatchQueryBuilder4.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder4.getWriteableName());
      assertNull(multiMatchQueryBuilder4.queryName());
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      float float0 = (-2180.0F);
      MultiMatchQueryBuilder multiMatchQueryBuilder5 = multiMatchQueryBuilder4.boost(float0);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder5, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder5, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder5, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder5, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder5, multiMatchQueryBuilder2);
      assertNotNull(multiMatchQueryBuilder5);
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertEquals((-2180.0F), multiMatchQueryBuilder0.boost(), 0.01F);
      assertEquals((-2180.0F), multiMatchQueryBuilder4.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder4.getWriteableName());
      assertNull(multiMatchQueryBuilder4.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder5.getWriteableName());
      assertNull(multiMatchQueryBuilder5.queryName());
      assertEquals((-2180.0F), multiMatchQueryBuilder5.boost(), 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      int int1 = multiMatchQueryBuilder0.doHashCode();
      assertEquals(148, int1);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder5);
      assertFalse(int1 == int0);
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertEquals((-2180.0F), multiMatchQueryBuilder0.boost(), 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      Object object1 = new Object();
      assertNotNull(object1);
      
      MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder3.fuzzyRewrite(multiMatchQueryBuilder2.NAME);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder6);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder6, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder6, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder6, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder6, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder6, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder6, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder6);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder6);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder6);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder2);
      assertNotNull(multiMatchQueryBuilder6);
      assertFalse(int0 == int1);
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertEquals((-2180.0F), multiMatchQueryBuilder0.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder6.queryName());
      assertEquals((-2180.0F), multiMatchQueryBuilder6.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder6.getWriteableName());
      assertEquals("multi_match", multiMatchQueryBuilder1.getWriteableName());
      assertNull(multiMatchQueryBuilder1.queryName());
      assertEquals((-2180.0F), multiMatchQueryBuilder1.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder2.queryName());
      assertEquals((-2180.0F), multiMatchQueryBuilder2.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder2.getWriteableName());
      assertEquals((-2180.0F), multiMatchQueryBuilder3.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder3.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder3.getWriteableName());
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      MultiMatchQueryBuilder multiMatchQueryBuilder7 = multiMatchQueryBuilder3.fuzziness(object1);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder6);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder7);
      assertSame(multiMatchQueryBuilder7, multiMatchQueryBuilder6);
      assertSame(multiMatchQueryBuilder7, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder7, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder7, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder7, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder7, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder7, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder6);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder7);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder7);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder6);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder7);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder6);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder2);
      assertNotNull(multiMatchQueryBuilder7);
      assertFalse(int0 == int1);
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertEquals((-2180.0F), multiMatchQueryBuilder0.boost(), 0.01F);
      assertEquals((-2180.0F), multiMatchQueryBuilder7.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder7.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder7.getWriteableName());
      assertEquals("multi_match", multiMatchQueryBuilder1.getWriteableName());
      assertNull(multiMatchQueryBuilder1.queryName());
      assertEquals((-2180.0F), multiMatchQueryBuilder1.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder2.queryName());
      assertEquals((-2180.0F), multiMatchQueryBuilder2.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder2.getWriteableName());
      assertEquals((-2180.0F), multiMatchQueryBuilder3.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder3.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder3.getWriteableName());
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      int int2 = (-1747);
      MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.slop(int2);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder6);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder8);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder7);
      assertSame(multiMatchQueryBuilder8, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder8, multiMatchQueryBuilder7);
      assertSame(multiMatchQueryBuilder8, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder8, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder8, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder8, multiMatchQueryBuilder6);
      assertSame(multiMatchQueryBuilder8, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder8, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder6);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder8);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder7);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder1);
      assertNotNull(multiMatchQueryBuilder8);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertEquals((-2180.0F), multiMatchQueryBuilder0.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder8.queryName());
      assertEquals((-2180.0F), multiMatchQueryBuilder8.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder8.getWriteableName());
      assertEquals((-2180.0F), multiMatchQueryBuilder4.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder4.getWriteableName());
      assertNull(multiMatchQueryBuilder4.queryName());
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      float float1 = 667.8F;
      MultiMatchQueryBuilder multiMatchQueryBuilder9 = multiMatchQueryBuilder7.cutoffFrequency(float1);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder9);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder6);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder8);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder7);
      assertSame(multiMatchQueryBuilder7, multiMatchQueryBuilder6);
      assertSame(multiMatchQueryBuilder7, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder7, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder7, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder7, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder7, multiMatchQueryBuilder8);
      assertSame(multiMatchQueryBuilder7, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder7, multiMatchQueryBuilder9);
      assertSame(multiMatchQueryBuilder7, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder9);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder8);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder6);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder7);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder8);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder7);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder6);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder9);
      assertSame(multiMatchQueryBuilder9, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder9, multiMatchQueryBuilder6);
      assertSame(multiMatchQueryBuilder9, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder9, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder9, multiMatchQueryBuilder7);
      assertSame(multiMatchQueryBuilder9, multiMatchQueryBuilder8);
      assertSame(multiMatchQueryBuilder9, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder9, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder9, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder8);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder7);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder6);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder9);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder2);
      assertNotNull(multiMatchQueryBuilder9);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertNotEquals(float1, float0, 0.01F);
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertEquals((-2180.0F), multiMatchQueryBuilder0.boost(), 0.01F);
      assertEquals((-2180.0F), multiMatchQueryBuilder7.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder7.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder7.getWriteableName());
      assertEquals("multi_match", multiMatchQueryBuilder1.getWriteableName());
      assertNull(multiMatchQueryBuilder1.queryName());
      assertEquals((-2180.0F), multiMatchQueryBuilder1.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder2.queryName());
      assertEquals((-2180.0F), multiMatchQueryBuilder2.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder2.getWriteableName());
      assertNull(multiMatchQueryBuilder9.queryName());
      assertEquals((-2180.0F), multiMatchQueryBuilder9.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder9.getWriteableName());
      assertEquals((-2180.0F), multiMatchQueryBuilder3.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder3.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder3.getWriteableName());
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      boolean boolean1 = false;
      MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder5.lenient(boolean1);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder9);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder6);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder8);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder7);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder10);
      assertSame(multiMatchQueryBuilder10, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder10, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder10, multiMatchQueryBuilder6);
      assertSame(multiMatchQueryBuilder10, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder10, multiMatchQueryBuilder8);
      assertSame(multiMatchQueryBuilder10, multiMatchQueryBuilder7);
      assertSame(multiMatchQueryBuilder10, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder10, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder10, multiMatchQueryBuilder9);
      assertSame(multiMatchQueryBuilder10, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder6);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder9);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder8);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder7);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder10);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder5, multiMatchQueryBuilder7);
      assertSame(multiMatchQueryBuilder5, multiMatchQueryBuilder10);
      assertSame(multiMatchQueryBuilder5, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder5, multiMatchQueryBuilder8);
      assertSame(multiMatchQueryBuilder5, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder5, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder5, multiMatchQueryBuilder6);
      assertSame(multiMatchQueryBuilder5, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder5, multiMatchQueryBuilder9);
      assertSame(multiMatchQueryBuilder5, multiMatchQueryBuilder2);
      assertNotNull(multiMatchQueryBuilder10);
      assertFalse(boolean1 == boolean0);
      assertNotEquals(float0, float1, 0.01F);
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertEquals((-2180.0F), multiMatchQueryBuilder0.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder10.queryName());
      assertEquals((-2180.0F), multiMatchQueryBuilder10.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder10.getWriteableName());
      assertEquals((-2180.0F), multiMatchQueryBuilder4.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder4.getWriteableName());
      assertNull(multiMatchQueryBuilder4.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder5.getWriteableName());
      assertNull(multiMatchQueryBuilder5.queryName());
      assertEquals((-2180.0F), multiMatchQueryBuilder5.boost(), 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
  }

  @Test(timeout = 11000)
  public void test56()  throws Throwable  {
      Object object0 = null;
      String[] stringArray0 = new String[7];
      String string0 = "";
      stringArray0[3] = stringArray0[1];
      MultiMatchQueryBuilder multiMatchQueryBuilder0 = new MultiMatchQueryBuilder(object0, stringArray0);
      assertEquals(7, stringArray0.length);
      assertNotNull(multiMatchQueryBuilder0);
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      MultiMatchQueryBuilder multiMatchQueryBuilder1 = multiMatchQueryBuilder0.minimumShouldMatch(string0);
      assertEquals(7, stringArray0.length);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder0);
      assertNotNull(multiMatchQueryBuilder1);
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertNull(multiMatchQueryBuilder1.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder1.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder1.getWriteableName());
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      XContentBuilder xContentBuilder0 = JsonXContent.contentBuilder();
      assertNotNull(xContentBuilder0);
      assertFalse(xContentBuilder0.humanReadable());
      assertEquals(XContentType.JSON, xContentBuilder0.contentType());
      
      ToXContent.Params toXContent_Params0 = ToXContent.EMPTY_PARAMS;
      assertNotNull(toXContent_Params0);
      
      multiMatchQueryBuilder1.doXContent(xContentBuilder0, toXContent_Params0);
      assertEquals(7, stringArray0.length);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder0);
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertNull(multiMatchQueryBuilder1.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder1.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder1.getWriteableName());
      assertFalse(xContentBuilder0.humanReadable());
      assertEquals(XContentType.JSON, xContentBuilder0.contentType());
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      MultiMatchQueryBuilder multiMatchQueryBuilder2 = multiMatchQueryBuilder0.rewrite(stringArray0[1]);
      assertEquals(7, stringArray0.length);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder0);
      assertNotNull(multiMatchQueryBuilder2);
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertNull(multiMatchQueryBuilder2.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder2.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder2.getWriteableName());
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      MultiMatchQueryBuilder multiMatchQueryBuilder3 = multiMatchQueryBuilder2.field(string0, multiMatchQueryBuilder0.DEFAULT_BOOST);
      assertEquals(7, stringArray0.length);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder2);
      assertNotNull(multiMatchQueryBuilder3);
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertNull(multiMatchQueryBuilder2.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder2.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder2.getWriteableName());
      assertEquals(1.0F, multiMatchQueryBuilder3.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder3.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder3.getWriteableName());
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      // Undeclared exception!
      try { 
        multiMatchQueryBuilder1.fuzziness(stringArray0[6]);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 11000)
  public void test57()  throws Throwable  {
      Object object0 = null;
      String[] stringArray0 = new String[7];
      stringArray0[3] = stringArray0[1];
      MultiMatchQueryBuilder multiMatchQueryBuilder0 = new MultiMatchQueryBuilder(object0, stringArray0);
      assertEquals(7, stringArray0.length);
      assertNotNull(multiMatchQueryBuilder0);
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertEquals(1.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      XContentBuilder xContentBuilder0 = JsonXContent.contentBuilder();
      assertNotNull(xContentBuilder0);
      assertFalse(xContentBuilder0.humanReadable());
      assertEquals(XContentType.JSON, xContentBuilder0.contentType());
      
      ToXContent.Params toXContent_Params0 = ToXContent.EMPTY_PARAMS;
      assertNotNull(toXContent_Params0);
      
      multiMatchQueryBuilder0.doXContent(xContentBuilder0, toXContent_Params0);
      assertEquals(7, stringArray0.length);
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertEquals(1.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder0.queryName());
      assertFalse(xContentBuilder0.humanReadable());
      assertEquals(XContentType.JSON, xContentBuilder0.contentType());
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
  }

  @Test(timeout = 11000)
  public void test58()  throws Throwable  {
      Object object0 = null;
      String[] stringArray0 = new String[7];
      String string0 = "";
      stringArray0[3] = stringArray0[1];
      MultiMatchQueryBuilder multiMatchQueryBuilder0 = new MultiMatchQueryBuilder(object0, stringArray0);
      assertEquals(7, stringArray0.length);
      assertNotNull(multiMatchQueryBuilder0);
      assertEquals(1.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      MultiMatchQueryBuilder multiMatchQueryBuilder1 = multiMatchQueryBuilder0.minimumShouldMatch(string0);
      assertEquals(7, stringArray0.length);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder0);
      assertNotNull(multiMatchQueryBuilder1);
      assertEquals(1.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertEquals(1.0F, multiMatchQueryBuilder1.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder1.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder1.getWriteableName());
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      XContentBuilder xContentBuilder0 = JsonXContent.contentBuilder();
      assertNotNull(xContentBuilder0);
      assertEquals(XContentType.JSON, xContentBuilder0.contentType());
      assertFalse(xContentBuilder0.humanReadable());
      
      boolean boolean0 = true;
      MultiMatchQueryBuilder multiMatchQueryBuilder2 = multiMatchQueryBuilder1.useDisMax(boolean0);
      assertEquals(7, stringArray0.length);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder0);
      assertNotNull(multiMatchQueryBuilder2);
      assertEquals(1.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertEquals(1.0F, multiMatchQueryBuilder1.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder1.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder1.getWriteableName());
      assertNull(multiMatchQueryBuilder2.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder2.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder2.getWriteableName());
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      MultiMatchQueryBuilder multiMatchQueryBuilder3 = multiMatchQueryBuilder2.queryName(string0);
      assertEquals(7, stringArray0.length);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder2);
      assertNotNull(multiMatchQueryBuilder3);
      assertEquals(1.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertEquals("", multiMatchQueryBuilder0.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertEquals(1.0F, multiMatchQueryBuilder1.boost(), 0.01F);
      assertEquals("", multiMatchQueryBuilder1.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder1.getWriteableName());
      assertEquals("", multiMatchQueryBuilder2.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder2.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder2.getWriteableName());
      assertEquals("", multiMatchQueryBuilder3.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder3.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder3.getWriteableName());
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      ToXContent.Params toXContent_Params0 = ToXContent.EMPTY_PARAMS;
      assertNotNull(toXContent_Params0);
      
      int int0 = multiMatchQueryBuilder0.doHashCode();
      assertEquals(7, stringArray0.length);
      assertEquals(1, int0);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder3);
      assertEquals(1.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertEquals("", multiMatchQueryBuilder0.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      multiMatchQueryBuilder1.doXContent(xContentBuilder0, toXContent_Params0);
      assertEquals(7, stringArray0.length);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder0);
      assertEquals(1.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertEquals("", multiMatchQueryBuilder0.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertEquals(1.0F, multiMatchQueryBuilder1.boost(), 0.01F);
      assertEquals("", multiMatchQueryBuilder1.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder1.getWriteableName());
      assertEquals(XContentType.JSON, xContentBuilder0.contentType());
      assertFalse(xContentBuilder0.humanReadable());
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      MultiMatchQueryBuilder multiMatchQueryBuilder4 = multiMatchQueryBuilder0.field(string0, multiMatchQueryBuilder0.DEFAULT_BOOST);
      assertEquals(7, stringArray0.length);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder0);
      assertNotNull(multiMatchQueryBuilder4);
      assertEquals(1.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertEquals("", multiMatchQueryBuilder0.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertEquals(1.0F, multiMatchQueryBuilder4.boost(), 0.01F);
      assertEquals("", multiMatchQueryBuilder4.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder4.getWriteableName());
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      MultiMatchQueryBuilder.Type[] multiMatchQueryBuilder_TypeArray0 = MultiMatchQueryBuilder.Type.values();
      assertEquals(5, multiMatchQueryBuilder_TypeArray0.length);
      assertNotNull(multiMatchQueryBuilder_TypeArray0);
  }

  @Test(timeout = 11000)
  public void test59()  throws Throwable  {
      Object object0 = null;
      String[] stringArray0 = new String[7];
      String string0 = "";
      stringArray0[3] = stringArray0[1];
      MultiMatchQueryBuilder multiMatchQueryBuilder0 = MultiMatchQueryBuilder.PROTOTYPE;
      assertNotNull(multiMatchQueryBuilder0);
      assertEquals(1.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      MultiMatchQueryBuilder multiMatchQueryBuilder1 = multiMatchQueryBuilder0.minimumShouldMatch(string0);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder0);
      assertNotNull(multiMatchQueryBuilder1);
      assertEquals(1.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertEquals(1.0F, multiMatchQueryBuilder1.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder1.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder1.getWriteableName());
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      XContentBuilder xContentBuilder0 = JsonXContent.contentBuilder();
      assertNotNull(xContentBuilder0);
      assertFalse(xContentBuilder0.humanReadable());
      assertEquals(XContentType.JSON, xContentBuilder0.contentType());
      
      ToXContent.Params toXContent_Params0 = ToXContent.EMPTY_PARAMS;
      assertNotNull(toXContent_Params0);
      
      Operator operator0 = Operator.AND;
      MultiMatchQueryBuilder multiMatchQueryBuilder2 = multiMatchQueryBuilder0.operator(operator0);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder1);
      assertNotNull(multiMatchQueryBuilder2);
      assertEquals(1.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertEquals("multi_match", multiMatchQueryBuilder2.getWriteableName());
      assertNull(multiMatchQueryBuilder2.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder2.boost(), 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      multiMatchQueryBuilder1.doXContent(xContentBuilder0, toXContent_Params0);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder2);
      assertEquals(1.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertEquals(1.0F, multiMatchQueryBuilder1.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder1.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder1.getWriteableName());
      assertFalse(xContentBuilder0.humanReadable());
      assertEquals(XContentType.JSON, xContentBuilder0.contentType());
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      MultiMatchQueryBuilder multiMatchQueryBuilder3 = multiMatchQueryBuilder0.field(string0, multiMatchQueryBuilder0.DEFAULT_BOOST);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder1);
      assertNotNull(multiMatchQueryBuilder3);
      assertEquals(1.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertNull(multiMatchQueryBuilder3.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder3.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder3.getWriteableName());
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      MultiMatchQueryBuilder.Type[] multiMatchQueryBuilder_TypeArray0 = MultiMatchQueryBuilder.Type.values();
      assertEquals(5, multiMatchQueryBuilder_TypeArray0.length);
      assertNotNull(multiMatchQueryBuilder_TypeArray0);
      
      MultiMatchQueryBuilder.Type[] multiMatchQueryBuilder_TypeArray1 = MultiMatchQueryBuilder.Type.values();
      assertEquals(5, multiMatchQueryBuilder_TypeArray1.length);
      assertNotSame(multiMatchQueryBuilder_TypeArray1, multiMatchQueryBuilder_TypeArray0);
      assertNotNull(multiMatchQueryBuilder_TypeArray1);
      assertFalse(multiMatchQueryBuilder_TypeArray1.equals((Object)multiMatchQueryBuilder_TypeArray0));
  }

  @Test(timeout = 11000)
  public void test60()  throws Throwable  {
      Object object0 = null;
      String[] stringArray0 = new String[7];
      String string0 = "";
      stringArray0[3] = stringArray0[1];
      MultiMatchQueryBuilder multiMatchQueryBuilder0 = new MultiMatchQueryBuilder(object0, stringArray0);
      assertEquals(7, stringArray0.length);
      assertNotNull(multiMatchQueryBuilder0);
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertEquals(1.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      MultiMatchQueryBuilder multiMatchQueryBuilder1 = multiMatchQueryBuilder0.minimumShouldMatch(string0);
      assertEquals(7, stringArray0.length);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder0);
      assertNotNull(multiMatchQueryBuilder1);
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertEquals(1.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder1.getWriteableName());
      assertEquals(1.0F, multiMatchQueryBuilder1.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder1.queryName());
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      XContentBuilder xContentBuilder0 = JsonXContent.contentBuilder();
      assertNotNull(xContentBuilder0);
      assertEquals(XContentType.JSON, xContentBuilder0.contentType());
      assertFalse(xContentBuilder0.humanReadable());
      
      ToXContent.Params toXContent_Params0 = ToXContent.EMPTY_PARAMS;
      assertNotNull(toXContent_Params0);
      
      int int0 = (-1443);
      MultiMatchQueryBuilder multiMatchQueryBuilder2 = multiMatchQueryBuilder1.prefixLength(int0);
      assertEquals(7, stringArray0.length);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder0);
      assertNotNull(multiMatchQueryBuilder2);
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertEquals(1.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder1.getWriteableName());
      assertEquals(1.0F, multiMatchQueryBuilder1.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder1.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder2.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder2.getWriteableName());
      assertNull(multiMatchQueryBuilder2.queryName());
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      multiMatchQueryBuilder1.doXContent(xContentBuilder0, toXContent_Params0);
      assertEquals(7, stringArray0.length);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder0);
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertEquals(1.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder1.getWriteableName());
      assertEquals(1.0F, multiMatchQueryBuilder1.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder1.queryName());
      assertEquals(XContentType.JSON, xContentBuilder0.contentType());
      assertFalse(xContentBuilder0.humanReadable());
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      MultiMatchQueryBuilder multiMatchQueryBuilder3 = multiMatchQueryBuilder0.field(string0, multiMatchQueryBuilder0.DEFAULT_BOOST);
      assertEquals(7, stringArray0.length);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder0);
      assertNotNull(multiMatchQueryBuilder3);
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertEquals(1.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder3.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder3.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder3.getWriteableName());
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      MultiMatchQueryBuilder.Type[] multiMatchQueryBuilder_TypeArray0 = MultiMatchQueryBuilder.Type.values();
      assertEquals(5, multiMatchQueryBuilder_TypeArray0.length);
      assertNotNull(multiMatchQueryBuilder_TypeArray0);
      
      MultiMatchQueryBuilder.Type multiMatchQueryBuilder_Type0 = MultiMatchQueryBuilder.Type.MOST_FIELDS;
      MultiMatchQueryBuilder multiMatchQueryBuilder4 = multiMatchQueryBuilder1.type(multiMatchQueryBuilder_Type0);
      assertEquals(7, stringArray0.length);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder0);
      assertNotNull(multiMatchQueryBuilder4);
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertEquals(1.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder1.getWriteableName());
      assertEquals(1.0F, multiMatchQueryBuilder1.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder1.queryName());
      assertNull(multiMatchQueryBuilder4.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder4.getWriteableName());
      assertEquals(1.0F, multiMatchQueryBuilder4.boost(), 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
  }

  @Test(timeout = 11000)
  public void test61()  throws Throwable  {
      Object object0 = null;
      String[] stringArray0 = new String[7];
      String string0 = "";
      stringArray0[3] = stringArray0[1];
      MultiMatchQueryBuilder multiMatchQueryBuilder0 = MultiMatchQueryBuilder.PROTOTYPE;
      assertNotNull(multiMatchQueryBuilder0);
      assertEquals(1.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      MultiMatchQueryBuilder multiMatchQueryBuilder1 = multiMatchQueryBuilder0.analyzer(multiMatchQueryBuilder0.NAME);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder0);
      assertNotNull(multiMatchQueryBuilder1);
      assertEquals(1.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertNull(multiMatchQueryBuilder1.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder1.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder1.getWriteableName());
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      XContentBuilder xContentBuilder0 = JsonXContent.contentBuilder();
      assertNotNull(xContentBuilder0);
      assertEquals(XContentType.JSON, xContentBuilder0.contentType());
      assertFalse(xContentBuilder0.humanReadable());
      
      ToXContent.Params toXContent_Params0 = ToXContent.EMPTY_PARAMS;
      assertNotNull(toXContent_Params0);
      
      multiMatchQueryBuilder1.doXContent(xContentBuilder0, toXContent_Params0);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder0);
      assertEquals(1.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertNull(multiMatchQueryBuilder1.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder1.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder1.getWriteableName());
      assertEquals(XContentType.JSON, xContentBuilder0.contentType());
      assertFalse(xContentBuilder0.humanReadable());
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      MultiMatchQueryBuilder multiMatchQueryBuilder2 = multiMatchQueryBuilder0.field(string0, multiMatchQueryBuilder0.DEFAULT_BOOST);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder0);
      assertNotNull(multiMatchQueryBuilder2);
      assertEquals(1.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertNull(multiMatchQueryBuilder2.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder2.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder2.getWriteableName());
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      MultiMatchQueryBuilder.Type[] multiMatchQueryBuilder_TypeArray0 = MultiMatchQueryBuilder.Type.values();
      assertEquals(5, multiMatchQueryBuilder_TypeArray0.length);
      assertNotNull(multiMatchQueryBuilder_TypeArray0);
  }

  @Test(timeout = 11000)
  public void test62()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Object object0 = null;
      String[] stringArray0 = new String[7];
      MultiMatchQueryBuilder multiMatchQueryBuilder0 = new MultiMatchQueryBuilder(object0, stringArray0);
      assertEquals(7, stringArray0.length);
      assertNotNull(multiMatchQueryBuilder0);
      assertEquals(1.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      XContentBuilder xContentBuilder0 = JsonXContent.contentBuilder();
      assertNotNull(xContentBuilder0);
      assertEquals(XContentType.JSON, xContentBuilder0.contentType());
      assertFalse(xContentBuilder0.humanReadable());
      
      MultiMatchQueryBuilder.Type multiMatchQueryBuilder_Type0 = MultiMatchQueryBuilder.Type.BEST_FIELDS;
      MultiMatchQueryBuilder multiMatchQueryBuilder1 = multiMatchQueryBuilder0.type(multiMatchQueryBuilder_Type0);
      assertEquals(7, stringArray0.length);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder0);
      assertNotNull(multiMatchQueryBuilder1);
      assertEquals(1.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertNull(multiMatchQueryBuilder1.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder1.getWriteableName());
      assertEquals(1.0F, multiMatchQueryBuilder1.boost(), 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      ToXContent.Params toXContent_Params0 = ToXContent.EMPTY_PARAMS;
      assertNotNull(toXContent_Params0);
      
      multiMatchQueryBuilder0.doXContent(xContentBuilder0, toXContent_Params0);
      assertEquals(7, stringArray0.length);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder1);
      assertEquals(1.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertEquals(XContentType.JSON, xContentBuilder0.contentType());
      assertFalse(xContentBuilder0.humanReadable());
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
  }

  @Test(timeout = 11000)
  public void test63()  throws Throwable  {
      Object object0 = null;
      String[] stringArray0 = new String[12];
      MultiMatchQueryBuilder multiMatchQueryBuilder0 = new MultiMatchQueryBuilder(object0, stringArray0);
      assertEquals(12, stringArray0.length);
      assertNotNull(multiMatchQueryBuilder0);
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      String string0 = "rv@*<R";
      float float0 = 0.0F;
      MultiMatchQueryBuilder multiMatchQueryBuilder1 = multiMatchQueryBuilder0.field(string0, float0);
      assertEquals(12, stringArray0.length);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder0);
      assertNotNull(multiMatchQueryBuilder1);
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder1.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder1.getWriteableName());
      assertEquals(1.0F, multiMatchQueryBuilder1.boost(), 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      XContentBuilder xContentBuilder0 = JsonXContent.contentBuilder();
      assertNotNull(xContentBuilder0);
      assertEquals(XContentType.JSON, xContentBuilder0.contentType());
      assertFalse(xContentBuilder0.humanReadable());
      
      ToXContent.Params toXContent_Params0 = ToXContent.EMPTY_PARAMS;
      assertNotNull(toXContent_Params0);
      
      multiMatchQueryBuilder0.doXContent(xContentBuilder0, toXContent_Params0);
      assertEquals(12, stringArray0.length);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder1);
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertEquals(XContentType.JSON, xContentBuilder0.contentType());
      assertFalse(xContentBuilder0.humanReadable());
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      String string1 = "org.elasticsearch.index.query.MultiMatchQueryBuilder";
      MultiMatchQueryBuilder multiMatchQueryBuilder2 = multiMatchQueryBuilder0.minimumShouldMatch(string1);
      assertEquals(12, stringArray0.length);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder2);
      assertNotSame(string1, string0);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder1);
      assertNotNull(multiMatchQueryBuilder2);
      assertFalse(string1.equals((Object)string0));
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder2.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder2.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder2.getWriteableName());
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
  }

  @Test(timeout = 11000)
  public void test64()  throws Throwable  {
      Object object0 = null;
      String[] stringArray0 = new String[12];
      MultiMatchQueryBuilder multiMatchQueryBuilder0 = new MultiMatchQueryBuilder(object0, stringArray0);
      assertEquals(12, stringArray0.length);
      assertNotNull(multiMatchQueryBuilder0);
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertEquals(1.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      String string0 = "rv@*<R";
      float float0 = 0.0F;
      MultiMatchQueryBuilder multiMatchQueryBuilder1 = multiMatchQueryBuilder0.field(string0, float0);
      assertEquals(12, stringArray0.length);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder0);
      assertNotNull(multiMatchQueryBuilder1);
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertEquals(1.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder1.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder1.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder1.getWriteableName());
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      MultiMatchQueryBuilder multiMatchQueryBuilder2 = multiMatchQueryBuilder1.rewrite(multiMatchQueryBuilder0.NAME);
      assertEquals(12, stringArray0.length);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder1);
      assertNotNull(multiMatchQueryBuilder2);
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertEquals(1.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder1.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder1.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder1.getWriteableName());
      assertEquals("multi_match", multiMatchQueryBuilder2.getWriteableName());
      assertNull(multiMatchQueryBuilder2.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder2.boost(), 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      XContentBuilder xContentBuilder0 = JsonXContent.contentBuilder();
      assertNotNull(xContentBuilder0);
      assertFalse(xContentBuilder0.humanReadable());
      assertEquals(XContentType.JSON, xContentBuilder0.contentType());
      
      ToXContent.Params toXContent_Params0 = ToXContent.EMPTY_PARAMS;
      assertNotNull(toXContent_Params0);
      
      multiMatchQueryBuilder0.doXContent(xContentBuilder0, toXContent_Params0);
      assertEquals(12, stringArray0.length);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder1);
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertEquals(1.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder0.queryName());
      assertFalse(xContentBuilder0.humanReadable());
      assertEquals(XContentType.JSON, xContentBuilder0.contentType());
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      String string1 = "org.elasticsearch.index.query.MultiMatchQueryBuilder";
      MultiMatchQueryBuilder multiMatchQueryBuilder3 = multiMatchQueryBuilder0.minimumShouldMatch(string1);
      assertEquals(12, stringArray0.length);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder1);
      assertNotSame(string1, string0);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder1);
      assertNotNull(multiMatchQueryBuilder3);
      assertFalse(string1.equals((Object)string0));
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertEquals(1.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder0.queryName());
      assertNull(multiMatchQueryBuilder3.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder3.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder3.getWriteableName());
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
  }

  @Test(timeout = 11000)
  public void test65()  throws Throwable  {
      Object object0 = null;
      String[] stringArray0 = new String[7];
      MultiMatchQueryBuilder multiMatchQueryBuilder0 = new MultiMatchQueryBuilder(object0, stringArray0);
      assertEquals(7, stringArray0.length);
      assertNotNull(multiMatchQueryBuilder0);
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      boolean boolean0 = false;
      MultiMatchQueryBuilder multiMatchQueryBuilder1 = multiMatchQueryBuilder0.lenient(boolean0);
      assertEquals(7, stringArray0.length);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder0);
      assertNotNull(multiMatchQueryBuilder1);
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder1.getWriteableName());
      assertNull(multiMatchQueryBuilder1.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder1.boost(), 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      XContentBuilder xContentBuilder0 = JsonXContent.contentBuilder();
      assertNotNull(xContentBuilder0);
      assertFalse(xContentBuilder0.humanReadable());
      assertEquals(XContentType.JSON, xContentBuilder0.contentType());
      
      ToXContent.Params toXContent_Params0 = ToXContent.EMPTY_PARAMS;
      assertNotNull(toXContent_Params0);
      
      multiMatchQueryBuilder0.doXContent(xContentBuilder0, toXContent_Params0);
      assertEquals(7, stringArray0.length);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder1);
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertFalse(xContentBuilder0.humanReadable());
      assertEquals(XContentType.JSON, xContentBuilder0.contentType());
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
  }

  @Test(timeout = 11000)
  public void test66()  throws Throwable  {
      Object object0 = null;
      String[] stringArray0 = new String[7];
      MultiMatchQueryBuilder multiMatchQueryBuilder0 = new MultiMatchQueryBuilder(object0, stringArray0);
      assertEquals(7, stringArray0.length);
      assertNotNull(multiMatchQueryBuilder0);
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertEquals(1.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      XContentBuilder xContentBuilder0 = YamlXContent.contentBuilder();
      assertNotNull(xContentBuilder0);
      assertEquals(XContentType.YAML, xContentBuilder0.contentType());
      assertFalse(xContentBuilder0.humanReadable());
      
      ToXContent.Params toXContent_Params0 = ToXContent.EMPTY_PARAMS;
      assertNotNull(toXContent_Params0);
      
      // Undeclared exception!
      try { 
        multiMatchQueryBuilder0.doXContent(xContentBuilder0, toXContent_Params0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expected DocumentEndEvent, but got <com.fasterxml.jackson.dataformat.yaml.snakeyaml.events.MappingStartEvent(anchor=null, tag=null, implicit=true)>
         //
         verifyException("com.fasterxml.jackson.dataformat.yaml.snakeyaml.emitter.Emitter$ExpectDocumentEnd", e);
      }
  }

  @Test(timeout = 11000)
  public void test67()  throws Throwable  {
      Object object0 = null;
      String[] stringArray0 = new String[7];
      MultiMatchQueryBuilder multiMatchQueryBuilder0 = MultiMatchQueryBuilder.PROTOTYPE;
      assertNotNull(multiMatchQueryBuilder0);
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      XContentBuilder xContentBuilder0 = JsonXContent.contentBuilder();
      assertNotNull(xContentBuilder0);
      assertEquals(XContentType.JSON, xContentBuilder0.contentType());
      assertFalse(xContentBuilder0.humanReadable());
      
      float float0 = 0.0F;
      MultiMatchQueryBuilder multiMatchQueryBuilder1 = multiMatchQueryBuilder0.cutoffFrequency(float0);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder0);
      assertNotNull(multiMatchQueryBuilder1);
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertEquals("multi_match", multiMatchQueryBuilder1.getWriteableName());
      assertEquals(1.0F, multiMatchQueryBuilder1.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder1.queryName());
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      ToXContent.Params toXContent_Params0 = ToXContent.EMPTY_PARAMS;
      assertNotNull(toXContent_Params0);
      
      multiMatchQueryBuilder0.doXContent(xContentBuilder0, toXContent_Params0);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder1);
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertEquals(XContentType.JSON, xContentBuilder0.contentType());
      assertFalse(xContentBuilder0.humanReadable());
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      int int0 = (-3416);
      MultiMatchQueryBuilder multiMatchQueryBuilder2 = multiMatchQueryBuilder0.prefixLength(int0);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder1);
      assertNotNull(multiMatchQueryBuilder2);
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertEquals(1.0F, multiMatchQueryBuilder2.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder2.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder2.getWriteableName());
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
  }

  @Test(timeout = 11000)
  public void test68()  throws Throwable  {
      MultiMatchQueryBuilder multiMatchQueryBuilder0 = MultiMatchQueryBuilder.PROTOTYPE;
      assertNotNull(multiMatchQueryBuilder0);
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertEquals(1.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      MultiMatchQueryBuilder multiMatchQueryBuilder1 = multiMatchQueryBuilder0.cutoffFrequency(multiMatchQueryBuilder0.DEFAULT_BOOST);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder0);
      assertNotNull(multiMatchQueryBuilder1);
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertEquals(1.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder1.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder1.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder1.getWriteableName());
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      String string0 = "Vz|JQ";
      MultiMatchQueryBuilder multiMatchQueryBuilder2 = multiMatchQueryBuilder0.fuzzyRewrite(multiMatchQueryBuilder1.NAME);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder0);
      assertNotNull(multiMatchQueryBuilder2);
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertEquals(1.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder1.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder1.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder1.getWriteableName());
      assertNull(multiMatchQueryBuilder2.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder2.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder2.getWriteableName());
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      boolean boolean0 = false;
      MultiMatchQueryBuilder multiMatchQueryBuilder3 = multiMatchQueryBuilder1.useDisMax(boolean0);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder1);
      assertNotNull(multiMatchQueryBuilder3);
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertEquals(1.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder1.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder1.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder1.getWriteableName());
      assertNull(multiMatchQueryBuilder3.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder3.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder3.getWriteableName());
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      String string1 = multiMatchQueryBuilder3.toString();
      assertEquals("{\n  \"multi_match\" : {\n    \"query\" : null,\n    \"fields\" : [ ],\n    \"fuzzy_rewrite\" : \"multi_match\",\n    \"use_dis_max\" : false,\n    \"cutoff_frequency\" : 1.0,\n    \"boost\" : 1.0\n  }\n}", string1);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder1);
      assertNotSame(string1, string0);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertEquals(1.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder1.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder1.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder1.getWriteableName());
      assertNull(multiMatchQueryBuilder3.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder3.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder3.getWriteableName());
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      PolygonBuilder polygonBuilder0 = ShapeBuilder.newPolygon();
      assertNotNull(polygonBuilder0);
      assertEquals(ShapeBuilder.GeoShapeType.POLYGON, polygonBuilder0.type());
      assertEquals(180.0, ShapeBuilder.DATELINE, 0.01);
      
      MultiMatchQueryBuilder multiMatchQueryBuilder4 = multiMatchQueryBuilder2.fuzziness(multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder4, multiMatchQueryBuilder0);
      assertNotNull(multiMatchQueryBuilder4);
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertEquals(1.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder1.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder1.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder1.getWriteableName());
      assertNull(multiMatchQueryBuilder2.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder2.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder2.getWriteableName());
      assertNull(multiMatchQueryBuilder4.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder4.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder4.getWriteableName());
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      String string2 = multiMatchQueryBuilder3.getWriteableName();
      assertEquals("multi_match", string2);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder3, multiMatchQueryBuilder1);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertEquals(1.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder1.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder1.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder1.getWriteableName());
      assertNull(multiMatchQueryBuilder3.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder3.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder3.getWriteableName());
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      boolean boolean1 = true;
      MultiMatchQueryBuilder multiMatchQueryBuilder5 = multiMatchQueryBuilder2.lenient(boolean1);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder5, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder5, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder5, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder5, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder5, multiMatchQueryBuilder1);
      assertNotNull(multiMatchQueryBuilder5);
      assertFalse(boolean1 == boolean0);
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertEquals(1.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder1.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder1.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder1.getWriteableName());
      assertNull(multiMatchQueryBuilder2.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder2.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder2.getWriteableName());
      assertEquals(1.0F, multiMatchQueryBuilder5.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder5.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder5.getWriteableName());
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      InternalAggregations internalAggregations0 = InternalAggregations.EMPTY;
      assertNotNull(internalAggregations0);
      
      MultiPolygonBuilder multiPolygonBuilder0 = new MultiPolygonBuilder();
      assertNotNull(multiPolygonBuilder0);
      assertEquals(ShapeBuilder.GeoShapeType.MULTIPOLYGON, multiPolygonBuilder0.type());
      assertEquals(180.0, ShapeBuilder.DATELINE, 0.01);
      
      XContentBuilder xContentBuilder0 = SmileXContent.contentBuilder();
      assertNotNull(xContentBuilder0);
      assertFalse(xContentBuilder0.humanReadable());
      assertEquals(XContentType.SMILE, xContentBuilder0.contentType());
      
      ToXContent.Params toXContent_Params0 = ToXContent.EMPTY_PARAMS;
      assertNotNull(toXContent_Params0);
      
      XContentBuilder xContentBuilder1 = multiPolygonBuilder0.toXContent(xContentBuilder0, toXContent_Params0);
      assertSame(xContentBuilder1, xContentBuilder0);
      assertSame(xContentBuilder0, xContentBuilder1);
      assertNotNull(xContentBuilder1);
      assertEquals(XContentType.SMILE, xContentBuilder1.contentType());
      assertFalse(xContentBuilder1.humanReadable());
      assertEquals(ShapeBuilder.GeoShapeType.MULTIPOLYGON, multiPolygonBuilder0.type());
      assertFalse(xContentBuilder0.humanReadable());
      assertEquals(XContentType.SMILE, xContentBuilder0.contentType());
      assertEquals(180.0, ShapeBuilder.DATELINE, 0.01);
      
      XContentBuilder xContentBuilder2 = internalAggregations0.toXContent(xContentBuilder1, toXContent_Params0);
      assertSame(xContentBuilder1, xContentBuilder0);
      assertSame(xContentBuilder1, xContentBuilder2);
      assertSame(xContentBuilder2, xContentBuilder0);
      assertSame(xContentBuilder2, xContentBuilder1);
      assertSame(xContentBuilder0, xContentBuilder1);
      assertSame(xContentBuilder0, xContentBuilder2);
      assertNotNull(xContentBuilder2);
      assertEquals(XContentType.SMILE, xContentBuilder1.contentType());
      assertFalse(xContentBuilder1.humanReadable());
      assertEquals(XContentType.SMILE, xContentBuilder2.contentType());
      assertFalse(xContentBuilder2.humanReadable());
      assertEquals(ShapeBuilder.GeoShapeType.MULTIPOLYGON, multiPolygonBuilder0.type());
      assertFalse(xContentBuilder0.humanReadable());
      assertEquals(XContentType.SMILE, xContentBuilder0.contentType());
      assertEquals(180.0, ShapeBuilder.DATELINE, 0.01);
      
      multiMatchQueryBuilder1.doXContent(xContentBuilder2, toXContent_Params0);
      assertSame(xContentBuilder1, xContentBuilder0);
      assertSame(xContentBuilder1, xContentBuilder2);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder5);
      assertSame(xContentBuilder2, xContentBuilder0);
      assertSame(xContentBuilder2, xContentBuilder1);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder5);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder4);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder3);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder0);
      assertSame(xContentBuilder0, xContentBuilder1);
      assertSame(xContentBuilder0, xContentBuilder2);
      assertEquals(XContentType.SMILE, xContentBuilder1.contentType());
      assertFalse(xContentBuilder1.humanReadable());
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertEquals(1.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals(XContentType.SMILE, xContentBuilder2.contentType());
      assertFalse(xContentBuilder2.humanReadable());
      assertEquals(1.0F, multiMatchQueryBuilder1.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder1.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder1.getWriteableName());
      assertEquals(ShapeBuilder.GeoShapeType.MULTIPOLYGON, multiPolygonBuilder0.type());
      assertFalse(xContentBuilder0.humanReadable());
      assertEquals(XContentType.SMILE, xContentBuilder0.contentType());
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(180.0, ShapeBuilder.DATELINE, 0.01);
  }

  @Test(timeout = 11000)
  public void test69()  throws Throwable  {
      Object object0 = null;
      String[] stringArray0 = new String[7];
      MultiMatchQueryBuilder multiMatchQueryBuilder0 = MultiMatchQueryBuilder.PROTOTYPE;
      assertNotNull(multiMatchQueryBuilder0);
      assertEquals(1.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      int int0 = 779;
      MultiMatchQueryBuilder multiMatchQueryBuilder1 = multiMatchQueryBuilder0.maxExpansions(int0);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder0);
      assertNotNull(multiMatchQueryBuilder1);
      assertEquals(1.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertEquals("multi_match", multiMatchQueryBuilder1.getWriteableName());
      assertEquals(1.0F, multiMatchQueryBuilder1.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder1.queryName());
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      XContentBuilder xContentBuilder0 = JsonXContent.contentBuilder();
      assertNotNull(xContentBuilder0);
      assertEquals(XContentType.JSON, xContentBuilder0.contentType());
      assertFalse(xContentBuilder0.humanReadable());
      
      ToXContent.Params toXContent_Params0 = ToXContent.EMPTY_PARAMS;
      assertNotNull(toXContent_Params0);
      
      multiMatchQueryBuilder0.doXContent(xContentBuilder0, toXContent_Params0);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder1);
      assertEquals(1.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertEquals(XContentType.JSON, xContentBuilder0.contentType());
      assertFalse(xContentBuilder0.humanReadable());
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      Integer integer0 = new Integer(int0);
      assertEquals(779, (int)integer0);
      assertNotNull(integer0);
      assertTrue(integer0.equals((Object)int0));
      
      MultiMatchQueryBuilder multiMatchQueryBuilder2 = multiMatchQueryBuilder0.fuzziness(integer0);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder1);
      assertNotNull(multiMatchQueryBuilder2);
      assertTrue(integer0.equals((Object)int0));
      assertEquals(1.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertEquals("multi_match", multiMatchQueryBuilder2.getWriteableName());
      assertEquals(1.0F, multiMatchQueryBuilder2.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder2.queryName());
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
  }

  @Test(timeout = 11000)
  public void test70()  throws Throwable  {
      Object object0 = null;
      String[] stringArray0 = new String[7];
      MultiMatchQueryBuilder multiMatchQueryBuilder0 = new MultiMatchQueryBuilder(object0, stringArray0);
      assertEquals(7, stringArray0.length);
      assertNotNull(multiMatchQueryBuilder0);
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      XContentBuilder xContentBuilder0 = JsonXContent.contentBuilder();
      assertNotNull(xContentBuilder0);
      assertFalse(xContentBuilder0.humanReadable());
      assertEquals(XContentType.JSON, xContentBuilder0.contentType());
      
      int int0 = 157;
      String string0 = multiMatchQueryBuilder0.getName();
      assertEquals(7, stringArray0.length);
      assertEquals("multi_match", string0);
      assertNotNull(string0);
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      MultiMatchQueryBuilder multiMatchQueryBuilder1 = multiMatchQueryBuilder0.slop(int0);
      assertEquals(7, stringArray0.length);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder0);
      assertNotNull(multiMatchQueryBuilder1);
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertEquals("multi_match", multiMatchQueryBuilder1.getWriteableName());
      assertEquals(1.0F, multiMatchQueryBuilder1.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder1.queryName());
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      ToXContent.Params toXContent_Params0 = ToXContent.EMPTY_PARAMS;
      assertNotNull(toXContent_Params0);
      
      multiMatchQueryBuilder0.doXContent(xContentBuilder0, toXContent_Params0);
      assertEquals(7, stringArray0.length);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder1);
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertFalse(xContentBuilder0.humanReadable());
      assertEquals(XContentType.JSON, xContentBuilder0.contentType());
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      
      MultiMatchQueryBuilder multiMatchQueryBuilder2 = multiMatchQueryBuilder0.tieBreaker(multiMatchQueryBuilder1.DEFAULT_BOOST);
      assertEquals(7, stringArray0.length);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder1);
      assertSame(multiMatchQueryBuilder0, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder2);
      assertSame(multiMatchQueryBuilder1, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder0);
      assertSame(multiMatchQueryBuilder2, multiMatchQueryBuilder1);
      assertNotNull(multiMatchQueryBuilder2);
      assertNull(multiMatchQueryBuilder0.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder0.boost(), 0.01F);
      assertEquals("multi_match", multiMatchQueryBuilder0.getWriteableName());
      assertEquals("multi_match", multiMatchQueryBuilder1.getWriteableName());
      assertEquals(1.0F, multiMatchQueryBuilder1.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder1.queryName());
      assertEquals(1.0F, multiMatchQueryBuilder2.boost(), 0.01F);
      assertNull(multiMatchQueryBuilder2.queryName());
      assertEquals("multi_match", multiMatchQueryBuilder2.getWriteableName());
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
  }

  @Test(timeout = 11000)
  public void test71()  throws Throwable  {
      String string0 = "{a~p";
      ParseFieldMatcher parseFieldMatcher0 = ParseFieldMatcher.EMPTY;
      assertNotNull(parseFieldMatcher0);
      
      String string1 = "%.2f";
      String string2 = "cross_fields";
      MultiMatchQueryBuilder.Type multiMatchQueryBuilder_Type0 = MultiMatchQueryBuilder.Type.parse(string2, parseFieldMatcher0);
      assertEquals(MultiMatchQueryBuilder.Type.CROSS_FIELDS, multiMatchQueryBuilder_Type0);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(MatchQuery.Type.BOOLEAN, multiMatchQueryBuilder_Type0.matchQueryType());
      assertEquals(0.0F, multiMatchQueryBuilder_Type0.tieBreaker(), 0.01F);
      
      ParseField parseField0 = null;
      // Undeclared exception!
      try { 
        parseFieldMatcher0.match(string1, parseField0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.common.ParseFieldMatcher", e);
      }
  }
}
