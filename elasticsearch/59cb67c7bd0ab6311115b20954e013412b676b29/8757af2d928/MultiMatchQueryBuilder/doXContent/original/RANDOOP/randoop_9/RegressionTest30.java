import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest30 {

    public static boolean debug = false;

    @Test
    public void test15001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15001");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder10.field("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder10.boost(0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder10.field("");
        java.lang.String[] strArray26 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray26);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = multiMatchQueryBuilder27.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = multiMatchQueryBuilder29.tieBreaker(0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type32 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX;
        float float33 = type32.tieBreaker();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder34 = multiMatchQueryBuilder29.type(type32);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder36 = multiMatchQueryBuilder29.cutoffFrequency((float) 0L);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder38 = multiMatchQueryBuilder29.queryName("multi_match");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder41 = multiMatchQueryBuilder38.field("", (float) 1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder42 = null; // flaky: multiMatchQueryBuilder10.fuzziness((java.lang.Object) multiMatchQueryBuilder38);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder44 = null; // flaky: multiMatchQueryBuilder42.maxExpansions(0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder46 = null; // flaky: multiMatchQueryBuilder42.field("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"minimum_should_match\" : \"\",\n    \"rewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"slop\\\" : -1,\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"lenient\\\" : true,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 52.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.Operator operator47 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder48 = null; // flaky: multiMatchQueryBuilder42.operator(operator47);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder50 = null; // flaky: multiMatchQueryBuilder42.slop((int) (short) 1);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder29);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder31);
        org.junit.Assert.assertTrue("'" + type32 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX + "'", type32.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX));
        org.junit.Assert.assertTrue("'" + float33 + "' != '" + 0.0f + "'", float33 == 0.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder34);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder36);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder38);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder41);
// flaky:         org.junit.Assert.assertNotNull(multiMatchQueryBuilder42);
// flaky:         org.junit.Assert.assertNotNull(multiMatchQueryBuilder44);
// flaky:         org.junit.Assert.assertNotNull(multiMatchQueryBuilder46);
// flaky:         org.junit.Assert.assertNotNull(multiMatchQueryBuilder48);
// flaky:         org.junit.Assert.assertNotNull(multiMatchQueryBuilder50);
    }

    @Test
    public void test15002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15002");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery13 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder12.zeroTermsQuery(zeroTermsQuery13);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder14.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder16.queryName("hi!");
        java.lang.String str19 = multiMatchQueryBuilder16.queryName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder16.analyzer("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"slop\" : -1,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String str22 = multiMatchQueryBuilder16.getWriteableName();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery23 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder16.zeroTermsQuery(zeroTermsQuery23);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder16.fuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = multiMatchQueryBuilder16.queryName("{\n  \"multiMatch\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"analyzer\" : \"{\\n  \\\"multiMatch\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"fuzzyRewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"rewrite\" : \"multi_match\",\n    \"fuzzyRewrite\" : \"hi!\",\n    \"tieBreaker\" : 100.0,\n    \"lenient\" : false,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String str29 = multiMatchQueryBuilder28.getWriteableName();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "multi_match" + "'", str22, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "multi_match" + "'", str29, "multi_match");
    }

    @Test
    public void test15003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15003");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery13 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder12.zeroTermsQuery(zeroTermsQuery13);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder14.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder16.queryName("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder18.analyzer("multi_match");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder20.tieBreaker((float) (short) 10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder22.maxExpansions((-1));
        java.lang.Class<?> wildcardClass25 = multiMatchQueryBuilder24.getClass();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertNotNull(wildcardClass25);
    }

    @Test
    public void test15004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15004");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery13 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder12.zeroTermsQuery(zeroTermsQuery13);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder14.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder16.queryName("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder16.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder20.lenient(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type23 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE;
        org.elasticsearch.index.search.MatchQuery.Type type24 = type23.matchQueryType();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder20.type(type23);
        float float26 = type23.tieBreaker();
        float float27 = type23.tieBreaker();
        float float28 = type23.tieBreaker();
        org.elasticsearch.index.search.MatchQuery.Type type29 = type23.matchQueryType();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertTrue("'" + type23 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE + "'", type23.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE));
        org.junit.Assert.assertTrue("'" + type24 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.PHRASE + "'", type24.equals(org.elasticsearch.index.search.MatchQuery.Type.PHRASE));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
        org.junit.Assert.assertTrue("'" + float26 + "' != '" + 0.0f + "'", float26 == 0.0f);
        org.junit.Assert.assertTrue("'" + float27 + "' != '" + 0.0f + "'", float27 == 0.0f);
        org.junit.Assert.assertTrue("'" + float28 + "' != '" + 0.0f + "'", float28 == 0.0f);
        org.junit.Assert.assertTrue("'" + type29 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.PHRASE + "'", type29.equals(org.elasticsearch.index.search.MatchQuery.Type.PHRASE));
    }

    @Test
    public void test15005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15005");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder12.lenient(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder12.prefixLength((int) (byte) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder12.rewrite("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"multi_match^0.0\" ],\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 0.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder18.queryName("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"minimum_should_match\" : \"\",\n    \"rewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"slop\\\" : -1,\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"lenient\\\" : true,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 52.0,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String str21 = multiMatchQueryBuilder18.queryName();
        java.lang.String str22 = multiMatchQueryBuilder18.getWriteableName();
        org.elasticsearch.index.query.Operator operator23 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder18.operator(operator23);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"minimum_should_match\" : \"\",\n    \"rewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"slop\\\" : -1,\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"lenient\\\" : true,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 52.0,\n    \"boost\" : 1.0\n  }\n}" + "'", str21, "{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"minimum_should_match\" : \"\",\n    \"rewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"slop\\\" : -1,\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"lenient\\\" : true,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 52.0,\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "multi_match" + "'", str22, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
    }

    @Test
    public void test15006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15006");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.fuzzyRewrite("hi!");
        java.lang.String str13 = multiMatchQueryBuilder10.getName();
        float float14 = multiMatchQueryBuilder10.boost();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder10.lenient(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder10.queryName("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder10.cutoffFrequency((float) (-1L));
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder20.lenient(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder20.analyzer("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"prefix_length\" : -1,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "multi_match" + "'", str13, "multi_match");
        org.junit.Assert.assertTrue("'" + float14 + "' != '" + 1.0f + "'", float14 == 1.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
    }

    @Test
    public void test15007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15007");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.fuzzyRewrite("hi!");
        java.lang.String str13 = multiMatchQueryBuilder10.getName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder10.analyzer("multi_match");
        java.lang.String str16 = null; // flaky: multiMatchQueryBuilder10.toString();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder10.slop((int) (byte) -1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder10.prefixLength((int) (short) -1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder20.minimumShouldMatch("multi_match");
        java.lang.String[] strArray30 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray30);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder33 = multiMatchQueryBuilder31.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder35 = multiMatchQueryBuilder33.tieBreaker(0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type36 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX;
        float float37 = type36.tieBreaker();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder38 = multiMatchQueryBuilder33.type(type36);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder40 = multiMatchQueryBuilder33.cutoffFrequency((float) 0L);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder42 = multiMatchQueryBuilder33.lenient(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type43 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX;
        float float44 = type43.tieBreaker();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder45 = multiMatchQueryBuilder42.type(type43);
        org.elasticsearch.common.ParseField parseField46 = type43.parseField();
        org.elasticsearch.common.ParseField parseField47 = type43.parseField();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder48 = multiMatchQueryBuilder22.fuzziness((java.lang.Object) type43);
        java.lang.String[] strArray56 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder57 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray56);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder59 = multiMatchQueryBuilder57.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder61 = multiMatchQueryBuilder59.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder63 = multiMatchQueryBuilder61.lenient(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder65 = multiMatchQueryBuilder61.prefixLength((int) (byte) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder67 = multiMatchQueryBuilder61.minimumShouldMatch("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"rewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"slop\\\" : -1,\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"lenient\\\" : true,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 52.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.QueryValidationException queryValidationException68 = multiMatchQueryBuilder67.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder70 = multiMatchQueryBuilder67.field("{\n  \"multiMatch\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzyRewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder73 = multiMatchQueryBuilder70.field("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"type\" : \"phrase_prefix\",\n    \"analyzer\" : \"{\\n  \\\"multiMatch\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"type\\\" : \\\"phrase_prefix\\\",\\n    \\\"maxExpansions\\\" : 10,\\n    \\\"fuzzyRewrite\\\" : \\\"\\\",\\n    \\\"tieBreaker\\\" : 0.0,\\n    \\\"cutoffFrequency\\\" : 0.0,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 35.0,\n    \"boost\" : -1.0\n  }\n}", (float) (short) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder75 = multiMatchQueryBuilder73.tieBreaker((float) '#');
        boolean boolean76 = multiMatchQueryBuilder22.equals((java.lang.Object) multiMatchQueryBuilder73);
        org.elasticsearch.common.xcontent.XContentType xContentType77 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.bytes.BytesReference bytesReference78 = multiMatchQueryBuilder73.buildAsBytes(xContentType77);
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchException; message: Failed to build ToXContent");
        } catch (org.elasticsearch.ElasticsearchException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "multi_match" + "'", str13, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"analyzer\" : \"multi_match\",\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}" + "'", str16, "{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"analyzer\" : \"multi_match\",\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder33);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder35);
        org.junit.Assert.assertTrue("'" + type36 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX + "'", type36.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX));
        org.junit.Assert.assertTrue("'" + float37 + "' != '" + 0.0f + "'", float37 == 0.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder38);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder40);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder42);
        org.junit.Assert.assertTrue("'" + type43 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX + "'", type43.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX));
        org.junit.Assert.assertTrue("'" + float44 + "' != '" + 0.0f + "'", float44 == 0.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder45);
        org.junit.Assert.assertNotNull(parseField46);
        org.junit.Assert.assertNotNull(parseField47);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder48);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder59);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder61);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder63);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder65);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder67);
        org.junit.Assert.assertNull(queryValidationException68);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder70);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder73);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
    }

    @Test
    public void test15008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15008");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder12.lenient(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder12.prefixLength((int) (byte) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder16.boost((float) 1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder16.rewrite("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"analyzer\" : \"multi_match\",\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder20.slop(0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder22.lenient(true);
        org.elasticsearch.common.xcontent.XContentType xContentType25 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.bytes.BytesReference bytesReference26 = multiMatchQueryBuilder22.buildAsBytes(xContentType25);
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchException; message: Failed to build ToXContent");
        } catch (org.elasticsearch.ElasticsearchException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
    }

    @Test
    public void test15009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15009");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder8.queryName("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.Operator operator13 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder12.operator(operator13);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder12.field("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"analyzer\" : \"multi_match\",\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}", 10.0f);
        float float18 = multiMatchQueryBuilder17.boost();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder17.analyzer("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"^1.0\", \"^1.0\", \"^1.0\", \"^1.0\", \"^1.0\", \"^1.0\" ],\n    \"type\" : \"phrase_prefix\",\n    \"minimum_should_match\" : \"{\\n  \\\"multiMatch\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"fuzzyRewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"fuzzy_rewrite\" : \"\",\n    \"tie_breaker\" : 0.0,\n    \"cutoff_frequency\" : 0.0,\n    \"boost\" : 1.0,\n    \"_name\" : \"multi_match\"\n  }\n}");
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder21 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params22 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder23 = multiMatchQueryBuilder20.toXContent(xContentBuilder21, params22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertTrue("'" + float18 + "' != '" + 1.0f + "'", float18 == 1.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNotNull(params22);
    }

    @Test
    public void test15010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15010");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder12.lenient(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder14.rewrite("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery17 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder16.zeroTermsQuery(zeroTermsQuery17);
        java.lang.Object obj19 = null;
        boolean boolean20 = multiMatchQueryBuilder18.equals(obj19);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder18.lenient(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder22.analyzer("{\n  \"multiMatch\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"type\" : \"phrase_prefix\",\n    \"maxExpansions\" : 10,\n    \"fuzzyRewrite\" : \"\",\n    \"tieBreaker\" : 0.0,\n    \"cutoffFrequency\" : 0.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder22.lenient(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = multiMatchQueryBuilder26.lenient(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder30 = multiMatchQueryBuilder26.cutoffFrequency((float) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder32 = multiMatchQueryBuilder26.prefixLength((int) 'a');
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder34 = multiMatchQueryBuilder26.lenient(false);
        java.lang.String str35 = multiMatchQueryBuilder26.getWriteableName();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder28);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder30);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder32);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "multi_match" + "'", str35, "multi_match");
    }

    @Test
    public void test15011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15011");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.fuzzyRewrite("hi!");
        java.lang.String str13 = multiMatchQueryBuilder10.getName();
        float float14 = multiMatchQueryBuilder10.boost();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder10.lenient(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder10.slop((int) (short) -1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type19 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX;
        org.elasticsearch.index.search.MatchQuery.Type type20 = type19.matchQueryType();
        org.elasticsearch.index.search.MatchQuery.Type type21 = type19.matchQueryType();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder10.type(type19);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder10.queryName("multi_match");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder24.minimumShouldMatch("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = multiMatchQueryBuilder24.lenient(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder30 = multiMatchQueryBuilder24.queryName("{\n  \"multiMatch\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzyRewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder32 = multiMatchQueryBuilder24.cutoffFrequency((float) 'a');
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder34 = multiMatchQueryBuilder32.boost((float) (short) -1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder36 = multiMatchQueryBuilder32.analyzer("multi_match");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder38 = multiMatchQueryBuilder36.useDisMax(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder40 = multiMatchQueryBuilder36.prefixLength((int) (byte) 0);
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder49 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray48);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder51 = multiMatchQueryBuilder49.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder53 = multiMatchQueryBuilder51.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder55 = multiMatchQueryBuilder53.lenient(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder57 = multiMatchQueryBuilder55.rewrite("multi_match");
        java.lang.String str58 = multiMatchQueryBuilder57.getWriteableName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder60 = multiMatchQueryBuilder57.analyzer("{\n  \"multiMatch\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzyRewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder62 = multiMatchQueryBuilder60.lenient(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder64 = multiMatchQueryBuilder60.maxExpansions((int) (short) 1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder66 = multiMatchQueryBuilder60.prefixLength((int) (byte) 10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder68 = multiMatchQueryBuilder60.field("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type69 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS;
        float float70 = type69.tieBreaker();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder71 = multiMatchQueryBuilder60.type(type69);
        org.elasticsearch.common.ParseField parseField72 = type69.parseField();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder73 = multiMatchQueryBuilder40.type(type69);
        org.elasticsearch.common.io.stream.StreamOutput streamOutput74 = null;
        // The following exception was thrown during execution in test generation
        try {
            multiMatchQueryBuilder40.writeTo(streamOutput74);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "multi_match" + "'", str13, "multi_match");
        org.junit.Assert.assertTrue("'" + float14 + "' != '" + 1.0f + "'", float14 == 1.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertTrue("'" + type19 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX + "'", type19.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX));
        org.junit.Assert.assertTrue("'" + type20 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX + "'", type20.equals(org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX));
        org.junit.Assert.assertTrue("'" + type21 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX + "'", type21.equals(org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder28);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder30);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder32);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder34);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder36);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder38);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder40);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder51);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder53);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder55);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "multi_match" + "'", str58, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder60);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder62);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder64);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder66);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder68);
        org.junit.Assert.assertTrue("'" + type69 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS + "'", type69.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS));
        org.junit.Assert.assertTrue("'" + float70 + "' != '" + 0.0f + "'", float70 == 0.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder71);
        org.junit.Assert.assertNotNull(parseField72);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder73);
    }

    @Test
    public void test15012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15012");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder10.field("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder10.boost(0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder10.field("");
        java.lang.String[] strArray26 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray26);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = multiMatchQueryBuilder27.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = multiMatchQueryBuilder29.tieBreaker(0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type32 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX;
        float float33 = type32.tieBreaker();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder34 = multiMatchQueryBuilder29.type(type32);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder36 = multiMatchQueryBuilder29.cutoffFrequency((float) 0L);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder38 = multiMatchQueryBuilder29.queryName("multi_match");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder41 = multiMatchQueryBuilder38.field("", (float) 1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder42 = null; // flaky: multiMatchQueryBuilder10.fuzziness((java.lang.Object) multiMatchQueryBuilder38);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder44 = null; // flaky: multiMatchQueryBuilder42.maxExpansions(0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder46 = null; // flaky: multiMatchQueryBuilder42.field("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"minimum_should_match\" : \"\",\n    \"rewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"slop\\\" : -1,\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"lenient\\\" : true,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 52.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder48 = null; // flaky: multiMatchQueryBuilder46.minimumShouldMatch("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder50 = null; // flaky: multiMatchQueryBuilder48.field("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"slop\" : -1,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 10.0,\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder52 = null; // flaky: multiMatchQueryBuilder50.cutoffFrequency((float) (short) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder54 = null; // flaky: multiMatchQueryBuilder50.fuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"type\" : \"phrase_prefix\",\n    \"prefix_length\" : 0,\n    \"fuzzy_rewrite\" : \"{\\n  \\\"multiMatch\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"type\\\" : \\\"phrase_prefix\\\",\\n    \\\"maxExpansions\\\" : 10,\\n    \\\"fuzzyRewrite\\\" : \\\"\\\",\\n    \\\"tieBreaker\\\" : 0.0,\\n    \\\"cutoffFrequency\\\" : 0.0,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"tie_breaker\" : 0.0,\n    \"cutoff_frequency\" : 0.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder56 = null; // flaky: multiMatchQueryBuilder50.slop((int) 'a');
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder29);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder31);
        org.junit.Assert.assertTrue("'" + type32 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX + "'", type32.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX));
        org.junit.Assert.assertTrue("'" + float33 + "' != '" + 0.0f + "'", float33 == 0.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder34);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder36);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder38);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder41);
// flaky:         org.junit.Assert.assertNotNull(multiMatchQueryBuilder42);
// flaky:         org.junit.Assert.assertNotNull(multiMatchQueryBuilder44);
// flaky:         org.junit.Assert.assertNotNull(multiMatchQueryBuilder46);
// flaky:         org.junit.Assert.assertNotNull(multiMatchQueryBuilder48);
// flaky:         org.junit.Assert.assertNotNull(multiMatchQueryBuilder50);
// flaky:         org.junit.Assert.assertNotNull(multiMatchQueryBuilder52);
// flaky:         org.junit.Assert.assertNotNull(multiMatchQueryBuilder54);
// flaky:         org.junit.Assert.assertNotNull(multiMatchQueryBuilder56);
    }

    @Test
    public void test15013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15013");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder12.lenient(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder14.rewrite("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder16.field("{\n  \"multiMatch\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzyRewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}", (float) (short) -1);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery20 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder19.zeroTermsQuery(zeroTermsQuery20);
        java.lang.String str22 = multiMatchQueryBuilder21.getName();
        org.elasticsearch.index.query.Operator operator23 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder21.operator(operator23);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder21.prefixLength(0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = multiMatchQueryBuilder21.prefixLength(0);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "multi_match" + "'", str22, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder28);
    }

    @Test
    public void test15014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15014");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery13 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder12.zeroTermsQuery(zeroTermsQuery13);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder14.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery17 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder14.zeroTermsQuery(zeroTermsQuery17);
        java.lang.String[] strArray26 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray26);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = multiMatchQueryBuilder27.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = multiMatchQueryBuilder29.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery32 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder33 = multiMatchQueryBuilder31.zeroTermsQuery(zeroTermsQuery32);
        java.lang.String str34 = multiMatchQueryBuilder33.getName();
        boolean boolean35 = multiMatchQueryBuilder18.equals((java.lang.Object) multiMatchQueryBuilder33);
        java.lang.String str36 = multiMatchQueryBuilder33.getWriteableName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder38 = multiMatchQueryBuilder33.analyzer("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder40 = multiMatchQueryBuilder33.fuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"slop\" : -1,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder49 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray48);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder51 = multiMatchQueryBuilder49.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder53 = multiMatchQueryBuilder49.queryName("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.Operator operator54 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder55 = multiMatchQueryBuilder53.operator(operator54);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder58 = multiMatchQueryBuilder53.field("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"analyzer\" : \"multi_match\",\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}", 10.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder60 = multiMatchQueryBuilder58.field("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery61 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder62 = multiMatchQueryBuilder58.zeroTermsQuery(zeroTermsQuery61);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder64 = multiMatchQueryBuilder58.rewrite("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"type\" : \"best_fields\",\n    \"fuzzy_rewrite\" : \"\",\n    \"use_dis_max\" : false,\n    \"tie_breaker\" : 0.0,\n    \"lenient\" : false,\n    \"cutoff_frequency\" : 0.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder66 = multiMatchQueryBuilder64.boost((float) (short) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder67 = null; // flaky: multiMatchQueryBuilder33.fuzziness((java.lang.Object) multiMatchQueryBuilder64);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder69 = multiMatchQueryBuilder64.cutoffFrequency(52.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder71 = multiMatchQueryBuilder69.queryName("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\", \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"^32.0\\\", \\\"^32.0\\\", \\\"^32.0\\\", \\\"^32.0\\\", \\\"^32.0\\\", \\\"^32.0\\\" ],\\n    \\\"minimum_should_match\\\" : \\\"{\\\\n  \\\\\\\"multi_match\\\\\\\" : {\\\\n    \\\\\\\"query\\\\\\\" : 0.0,\\\\n    \\\\\\\"fields\\\\\\\" : [ \\\\\\\"hi!\\\\\\\", \\\\\\\"\\\\\\\", \\\\\\\"\\\\\\\", \\\\\\\"\\\\\\\", \\\\\\\"\\\\\\\", \\\\\\\"\\\\\\\" ],\\\\n    \\\\\\\"fuzzy_rewrite\\\\\\\" : \\\\\\\"hi!\\\\\\\",\\\\n    \\\\\\\"lenient\\\\\\\" : true,\\\\n    \\\\\\\"boost\\\\\\\" : 1.0\\\\n  }\\\\n}\\\",\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0,\\n    \\\"_name\\\" : \\\"\\\"\\n  }\\n}^10.0\" ],\n    \"max_expansions\" : 1,\n    \"fuzzy_rewrite\" : \"\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder73 = multiMatchQueryBuilder71.analyzer("{\n  \"multiMatch\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"slop\" : 32,\n    \"prefixLength\" : 32,\n    \"rewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"max_expansions\\\" : 1,\\n    \\\"fuzzy_rewrite\\\" : \\\"\\\",\\n    \\\"lenient\\\" : true,\\n    \\\"boost\\\" : 1.0,\\n    \\\"_name\\\" : \\\"{\\\\n  \\\\\\\"multi_match\\\\\\\" : {\\\\n    \\\\\\\"query\\\\\\\" : 0.0,\\\\n    \\\\\\\"fields\\\\\\\" : [ \\\\\\\"hi!\\\\\\\", \\\\\\\"\\\\\\\", \\\\\\\"\\\\\\\", \\\\\\\"\\\\\\\", \\\\\\\"\\\\\\\", \\\\\\\"\\\\\\\" ],\\\\n    \\\\\\\"fuzzy_rewrite\\\\\\\" : \\\\\\\"hi!\\\\\\\",\\\\n    \\\\\\\"boost\\\\\\\" : 1.0\\\\n  }\\\\n}\\\"\\n  }\\n}\",\n    \"fuzzyRewrite\" : \"hi!\",\n    \"boost\" : 1.0,\n    \"Name\" : \"hi!\"\n  }\n}");
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder29);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder31);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "multi_match" + "'", str34, "multi_match");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "multi_match" + "'", str36, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder38);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder40);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder51);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder53);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder55);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder58);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder60);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder62);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder64);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder66);
// flaky:         org.junit.Assert.assertNotNull(multiMatchQueryBuilder67);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder69);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder71);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder73);
    }

    @Test
    public void test15015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15015");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder10.field("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder10.boost(0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder16.analyzer("multi_match");
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type19 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS;
        org.elasticsearch.index.search.MatchQuery.Type type20 = type19.matchQueryType();
        boolean boolean21 = multiMatchQueryBuilder16.equals((java.lang.Object) type20);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder16.tieBreaker((float) (short) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder23.boost(10.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder25.analyzer("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"analyzer\" : \"multi_match\",\n    \"fuzziness\" : \"{\\n  \\\"MULTI_MATCH\\\" : {\\n    \\\"QUERY\\\" : 0.0,\\n    \\\"FIELDS\\\" : [ \\\"HI!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"ANALYZER\\\" : \\\"MULTI_MATCH\\\",\\n    \\\"MAX_EXPANSIONS\\\" : 1,\\n    \\\"FUZZY_REWRITE\\\" : \\\"HI!\\\",\\n    \\\"CUTOFF_FREQUENCY\\\" : 0.0,\\n    \\\"BOOST\\\" : 0.0\\n  }\\n}\",\n    \"prefix_length\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0,\n    \"_name\" : \"hi!\"\n  }\n}");
        java.lang.String str28 = multiMatchQueryBuilder25.getName();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertTrue("'" + type19 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS + "'", type19.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS));
        org.junit.Assert.assertTrue("'" + type20 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type20.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "multi_match" + "'", str28, "multi_match");
    }

    @Test
    public void test15016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15016");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.fuzzyRewrite("hi!");
        java.lang.String str13 = multiMatchQueryBuilder10.getName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder10.analyzer("multi_match");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder15.field("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\", \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"analyzer\\\" : \\\"multi_match\\\",\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}^10.0\", \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\" ],\n    \"fuzzy_rewrite\" : \"\",\n    \"boost\" : 1.0,\n    \"_name\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\"\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder17.minimumShouldMatch("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"\",\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 52.0\n  }\n}");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery20 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder17.zeroTermsQuery(zeroTermsQuery20);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder21.useDisMax(false);
        java.lang.String[] strArray26 = new java.lang.String[] { "{\n  \"multiMatch\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzyRewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (short) 100, strArray26);
        java.lang.String[] strArray35 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder36 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray35);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder37 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) multiMatchQueryBuilder27, strArray35);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder39 = multiMatchQueryBuilder27.boost((float) 'a');
        org.elasticsearch.index.query.QueryValidationException queryValidationException40 = multiMatchQueryBuilder27.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder42 = multiMatchQueryBuilder27.analyzer("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"^32.0\", \"^32.0\", \"^32.0\", \"^32.0\", \"^32.0\", \"^32.0\" ],\n    \"minimum_should_match\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"lenient\\\" : true,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0,\n    \"_name\" : \"\"\n  }\n}");
        java.lang.Class<?> wildcardClass43 = multiMatchQueryBuilder42.getClass();
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder44 = null; // flaky: multiMatchQueryBuilder23.type((java.lang.Object) multiMatchQueryBuilder42);
// flaky:             org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchParseException; message: failed to parse [multi_match] query type [{?  \"multi_match\" : {?    \"query\" : 100,?    \"fields\" : [ \"{\\n  \\\"multimatch\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"fuzzyrewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\" ],?    \"analyzer\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"^32.0\\\", \\\"^32.0\\\", \\\"^32.0\\\", \\\"^32.0\\\", \\\"^32.0\\\", \\\"^32.0\\\" ],\\n    \\\"minimum_should_match\\\" : \\\"{\\\\n  \\\\\\\"multi_match\\\\\\\" : {\\\\n    \\\\\\\"query\\\\\\\" : 0.0,\\\\n    \\\\\\\"fields\\\\\\\" : [ \\\\\\\"hi!\\\\\\\", \\\\\\\"\\\\\\\", \\\\\\\"\\\\\\\", \\\\\\\"\\\\\\\", \\\\\\\"\\\\\\\", \\\\\\\"\\\\\\\" ],\\\\n    \\\\\\\"fuzzy_rewrite\\\\\\\" : \\\\\\\"hi!\\\\\\\",\\\\n    \\\\\\\"lenient\\\\\\\" : true,\\\\n    \\\\\\\"boost\\\\\\\" : 1.0\\\\n  }\\\\n}\\\",\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0,\\n    \\\"_name\\\" : \\\"\\\"\\n  }\\n}\",?    \"boost\" : 97.0?  }?}]. unknown type.");
        } catch (org.elasticsearch.ElasticsearchParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "multi_match" + "'", str13, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder39);
        org.junit.Assert.assertNull(queryValidationException40);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder42);
        org.junit.Assert.assertNotNull(wildcardClass43);
    }

    @Test
    public void test15017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15017");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder12.maxExpansions(1);
        org.elasticsearch.index.query.QueryValidationException queryValidationException15 = multiMatchQueryBuilder14.validate();
        java.lang.String str16 = null; // flaky: multiMatchQueryBuilder14.toString();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder14.fuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"slop\" : -1,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder18.fuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"\",\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 52.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder20.rewrite("{\n  \"multiMatch\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"type\" : \"phrase_prefix\",\n    \"analyzer\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"type\\\" : \\\"phrase_prefix\\\",\\n    \\\"max_expansions\\\" : 10,\\n    \\\"fuzzy_rewrite\\\" : \\\"\\\",\\n    \\\"tie_breaker\\\" : 0.0,\\n    \\\"cutoff_frequency\\\" : 0.0,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"slop\" : -1,\n    \"fuzzyRewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"analyzer\\\" : \\\"multi_match\\\",\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"lenient\" : true,\n    \"cutoffFrequency\" : 10.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder22.useDisMax(false);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNull(queryValidationException15);
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"max_expansions\" : 1,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}" + "'", str16, "{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"max_expansions\" : 1,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
    }

    @Test
    public void test15018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15018");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.fuzzyRewrite("hi!");
        java.lang.String str13 = multiMatchQueryBuilder10.getName();
        float float14 = multiMatchQueryBuilder10.boost();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder10.lenient(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder10.slop((int) (short) -1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type19 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX;
        org.elasticsearch.index.search.MatchQuery.Type type20 = type19.matchQueryType();
        org.elasticsearch.index.search.MatchQuery.Type type21 = type19.matchQueryType();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder10.type(type19);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder22.fuzzyRewrite("{\n  \"multiMatch\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzyRewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder24.fuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"slop\" : -1,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        float float27 = multiMatchQueryBuilder26.boost();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = multiMatchQueryBuilder26.fuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"analyzer\" : \"multi_match\",\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = multiMatchQueryBuilder29.analyzer("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"type\" : \"phrase_prefix\",\n    \"max_expansions\" : 10,\n    \"fuzzy_rewrite\" : \"\",\n    \"tie_breaker\" : 0.0,\n    \"cutoff_frequency\" : 0.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder33 = multiMatchQueryBuilder31.cutoffFrequency((float) 10);
        java.lang.String str34 = null; // flaky: multiMatchQueryBuilder31.toString();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder36 = multiMatchQueryBuilder31.maxExpansions((int) (short) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder39 = multiMatchQueryBuilder36.field("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"analyzer\" : \"hi!\",\n    \"max_expansions\" : 52,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0,\n    \"_name\" : \"{\\n  \\\"multiMatch\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"fuzzyRewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\"\n  }\n}", 52.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder41 = multiMatchQueryBuilder39.minimumShouldMatch("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\", \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"slop\\\" : -1,\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"lenient\\\" : true,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\" ],\n    \"analyzer\" : \"\",\n    \"max_expansions\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        float float42 = multiMatchQueryBuilder41.boost();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder44 = multiMatchQueryBuilder41.tieBreaker((float) 10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder46 = multiMatchQueryBuilder41.minimumShouldMatch("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder49 = multiMatchQueryBuilder46.field("{\n  \"multiMatch\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\", \"\" ],\n    \"analyzer\" : \"multi_match\",\n    \"maxExpansions\" : -1,\n    \"fuzzyRewrite\" : \"hi!\",\n    \"useDisMax\" : true,\n    \"boost\" : 0.0\n  }\n}", (float) (short) 10);
        org.elasticsearch.index.query.QueryShardContext queryShardContext50 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.lucene.search.Query query51 = multiMatchQueryBuilder49.toQuery(queryShardContext50);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "multi_match" + "'", str13, "multi_match");
        org.junit.Assert.assertTrue("'" + float14 + "' != '" + 1.0f + "'", float14 == 1.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertTrue("'" + type19 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX + "'", type19.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX));
        org.junit.Assert.assertTrue("'" + type20 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX + "'", type20.equals(org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX));
        org.junit.Assert.assertTrue("'" + type21 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX + "'", type21.equals(org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertTrue("'" + float27 + "' != '" + 1.0f + "'", float27 == 1.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder29);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder31);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder33);
// flaky:         org.junit.Assert.assertEquals("'" + str34 + "' != '" + "{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"type\" : \"phrase_prefix\",\n    \"analyzer\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"type\\\" : \\\"phrase_prefix\\\",\\n    \\\"max_expansions\\\" : 10,\\n    \\\"fuzzy_rewrite\\\" : \\\"\\\",\\n    \\\"tie_breaker\\\" : 0.0,\\n    \\\"cutoff_frequency\\\" : 0.0,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"slop\" : -1,\n    \"fuzzy_rewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"analyzer\\\" : \\\"multi_match\\\",\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"lenient\" : true,\n    \"cutoff_frequency\" : 10.0,\n    \"boost\" : 1.0\n  }\n}" + "'", str34, "{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"type\" : \"phrase_prefix\",\n    \"analyzer\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"type\\\" : \\\"phrase_prefix\\\",\\n    \\\"max_expansions\\\" : 10,\\n    \\\"fuzzy_rewrite\\\" : \\\"\\\",\\n    \\\"tie_breaker\\\" : 0.0,\\n    \\\"cutoff_frequency\\\" : 0.0,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"slop\" : -1,\n    \"fuzzy_rewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"analyzer\\\" : \\\"multi_match\\\",\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"lenient\" : true,\n    \"cutoff_frequency\" : 10.0,\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder36);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder39);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder41);
        org.junit.Assert.assertTrue("'" + float42 + "' != '" + 1.0f + "'", float42 == 1.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder44);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder46);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder49);
    }

    @Test
    public void test15019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15019");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.fuzzyRewrite("hi!");
        java.lang.String str13 = multiMatchQueryBuilder10.getName();
        float float14 = multiMatchQueryBuilder10.boost();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder10.lenient(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder10.slop((int) (short) -1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type19 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX;
        org.elasticsearch.index.search.MatchQuery.Type type20 = type19.matchQueryType();
        org.elasticsearch.index.search.MatchQuery.Type type21 = type19.matchQueryType();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder10.type(type19);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder10.queryName("multi_match");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder24.minimumShouldMatch("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = multiMatchQueryBuilder24.field("{\n  \"multiMatch\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzyRewrite\" : \"hi!\",\n    \"boost\" : 1.0,\n    \"Name\" : \"hi!\"\n  }\n}", (float) 'a');
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = multiMatchQueryBuilder24.analyzer("{\n  \"multiMatch\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\", \"\" ],\n    \"analyzer\" : \"multi_match\",\n    \"maxExpansions\" : 1,\n    \"fuzzyRewrite\" : \"hi!\",\n    \"tieBreaker\" : 0.0,\n    \"boost\" : 0.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder33 = multiMatchQueryBuilder31.boost((float) 'a');
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "multi_match" + "'", str13, "multi_match");
        org.junit.Assert.assertTrue("'" + float14 + "' != '" + 1.0f + "'", float14 == 1.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertTrue("'" + type19 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX + "'", type19.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX));
        org.junit.Assert.assertTrue("'" + type20 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX + "'", type20.equals(org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX));
        org.junit.Assert.assertTrue("'" + type21 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX + "'", type21.equals(org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder29);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder31);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder33);
    }

    @Test
    public void test15020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15020");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery13 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder12.zeroTermsQuery(zeroTermsQuery13);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder14.analyzer("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"minimum_should_match\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"slop\\\" : -1,\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"lenient\\\" : true,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.Operator operator17 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder16.operator(operator17);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder16.tieBreaker((float) 0L);
        org.elasticsearch.index.query.Operator operator21 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder16.operator(operator21);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder16.boost((float) 1L);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
    }

    @Test
    public void test15021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15021");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.minimumShouldMatch("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"slop\" : -1,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String str11 = null; // flaky: multiMatchQueryBuilder8.toString();
        java.lang.String str12 = multiMatchQueryBuilder8.getName();
        org.elasticsearch.index.query.Operator operator13 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder8.operator(operator13);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder14.cutoffFrequency((float) ' ');
        java.lang.String[] strArray24 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray24);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder25.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = multiMatchQueryBuilder27.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery30 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = multiMatchQueryBuilder29.zeroTermsQuery(zeroTermsQuery30);
        java.lang.String str32 = null; // flaky: multiMatchQueryBuilder29.toString();
        java.lang.String str33 = multiMatchQueryBuilder29.queryName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder35 = multiMatchQueryBuilder29.queryName("");
        java.lang.String str36 = multiMatchQueryBuilder29.getName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type37 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX;
        float float38 = type37.tieBreaker();
        org.elasticsearch.common.ParseField parseField39 = type37.parseField();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder40 = multiMatchQueryBuilder29.type(type37);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder42 = multiMatchQueryBuilder40.maxExpansions((int) (short) 10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder44 = multiMatchQueryBuilder40.lenient(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder45 = null; // flaky: multiMatchQueryBuilder14.fuzziness((java.lang.Object) multiMatchQueryBuilder44);
        java.lang.String str46 = null; // flaky: multiMatchQueryBuilder45.getWriteableName();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"minimum_should_match\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"slop\\\" : -1,\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"lenient\\\" : true,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"boost\" : 1.0\n  }\n}" + "'", str11, "{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"minimum_should_match\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"slop\\\" : -1,\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"lenient\\\" : true,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "multi_match" + "'", str12, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder29);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder31);
// flaky:         org.junit.Assert.assertEquals("'" + str32 + "' != '" + "{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}" + "'", str32, "{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "multi_match" + "'", str36, "multi_match");
        org.junit.Assert.assertTrue("'" + type37 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX + "'", type37.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX));
        org.junit.Assert.assertTrue("'" + float38 + "' != '" + 0.0f + "'", float38 == 0.0f);
        org.junit.Assert.assertNotNull(parseField39);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder40);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder42);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder44);
// flaky:         org.junit.Assert.assertNotNull(multiMatchQueryBuilder45);
// flaky:         org.junit.Assert.assertEquals("'" + str46 + "' != '" + "multi_match" + "'", str46, "multi_match");
    }

    @Test
    public void test15022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15022");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.minimumShouldMatch("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"slop\" : -1,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String str11 = null; // flaky: multiMatchQueryBuilder8.toString();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder8.boost((float) (short) 1);
        java.lang.String str14 = multiMatchQueryBuilder13.getWriteableName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder13.field("{\n  \"multiMatch\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"maxExpansions\" : 1,\n    \"fuzzyRewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.common.xcontent.XContentType xContentType17 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.bytes.BytesReference bytesReference18 = multiMatchQueryBuilder16.buildAsBytes(xContentType17);
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchException; message: Failed to build ToXContent");
        } catch (org.elasticsearch.ElasticsearchException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"minimum_should_match\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"slop\\\" : -1,\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"lenient\\\" : true,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"boost\" : 1.0\n  }\n}" + "'", str11, "{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"minimum_should_match\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"slop\\\" : -1,\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"lenient\\\" : true,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "multi_match" + "'", str14, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
    }

    @Test
    public void test15023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15023");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.tieBreaker(0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type13 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX;
        float float14 = type13.tieBreaker();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder10.type(type13);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder10.cutoffFrequency((float) 0L);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder10.maxExpansions(10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder10.analyzer("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"slop\" : -1,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder10.analyzer("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"analyzer\" : \"multi_match\",\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder23.rewrite("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String[] strArray33 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder34 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray33);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder36 = multiMatchQueryBuilder34.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder38 = multiMatchQueryBuilder36.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder40 = multiMatchQueryBuilder38.tieBreaker((float) '#');
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder42 = multiMatchQueryBuilder40.useDisMax(true);
        java.lang.Class<?> wildcardClass43 = multiMatchQueryBuilder40.getClass();
        boolean boolean44 = multiMatchQueryBuilder23.equals((java.lang.Object) multiMatchQueryBuilder40);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder46 = multiMatchQueryBuilder23.prefixLength((int) (short) 10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder48 = multiMatchQueryBuilder23.useDisMax(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder50 = multiMatchQueryBuilder48.boost((float) (short) 0);
        org.elasticsearch.index.query.Operator operator51 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder52 = multiMatchQueryBuilder48.operator(operator51);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder54 = multiMatchQueryBuilder52.lenient(false);
        org.elasticsearch.index.query.Operator operator55 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder56 = multiMatchQueryBuilder54.operator(operator55);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder58 = multiMatchQueryBuilder54.maxExpansions((int) ' ');
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertTrue("'" + type13 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX + "'", type13.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX));
        org.junit.Assert.assertTrue("'" + float14 + "' != '" + 0.0f + "'", float14 == 0.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder36);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder38);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder40);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder42);
        org.junit.Assert.assertNotNull(wildcardClass43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder46);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder48);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder50);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder52);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder54);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder56);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder58);
    }

    @Test
    public void test15024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15024");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder12.lenient(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder14.rewrite("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery17 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder16.zeroTermsQuery(zeroTermsQuery17);
        java.lang.Object obj19 = null;
        boolean boolean20 = multiMatchQueryBuilder18.equals(obj19);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder18.lenient(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder18.slop(1);
        java.lang.String[] strArray32 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder33 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray32);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder35 = multiMatchQueryBuilder33.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder37 = multiMatchQueryBuilder35.fuzzyRewrite("hi!");
        java.lang.String str38 = multiMatchQueryBuilder35.getName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder40 = multiMatchQueryBuilder35.analyzer("multi_match");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder42 = multiMatchQueryBuilder40.cutoffFrequency((float) (short) 1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder44 = multiMatchQueryBuilder42.minimumShouldMatch("{\n  \"multiMatch\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzyRewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String[] strArray52 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder53 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray52);
        java.lang.Object obj54 = null;
        java.lang.String[] strArray63 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder64 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray63);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder65 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 10.0f, strArray63);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder66 = new org.elasticsearch.index.query.MultiMatchQueryBuilder(obj54, strArray63);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder67 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray63);
        org.elasticsearch.index.query.Operator operator68 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder69 = multiMatchQueryBuilder67.operator(operator68);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder71 = multiMatchQueryBuilder69.cutoffFrequency((float) (-1L));
        boolean boolean72 = multiMatchQueryBuilder44.equals((java.lang.Object) multiMatchQueryBuilder69);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder74 = multiMatchQueryBuilder69.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder76 = multiMatchQueryBuilder74.cutoffFrequency((float) 10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder79 = multiMatchQueryBuilder76.field("{\n  \"multiMatch\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"analyzer\" : \"multi_match\",\n    \"fuzzyRewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}", (float) (byte) 10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder81 = multiMatchQueryBuilder76.prefixLength((int) (byte) 0);
        boolean boolean82 = multiMatchQueryBuilder18.equals((java.lang.Object) multiMatchQueryBuilder81);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder84 = multiMatchQueryBuilder81.prefixLength((int) (byte) -1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder86 = multiMatchQueryBuilder81.field("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\", \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"slop\\\" : -1,\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"lenient\\\" : true,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\" ],\n    \"type\" : \"phrase_prefix\",\n    \"analyzer\" : \"\",\n    \"slop\" : 10,\n    \"fuzzy_rewrite\" : \"\",\n    \"tie_breaker\" : -1.0,\n    \"lenient\" : true,\n    \"cutoff_frequency\" : 0.0,\n    \"boost\" : 1.0,\n    \"_name\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"slop\\\" : -1,\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"lenient\\\" : true,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\"\n  }\n}");
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder35);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "multi_match" + "'", str38, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder40);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder42);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder44);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder69);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder74);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder76);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder79);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder84);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder86);
    }

    @Test
    public void test15025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15025");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder8.queryName("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.Operator operator13 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder12.operator(operator13);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder14.lenient(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder16.maxExpansions((int) (short) 1);
        java.lang.String str19 = multiMatchQueryBuilder16.getWriteableName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder16.prefixLength(0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder21.slop((int) (short) -1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder21.boost(35.0f);
        java.lang.String str26 = multiMatchQueryBuilder25.getName();
        org.elasticsearch.common.io.stream.StreamOutput streamOutput27 = null;
        // The following exception was thrown during execution in test generation
        try {
            multiMatchQueryBuilder25.writeTo(streamOutput27);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "multi_match" + "'", str19, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "multi_match" + "'", str26, "multi_match");
    }

    @Test
    public void test15026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15026");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder12.lenient(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder14.rewrite("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery17 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder16.zeroTermsQuery(zeroTermsQuery17);
        java.lang.Object obj19 = null;
        boolean boolean20 = multiMatchQueryBuilder18.equals(obj19);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder18.lenient(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder22.analyzer("{\n  \"multiMatch\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"type\" : \"phrase_prefix\",\n    \"maxExpansions\" : 10,\n    \"fuzzyRewrite\" : \"\",\n    \"tieBreaker\" : 0.0,\n    \"cutoffFrequency\" : 0.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder22.lenient(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = multiMatchQueryBuilder22.queryName("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"slop\" : 0,\n    \"prefix_length\" : 0,\n    \"rewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"analyzer\\\" : \\\"multi_match\\\",\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"lenient\" : false,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder30 = multiMatchQueryBuilder22.fuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"analyzer\" : \"hi!\",\n    \"max_expansions\" : 52,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0,\n    \"_name\" : \"{\\n  \\\"multiMatch\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"fuzzyRewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\"\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder32 = multiMatchQueryBuilder30.rewrite("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\", \"\", \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"type\\\" : \\\"phrase_prefix\\\",\\n    \\\"max_expansions\\\" : 10,\\n    \\\"fuzzy_rewrite\\\" : \\\"\\\",\\n    \\\"tie_breaker\\\" : 0.0,\\n    \\\"cutoff_frequency\\\" : 0.0,\\n    \\\"boost\\\" : 1.0\\n  }\\n}^1.0\" ],\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"use_dis_max\" : false,\n    \"boost\" : 0.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder34 = multiMatchQueryBuilder30.minimumShouldMatch("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"slop\\\" : -1,\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"lenient\\\" : true,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"boost\" : 1.0,\n    \"_name\" : \"hi!\"\n  }\n}");
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder28);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder30);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder32);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder34);
    }

    @Test
    public void test15027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15027");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder12.tieBreaker((float) '#');
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder14.useDisMax(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder16.boost((float) 100L);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder18.fuzzyRewrite("");
        java.lang.String str21 = multiMatchQueryBuilder20.queryName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder20.field("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"analyzer\" : \"multi_match\",\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0,\n    \"_name\" : \"hi!\"\n  }\n}");
        org.elasticsearch.index.query.QueryShardContext queryShardContext24 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.lucene.search.Query query25 = multiMatchQueryBuilder20.toFilter(queryShardContext24);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
    }

    @Test
    public void test15028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15028");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder12.tieBreaker((float) '#');
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder12.maxExpansions(10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder16.field("hi!");
        float float19 = multiMatchQueryBuilder18.boost();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder18.useDisMax(false);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery22 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder21.zeroTermsQuery(zeroTermsQuery22);
        java.lang.String str24 = null; // flaky: multiMatchQueryBuilder23.toString();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery25 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder23.zeroTermsQuery(zeroTermsQuery25);
        java.lang.String str27 = multiMatchQueryBuilder26.getWriteableName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = multiMatchQueryBuilder26.boost((float) 100L);
        java.lang.String[] strArray37 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder38 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray37);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder40 = multiMatchQueryBuilder38.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder42 = multiMatchQueryBuilder40.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder44 = multiMatchQueryBuilder40.field("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder46 = multiMatchQueryBuilder40.boost(0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder48 = multiMatchQueryBuilder46.analyzer("multi_match");
        float float49 = multiMatchQueryBuilder48.boost();
        java.lang.String[] strArray57 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder58 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray57);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder60 = multiMatchQueryBuilder58.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder62 = multiMatchQueryBuilder58.queryName("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.Operator operator63 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder64 = multiMatchQueryBuilder62.operator(operator63);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder66 = multiMatchQueryBuilder64.lenient(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder68 = multiMatchQueryBuilder66.maxExpansions((int) (short) 1);
        java.lang.String[] strArray76 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder77 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray76);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder78 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) multiMatchQueryBuilder66, strArray76);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder80 = multiMatchQueryBuilder66.boost((float) 10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder81 = null; // flaky: multiMatchQueryBuilder48.fuzziness((java.lang.Object) multiMatchQueryBuilder66);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery82 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder83 = multiMatchQueryBuilder48.zeroTermsQuery(zeroTermsQuery82);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder84 = null; // flaky: multiMatchQueryBuilder29.type((java.lang.Object) multiMatchQueryBuilder48);
// flaky:             org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchParseException; message: failed to parse [multi_match] query type [{?  \"multi_match\" : {?    \"query\" : 0.0,?    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\", \"\" ],?    \"analyzer\" : \"multi_match\",?    \"fuzziness\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"max_expansions\\\" : 1,\\n    \\\"fuzzy_rewrite\\\" : \\\"\\\",\\n    \\\"lenient\\\" : true,\\n    \\\"boost\\\" : 10.0,\\n    \\\"_name\\\" : \\\"{\\\\n  \\\\\\\"multi_match\\\\\\\" : {\\\\n    \\\\\\\"query\\\\\\\" : 0.0,\\\\n    \\\\\\\"fields\\\\\\\" : [ \\\\\\\"hi!\\\\\\\", \\\\\\\"\\\\\\\", \\\\\\\"\\\\\\\", \\\\\\\"\\\\\\\", \\\\\\\"\\\\\\\", \\\\\\\"\\\\\\\" ],\\\\n    \\\\\\\"fuzzy_rewrite\\\\\\\" : \\\\\\\"hi!\\\\\\\",\\\\n    \\\\\\\"boost\\\\\\\" : 1.0\\\\n  }\\\\n}\\\"\\n  }\\n}\",?    \"fuzzy_rewrite\" : \"hi!\",?    \"boost\" : 0.0?  }?}]. unknown type.");
        } catch (org.elasticsearch.ElasticsearchParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertTrue("'" + float19 + "' != '" + 1.0f + "'", float19 == 1.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
// flaky:         org.junit.Assert.assertEquals("'" + str24 + "' != '" + "{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\", \"hi!\" ],\n    \"max_expansions\" : 10,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"use_dis_max\" : false,\n    \"tie_breaker\" : 35.0,\n    \"boost\" : 1.0\n  }\n}" + "'", str24, "{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\", \"hi!\" ],\n    \"max_expansions\" : 10,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"use_dis_max\" : false,\n    \"tie_breaker\" : 35.0,\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "multi_match" + "'", str27, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder29);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder40);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder42);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder44);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder46);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder48);
        org.junit.Assert.assertTrue("'" + float49 + "' != '" + 0.0f + "'", float49 == 0.0f);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder60);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder62);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder64);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder66);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder68);
        org.junit.Assert.assertNotNull(strArray76);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder80);
// flaky:         org.junit.Assert.assertNotNull(multiMatchQueryBuilder81);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder83);
    }

    @Test
    public void test15029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15029");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery13 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder12.zeroTermsQuery(zeroTermsQuery13);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder14.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder16.queryName("hi!");
        java.lang.String str19 = multiMatchQueryBuilder16.queryName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder16.analyzer("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"slop\" : -1,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String str22 = multiMatchQueryBuilder16.getWriteableName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder16.field("{\n  \"multiMatch\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"type\" : \"phrase_prefix\",\n    \"maxExpansions\" : 10,\n    \"fuzzyRewrite\" : \"\",\n    \"tieBreaker\" : 0.0,\n    \"cutoffFrequency\" : 0.0,\n    \"boost\" : 1.0\n  }\n}", (float) 'a');
        java.lang.String[] strArray33 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder34 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray33);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder36 = multiMatchQueryBuilder34.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder38 = multiMatchQueryBuilder36.tieBreaker(0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder40 = multiMatchQueryBuilder36.cutoffFrequency((float) 0L);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder42 = multiMatchQueryBuilder40.analyzer("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder44 = multiMatchQueryBuilder42.field("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"slop\" : -1,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String str45 = multiMatchQueryBuilder44.getWriteableName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder47 = multiMatchQueryBuilder44.minimumShouldMatch("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"\",\n    \"cutoff_frequency\" : 1.0,\n    \"boost\" : 1.0,\n    \"_name\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"analyzer\\\" : \\\"multi_match\\\",\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\"\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder48 = null; // flaky: multiMatchQueryBuilder16.fuzziness((java.lang.Object) multiMatchQueryBuilder44);
        java.lang.String str49 = null; // flaky: multiMatchQueryBuilder48.getName();
        java.lang.String[] strArray57 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder58 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray57);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder60 = multiMatchQueryBuilder58.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder62 = multiMatchQueryBuilder58.prefixLength(1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder63 = null; // flaky: multiMatchQueryBuilder48.fuzziness((java.lang.Object) multiMatchQueryBuilder62);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder65 = null; // flaky: multiMatchQueryBuilder48.cutoffFrequency((float) ' ');
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder67 = null; // flaky: multiMatchQueryBuilder48.lenient(true);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder68 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params69 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder70 = multiMatchQueryBuilder48.toXContent(xContentBuilder68, params69);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "multi_match" + "'", str22, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder36);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder38);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder40);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder42);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "multi_match" + "'", str45, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder47);
// flaky:         org.junit.Assert.assertNotNull(multiMatchQueryBuilder48);
// flaky:         org.junit.Assert.assertEquals("'" + str49 + "' != '" + "multi_match" + "'", str49, "multi_match");
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder60);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder62);
// flaky:         org.junit.Assert.assertNotNull(multiMatchQueryBuilder63);
// flaky:         org.junit.Assert.assertNotNull(multiMatchQueryBuilder65);
// flaky:         org.junit.Assert.assertNotNull(multiMatchQueryBuilder67);
        org.junit.Assert.assertNotNull(params69);
    }

    @Test
    public void test15030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15030");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder8.queryName("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.Operator operator13 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder12.operator(operator13);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder12.field("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"analyzer\" : \"multi_match\",\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}", 10.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder17.field("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery20 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder17.zeroTermsQuery(zeroTermsQuery20);
        org.elasticsearch.index.query.Operator operator22 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder21.operator(operator22);
        java.lang.String str24 = multiMatchQueryBuilder23.getWriteableName();
        org.elasticsearch.index.query.Operator operator25 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder23.operator(operator25);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = multiMatchQueryBuilder23.maxExpansions(10);
        java.lang.String str29 = multiMatchQueryBuilder23.queryName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = multiMatchQueryBuilder23.tieBreaker(52.0f);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery32 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder33 = multiMatchQueryBuilder31.zeroTermsQuery(zeroTermsQuery32);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder35 = multiMatchQueryBuilder33.field("{\n  \"multiMatch\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"type\" : \"phrase_prefix\",\n    \"analyzer\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"type\\\" : \\\"phrase_prefix\\\",\\n    \\\"max_expansions\\\" : 10,\\n    \\\"fuzzy_rewrite\\\" : \\\"\\\",\\n    \\\"tie_breaker\\\" : 0.0,\\n    \\\"cutoff_frequency\\\" : 0.0,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"slop\" : -1,\n    \"fuzzyRewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"analyzer\\\" : \\\"multi_match\\\",\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"lenient\" : true,\n    \"cutoffFrequency\" : 10.0,\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "multi_match" + "'", str24, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}" + "'", str29, "{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder31);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder33);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder35);
    }

    @Test
    public void test15031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15031");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery13 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder12.zeroTermsQuery(zeroTermsQuery13);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder14.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery17 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder14.zeroTermsQuery(zeroTermsQuery17);
        java.lang.String str19 = multiMatchQueryBuilder18.queryName();
        java.lang.String str20 = multiMatchQueryBuilder18.queryName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder18.analyzer("{\n  \"multiMatch\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzyRewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.QueryValidationException queryValidationException23 = multiMatchQueryBuilder22.validate();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery24 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder22.zeroTermsQuery(zeroTermsQuery24);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder25.minimumShouldMatch("{\n  \"multi_match\" : {\n    \"query\" : 100,\n    \"fields\" : [ \"{\\n  \\\"multiMatch\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"fuzzyRewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\" ],\n    \"cutoff_frequency\" : 0.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery28 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = multiMatchQueryBuilder25.zeroTermsQuery(zeroTermsQuery28);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = multiMatchQueryBuilder29.tieBreaker((float) 100L);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNull(queryValidationException23);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder29);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder31);
    }

    @Test
    public void test15032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15032");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder10.field("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder10.boost(0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder16.analyzer("multi_match");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder18.useDisMax(true);
        java.lang.String str21 = multiMatchQueryBuilder18.getName();
        java.lang.Object obj22 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder18.type(obj22);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder23.boost((float) (-1));
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery26 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder25.zeroTermsQuery(zeroTermsQuery26);
        java.lang.String[] strArray35 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder36 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray35);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder38 = multiMatchQueryBuilder36.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder40 = multiMatchQueryBuilder38.fuzzyRewrite("hi!");
        java.lang.String str41 = multiMatchQueryBuilder38.getName();
        float float42 = multiMatchQueryBuilder38.boost();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder44 = multiMatchQueryBuilder38.lenient(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder46 = multiMatchQueryBuilder38.slop((int) (short) -1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type47 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX;
        org.elasticsearch.index.search.MatchQuery.Type type48 = type47.matchQueryType();
        org.elasticsearch.index.search.MatchQuery.Type type49 = type47.matchQueryType();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder50 = multiMatchQueryBuilder38.type(type47);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder52 = multiMatchQueryBuilder38.queryName("multi_match");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder54 = multiMatchQueryBuilder52.minimumShouldMatch("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder57 = multiMatchQueryBuilder54.field("", (float) 10L);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder59 = multiMatchQueryBuilder57.boost((float) (short) 10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder61 = multiMatchQueryBuilder59.prefixLength((int) '#');
        java.lang.String[] strArray63 = new java.lang.String[] { "{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"analyzer\" : \"hi!\",\n    \"minimum_should_match\" : \"{\\n  \\\"multiMatch\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"type\\\" : \\\"phrase_prefix\\\",\\n    \\\"maxExpansions\\\" : 10,\\n    \\\"fuzzyRewrite\\\" : \\\"\\\",\\n    \\\"tieBreaker\\\" : 0.0,\\n    \\\"cutoffFrequency\\\" : 0.0,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"lenient\" : false,\n    \"cutoff_frequency\" : -1.0,\n    \"boost\" : 1.0\n  }\n}" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder64 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) multiMatchQueryBuilder61, strArray63);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder66 = multiMatchQueryBuilder64.prefixLength((int) (byte) 1);
        boolean boolean67 = multiMatchQueryBuilder25.equals((java.lang.Object) (byte) 1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder69 = multiMatchQueryBuilder25.fuzzyRewrite("{\n  \"multiMatch\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"type\" : \"phrase_prefix\",\n    \"fuzzyRewrite\" : \"\",\n    \"tieBreaker\" : 0.0,\n    \"cutoffFrequency\" : 0.0,\n    \"boost\" : 32.0\n  }\n}");
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "multi_match" + "'", str21, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder38);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "multi_match" + "'", str41, "multi_match");
        org.junit.Assert.assertTrue("'" + float42 + "' != '" + 1.0f + "'", float42 == 1.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder44);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder46);
        org.junit.Assert.assertTrue("'" + type47 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX + "'", type47.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX));
        org.junit.Assert.assertTrue("'" + type48 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX + "'", type48.equals(org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX));
        org.junit.Assert.assertTrue("'" + type49 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX + "'", type49.equals(org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder50);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder52);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder54);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder57);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder59);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder61);
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder69);
    }

    @Test
    public void test15033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15033");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery13 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder12.zeroTermsQuery(zeroTermsQuery13);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder14.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery17 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder14.zeroTermsQuery(zeroTermsQuery17);
        java.lang.String[] strArray26 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray26);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = multiMatchQueryBuilder27.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = multiMatchQueryBuilder29.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery32 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder33 = multiMatchQueryBuilder31.zeroTermsQuery(zeroTermsQuery32);
        java.lang.String str34 = multiMatchQueryBuilder33.getName();
        boolean boolean35 = multiMatchQueryBuilder18.equals((java.lang.Object) multiMatchQueryBuilder33);
        java.lang.String str36 = multiMatchQueryBuilder33.getWriteableName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder38 = multiMatchQueryBuilder33.analyzer("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder40 = multiMatchQueryBuilder33.lenient(false);
        java.lang.String str41 = multiMatchQueryBuilder40.queryName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder43 = multiMatchQueryBuilder40.tieBreaker(10.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder45 = multiMatchQueryBuilder40.rewrite("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\", \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"fuzzy_rewrite\\\" : \\\"\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}^52.0\" ],\n    \"max_expansions\" : 1,\n    \"fuzzy_rewrite\" : \"\",\n    \"lenient\" : true,\n    \"boost\" : 1.0,\n    \"_name\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\"\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder47 = multiMatchQueryBuilder40.boost((float) (-1));
        float float48 = multiMatchQueryBuilder47.boost();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder50 = multiMatchQueryBuilder47.useDisMax(false);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder29);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder31);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "multi_match" + "'", str34, "multi_match");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "multi_match" + "'", str36, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder38);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder40);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder43);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder45);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder47);
        org.junit.Assert.assertTrue("'" + float48 + "' != '" + (-1.0f) + "'", float48 == (-1.0f));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder50);
    }

    @Test
    public void test15034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15034");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder12.lenient(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder14.rewrite("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder16.field("{\n  \"multiMatch\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzyRewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}", (float) (short) -1);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery20 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder19.zeroTermsQuery(zeroTermsQuery20);
        java.lang.Object obj22 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type23 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX;
        float float24 = type23.tieBreaker();
        float float25 = type23.tieBreaker();
        org.elasticsearch.index.search.MatchQuery.Type type26 = type23.matchQueryType();
        java.lang.String[] strArray34 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder35 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray34);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder37 = multiMatchQueryBuilder35.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder39 = multiMatchQueryBuilder35.queryName("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.Operator operator40 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder41 = multiMatchQueryBuilder39.operator(operator40);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder43 = multiMatchQueryBuilder41.lenient(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder45 = multiMatchQueryBuilder43.maxExpansions((int) (short) 1);
        java.lang.String[] strArray53 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder54 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray53);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder55 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) multiMatchQueryBuilder43, strArray53);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder56 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) type23, strArray53);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder57 = new org.elasticsearch.index.query.MultiMatchQueryBuilder(obj22, strArray53);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder58 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) multiMatchQueryBuilder19, strArray53);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder60 = multiMatchQueryBuilder58.cutoffFrequency((float) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder62 = multiMatchQueryBuilder58.analyzer("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"type\" : \"best_fields\",\n    \"analyzer\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"analyzer\\\" : \\\"multi_match\\\",\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"fuzzy_rewrite\" : \"\",\n    \"tie_breaker\" : 0.0,\n    \"cutoff_frequency\" : 0.0,\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertTrue("'" + type23 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX + "'", type23.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX));
        org.junit.Assert.assertTrue("'" + float24 + "' != '" + 0.0f + "'", float24 == 0.0f);
        org.junit.Assert.assertTrue("'" + float25 + "' != '" + 0.0f + "'", float25 == 0.0f);
        org.junit.Assert.assertTrue("'" + type26 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX + "'", type26.equals(org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX));
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder37);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder39);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder41);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder43);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder45);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder60);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder62);
    }

    @Test
    public void test15035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15035");
        org.elasticsearch.common.xcontent.XContent xContent0 = null;
        java.io.OutputStream outputStream1 = null;
        java.lang.Object obj2 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type3 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX;
        float float4 = type3.tieBreaker();
        float float5 = type3.tieBreaker();
        org.elasticsearch.index.search.MatchQuery.Type type6 = type3.matchQueryType();
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type7 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX;
        float float8 = type7.tieBreaker();
        java.lang.Class<?> wildcardClass9 = type7.getClass();
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray17);
        java.lang.Object obj19 = null;
        java.lang.String[] strArray28 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray28);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder30 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 10.0f, strArray28);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = new org.elasticsearch.index.query.MultiMatchQueryBuilder(obj19, strArray28);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder32 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray28);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder33 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) wildcardClass9, strArray28);
        java.lang.String[] strArray41 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder42 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray41);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder44 = multiMatchQueryBuilder42.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder46 = multiMatchQueryBuilder44.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery47 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder48 = multiMatchQueryBuilder46.zeroTermsQuery(zeroTermsQuery47);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder50 = multiMatchQueryBuilder48.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder52 = multiMatchQueryBuilder50.queryName("hi!");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery53 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder54 = multiMatchQueryBuilder52.zeroTermsQuery(zeroTermsQuery53);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder56 = multiMatchQueryBuilder52.fuzziness((java.lang.Object) 1);
        java.lang.String[] strArray64 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder65 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray64);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder67 = multiMatchQueryBuilder65.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder69 = multiMatchQueryBuilder65.queryName("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.Operator operator70 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder71 = multiMatchQueryBuilder69.operator(operator70);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder73 = multiMatchQueryBuilder71.lenient(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder75 = multiMatchQueryBuilder73.maxExpansions((int) (short) 1);
        java.lang.String[] strArray83 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder84 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray83);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder85 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) multiMatchQueryBuilder73, strArray83);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder86 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) multiMatchQueryBuilder56, strArray83);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder87 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) strArray28, strArray83);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder88 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) type3, strArray83);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder89 = new org.elasticsearch.index.query.MultiMatchQueryBuilder(obj2, strArray83);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder90 = new org.elasticsearch.common.xcontent.XContentBuilder(xContent0, outputStream1, strArray83);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + type3 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX + "'", type3.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX));
        org.junit.Assert.assertTrue("'" + float4 + "' != '" + 0.0f + "'", float4 == 0.0f);
        org.junit.Assert.assertTrue("'" + float5 + "' != '" + 0.0f + "'", float5 == 0.0f);
        org.junit.Assert.assertTrue("'" + type6 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX + "'", type6.equals(org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX));
        org.junit.Assert.assertTrue("'" + type7 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX + "'", type7.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX));
        org.junit.Assert.assertTrue("'" + float8 + "' != '" + 0.0f + "'", float8 == 0.0f);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder44);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder46);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder48);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder50);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder52);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder54);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder56);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder67);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder69);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder71);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder73);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder75);
        org.junit.Assert.assertNotNull(strArray83);
    }

    @Test
    public void test15036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15036");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.fuzzyRewrite("hi!");
        java.lang.String str13 = multiMatchQueryBuilder10.getName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder10.analyzer("multi_match");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder15.cutoffFrequency((float) (short) 1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder15.cutoffFrequency((float) (short) 10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder15.rewrite("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String[] strArray29 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder30 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray29);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder32 = multiMatchQueryBuilder30.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder34 = multiMatchQueryBuilder32.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery35 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder36 = multiMatchQueryBuilder34.zeroTermsQuery(zeroTermsQuery35);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder38 = multiMatchQueryBuilder36.fuzzyRewrite("hi!");
        java.lang.String str39 = null; // flaky: multiMatchQueryBuilder38.toString();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder41 = multiMatchQueryBuilder38.analyzer("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"rewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"slop\\\" : -1,\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"lenient\\\" : true,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 52.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder43 = multiMatchQueryBuilder38.rewrite("hi!");
        org.elasticsearch.common.xcontent.XContentBuilder.FieldCaseConversion fieldCaseConversion44 = org.elasticsearch.common.xcontent.XContentBuilder.FieldCaseConversion.NONE;
        org.elasticsearch.common.xcontent.XContentBuilder.globalFieldCaseConversion(fieldCaseConversion44);
        org.elasticsearch.common.xcontent.XContentBuilder.globalFieldCaseConversion(fieldCaseConversion44);
        org.elasticsearch.common.xcontent.XContentBuilder.globalFieldCaseConversion(fieldCaseConversion44);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder48 = multiMatchQueryBuilder43.fuzziness((java.lang.Object) fieldCaseConversion44);
        java.lang.Object obj49 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder50 = multiMatchQueryBuilder48.type(obj49);
        boolean boolean51 = multiMatchQueryBuilder21.equals(obj49);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder53 = multiMatchQueryBuilder21.useDisMax(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder55 = multiMatchQueryBuilder21.queryName("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"rewrite\" : \"\",\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"lenient\" : false,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder57 = multiMatchQueryBuilder21.minimumShouldMatch("{\n  \"multiMatch\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"type\" : \"best_fields\",\n    \"prefixLength\" : 10,\n    \"fuzzyRewrite\" : \"\",\n    \"useDisMax\" : false,\n    \"tieBreaker\" : 0.0,\n    \"lenient\" : false,\n    \"cutoffFrequency\" : 0.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder59 = multiMatchQueryBuilder57.cutoffFrequency((float) (byte) -1);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "multi_match" + "'", str13, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder32);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder34);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder36);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder38);
// flaky:         org.junit.Assert.assertEquals("'" + str39 + "' != '" + "{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}" + "'", str39, "{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder41);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder43);
        org.junit.Assert.assertTrue("'" + fieldCaseConversion44 + "' != '" + org.elasticsearch.common.xcontent.XContentBuilder.FieldCaseConversion.NONE + "'", fieldCaseConversion44.equals(org.elasticsearch.common.xcontent.XContentBuilder.FieldCaseConversion.NONE));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder48);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder53);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder55);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder57);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder59);
    }

    @Test
    public void test15037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15037");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.fuzzyRewrite("hi!");
        java.lang.String str13 = multiMatchQueryBuilder10.getName();
        float float14 = multiMatchQueryBuilder10.boost();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder10.lenient(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder10.slop((int) (short) -1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type19 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX;
        org.elasticsearch.index.search.MatchQuery.Type type20 = type19.matchQueryType();
        org.elasticsearch.index.search.MatchQuery.Type type21 = type19.matchQueryType();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder10.type(type19);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder10.queryName("multi_match");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder24.minimumShouldMatch("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = multiMatchQueryBuilder24.lenient(true);
        java.lang.String[] strArray36 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder37 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray36);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder39 = multiMatchQueryBuilder37.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder41 = multiMatchQueryBuilder39.fuzzyRewrite("hi!");
        java.lang.String str42 = multiMatchQueryBuilder39.getName();
        float float43 = multiMatchQueryBuilder39.boost();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder45 = multiMatchQueryBuilder39.lenient(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder47 = multiMatchQueryBuilder39.queryName("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder49 = multiMatchQueryBuilder39.cutoffFrequency((float) (-1L));
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder50 = multiMatchQueryBuilder24.fuzziness((java.lang.Object) (-1L));
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder52 = multiMatchQueryBuilder50.field("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\", \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"analyzer\\\" : \\\"multi_match\\\",\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}^10.0\", \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\" ],\n    \"max_expansions\" : 10,\n    \"fuzzy_rewrite\" : \"\",\n    \"boost\" : 1.0,\n    \"_name\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\"\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder54 = multiMatchQueryBuilder52.prefixLength(0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder56 = multiMatchQueryBuilder54.field("{\n  \"multiMatch\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"type\" : \"best_fields\",\n    \"fuzzyRewrite\" : \"hi!\",\n    \"lenient\" : false,\n    \"cutoffFrequency\" : -1.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder58 = multiMatchQueryBuilder54.boost((float) (short) 1);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "multi_match" + "'", str13, "multi_match");
        org.junit.Assert.assertTrue("'" + float14 + "' != '" + 1.0f + "'", float14 == 1.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertTrue("'" + type19 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX + "'", type19.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX));
        org.junit.Assert.assertTrue("'" + type20 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX + "'", type20.equals(org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX));
        org.junit.Assert.assertTrue("'" + type21 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX + "'", type21.equals(org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder28);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder39);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "multi_match" + "'", str42, "multi_match");
        org.junit.Assert.assertTrue("'" + float43 + "' != '" + 1.0f + "'", float43 == 1.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder45);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder47);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder49);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder50);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder52);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder54);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder56);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder58);
    }

    @Test
    public void test15038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15038");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery13 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder12.zeroTermsQuery(zeroTermsQuery13);
        java.lang.String str15 = null; // flaky: multiMatchQueryBuilder12.toString();
        java.lang.String str16 = multiMatchQueryBuilder12.queryName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder12.queryName("");
        java.lang.String str19 = multiMatchQueryBuilder12.getName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type20 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX;
        float float21 = type20.tieBreaker();
        org.elasticsearch.common.ParseField parseField22 = type20.parseField();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder12.type(type20);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder12.prefixLength((int) (short) 1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = multiMatchQueryBuilder25.field("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"multi_match^0.0\" ],\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 0.0\n  }\n}", (float) (byte) 10);
        float float29 = multiMatchQueryBuilder25.boost();
        java.lang.String str30 = multiMatchQueryBuilder25.queryName();
        java.lang.String str31 = null; // flaky: multiMatchQueryBuilder25.toString();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}" + "'", str15, "{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "multi_match" + "'", str19, "multi_match");
        org.junit.Assert.assertTrue("'" + type20 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX + "'", type20.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX));
        org.junit.Assert.assertTrue("'" + float21 + "' != '" + 0.0f + "'", float21 == 0.0f);
        org.junit.Assert.assertNotNull(parseField22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder28);
        org.junit.Assert.assertTrue("'" + float29 + "' != '" + 1.0f + "'", float29 == 1.0f);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
// flaky:         org.junit.Assert.assertEquals("'" + str31 + "' != '" + "{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\", \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"multi_match^0.0\\\" ],\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"lenient\\\" : true,\\n    \\\"boost\\\" : 0.0\\n  }\\n}^10.0\" ],\n    \"type\" : \"phrase_prefix\",\n    \"prefix_length\" : 1,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0,\n    \"_name\" : \"\"\n  }\n}" + "'", str31, "{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\", \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"multi_match^0.0\\\" ],\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"lenient\\\" : true,\\n    \\\"boost\\\" : 0.0\\n  }\\n}^10.0\" ],\n    \"type\" : \"phrase_prefix\",\n    \"prefix_length\" : 1,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0,\n    \"_name\" : \"\"\n  }\n}");
    }

    @Test
    public void test15039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15039");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.tieBreaker(0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder10.cutoffFrequency((float) 0L);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder14.analyzer("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder16.field("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"slop\" : -1,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder18.queryName("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"slop\" : -1,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder20.slop((int) (byte) 10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder22.useDisMax(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder22.cutoffFrequency((float) (byte) 1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = multiMatchQueryBuilder22.useDisMax(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder30 = multiMatchQueryBuilder28.boost(97.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder32 = multiMatchQueryBuilder30.prefixLength((-1));
        org.elasticsearch.index.query.QueryShardContext queryShardContext33 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.lucene.search.Query query34 = multiMatchQueryBuilder32.toFilter(queryShardContext33);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder28);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder30);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder32);
    }

    @Test
    public void test15040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15040");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery13 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder12.zeroTermsQuery(zeroTermsQuery13);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder14.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder16.queryName("hi!");
        java.lang.String str19 = multiMatchQueryBuilder16.queryName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder16.rewrite("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"max_expansions\" : 1,\n    \"fuzzy_rewrite\" : \"\",\n    \"lenient\" : true,\n    \"boost\" : 1.0,\n    \"_name\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\"\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder21.slop((int) ' ');
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder23.prefixLength((int) ' ');
        java.lang.String str26 = null; // flaky: multiMatchQueryBuilder23.toString();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = multiMatchQueryBuilder23.analyzer("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"type\" : \"phrase_prefix\",\n    \"fuzzy_rewrite\" : \"\",\n    \"tie_breaker\" : 0.0,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String str29 = multiMatchQueryBuilder28.getName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = multiMatchQueryBuilder28.cutoffFrequency((-1.0f));
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder33 = multiMatchQueryBuilder28.slop((-1));
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
// flaky:         org.junit.Assert.assertEquals("'" + str26 + "' != '" + "{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"slop\" : 32,\n    \"prefix_length\" : 32,\n    \"rewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"max_expansions\\\" : 1,\\n    \\\"fuzzy_rewrite\\\" : \\\"\\\",\\n    \\\"lenient\\\" : true,\\n    \\\"boost\\\" : 1.0,\\n    \\\"_name\\\" : \\\"{\\\\n  \\\\\\\"multi_match\\\\\\\" : {\\\\n    \\\\\\\"query\\\\\\\" : 0.0,\\\\n    \\\\\\\"fields\\\\\\\" : [ \\\\\\\"hi!\\\\\\\", \\\\\\\"\\\\\\\", \\\\\\\"\\\\\\\", \\\\\\\"\\\\\\\", \\\\\\\"\\\\\\\", \\\\\\\"\\\\\\\" ],\\\\n    \\\\\\\"fuzzy_rewrite\\\\\\\" : \\\\\\\"hi!\\\\\\\",\\\\n    \\\\\\\"boost\\\\\\\" : 1.0\\\\n  }\\\\n}\\\"\\n  }\\n}\",\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0,\n    \"_name\" : \"hi!\"\n  }\n}" + "'", str26, "{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"slop\" : 32,\n    \"prefix_length\" : 32,\n    \"rewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"max_expansions\\\" : 1,\\n    \\\"fuzzy_rewrite\\\" : \\\"\\\",\\n    \\\"lenient\\\" : true,\\n    \\\"boost\\\" : 1.0,\\n    \\\"_name\\\" : \\\"{\\\\n  \\\\\\\"multi_match\\\\\\\" : {\\\\n    \\\\\\\"query\\\\\\\" : 0.0,\\\\n    \\\\\\\"fields\\\\\\\" : [ \\\\\\\"hi!\\\\\\\", \\\\\\\"\\\\\\\", \\\\\\\"\\\\\\\", \\\\\\\"\\\\\\\", \\\\\\\"\\\\\\\", \\\\\\\"\\\\\\\" ],\\\\n    \\\\\\\"fuzzy_rewrite\\\\\\\" : \\\\\\\"hi!\\\\\\\",\\\\n    \\\\\\\"boost\\\\\\\" : 1.0\\\\n  }\\\\n}\\\"\\n  }\\n}\",\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0,\n    \"_name\" : \"hi!\"\n  }\n}");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "multi_match" + "'", str29, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder31);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder33);
    }

    @Test
    public void test15041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15041");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder12.lenient(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder14.rewrite("multi_match");
        java.lang.String str17 = multiMatchQueryBuilder16.getWriteableName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder16.analyzer("{\n  \"multiMatch\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzyRewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder19.lenient(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder21.fuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder23.tieBreaker((float) 10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder23.lenient(false);
        org.elasticsearch.index.query.Operator operator28 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = multiMatchQueryBuilder23.operator(operator28);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type30 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX;
        org.elasticsearch.index.search.MatchQuery.Type type31 = type30.matchQueryType();
        org.elasticsearch.index.search.MatchQuery.Type type32 = type30.matchQueryType();
        float float33 = type30.tieBreaker();
        float float34 = type30.tieBreaker();
        org.elasticsearch.common.ParseField parseField35 = type30.parseField();
        org.elasticsearch.index.search.MatchQuery.Type type36 = type30.matchQueryType();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder37 = multiMatchQueryBuilder23.type(type30);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder39 = multiMatchQueryBuilder37.minimumShouldMatch("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\", \"multi_match^-1.0\" ],\n    \"minimum_should_match\" : \"{\\n  \\\"multiMatch\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"maxExpansions\\\" : 1,\\n    \\\"fuzzyRewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0,\n    \"_name\" : \"{\\n  \\\"multiMatch\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"^10.0\\\", \\\"^10.0\\\", \\\"^10.0\\\", \\\"^10.0\\\", \\\"^10.0\\\", \\\"^10.0\\\" ],\\n    \\\"type\\\" : \\\"phrase_prefix\\\",\\n    \\\"slop\\\" : -1,\\n    \\\"prefixLength\\\" : 35,\\n    \\\"minimumShouldMatch\\\" : \\\"hi!\\\",\\n    \\\"fuzzyRewrite\\\" : \\\"hi!\\\",\\n    \\\"lenient\\\" : true,\\n    \\\"boost\\\" : 10.0,\\n    \\\"Name\\\" : \\\"multi_match\\\"\\n  }\\n}\"\n  }\n}");
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "multi_match" + "'", str17, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder29);
        org.junit.Assert.assertTrue("'" + type30 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX + "'", type30.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX));
        org.junit.Assert.assertTrue("'" + type31 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX + "'", type31.equals(org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX));
        org.junit.Assert.assertTrue("'" + type32 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX + "'", type32.equals(org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX));
        org.junit.Assert.assertTrue("'" + float33 + "' != '" + 0.0f + "'", float33 == 0.0f);
        org.junit.Assert.assertTrue("'" + float34 + "' != '" + 0.0f + "'", float34 == 0.0f);
        org.junit.Assert.assertNotNull(parseField35);
        org.junit.Assert.assertTrue("'" + type36 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX + "'", type36.equals(org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder37);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder39);
    }

    @Test
    public void test15042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15042");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery13 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder12.zeroTermsQuery(zeroTermsQuery13);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder14.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder16.queryName("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder18.analyzer("multi_match");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder18.field("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"slop\" : -1,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}", 0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder18.queryName("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder18.field("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String[] strArray35 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder36 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray35);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder38 = multiMatchQueryBuilder36.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder40 = multiMatchQueryBuilder38.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder42 = multiMatchQueryBuilder40.lenient(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder44 = multiMatchQueryBuilder42.rewrite("multi_match");
        java.lang.String str45 = multiMatchQueryBuilder44.getWriteableName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder47 = multiMatchQueryBuilder44.analyzer("{\n  \"multiMatch\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzyRewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder49 = multiMatchQueryBuilder47.lenient(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder51 = multiMatchQueryBuilder49.lenient(false);
        boolean boolean52 = multiMatchQueryBuilder27.equals((java.lang.Object) multiMatchQueryBuilder51);
        org.elasticsearch.index.query.Operator operator53 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder54 = multiMatchQueryBuilder27.operator(operator53);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder56 = multiMatchQueryBuilder54.maxExpansions((int) 'a');
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder38);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder40);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder42);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "multi_match" + "'", str45, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder47);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder49);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder54);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder56);
    }

    @Test
    public void test15043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15043");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder8.queryName("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.Operator operator13 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder12.operator(operator13);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder12.field("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"analyzer\" : \"multi_match\",\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}", 10.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder17.field("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery20 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder17.zeroTermsQuery(zeroTermsQuery20);
        org.elasticsearch.index.query.Operator operator22 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder21.operator(operator22);
        java.lang.String str24 = multiMatchQueryBuilder23.getWriteableName();
        org.elasticsearch.index.query.Operator operator25 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder23.operator(operator25);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = multiMatchQueryBuilder23.maxExpansions(10);
        java.lang.String str29 = null; // flaky: multiMatchQueryBuilder28.toString();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = multiMatchQueryBuilder28.analyzer("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"slop\" : 0,\n    \"prefix_length\" : 0,\n    \"rewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"analyzer\\\" : \\\"multi_match\\\",\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"lenient\" : false,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder33 = multiMatchQueryBuilder28.maxExpansions(100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder35 = multiMatchQueryBuilder33.lenient(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder37 = multiMatchQueryBuilder33.tieBreaker((float) (short) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder39 = multiMatchQueryBuilder37.lenient(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder41 = multiMatchQueryBuilder39.prefixLength((int) '4');
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "multi_match" + "'", str24, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder28);
// flaky:         org.junit.Assert.assertEquals("'" + str29 + "' != '" + "{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\", \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"analyzer\\\" : \\\"multi_match\\\",\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}^10.0\", \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\" ],\n    \"max_expansions\" : 10,\n    \"fuzzy_rewrite\" : \"\",\n    \"boost\" : 1.0,\n    \"_name\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\"\n  }\n}" + "'", str29, "{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\", \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"analyzer\\\" : \\\"multi_match\\\",\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}^10.0\", \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\" ],\n    \"max_expansions\" : 10,\n    \"fuzzy_rewrite\" : \"\",\n    \"boost\" : 1.0,\n    \"_name\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\"\n  }\n}");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder31);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder33);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder35);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder37);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder39);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder41);
    }

    @Test
    public void test15044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15044");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.tieBreaker(0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type13 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX;
        float float14 = type13.tieBreaker();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder10.type(type13);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder10.cutoffFrequency((float) 0L);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder10.lenient(false);
        java.lang.String str20 = multiMatchQueryBuilder19.queryName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder19.analyzer("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"analyzer\" : \"multi_match\",\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        float float23 = multiMatchQueryBuilder22.boost();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder22.cutoffFrequency((float) 10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = multiMatchQueryBuilder22.field("", (-1.0f));
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder30 = multiMatchQueryBuilder22.fuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\", \"hi!\", \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"analyzer\\\" : \\\"multi_match\\\",\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\" ],\n    \"slop\" : 100,\n    \"max_expansions\" : 1,\n    \"fuzzy_rewrite\" : \"\",\n    \"use_dis_max\" : true,\n    \"lenient\" : true,\n    \"boost\" : 1.0,\n    \"_name\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"analyzer\\\" : \\\"multi_match\\\",\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\"\n  }\n}");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery31 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder32 = multiMatchQueryBuilder30.zeroTermsQuery(zeroTermsQuery31);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertTrue("'" + type13 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX + "'", type13.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX));
        org.junit.Assert.assertTrue("'" + float14 + "' != '" + 0.0f + "'", float14 == 0.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertTrue("'" + float23 + "' != '" + 1.0f + "'", float23 == 1.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder28);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder30);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder32);
    }

    @Test
    public void test15045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15045");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder12.lenient(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder12.prefixLength((int) (byte) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder12.rewrite("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"multi_match^0.0\" ],\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 0.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type19 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE;
        org.elasticsearch.index.search.MatchQuery.Type type20 = type19.matchQueryType();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder12.type(type19);
        java.lang.String str22 = multiMatchQueryBuilder21.getName();
        java.lang.String str23 = multiMatchQueryBuilder21.queryName();
        java.lang.String str24 = multiMatchQueryBuilder21.getName();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertTrue("'" + type19 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE + "'", type19.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE));
        org.junit.Assert.assertTrue("'" + type20 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.PHRASE + "'", type20.equals(org.elasticsearch.index.search.MatchQuery.Type.PHRASE));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "multi_match" + "'", str22, "multi_match");
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "multi_match" + "'", str24, "multi_match");
    }

    @Test
    public void test15046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15046");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder8.queryName("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.Operator operator13 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder12.operator(operator13);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder12.field("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"analyzer\" : \"multi_match\",\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}", 10.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder17.field("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery20 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder17.zeroTermsQuery(zeroTermsQuery20);
        org.elasticsearch.index.query.Operator operator22 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder21.operator(operator22);
        java.lang.String str24 = multiMatchQueryBuilder23.getWriteableName();
        org.elasticsearch.index.query.Operator operator25 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder23.operator(operator25);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = multiMatchQueryBuilder23.maxExpansions(10);
        java.lang.String str29 = null; // flaky: multiMatchQueryBuilder28.toString();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = multiMatchQueryBuilder28.analyzer("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"slop\" : 0,\n    \"prefix_length\" : 0,\n    \"rewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"analyzer\\\" : \\\"multi_match\\\",\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"lenient\" : false,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder33 = multiMatchQueryBuilder28.maxExpansions(100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder35 = multiMatchQueryBuilder28.queryName("{\n  \"multiMatch\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzyRewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type36 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        org.elasticsearch.index.search.MatchQuery.Type type37 = type36.matchQueryType();
        java.lang.String[] strArray46 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder47 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray46);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder49 = multiMatchQueryBuilder47.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder51 = multiMatchQueryBuilder47.queryName("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.Operator operator52 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder53 = multiMatchQueryBuilder51.operator(operator52);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder55 = multiMatchQueryBuilder53.lenient(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder57 = multiMatchQueryBuilder55.maxExpansions((int) (short) 1);
        java.lang.String[] strArray65 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder66 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray65);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder67 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) multiMatchQueryBuilder55, strArray65);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder68 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (byte) 1, strArray65);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder69 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) type36, strArray65);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder70 = multiMatchQueryBuilder35.type(type36);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder72 = multiMatchQueryBuilder35.boost((float) ' ');
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder74 = multiMatchQueryBuilder35.tieBreaker(0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder76 = multiMatchQueryBuilder35.prefixLength((int) (short) -1);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "multi_match" + "'", str24, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder28);
// flaky:         org.junit.Assert.assertEquals("'" + str29 + "' != '" + "{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\", \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"analyzer\\\" : \\\"multi_match\\\",\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}^10.0\", \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\" ],\n    \"max_expansions\" : 10,\n    \"fuzzy_rewrite\" : \"\",\n    \"boost\" : 1.0,\n    \"_name\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\"\n  }\n}" + "'", str29, "{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\", \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"analyzer\\\" : \\\"multi_match\\\",\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}^10.0\", \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\" ],\n    \"max_expansions\" : 10,\n    \"fuzzy_rewrite\" : \"\",\n    \"boost\" : 1.0,\n    \"_name\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\"\n  }\n}");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder31);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder33);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder35);
        org.junit.Assert.assertTrue("'" + type36 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type36.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertTrue("'" + type37 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type37.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder49);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder51);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder53);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder55);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder57);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder70);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder72);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder74);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder76);
    }

    @Test
    public void test15047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15047");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery13 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder12.zeroTermsQuery(zeroTermsQuery13);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder12.maxExpansions((int) (byte) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder12.field("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"slop\" : -1,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder18.useDisMax(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder18.lenient(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder22.queryName("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"max_expansions\" : 1,\n    \"minimum_should_match\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"fuzzy_rewrite\" : \"\",\n    \"lenient\" : true,\n    \"boost\" : 1.0,\n    \"_name\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\"\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder24.fuzzyRewrite("{\n  \"multiMatch\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"minimumShouldMatch\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"slop\\\" : -1,\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"lenient\\\" : true,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = multiMatchQueryBuilder26.minimumShouldMatch("{\n  \"multiMatch\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\", \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"slop\\\" : -1,\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"lenient\\\" : true,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\" ],\n    \"maxExpansions\" : 0,\n    \"fuzzyRewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder30 = multiMatchQueryBuilder26.rewrite("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"minimum_should_match\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"multi_match^0.0\\\" ],\\n    \\\"type\\\" : \\\"phrase_prefix\\\",\\n    \\\"prefix_length\\\" : 97,\\n    \\\"fuzzy_rewrite\\\" : \\\"\\\",\\n    \\\"tie_breaker\\\" : 0.0,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 35.0,\n    \"lenient\" : true,\n    \"cutoff_frequency\" : -1.0,\n    \"boost\" : 1.0,\n    \"_name\" : \"\"\n  }\n}");
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder28);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder30);
    }

    @Test
    public void test15048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15048");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.tieBreaker(0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type13 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX;
        float float14 = type13.tieBreaker();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder10.type(type13);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder10.cutoffFrequency((float) 0L);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder10.lenient(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type20 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        org.elasticsearch.index.search.MatchQuery.Type type21 = type20.matchQueryType();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder10.type(type20);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder10.useDisMax(false);
        java.lang.String[] strArray32 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder33 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray32);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder35 = multiMatchQueryBuilder33.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder37 = multiMatchQueryBuilder35.fuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder39 = multiMatchQueryBuilder35.minimumShouldMatch("multi_match");
        boolean boolean40 = multiMatchQueryBuilder10.equals((java.lang.Object) "multi_match");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder42 = multiMatchQueryBuilder10.queryName("{\n  \"multiMatch\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"type\" : \"phrase_prefix\",\n    \"maxExpansions\" : 10,\n    \"fuzzyRewrite\" : \"\",\n    \"tieBreaker\" : 0.0,\n    \"cutoffFrequency\" : 0.0,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String[] strArray50 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder51 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray50);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder53 = multiMatchQueryBuilder51.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder55 = multiMatchQueryBuilder53.tieBreaker(0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder57 = multiMatchQueryBuilder53.cutoffFrequency((float) 0L);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder59 = multiMatchQueryBuilder53.minimumShouldMatch("{\n  \"multiMatch\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzyRewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder61 = multiMatchQueryBuilder53.maxExpansions(0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder63 = multiMatchQueryBuilder61.minimumShouldMatch("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"slop\" : 0,\n    \"prefix_length\" : 0,\n    \"rewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"analyzer\\\" : \\\"multi_match\\\",\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"lenient\" : false,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String[] strArray71 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder72 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray71);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder74 = multiMatchQueryBuilder72.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder76 = multiMatchQueryBuilder74.tieBreaker(0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type77 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX;
        float float78 = type77.tieBreaker();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder79 = multiMatchQueryBuilder74.type(type77);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder81 = multiMatchQueryBuilder74.cutoffFrequency((float) 0L);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder83 = multiMatchQueryBuilder74.lenient(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type84 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        org.elasticsearch.index.search.MatchQuery.Type type85 = type84.matchQueryType();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder86 = multiMatchQueryBuilder74.type(type84);
        float float87 = type84.tieBreaker();
        org.elasticsearch.index.search.MatchQuery.Type type88 = type84.matchQueryType();
        org.elasticsearch.index.search.MatchQuery.Type type89 = type84.matchQueryType();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder90 = multiMatchQueryBuilder61.type(type84);
        org.elasticsearch.common.ParseField parseField91 = type84.parseField();
        float float92 = type84.tieBreaker();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder93 = multiMatchQueryBuilder42.type(type84);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder95 = multiMatchQueryBuilder93.cutoffFrequency((float) (short) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder97 = multiMatchQueryBuilder93.cutoffFrequency((float) (short) 100);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertTrue("'" + type13 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX + "'", type13.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX));
        org.junit.Assert.assertTrue("'" + float14 + "' != '" + 0.0f + "'", float14 == 0.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertTrue("'" + type20 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type20.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertTrue("'" + type21 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type21.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder35);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder37);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder42);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder53);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder55);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder57);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder59);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder61);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder63);
        org.junit.Assert.assertNotNull(strArray71);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder74);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder76);
        org.junit.Assert.assertTrue("'" + type77 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX + "'", type77.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX));
        org.junit.Assert.assertTrue("'" + float78 + "' != '" + 0.0f + "'", float78 == 0.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder79);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder81);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder83);
        org.junit.Assert.assertTrue("'" + type84 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type84.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertTrue("'" + type85 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type85.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder86);
        org.junit.Assert.assertTrue("'" + float87 + "' != '" + 0.0f + "'", float87 == 0.0f);
        org.junit.Assert.assertTrue("'" + type88 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type88.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertTrue("'" + type89 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type89.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder90);
        org.junit.Assert.assertNotNull(parseField91);
        org.junit.Assert.assertTrue("'" + float92 + "' != '" + 0.0f + "'", float92 == 0.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder93);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder95);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder97);
    }

    @Test
    public void test15049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15049");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.fuzzyRewrite("hi!");
        java.lang.String str13 = multiMatchQueryBuilder10.getName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder10.analyzer("multi_match");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder15.cutoffFrequency((float) (short) 1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder17.minimumShouldMatch("{\n  \"multiMatch\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzyRewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String[] strArray27 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray27);
        java.lang.Object obj29 = null;
        java.lang.String[] strArray38 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder39 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray38);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder40 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 10.0f, strArray38);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder41 = new org.elasticsearch.index.query.MultiMatchQueryBuilder(obj29, strArray38);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder42 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray38);
        org.elasticsearch.index.query.Operator operator43 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder44 = multiMatchQueryBuilder42.operator(operator43);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder46 = multiMatchQueryBuilder44.cutoffFrequency((float) (-1L));
        boolean boolean47 = multiMatchQueryBuilder19.equals((java.lang.Object) multiMatchQueryBuilder44);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder49 = multiMatchQueryBuilder44.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder51 = multiMatchQueryBuilder49.slop(1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder53 = multiMatchQueryBuilder51.rewrite("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"type\" : \"cross_fields\",\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"use_dis_max\" : false,\n    \"boost\" : -1.0,\n    \"_name\" : \"hi!\"\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder55 = multiMatchQueryBuilder51.lenient(false);
        java.lang.String str56 = multiMatchQueryBuilder51.queryName();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "multi_match" + "'", str13, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder44);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder49);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder51);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder53);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder55);
        org.junit.Assert.assertNull(str56);
    }

    @Test
    public void test15050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15050");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder8.queryName("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.Operator operator13 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder12.operator(operator13);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder14.lenient(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder16.field("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder18.lenient(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder18.slop(0);
        java.lang.String[] strArray30 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray30);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder33 = multiMatchQueryBuilder31.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder35 = multiMatchQueryBuilder33.fuzzyRewrite("hi!");
        java.lang.String str36 = multiMatchQueryBuilder33.getName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder38 = multiMatchQueryBuilder33.analyzer("multi_match");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder40 = multiMatchQueryBuilder38.cutoffFrequency((float) (short) 1);
        java.lang.String str41 = multiMatchQueryBuilder38.getWriteableName();
        java.lang.String[] strArray49 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder50 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray49);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder52 = multiMatchQueryBuilder50.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder54 = multiMatchQueryBuilder52.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.QueryValidationException queryValidationException55 = multiMatchQueryBuilder52.validate();
        java.lang.String[] strArray63 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder64 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray63);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder66 = multiMatchQueryBuilder64.fuzzyRewrite("");
        java.lang.String[] strArray74 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder75 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray74);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder77 = multiMatchQueryBuilder75.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder79 = multiMatchQueryBuilder77.tieBreaker(0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type80 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX;
        float float81 = type80.tieBreaker();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder82 = multiMatchQueryBuilder77.type(type80);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder84 = multiMatchQueryBuilder77.cutoffFrequency((float) 0L);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder86 = multiMatchQueryBuilder77.lenient(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type87 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        org.elasticsearch.index.search.MatchQuery.Type type88 = type87.matchQueryType();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder89 = multiMatchQueryBuilder77.type(type87);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder90 = multiMatchQueryBuilder64.fuzziness((java.lang.Object) type87);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder91 = multiMatchQueryBuilder52.type(type87);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder92 = multiMatchQueryBuilder38.type(type87);
        org.elasticsearch.index.search.MatchQuery.Type type93 = type87.matchQueryType();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder94 = multiMatchQueryBuilder18.type(type87);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder96 = multiMatchQueryBuilder18.cutoffFrequency((-1.0f));
        org.elasticsearch.index.query.QueryShardContext queryShardContext97 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.lucene.search.Query query98 = multiMatchQueryBuilder18.toQuery(queryShardContext97);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder33);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "multi_match" + "'", str36, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder38);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "multi_match" + "'", str41, "multi_match");
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder52);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder54);
        org.junit.Assert.assertNull(queryValidationException55);
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder66);
        org.junit.Assert.assertNotNull(strArray74);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder77);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder79);
        org.junit.Assert.assertTrue("'" + type80 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX + "'", type80.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX));
        org.junit.Assert.assertTrue("'" + float81 + "' != '" + 0.0f + "'", float81 == 0.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder82);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder84);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder86);
        org.junit.Assert.assertTrue("'" + type87 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type87.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertTrue("'" + type88 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type88.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder89);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder90);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder91);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder92);
        org.junit.Assert.assertTrue("'" + type93 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type93.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder94);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder96);
    }

    @Test
    public void test15051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15051");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery13 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder12.zeroTermsQuery(zeroTermsQuery13);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder14.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder16.queryName("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder16.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder16.analyzer("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder16.tieBreaker((float) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder16.boost((float) (-1));
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = multiMatchQueryBuilder16.rewrite("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"\",\n    \"cutoff_frequency\" : 1.0,\n    \"boost\" : 1.0,\n    \"_name\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"analyzer\\\" : \\\"multi_match\\\",\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\"\n  }\n}");
        java.lang.String[] strArray36 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder37 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray36);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder39 = multiMatchQueryBuilder37.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder41 = multiMatchQueryBuilder39.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder43 = multiMatchQueryBuilder41.lenient(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder45 = multiMatchQueryBuilder41.prefixLength((int) (byte) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder47 = multiMatchQueryBuilder45.boost((float) 1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder50 = multiMatchQueryBuilder47.field("{\n  \"multiMatch\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"rewrite\" : \"multi_match\",\n    \"fuzzyRewrite\" : \"hi!\",\n    \"lenient\" : false,\n    \"boost\" : 1.0\n  }\n}", (-1.0f));
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder52 = multiMatchQueryBuilder50.cutoffFrequency((float) (byte) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder53 = null; // flaky: multiMatchQueryBuilder28.fuzziness((java.lang.Object) multiMatchQueryBuilder52);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder55 = multiMatchQueryBuilder52.minimumShouldMatch("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"prefix_length\" : 0,\n    \"max_expansions\" : 1,\n    \"fuzzy_rewrite\" : \"\",\n    \"lenient\" : true,\n    \"boost\" : 1.0,\n    \"_name\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\"\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder57 = multiMatchQueryBuilder55.minimumShouldMatch("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"slop\" : -1,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 10.0,\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder59 = multiMatchQueryBuilder55.boost((float) 10L);
        boolean boolean61 = multiMatchQueryBuilder55.equals((java.lang.Object) ' ');
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder28);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder39);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder41);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder43);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder45);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder47);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder50);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder52);
// flaky:         org.junit.Assert.assertNotNull(multiMatchQueryBuilder53);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder55);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder57);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
    }

    @Test
    public void test15052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15052");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder10.field("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder10.boost(0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder16.analyzer("multi_match");
        float float19 = multiMatchQueryBuilder18.boost();
        java.lang.String[] strArray27 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray27);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder30 = multiMatchQueryBuilder28.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder32 = multiMatchQueryBuilder28.queryName("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.Operator operator33 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder34 = multiMatchQueryBuilder32.operator(operator33);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder36 = multiMatchQueryBuilder34.lenient(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder38 = multiMatchQueryBuilder36.maxExpansions((int) (short) 1);
        java.lang.String[] strArray46 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder47 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray46);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder48 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) multiMatchQueryBuilder36, strArray46);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder50 = multiMatchQueryBuilder36.boost((float) 10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder51 = null; // flaky: multiMatchQueryBuilder18.fuzziness((java.lang.Object) multiMatchQueryBuilder36);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder53 = null; // flaky: multiMatchQueryBuilder51.lenient(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder55 = null; // flaky: multiMatchQueryBuilder53.tieBreaker((float) (short) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder57 = null; // flaky: multiMatchQueryBuilder55.lenient(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder59 = null; // flaky: multiMatchQueryBuilder55.boost((float) (byte) 1);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertTrue("'" + float19 + "' != '" + 0.0f + "'", float19 == 0.0f);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder30);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder32);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder34);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder36);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder38);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder50);
// flaky:         org.junit.Assert.assertNotNull(multiMatchQueryBuilder51);
// flaky:         org.junit.Assert.assertNotNull(multiMatchQueryBuilder53);
// flaky:         org.junit.Assert.assertNotNull(multiMatchQueryBuilder55);
// flaky:         org.junit.Assert.assertNotNull(multiMatchQueryBuilder57);
// flaky:         org.junit.Assert.assertNotNull(multiMatchQueryBuilder59);
    }

    @Test
    public void test15053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15053");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder8.queryName("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.Operator operator13 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder12.operator(operator13);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder14.lenient(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder16.maxExpansions((int) (short) 1);
        org.elasticsearch.index.query.Operator operator19 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder16.operator(operator19);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder20.minimumShouldMatch("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.Operator operator23 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder22.operator(operator23);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder24.queryName("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"type\" : \"best_fields\",\n    \"fuzzy_rewrite\" : \"\",\n    \"use_dis_max\" : false,\n    \"tie_breaker\" : 0.0,\n    \"lenient\" : false,\n    \"cutoff_frequency\" : 0.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = multiMatchQueryBuilder24.slop((int) (byte) 1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder30 = multiMatchQueryBuilder24.prefixLength((int) '4');
        java.lang.String[] strArray38 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder39 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray38);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder41 = multiMatchQueryBuilder39.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder43 = multiMatchQueryBuilder41.fuzzyRewrite("hi!");
        java.lang.String str44 = multiMatchQueryBuilder41.getName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder46 = multiMatchQueryBuilder41.analyzer("multi_match");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder48 = multiMatchQueryBuilder46.field("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\", \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"analyzer\\\" : \\\"multi_match\\\",\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}^10.0\", \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\" ],\n    \"fuzzy_rewrite\" : \"\",\n    \"boost\" : 1.0,\n    \"_name\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\"\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder50 = multiMatchQueryBuilder48.field("{\n  \"multiMatch\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"type\" : \"phrase_prefix\",\n    \"maxExpansions\" : 10,\n    \"fuzzyRewrite\" : \"\",\n    \"tieBreaker\" : 0.0,\n    \"cutoffFrequency\" : 0.0,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String[] strArray58 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder59 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray58);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder61 = multiMatchQueryBuilder59.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder63 = multiMatchQueryBuilder61.tieBreaker(0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type64 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX;
        float float65 = type64.tieBreaker();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder66 = multiMatchQueryBuilder61.type(type64);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder68 = multiMatchQueryBuilder61.cutoffFrequency((float) 0L);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder70 = multiMatchQueryBuilder61.lenient(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type71 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        org.elasticsearch.index.search.MatchQuery.Type type72 = type71.matchQueryType();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder73 = multiMatchQueryBuilder61.type(type71);
        org.elasticsearch.common.ParseField parseField74 = type71.parseField();
        float float75 = type71.tieBreaker();
        org.elasticsearch.index.search.MatchQuery.Type type76 = type71.matchQueryType();
        org.elasticsearch.index.search.MatchQuery.Type type77 = type71.matchQueryType();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder78 = multiMatchQueryBuilder50.type(type71);
        org.elasticsearch.common.ParseField parseField79 = type71.parseField();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder80 = multiMatchQueryBuilder24.fuzziness((java.lang.Object) type71);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type81 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder82 = multiMatchQueryBuilder80.type(type81);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder28);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder30);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder41);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "multi_match" + "'", str44, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder46);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder48);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder50);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder61);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder63);
        org.junit.Assert.assertTrue("'" + type64 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX + "'", type64.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX));
        org.junit.Assert.assertTrue("'" + float65 + "' != '" + 0.0f + "'", float65 == 0.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder66);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder68);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder70);
        org.junit.Assert.assertTrue("'" + type71 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type71.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertTrue("'" + type72 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type72.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder73);
        org.junit.Assert.assertNotNull(parseField74);
        org.junit.Assert.assertTrue("'" + float75 + "' != '" + 0.0f + "'", float75 == 0.0f);
        org.junit.Assert.assertTrue("'" + type76 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type76.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertTrue("'" + type77 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type77.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder78);
        org.junit.Assert.assertNotNull(parseField79);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder80);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder82);
    }

    @Test
    public void test15054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15054");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder10.field("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder10.boost(0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder16.analyzer("multi_match");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder18.maxExpansions(1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder20.rewrite("{\n  \"multiMatch\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\", \"\" ],\n    \"analyzer\" : \"multi_match\",\n    \"maxExpansions\" : -1,\n    \"fuzzyRewrite\" : \"hi!\",\n    \"useDisMax\" : true,\n    \"boost\" : 0.0\n  }\n}");
        org.elasticsearch.index.query.Operator operator23 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder22.operator(operator23);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder24.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = multiMatchQueryBuilder24.field("{\n  \"multiMatch\" : {\n    \"query\" : \"PHRASE_PREFIX\",\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzziness\" : \"10\",\n    \"boost\" : 1.0\n  }\n}", (float) (-1L));
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder32 = multiMatchQueryBuilder29.field("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"analyzer\" : \"hi!\",\n    \"minimum_should_match\" : \"{\\n  \\\"multiMatch\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"type\\\" : \\\"phrase_prefix\\\",\\n    \\\"maxExpansions\\\" : 10,\\n    \\\"fuzzyRewrite\\\" : \\\"\\\",\\n    \\\"tieBreaker\\\" : 0.0,\\n    \\\"cutoffFrequency\\\" : 0.0,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"lenient\" : false,\n    \"cutoff_frequency\" : -1.0,\n    \"boost\" : 1.0\n  }\n}", 100.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder34 = multiMatchQueryBuilder29.analyzer("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\", \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"analyzer\\\" : \\\"multi_match\\\",\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}^10.0\", \"{\\n  \\\"multiMatch\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"fuzzyRewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}^0.0\" ],\n    \"prefix_length\" : 32,\n    \"fuzzy_rewrite\" : \"\",\n    \"boost\" : 1.0,\n    \"_name\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\"\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder36 = multiMatchQueryBuilder34.useDisMax(true);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery37 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder38 = multiMatchQueryBuilder34.zeroTermsQuery(zeroTermsQuery37);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder40 = multiMatchQueryBuilder34.analyzer("{\n  \"multiMatch\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"type\" : \"phrase_prefix\",\n    \"maxExpansions\" : -1,\n    \"fuzzyRewrite\" : \"\",\n    \"tieBreaker\" : 0.0,\n    \"lenient\" : false,\n    \"cutoffFrequency\" : 0.0,\n    \"boost\" : 10.0\n  }\n}");
        java.lang.String str41 = multiMatchQueryBuilder40.getName();
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder42 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params43 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        // The following exception was thrown during execution in test generation
        try {
            multiMatchQueryBuilder40.doXContent(xContentBuilder42, params43);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder29);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder32);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder34);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder36);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder38);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "multi_match" + "'", str41, "multi_match");
        org.junit.Assert.assertNotNull(params43);
    }

    @Test
    public void test15055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15055");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder12.lenient(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder14.rewrite("multi_match");
        java.lang.String str17 = multiMatchQueryBuilder16.getWriteableName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder16.analyzer("{\n  \"multiMatch\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzyRewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder19.lenient(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder21.fuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder23.tieBreaker((float) 10);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery26 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder23.zeroTermsQuery(zeroTermsQuery26);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = multiMatchQueryBuilder23.tieBreaker((float) '#');
        java.lang.String str30 = null; // flaky: multiMatchQueryBuilder29.toString();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "multi_match" + "'", str17, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder29);
// flaky:         org.junit.Assert.assertEquals("'" + str30 + "' != '" + "{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"analyzer\" : \"{\\n  \\\"multiMatch\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"fuzzyRewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"rewrite\" : \"multi_match\",\n    \"fuzzy_rewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"tie_breaker\" : 35.0,\n    \"lenient\" : false,\n    \"boost\" : 1.0\n  }\n}" + "'", str30, "{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"analyzer\" : \"{\\n  \\\"multiMatch\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"fuzzyRewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"rewrite\" : \"multi_match\",\n    \"fuzzy_rewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"tie_breaker\" : 35.0,\n    \"lenient\" : false,\n    \"boost\" : 1.0\n  }\n}");
    }

    @Test
    public void test15056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15056");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder8.queryName("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.Operator operator13 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder12.operator(operator13);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder14.field("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder14.queryName("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"analyzer\" : \"multi_match\",\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder14.useDisMax(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder20.maxExpansions((int) (byte) 0);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
    }

    @Test
    public void test15057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15057");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder12.lenient(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder14.rewrite("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery17 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder16.zeroTermsQuery(zeroTermsQuery17);
        java.lang.Object obj19 = null;
        boolean boolean20 = multiMatchQueryBuilder18.equals(obj19);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder18.lenient(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder22.analyzer("{\n  \"multiMatch\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"type\" : \"phrase_prefix\",\n    \"maxExpansions\" : 10,\n    \"fuzzyRewrite\" : \"\",\n    \"tieBreaker\" : 0.0,\n    \"cutoffFrequency\" : 0.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder22.lenient(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = multiMatchQueryBuilder26.lenient(true);
        org.elasticsearch.index.query.QueryValidationException queryValidationException29 = multiMatchQueryBuilder28.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = multiMatchQueryBuilder28.minimumShouldMatch("{\n  \"multiMatch\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzyRewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String[] strArray39 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder40 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray39);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder42 = multiMatchQueryBuilder40.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder44 = multiMatchQueryBuilder40.queryName("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.Operator operator45 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder46 = multiMatchQueryBuilder44.operator(operator45);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder48 = multiMatchQueryBuilder46.lenient(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder50 = multiMatchQueryBuilder48.maxExpansions((int) (short) 1);
        java.lang.String[] strArray58 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder59 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray58);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder60 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) multiMatchQueryBuilder48, strArray58);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder62 = multiMatchQueryBuilder48.field("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder64 = multiMatchQueryBuilder62.analyzer("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\", \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"analyzer\\\" : \\\"multi_match\\\",\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}^10.0\", \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\" ],\n    \"fuzzy_rewrite\" : \"\",\n    \"boost\" : 1.0,\n    \"_name\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\"\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type65 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX;
        float float66 = type65.tieBreaker();
        float float67 = type65.tieBreaker();
        float float68 = type65.tieBreaker();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder69 = multiMatchQueryBuilder62.type(type65);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder70 = multiMatchQueryBuilder31.fuzziness((java.lang.Object) type65);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder72 = multiMatchQueryBuilder70.maxExpansions(10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder74 = multiMatchQueryBuilder72.queryName("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"analyzer\" : \"hi!\",\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0,\n    \"_name\" : \"hi!\"\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder77 = multiMatchQueryBuilder74.field("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"analyzer\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"slop\\\" : -1,\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"lenient\\\" : true,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0,\n    \"_name\" : \"hi!\"\n  }\n}", 1.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder79 = multiMatchQueryBuilder77.cutoffFrequency((float) (byte) 1);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder28);
        org.junit.Assert.assertNull(queryValidationException29);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder31);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder42);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder44);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder46);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder48);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder50);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder62);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder64);
        org.junit.Assert.assertTrue("'" + type65 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX + "'", type65.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX));
        org.junit.Assert.assertTrue("'" + float66 + "' != '" + 0.0f + "'", float66 == 0.0f);
        org.junit.Assert.assertTrue("'" + float67 + "' != '" + 0.0f + "'", float67 == 0.0f);
        org.junit.Assert.assertTrue("'" + float68 + "' != '" + 0.0f + "'", float68 == 0.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder69);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder70);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder72);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder74);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder77);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder79);
    }

    @Test
    public void test15058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15058");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery13 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder12.zeroTermsQuery(zeroTermsQuery13);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder14.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery17 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder14.zeroTermsQuery(zeroTermsQuery17);
        java.lang.String[] strArray26 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray26);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = multiMatchQueryBuilder27.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = multiMatchQueryBuilder29.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery32 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder33 = multiMatchQueryBuilder31.zeroTermsQuery(zeroTermsQuery32);
        java.lang.String str34 = multiMatchQueryBuilder33.getName();
        boolean boolean35 = multiMatchQueryBuilder18.equals((java.lang.Object) multiMatchQueryBuilder33);
        java.lang.String str36 = multiMatchQueryBuilder33.getWriteableName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder38 = multiMatchQueryBuilder33.analyzer("hi!");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery39 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder40 = multiMatchQueryBuilder38.zeroTermsQuery(zeroTermsQuery39);
        java.lang.String str41 = multiMatchQueryBuilder40.queryName();
        org.elasticsearch.index.query.Operator operator42 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder43 = multiMatchQueryBuilder40.operator(operator42);
        java.lang.String[] strArray51 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder52 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray51);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder54 = multiMatchQueryBuilder52.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder56 = multiMatchQueryBuilder54.tieBreaker(0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder58 = multiMatchQueryBuilder54.cutoffFrequency((float) 0L);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder60 = multiMatchQueryBuilder58.analyzer("");
        java.lang.String[] strArray68 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder69 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray68);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder71 = multiMatchQueryBuilder69.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder73 = multiMatchQueryBuilder71.tieBreaker(0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type74 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX;
        float float75 = type74.tieBreaker();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder76 = multiMatchQueryBuilder71.type(type74);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder78 = multiMatchQueryBuilder71.cutoffFrequency((float) 0L);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder80 = multiMatchQueryBuilder71.lenient(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type81 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        org.elasticsearch.index.search.MatchQuery.Type type82 = type81.matchQueryType();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder83 = multiMatchQueryBuilder71.type(type81);
        org.elasticsearch.index.search.MatchQuery.Type type84 = type81.matchQueryType();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder85 = multiMatchQueryBuilder58.type(type81);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder87 = multiMatchQueryBuilder58.minimumShouldMatch("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder89 = multiMatchQueryBuilder87.slop((int) (byte) 0);
        java.lang.String str90 = multiMatchQueryBuilder89.queryName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder92 = multiMatchQueryBuilder89.useDisMax(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder94 = multiMatchQueryBuilder89.prefixLength((int) (short) 10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder96 = multiMatchQueryBuilder94.slop(1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder98 = multiMatchQueryBuilder94.prefixLength((int) '4');
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder99 = null; // flaky: multiMatchQueryBuilder40.type((java.lang.Object) multiMatchQueryBuilder94);
// flaky:             org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchParseException; message: failed to parse [multi_match] query type [{?  \"multi_match\" : {?    \"query\" : 0.0,?    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],?    \"type\" : \"best_fields\",?    \"analyzer\" : \"\",?    \"slop\" : 1,?    \"prefix_length\" : 52,?    \"minimum_should_match\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",?    \"fuzzy_rewrite\" : \"\",?    \"use_dis_max\" : false,?    \"tie_breaker\" : 0.0,?    \"cutoff_frequency\" : 0.0,?    \"boost\" : 1.0?  }?}]. unknown type.");
        } catch (org.elasticsearch.ElasticsearchParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder29);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder31);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "multi_match" + "'", str34, "multi_match");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "multi_match" + "'", str36, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder38);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder40);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder43);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder54);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder56);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder58);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder60);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder71);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder73);
        org.junit.Assert.assertTrue("'" + type74 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX + "'", type74.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX));
        org.junit.Assert.assertTrue("'" + float75 + "' != '" + 0.0f + "'", float75 == 0.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder76);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder78);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder80);
        org.junit.Assert.assertTrue("'" + type81 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type81.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertTrue("'" + type82 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type82.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder83);
        org.junit.Assert.assertTrue("'" + type84 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type84.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder85);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder87);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder89);
        org.junit.Assert.assertNull(str90);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder92);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder94);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder96);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder98);
    }

    @Test
    public void test15059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15059");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.fuzzyRewrite("hi!");
        java.lang.String str13 = multiMatchQueryBuilder10.getName();
        float float14 = multiMatchQueryBuilder10.boost();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder10.lenient(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder10.slop((int) (short) -1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type19 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX;
        org.elasticsearch.index.search.MatchQuery.Type type20 = type19.matchQueryType();
        org.elasticsearch.index.search.MatchQuery.Type type21 = type19.matchQueryType();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder10.type(type19);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder10.queryName("multi_match");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder24.minimumShouldMatch("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = multiMatchQueryBuilder24.lenient(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder30 = multiMatchQueryBuilder24.queryName("{\n  \"multiMatch\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzyRewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder32 = multiMatchQueryBuilder24.maxExpansions((int) (byte) 1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder34 = multiMatchQueryBuilder32.minimumShouldMatch("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"rewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"slop\\\" : -1,\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"lenient\\\" : true,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 52.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.Operator operator35 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder36 = multiMatchQueryBuilder34.operator(operator35);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder38 = multiMatchQueryBuilder36.lenient(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder41 = multiMatchQueryBuilder36.field("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"use_dis_max\" : false,\n    \"boost\" : 0.0,\n    \"_name\" : \"hi!\"\n  }\n}", (float) (short) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder43 = multiMatchQueryBuilder36.analyzer("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"type\" : \"phrase_prefix\",\n    \"fuzzy_rewrite\" : \"\",\n    \"tie_breaker\" : 0.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder45 = multiMatchQueryBuilder43.boost((float) (-1));
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "multi_match" + "'", str13, "multi_match");
        org.junit.Assert.assertTrue("'" + float14 + "' != '" + 1.0f + "'", float14 == 1.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertTrue("'" + type19 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX + "'", type19.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX));
        org.junit.Assert.assertTrue("'" + type20 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX + "'", type20.equals(org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX));
        org.junit.Assert.assertTrue("'" + type21 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX + "'", type21.equals(org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder28);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder30);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder32);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder34);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder36);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder38);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder41);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder43);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder45);
    }

    @Test
    public void test15060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15060");
        org.elasticsearch.common.xcontent.XContent xContent0 = null;
        java.lang.Object obj1 = null;
        java.lang.String[] strArray9 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray9);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder12.fuzzyRewrite("hi!");
        java.lang.String str15 = multiMatchQueryBuilder12.getName();
        float float16 = multiMatchQueryBuilder12.boost();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder12.lenient(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder12.slop((int) (short) -1);
        org.elasticsearch.index.query.QueryValidationException queryValidationException21 = multiMatchQueryBuilder12.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder12.lenient(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder23.maxExpansions((int) (byte) 0);
        java.lang.String[] strArray33 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder34 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray33);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder36 = multiMatchQueryBuilder34.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder38 = multiMatchQueryBuilder36.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery39 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder40 = multiMatchQueryBuilder38.zeroTermsQuery(zeroTermsQuery39);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder42 = multiMatchQueryBuilder40.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder44 = multiMatchQueryBuilder42.queryName("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder46 = multiMatchQueryBuilder42.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder48 = multiMatchQueryBuilder42.analyzer("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder50 = multiMatchQueryBuilder42.tieBreaker((float) 0);
        java.lang.String[] strArray53 = new java.lang.String[] { "{\n  \"multiMatch\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzyRewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder54 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (short) 100, strArray53);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder55 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0, strArray53);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder57 = multiMatchQueryBuilder55.queryName("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String[] strArray65 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder66 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray65);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder68 = multiMatchQueryBuilder66.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder70 = multiMatchQueryBuilder66.queryName("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.Operator operator71 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder72 = multiMatchQueryBuilder70.operator(operator71);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder74 = multiMatchQueryBuilder72.lenient(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder76 = multiMatchQueryBuilder74.maxExpansions((int) (short) 1);
        java.lang.String[] strArray84 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder85 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray84);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder86 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) multiMatchQueryBuilder74, strArray84);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder87 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}", strArray84);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder88 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) multiMatchQueryBuilder23, strArray84);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder89 = new org.elasticsearch.index.query.MultiMatchQueryBuilder(obj1, strArray84);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder90 = null; // flaky: org.elasticsearch.common.xcontent.XContentBuilder.builder(xContent0, strArray84);
// flaky:             org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "multi_match" + "'", str15, "multi_match");
        org.junit.Assert.assertTrue("'" + float16 + "' != '" + 1.0f + "'", float16 == 1.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNull(queryValidationException21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder36);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder38);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder40);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder42);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder44);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder46);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder48);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder50);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder57);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder68);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder70);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder72);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder74);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder76);
        org.junit.Assert.assertNotNull(strArray84);
    }

    @Test
    public void test15061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15061");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.fuzzyRewrite("hi!");
        java.lang.String[] strArray20 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray20);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder21.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder23.fuzzyRewrite("hi!");
        java.lang.String str26 = multiMatchQueryBuilder23.getName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = multiMatchQueryBuilder23.rewrite("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"slop\" : -1,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder30 = multiMatchQueryBuilder23.prefixLength((int) (short) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder32 = multiMatchQueryBuilder30.tieBreaker(0.0f);
        boolean boolean33 = multiMatchQueryBuilder12.equals((java.lang.Object) multiMatchQueryBuilder32);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder35 = multiMatchQueryBuilder12.prefixLength((int) (short) 10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder37 = multiMatchQueryBuilder35.prefixLength((int) (byte) 1);
        float float38 = multiMatchQueryBuilder37.boost();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "multi_match" + "'", str26, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder28);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder30);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder35);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder37);
        org.junit.Assert.assertTrue("'" + float38 + "' != '" + 1.0f + "'", float38 == 1.0f);
    }

    @Test
    public void test15062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15062");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder8.queryName("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.Operator operator13 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder12.operator(operator13);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder12.field("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"analyzer\" : \"multi_match\",\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}", 10.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder17.field("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery20 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder17.zeroTermsQuery(zeroTermsQuery20);
        org.elasticsearch.index.query.Operator operator22 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder21.operator(operator22);
        org.elasticsearch.index.query.Operator operator24 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder21.operator(operator24);
        org.elasticsearch.index.query.Operator operator26 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder25.operator(operator26);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = multiMatchQueryBuilder27.prefixLength((int) (short) -1);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder29);
    }

    @Test
    public void test15063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15063");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder10.field("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder10.boost(0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder10.prefixLength((int) (short) 10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder18.boost((float) 10L);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder20.analyzer("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\", \"\" ],\n    \"analyzer\" : \"multi_match\",\n    \"max_expansions\" : -1,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"use_dis_max\" : true,\n    \"boost\" : 0.0\n  }\n}");
        java.lang.String[] strArray30 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray30);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder33 = multiMatchQueryBuilder31.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder35 = multiMatchQueryBuilder33.fuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder37 = multiMatchQueryBuilder33.minimumShouldMatch("multi_match");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder39 = multiMatchQueryBuilder33.slop((int) (short) -1);
        boolean boolean40 = multiMatchQueryBuilder22.equals((java.lang.Object) multiMatchQueryBuilder33);
        java.lang.String str41 = multiMatchQueryBuilder33.getName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder43 = multiMatchQueryBuilder33.tieBreaker((float) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder45 = multiMatchQueryBuilder33.boost((float) (short) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder47 = multiMatchQueryBuilder33.cutoffFrequency(97.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder49 = multiMatchQueryBuilder33.maxExpansions((int) (short) -1);
        org.elasticsearch.index.query.QueryShardContext queryShardContext50 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.lucene.search.Query query51 = multiMatchQueryBuilder33.toFilter(queryShardContext50);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder33);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder35);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder37);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "multi_match" + "'", str41, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder43);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder45);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder47);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder49);
    }

    @Test
    public void test15064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15064");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder12.lenient(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder12.prefixLength((int) (byte) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder12.rewrite("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"multi_match^0.0\" ],\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 0.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type19 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE;
        org.elasticsearch.index.search.MatchQuery.Type type20 = type19.matchQueryType();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder12.type(type19);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder22 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params23 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder24 = multiMatchQueryBuilder21.toXContent(xContentBuilder22, params23);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertTrue("'" + type19 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE + "'", type19.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE));
        org.junit.Assert.assertTrue("'" + type20 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.PHRASE + "'", type20.equals(org.elasticsearch.index.search.MatchQuery.Type.PHRASE));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNotNull(params23);
    }

    @Test
    public void test15065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15065");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder8.queryName("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.Operator operator13 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder12.operator(operator13);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder12.field("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"analyzer\" : \"multi_match\",\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}", 10.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder17.field("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery20 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder17.zeroTermsQuery(zeroTermsQuery20);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder17.rewrite("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"type\" : \"best_fields\",\n    \"fuzzy_rewrite\" : \"\",\n    \"use_dis_max\" : false,\n    \"tie_breaker\" : 0.0,\n    \"lenient\" : false,\n    \"cutoff_frequency\" : 0.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder23.boost((float) (short) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder25.cutoffFrequency((float) (short) 10);
        org.elasticsearch.index.query.QueryValidationException queryValidationException28 = multiMatchQueryBuilder25.validate();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
        org.junit.Assert.assertNull(queryValidationException28);
    }

    @Test
    public void test15066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15066");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.fuzzyRewrite("hi!");
        java.lang.String str13 = multiMatchQueryBuilder10.getName();
        float float14 = multiMatchQueryBuilder10.boost();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder10.lenient(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder10.slop((int) (short) -1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type19 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX;
        org.elasticsearch.index.search.MatchQuery.Type type20 = type19.matchQueryType();
        org.elasticsearch.index.search.MatchQuery.Type type21 = type19.matchQueryType();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder10.type(type19);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder10.queryName("multi_match");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder24.minimumShouldMatch("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = multiMatchQueryBuilder24.lenient(true);
        org.elasticsearch.index.query.Operator operator29 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder30 = multiMatchQueryBuilder24.operator(operator29);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder32 = multiMatchQueryBuilder30.analyzer("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder34 = multiMatchQueryBuilder30.lenient(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder36 = multiMatchQueryBuilder30.prefixLength((int) (short) -1);
        float float37 = multiMatchQueryBuilder30.boost();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "multi_match" + "'", str13, "multi_match");
        org.junit.Assert.assertTrue("'" + float14 + "' != '" + 1.0f + "'", float14 == 1.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertTrue("'" + type19 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX + "'", type19.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX));
        org.junit.Assert.assertTrue("'" + type20 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX + "'", type20.equals(org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX));
        org.junit.Assert.assertTrue("'" + type21 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX + "'", type21.equals(org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder28);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder30);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder32);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder34);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder36);
        org.junit.Assert.assertTrue("'" + float37 + "' != '" + 1.0f + "'", float37 == 1.0f);
    }

    @Test
    public void test15067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15067");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.tieBreaker(0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type13 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX;
        float float14 = type13.tieBreaker();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder10.type(type13);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder10.cutoffFrequency((float) 0L);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder10.lenient(false);
        java.lang.String str20 = multiMatchQueryBuilder19.queryName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder19.analyzer("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"analyzer\" : \"multi_match\",\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        float float23 = multiMatchQueryBuilder22.boost();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder22.analyzer("{\n  \"multiMatch\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"analyzer\" : \"multi_match\",\n    \"fuzzyRewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder25.queryName("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"analyzer\" : \"hi!\",\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0,\n    \"_name\" : \"hi!\"\n  }\n}");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery28 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = multiMatchQueryBuilder25.zeroTermsQuery(zeroTermsQuery28);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = multiMatchQueryBuilder29.maxExpansions(0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder33 = multiMatchQueryBuilder29.queryName("");
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder34 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params35 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder36 = multiMatchQueryBuilder29.toXContent(xContentBuilder34, params35);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertTrue("'" + type13 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX + "'", type13.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX));
        org.junit.Assert.assertTrue("'" + float14 + "' != '" + 0.0f + "'", float14 == 0.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertTrue("'" + float23 + "' != '" + 1.0f + "'", float23 == 1.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder29);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder31);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder33);
        org.junit.Assert.assertNotNull(params35);
    }

    @Test
    public void test15068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15068");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder12.maxExpansions(1);
        boolean boolean16 = multiMatchQueryBuilder12.equals((java.lang.Object) '#');
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder12.boost((float) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder18.field("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"analyzer\" : \"{\\n  \\\"multiMatch\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"rewrite\\\" : \\\"multi_match\\\",\\n    \\\"fuzzyRewrite\\\" : \\\"hi!\\\",\\n    \\\"lenient\\\" : false,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}", (float) ' ');
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder21.field("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"slop\" : -1,\n    \"minimum_should_match\" : \"multi_match\",\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
    }

    @Test
    public void test15069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15069");
        java.lang.Object obj0 = null;
        java.lang.String[] strArray8 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder9 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray8);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder9.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder11.fuzzyRewrite("hi!");
        java.lang.String str14 = multiMatchQueryBuilder11.getName();
        float float15 = multiMatchQueryBuilder11.boost();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder11.lenient(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder11.slop((int) (short) -1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type20 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX;
        org.elasticsearch.index.search.MatchQuery.Type type21 = type20.matchQueryType();
        org.elasticsearch.index.search.MatchQuery.Type type22 = type20.matchQueryType();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder11.type(type20);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery24 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder23.zeroTermsQuery(zeroTermsQuery24);
        java.lang.Object obj26 = null;
        java.lang.String[] strArray34 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder35 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray34);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder37 = multiMatchQueryBuilder35.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder39 = multiMatchQueryBuilder37.fuzzyRewrite("hi!");
        java.lang.String str40 = multiMatchQueryBuilder37.getName();
        float float41 = multiMatchQueryBuilder37.boost();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder43 = multiMatchQueryBuilder37.lenient(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder45 = multiMatchQueryBuilder37.queryName("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder47 = multiMatchQueryBuilder37.cutoffFrequency((float) (-1L));
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder49 = multiMatchQueryBuilder37.useDisMax(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder51 = multiMatchQueryBuilder37.cutoffFrequency((float) (short) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder53 = multiMatchQueryBuilder37.cutoffFrequency((float) (byte) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder55 = multiMatchQueryBuilder37.slop((int) (byte) 10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type56 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX;
        float float57 = type56.tieBreaker();
        float float58 = type56.tieBreaker();
        org.elasticsearch.index.search.MatchQuery.Type type59 = type56.matchQueryType();
        java.lang.String[] strArray67 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder68 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray67);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder70 = multiMatchQueryBuilder68.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder72 = multiMatchQueryBuilder68.queryName("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.Operator operator73 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder74 = multiMatchQueryBuilder72.operator(operator73);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder76 = multiMatchQueryBuilder74.lenient(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder78 = multiMatchQueryBuilder76.maxExpansions((int) (short) 1);
        java.lang.String[] strArray86 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder87 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray86);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder88 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) multiMatchQueryBuilder76, strArray86);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder89 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) type56, strArray86);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder90 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (byte) 10, strArray86);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder91 = new org.elasticsearch.index.query.MultiMatchQueryBuilder(obj26, strArray86);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder92 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) multiMatchQueryBuilder23, strArray86);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder93 = new org.elasticsearch.index.query.MultiMatchQueryBuilder(obj0, strArray86);
        org.elasticsearch.index.query.QueryShardContext queryShardContext94 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.lucene.search.Query query95 = multiMatchQueryBuilder93.toFilter(queryShardContext94);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "multi_match" + "'", str14, "multi_match");
        org.junit.Assert.assertTrue("'" + float15 + "' != '" + 1.0f + "'", float15 == 1.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertTrue("'" + type20 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX + "'", type20.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX));
        org.junit.Assert.assertTrue("'" + type21 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX + "'", type21.equals(org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX));
        org.junit.Assert.assertTrue("'" + type22 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX + "'", type22.equals(org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder37);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "multi_match" + "'", str40, "multi_match");
        org.junit.Assert.assertTrue("'" + float41 + "' != '" + 1.0f + "'", float41 == 1.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder43);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder45);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder47);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder49);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder51);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder53);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder55);
        org.junit.Assert.assertTrue("'" + type56 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX + "'", type56.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX));
        org.junit.Assert.assertTrue("'" + float57 + "' != '" + 0.0f + "'", float57 == 0.0f);
        org.junit.Assert.assertTrue("'" + float58 + "' != '" + 0.0f + "'", float58 == 0.0f);
        org.junit.Assert.assertTrue("'" + type59 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX + "'", type59.equals(org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX));
        org.junit.Assert.assertNotNull(strArray67);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder70);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder72);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder74);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder76);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder78);
        org.junit.Assert.assertNotNull(strArray86);
    }

    @Test
    public void test15070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15070");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder12.lenient(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder12.prefixLength((int) (byte) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder16.boost((float) 1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder16.slop((int) (byte) -1);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery21 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder20.zeroTermsQuery(zeroTermsQuery21);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder20.fuzzyRewrite("{\n  \"multiMatch\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"analyzer\" : \"multi_match\",\n    \"fuzzyRewrite\" : \"hi!\",\n    \"boost\" : 1.0,\n    \"Name\" : \"hi!\"\n  }\n}");
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
    }

    @Test
    public void test15071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15071");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder12.lenient(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder12.prefixLength((int) (byte) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder16.boost((float) 1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder16.rewrite("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"analyzer\" : \"multi_match\",\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder16.boost((float) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder22.queryName("{\n  \"multiMatch\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzyRewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String[] strArray32 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder33 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray32);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder35 = multiMatchQueryBuilder33.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder37 = multiMatchQueryBuilder35.fuzzyRewrite("hi!");
        java.lang.String str38 = multiMatchQueryBuilder35.getName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder40 = multiMatchQueryBuilder35.rewrite("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"slop\" : -1,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder42 = multiMatchQueryBuilder35.tieBreaker((float) '4');
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery43 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder44 = multiMatchQueryBuilder35.zeroTermsQuery(zeroTermsQuery43);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder46 = multiMatchQueryBuilder44.rewrite("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"max_expansions\" : 1,\n    \"minimum_should_match\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"fuzzy_rewrite\" : \"\",\n    \"lenient\" : true,\n    \"boost\" : 1.0,\n    \"_name\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\"\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type47 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX;
        float float48 = type47.tieBreaker();
        org.elasticsearch.index.search.MatchQuery.Type type49 = type47.matchQueryType();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder50 = multiMatchQueryBuilder44.type(type47);
        java.lang.String[] strArray58 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder59 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray58);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder61 = multiMatchQueryBuilder59.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder63 = multiMatchQueryBuilder61.fuzzyRewrite("hi!");
        java.lang.String str64 = multiMatchQueryBuilder61.getName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder66 = multiMatchQueryBuilder61.analyzer("multi_match");
        org.elasticsearch.index.query.Operator operator67 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder68 = multiMatchQueryBuilder66.operator(operator67);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder70 = multiMatchQueryBuilder68.queryName("hi!");
        java.lang.String str71 = multiMatchQueryBuilder68.getName();
        java.lang.String str72 = multiMatchQueryBuilder68.getName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder74 = multiMatchQueryBuilder68.tieBreaker((-1.0f));
        boolean boolean75 = multiMatchQueryBuilder44.equals((java.lang.Object) multiMatchQueryBuilder74);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder77 = multiMatchQueryBuilder74.tieBreaker((float) (short) 10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder79 = multiMatchQueryBuilder74.queryName("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"type\" : \"best_fields\",\n    \"analyzer\" : \"\",\n    \"minimum_should_match\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"fuzzy_rewrite\" : \"\",\n    \"tie_breaker\" : 0.0,\n    \"cutoff_frequency\" : 0.0,\n    \"boost\" : 35.0\n  }\n}");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery80 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder81 = multiMatchQueryBuilder74.zeroTermsQuery(zeroTermsQuery80);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder82 = null; // flaky: multiMatchQueryBuilder24.fuzziness((java.lang.Object) multiMatchQueryBuilder81);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder84 = multiMatchQueryBuilder81.useDisMax(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder86 = multiMatchQueryBuilder84.maxExpansions((int) ' ');
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder88 = multiMatchQueryBuilder84.slop((int) ' ');
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder35);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "multi_match" + "'", str38, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder40);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder42);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder44);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder46);
        org.junit.Assert.assertTrue("'" + type47 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX + "'", type47.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX));
        org.junit.Assert.assertTrue("'" + float48 + "' != '" + 0.0f + "'", float48 == 0.0f);
        org.junit.Assert.assertTrue("'" + type49 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX + "'", type49.equals(org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder50);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder61);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "multi_match" + "'", str64, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder66);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder68);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "multi_match" + "'", str71, "multi_match");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "multi_match" + "'", str72, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder77);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder79);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder81);
// flaky:         org.junit.Assert.assertNotNull(multiMatchQueryBuilder82);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder84);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder86);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder88);
    }

    @Test
    public void test15072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15072");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery13 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder12.zeroTermsQuery(zeroTermsQuery13);
        java.lang.String str15 = null; // flaky: multiMatchQueryBuilder12.toString();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder12.tieBreaker(0.0f);
        org.elasticsearch.index.query.QueryValidationException queryValidationException18 = multiMatchQueryBuilder17.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder17.boost(0.0f);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery21 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder17.zeroTermsQuery(zeroTermsQuery21);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder17.prefixLength(1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder17.analyzer("{\n  \"multiMatch\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzyRewrite\" : \"\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = multiMatchQueryBuilder17.cutoffFrequency(0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder30 = multiMatchQueryBuilder17.fuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\", \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"lenient\\\" : true,\\n    \\\"boost\\\" : 1.0\\n  }\\n}^-1.0\" ],\n    \"type\" : \"phrase_prefix\",\n    \"analyzer\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"analyzer\\\" : \\\"multi_match\\\",\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"slop\" : -1,\n    \"fuzziness\" : \"-1\",\n    \"prefix_length\" : 35,\n    \"minimum_should_match\" : \"hi!\",\n    \"rewrite\" : \"\",\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0,\n    \"_name\" : \"multi_match\"\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder32 = multiMatchQueryBuilder30.boost((float) 1L);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder35 = multiMatchQueryBuilder32.field("{\n  \"multiMatch\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"rewrite\" : \"{\\n  \\\"multiMatch\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"fuzzyRewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"fuzzyRewrite\" : \"hi!\",\n    \"boost\" : 10.0,\n    \"Name\" : \"hi!\"\n  }\n}", (float) 100L);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery36 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder37 = multiMatchQueryBuilder32.zeroTermsQuery(zeroTermsQuery36);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}" + "'", str15, "{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNull(queryValidationException18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder28);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder30);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder32);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder35);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder37);
    }

    @Test
    public void test15073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15073");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder12.tieBreaker((float) '#');
        java.lang.String str15 = multiMatchQueryBuilder12.queryName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder12.tieBreaker((float) 'a');
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder17.lenient(false);
        java.lang.String str20 = multiMatchQueryBuilder17.queryName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder17.boost((float) (short) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder17.tieBreaker((float) '#');
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder17.fuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"rewrite\" : \"multi_match\",\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"lenient\" : false,\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
    }

    @Test
    public void test15074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15074");
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type2 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.parse("{\n  \"multiMatch\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzyRewrite\" : \"\",\n    \"cutoffFrequency\" : 1.0,\n    \"boost\" : 1.0,\n    \"Name\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"analyzer\\\" : \\\"multi_match\\\",\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\"\n  }\n}", parseFieldMatcher1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test15075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15075");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder8.queryName("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.Operator operator13 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder12.operator(operator13);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder14.lenient(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder16.maxExpansions((int) (short) 1);
        java.lang.String[] strArray26 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray26);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) multiMatchQueryBuilder16, strArray26);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder30 = multiMatchQueryBuilder16.field("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder32 = multiMatchQueryBuilder30.analyzer("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\", \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"analyzer\\\" : \\\"multi_match\\\",\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}^10.0\", \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\" ],\n    \"fuzzy_rewrite\" : \"\",\n    \"boost\" : 1.0,\n    \"_name\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\"\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type33 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX;
        float float34 = type33.tieBreaker();
        float float35 = type33.tieBreaker();
        float float36 = type33.tieBreaker();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder37 = multiMatchQueryBuilder30.type(type33);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery38 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder39 = multiMatchQueryBuilder37.zeroTermsQuery(zeroTermsQuery38);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder41 = multiMatchQueryBuilder37.analyzer("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"^10.0\", \"^10.0\", \"^10.0\", \"^10.0\", \"^10.0\", \"^10.0\" ],\n    \"type\" : \"phrase_prefix\",\n    \"slop\" : -1,\n    \"prefix_length\" : 35,\n    \"minimum_should_match\" : \"hi!\",\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 10.0,\n    \"_name\" : \"multi_match\"\n  }\n}");
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder30);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder32);
        org.junit.Assert.assertTrue("'" + type33 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX + "'", type33.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX));
        org.junit.Assert.assertTrue("'" + float34 + "' != '" + 0.0f + "'", float34 == 0.0f);
        org.junit.Assert.assertTrue("'" + float35 + "' != '" + 0.0f + "'", float35 == 0.0f);
        org.junit.Assert.assertTrue("'" + float36 + "' != '" + 0.0f + "'", float36 == 0.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder37);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder39);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder41);
    }

    @Test
    public void test15076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15076");
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type0 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE;
        float float1 = type0.tieBreaker();
        org.elasticsearch.common.ParseField parseField2 = type0.parseField();
        float float3 = type0.tieBreaker();
        org.junit.Assert.assertTrue("'" + type0 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE + "'", type0.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE));
        org.junit.Assert.assertTrue("'" + float1 + "' != '" + 0.0f + "'", float1 == 0.0f);
        org.junit.Assert.assertNotNull(parseField2);
        org.junit.Assert.assertTrue("'" + float3 + "' != '" + 0.0f + "'", float3 == 0.0f);
    }

    @Test
    public void test15077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15077");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.tieBreaker(0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type13 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX;
        float float14 = type13.tieBreaker();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder10.type(type13);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder10.lenient(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder10.fuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"minimum_should_match\" : \"\",\n    \"rewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"slop\\\" : -1,\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"lenient\\\" : true,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 52.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder10.slop((int) (byte) 10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder10.boost(10.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder23.field("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"type\" : \"phrase_prefix\",\n    \"fuzzy_rewrite\" : \"\",\n    \"tie_breaker\" : 0.0,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String str26 = multiMatchQueryBuilder25.getWriteableName();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertTrue("'" + type13 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX + "'", type13.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX));
        org.junit.Assert.assertTrue("'" + float14 + "' != '" + 0.0f + "'", float14 == 0.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "multi_match" + "'", str26, "multi_match");
    }

    @Test
    public void test15078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15078");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.fuzzyRewrite("hi!");
        java.lang.String str13 = multiMatchQueryBuilder10.getName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder10.rewrite("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"slop\" : -1,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder10.tieBreaker((float) '4');
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery18 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder10.zeroTermsQuery(zeroTermsQuery18);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder19.rewrite("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"max_expansions\" : 1,\n    \"minimum_should_match\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"fuzzy_rewrite\" : \"\",\n    \"lenient\" : true,\n    \"boost\" : 1.0,\n    \"_name\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\"\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type22 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX;
        float float23 = type22.tieBreaker();
        org.elasticsearch.index.search.MatchQuery.Type type24 = type22.matchQueryType();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder19.type(type22);
        java.lang.String[] strArray33 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder34 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray33);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder36 = multiMatchQueryBuilder34.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder38 = multiMatchQueryBuilder36.fuzzyRewrite("hi!");
        java.lang.String str39 = multiMatchQueryBuilder36.getName();
        float float40 = multiMatchQueryBuilder36.boost();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder42 = multiMatchQueryBuilder36.lenient(true);
        java.lang.String str43 = null; // flaky: multiMatchQueryBuilder36.toString();
        boolean boolean44 = multiMatchQueryBuilder25.equals((java.lang.Object) multiMatchQueryBuilder36);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder46 = multiMatchQueryBuilder36.rewrite("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\", \"hi!\" ],\n    \"analyzer\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"multi_match^0.0\\\" ],\\n    \\\"type\\\" : \\\"phrase_prefix\\\",\\n    \\\"prefix_length\\\" : 97,\\n    \\\"fuzzy_rewrite\\\" : \\\"\\\",\\n    \\\"tie_breaker\\\" : 0.0,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"max_expansions\" : 10,\n    \"fuzzy_rewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"analyzer\\\" : \\\"multi_match\\\",\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"lenient\" : true,\n    \"boost\" : 1.0,\n    \"_name\" : \"multi_match\"\n  }\n}");
        org.elasticsearch.index.query.QueryShardContext queryShardContext47 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.lucene.search.Query query48 = multiMatchQueryBuilder36.toFilter(queryShardContext47);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "multi_match" + "'", str13, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertTrue("'" + type22 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX + "'", type22.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX));
        org.junit.Assert.assertTrue("'" + float23 + "' != '" + 0.0f + "'", float23 == 0.0f);
        org.junit.Assert.assertTrue("'" + type24 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX + "'", type24.equals(org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder36);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "multi_match" + "'", str39, "multi_match");
        org.junit.Assert.assertTrue("'" + float40 + "' != '" + 1.0f + "'", float40 == 1.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder42);
// flaky:         org.junit.Assert.assertEquals("'" + str43 + "' != '" + "{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}" + "'", str43, "{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder46);
    }

    @Test
    public void test15079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15079");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder10.field("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder10.boost(0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder16.analyzer("multi_match");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder18.maxExpansions(1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder20.rewrite("{\n  \"multiMatch\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\", \"\" ],\n    \"analyzer\" : \"multi_match\",\n    \"maxExpansions\" : -1,\n    \"fuzzyRewrite\" : \"hi!\",\n    \"useDisMax\" : true,\n    \"boost\" : 0.0\n  }\n}");
        org.elasticsearch.index.query.Operator operator23 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder22.operator(operator23);
        java.lang.String[] strArray32 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder33 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray32);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder35 = multiMatchQueryBuilder33.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder37 = multiMatchQueryBuilder35.tieBreaker(0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder39 = multiMatchQueryBuilder35.cutoffFrequency((float) 0L);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder41 = multiMatchQueryBuilder39.analyzer("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder43 = multiMatchQueryBuilder41.field("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"slop\" : -1,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder45 = multiMatchQueryBuilder43.queryName("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"slop\" : -1,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder47 = multiMatchQueryBuilder43.field("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"analyzer\" : \"multi_match\",\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String[] strArray55 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder56 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray55);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder58 = multiMatchQueryBuilder56.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder60 = multiMatchQueryBuilder58.tieBreaker(0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type61 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX;
        float float62 = type61.tieBreaker();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder63 = multiMatchQueryBuilder58.type(type61);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder65 = multiMatchQueryBuilder58.cutoffFrequency((float) 0L);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder67 = multiMatchQueryBuilder58.lenient(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type68 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        org.elasticsearch.index.search.MatchQuery.Type type69 = type68.matchQueryType();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder70 = multiMatchQueryBuilder58.type(type68);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder71 = multiMatchQueryBuilder47.type(type68);
        org.elasticsearch.common.ParseField parseField72 = type68.parseField();
        org.elasticsearch.index.search.MatchQuery.Type type73 = type68.matchQueryType();
        float float74 = type68.tieBreaker();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder75 = multiMatchQueryBuilder24.type(type68);
        org.elasticsearch.common.ParseField parseField76 = type68.parseField();
        org.elasticsearch.common.ParseField parseField77 = type68.parseField();
        org.elasticsearch.common.ParseField parseField78 = type68.parseField();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder35);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder37);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder39);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder41);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder43);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder45);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder47);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder58);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder60);
        org.junit.Assert.assertTrue("'" + type61 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX + "'", type61.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX));
        org.junit.Assert.assertTrue("'" + float62 + "' != '" + 0.0f + "'", float62 == 0.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder63);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder65);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder67);
        org.junit.Assert.assertTrue("'" + type68 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type68.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertTrue("'" + type69 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type69.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder70);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder71);
        org.junit.Assert.assertNotNull(parseField72);
        org.junit.Assert.assertTrue("'" + type73 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type73.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertTrue("'" + float74 + "' != '" + 0.0f + "'", float74 == 0.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder75);
        org.junit.Assert.assertNotNull(parseField76);
        org.junit.Assert.assertNotNull(parseField77);
        org.junit.Assert.assertNotNull(parseField78);
    }

    @Test
    public void test15080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15080");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.fuzzyRewrite("hi!");
        java.lang.String str13 = multiMatchQueryBuilder10.getName();
        float float14 = multiMatchQueryBuilder10.boost();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder10.lenient(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder10.slop((int) (short) -1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type19 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX;
        org.elasticsearch.index.search.MatchQuery.Type type20 = type19.matchQueryType();
        org.elasticsearch.index.search.MatchQuery.Type type21 = type19.matchQueryType();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder10.type(type19);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder22.fuzzyRewrite("{\n  \"multiMatch\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzyRewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder24.fuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"slop\" : -1,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = multiMatchQueryBuilder24.fuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"slop\\\" : -1,\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"lenient\\\" : true,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"boost\" : 1.0,\n    \"_name\" : \"hi!\"\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder30 = multiMatchQueryBuilder24.fuzzyRewrite("{\n  \"multiMatch\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzyRewrite\" : \"\",\n    \"boost\" : 1.0\n  }\n}");
        float float31 = multiMatchQueryBuilder24.boost();
        java.lang.Class<?> wildcardClass32 = multiMatchQueryBuilder24.getClass();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "multi_match" + "'", str13, "multi_match");
        org.junit.Assert.assertTrue("'" + float14 + "' != '" + 1.0f + "'", float14 == 1.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertTrue("'" + type19 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX + "'", type19.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX));
        org.junit.Assert.assertTrue("'" + type20 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX + "'", type20.equals(org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX));
        org.junit.Assert.assertTrue("'" + type21 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX + "'", type21.equals(org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder28);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder30);
        org.junit.Assert.assertTrue("'" + float31 + "' != '" + 1.0f + "'", float31 == 1.0f);
        org.junit.Assert.assertNotNull(wildcardClass32);
    }

    @Test
    public void test15081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15081");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        java.lang.String[] strArray18 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray18);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder19.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder21.tieBreaker(0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type24 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX;
        float float25 = type24.tieBreaker();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder21.type(type24);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = multiMatchQueryBuilder21.cutoffFrequency((float) 0L);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder30 = multiMatchQueryBuilder21.lenient(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type31 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        org.elasticsearch.index.search.MatchQuery.Type type32 = type31.matchQueryType();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder33 = multiMatchQueryBuilder21.type(type31);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder34 = multiMatchQueryBuilder8.fuzziness((java.lang.Object) type31);
        org.elasticsearch.index.search.MatchQuery.Type type35 = type31.matchQueryType();
        java.lang.Class<?> wildcardClass36 = type31.getClass();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertTrue("'" + type24 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX + "'", type24.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX));
        org.junit.Assert.assertTrue("'" + float25 + "' != '" + 0.0f + "'", float25 == 0.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder28);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder30);
        org.junit.Assert.assertTrue("'" + type31 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type31.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertTrue("'" + type32 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type32.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder33);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder34);
        org.junit.Assert.assertTrue("'" + type35 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type35.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertNotNull(wildcardClass36);
    }

    @Test
    public void test15082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15082");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder8.queryName("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.Operator operator13 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder12.operator(operator13);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder14.lenient(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder16.maxExpansions((int) (short) 1);
        java.lang.String[] strArray26 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray26);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = multiMatchQueryBuilder27.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = multiMatchQueryBuilder29.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery32 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder33 = multiMatchQueryBuilder31.zeroTermsQuery(zeroTermsQuery32);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder35 = multiMatchQueryBuilder33.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder37 = multiMatchQueryBuilder35.queryName("hi!");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery38 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder39 = multiMatchQueryBuilder37.zeroTermsQuery(zeroTermsQuery38);
        boolean boolean40 = multiMatchQueryBuilder16.equals((java.lang.Object) multiMatchQueryBuilder37);
        org.elasticsearch.index.query.QueryValidationException queryValidationException41 = multiMatchQueryBuilder37.validate();
        java.lang.String[] strArray49 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder50 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray49);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder52 = multiMatchQueryBuilder50.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder54 = multiMatchQueryBuilder52.fuzzyRewrite("hi!");
        java.lang.String str55 = multiMatchQueryBuilder52.getName();
        float float56 = multiMatchQueryBuilder52.boost();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder58 = multiMatchQueryBuilder52.lenient(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder60 = multiMatchQueryBuilder52.slop((int) (short) -1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder62 = multiMatchQueryBuilder52.tieBreaker((float) 10L);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder64 = multiMatchQueryBuilder52.minimumShouldMatch("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\", \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"analyzer\\\" : \\\"multi_match\\\",\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}^10.0\", \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\" ],\n    \"max_expansions\" : 10,\n    \"fuzzy_rewrite\" : \"\",\n    \"boost\" : 1.0,\n    \"_name\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\"\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder66 = multiMatchQueryBuilder52.lenient(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder67 = multiMatchQueryBuilder37.fuzziness((java.lang.Object) false);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder29);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder31);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder33);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder35);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder37);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNull(queryValidationException41);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder52);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "multi_match" + "'", str55, "multi_match");
        org.junit.Assert.assertTrue("'" + float56 + "' != '" + 1.0f + "'", float56 == 1.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder58);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder60);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder62);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder64);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder66);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder67);
    }

    @Test
    public void test15083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15083");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder8.cutoffFrequency((float) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder8.boost((float) 100);
        org.elasticsearch.index.query.Operator operator15 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder14.operator(operator15);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder16.boost((float) (byte) -1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder16.minimumShouldMatch("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"type\" : \"cross_fields\",\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 32.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder20.cutoffFrequency((float) (short) -1);
        java.lang.String str23 = null; // flaky: multiMatchQueryBuilder22.toString();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
// flaky:         org.junit.Assert.assertEquals("'" + str23 + "' != '" + "{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"minimum_should_match\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"type\\\" : \\\"cross_fields\\\",\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"tie_breaker\\\" : 32.0,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"fuzzy_rewrite\" : \"\",\n    \"cutoff_frequency\" : -1.0,\n    \"boost\" : -1.0\n  }\n}" + "'", str23, "{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"minimum_should_match\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"type\\\" : \\\"cross_fields\\\",\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"tie_breaker\\\" : 32.0,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"fuzzy_rewrite\" : \"\",\n    \"cutoff_frequency\" : -1.0,\n    \"boost\" : -1.0\n  }\n}");
    }

    @Test
    public void test15084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15084");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder10.field("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder10.boost(0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder16.analyzer("multi_match");
        float float19 = multiMatchQueryBuilder18.boost();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder18.tieBreaker((float) '#');
        org.elasticsearch.index.query.Operator operator22 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder21.operator(operator22);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder21.slop((-1));
        float float26 = multiMatchQueryBuilder21.boost();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = multiMatchQueryBuilder21.queryName("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"type\" : \"cross_fields\",\n    \"max_expansions\" : 1,\n    \"rewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"slop\\\" : -1,\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"lenient\\\" : true,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"fuzzy_rewrite\" : \"\",\n    \"use_dis_max\" : true,\n    \"lenient\" : true,\n    \"boost\" : 1.0,\n    \"_name\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\"\n  }\n}");
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertTrue("'" + float19 + "' != '" + 0.0f + "'", float19 == 0.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
        org.junit.Assert.assertTrue("'" + float26 + "' != '" + 0.0f + "'", float26 == 0.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder28);
    }

    @Test
    public void test15085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15085");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.fuzzyRewrite("hi!");
        java.lang.String str13 = multiMatchQueryBuilder10.getName();
        float float14 = multiMatchQueryBuilder10.boost();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder10.lenient(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder10.slop((int) (short) -1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type19 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX;
        org.elasticsearch.index.search.MatchQuery.Type type20 = type19.matchQueryType();
        org.elasticsearch.index.search.MatchQuery.Type type21 = type19.matchQueryType();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder10.type(type19);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder10.queryName("multi_match");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder24.minimumShouldMatch("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = multiMatchQueryBuilder24.lenient(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder30 = multiMatchQueryBuilder24.queryName("{\n  \"multiMatch\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzyRewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder32 = multiMatchQueryBuilder24.maxExpansions((int) (byte) 1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder34 = multiMatchQueryBuilder32.minimumShouldMatch("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"rewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"slop\\\" : -1,\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"lenient\\\" : true,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 52.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.Operator operator35 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder36 = multiMatchQueryBuilder34.operator(operator35);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery37 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder38 = multiMatchQueryBuilder36.zeroTermsQuery(zeroTermsQuery37);
        org.elasticsearch.index.query.QueryValidationException queryValidationException39 = multiMatchQueryBuilder36.validate();
        java.lang.String str40 = multiMatchQueryBuilder36.getWriteableName();
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder49 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray48);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder51 = multiMatchQueryBuilder49.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder53 = multiMatchQueryBuilder51.fuzzyRewrite("hi!");
        java.lang.String str54 = multiMatchQueryBuilder51.getName();
        java.lang.String[] strArray62 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder63 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray62);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder65 = multiMatchQueryBuilder63.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder67 = multiMatchQueryBuilder65.fuzzyRewrite("hi!");
        java.lang.String str68 = multiMatchQueryBuilder65.getName();
        float float69 = multiMatchQueryBuilder65.boost();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder71 = multiMatchQueryBuilder65.lenient(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder73 = multiMatchQueryBuilder65.queryName("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder75 = multiMatchQueryBuilder65.cutoffFrequency((float) (-1L));
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder78 = multiMatchQueryBuilder75.field("{\n  \"multiMatch\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzyRewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}", 100.0f);
        boolean boolean79 = multiMatchQueryBuilder51.equals((java.lang.Object) multiMatchQueryBuilder78);
        org.elasticsearch.index.query.QueryValidationException queryValidationException80 = multiMatchQueryBuilder51.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder82 = multiMatchQueryBuilder51.useDisMax(false);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery83 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder84 = multiMatchQueryBuilder82.zeroTermsQuery(zeroTermsQuery83);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder86 = multiMatchQueryBuilder84.fuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\", \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\" ],\n    \"type\" : \"best_fields\",\n    \"max_expansions\" : -1,\n    \"fuzzy_rewrite\" : \"\",\n    \"lenient\" : false,\n    \"boost\" : 0.0,\n    \"_name\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\"\n  }\n}");
        boolean boolean87 = multiMatchQueryBuilder36.equals((java.lang.Object) multiMatchQueryBuilder84);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "multi_match" + "'", str13, "multi_match");
        org.junit.Assert.assertTrue("'" + float14 + "' != '" + 1.0f + "'", float14 == 1.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertTrue("'" + type19 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX + "'", type19.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX));
        org.junit.Assert.assertTrue("'" + type20 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX + "'", type20.equals(org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX));
        org.junit.Assert.assertTrue("'" + type21 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX + "'", type21.equals(org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder28);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder30);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder32);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder34);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder36);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder38);
        org.junit.Assert.assertNull(queryValidationException39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "multi_match" + "'", str40, "multi_match");
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder51);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "multi_match" + "'", str54, "multi_match");
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder65);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "multi_match" + "'", str68, "multi_match");
        org.junit.Assert.assertTrue("'" + float69 + "' != '" + 1.0f + "'", float69 == 1.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder71);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder73);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder75);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNull(queryValidationException80);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder82);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder84);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
    }

    @Test
    public void test15086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15086");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder12.lenient(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder14.rewrite("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder14.lenient(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder18.lenient(false);
        java.lang.String str21 = null; // flaky: multiMatchQueryBuilder18.toString();
        java.lang.String str22 = null; // flaky: multiMatchQueryBuilder18.toString();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
// flaky:         org.junit.Assert.assertEquals("'" + str21 + "' != '" + "{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"rewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"lenient\" : false,\n    \"boost\" : 1.0\n  }\n}" + "'", str21, "{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"rewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"lenient\" : false,\n    \"boost\" : 1.0\n  }\n}");
// flaky:         org.junit.Assert.assertEquals("'" + str22 + "' != '" + "{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"rewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"lenient\" : false,\n    \"boost\" : 1.0\n  }\n}" + "'", str22, "{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"rewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"lenient\" : false,\n    \"boost\" : 1.0\n  }\n}");
    }

    @Test
    public void test15087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15087");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.tieBreaker(0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type13 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX;
        float float14 = type13.tieBreaker();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder10.type(type13);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder10.cutoffFrequency((float) 0L);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder10.lenient(false);
        java.lang.String str20 = multiMatchQueryBuilder19.queryName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder19.analyzer("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"analyzer\" : \"multi_match\",\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder19.lenient(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder19.fuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzziness\" : \"BEST_FIELDS\",\n    \"fuzzy_rewrite\" : \"\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = multiMatchQueryBuilder26.fuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\", \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"slop\\\" : -1,\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"lenient\\\" : true,\\n    \\\"boost\\\" : 1.0\\n  }\\n}^0.0\" ],\n    \"analyzer\" : \"multi_match\",\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0,\n    \"_name\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\"\n  }\n}");
        java.lang.String str29 = multiMatchQueryBuilder28.getName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = multiMatchQueryBuilder28.prefixLength(0);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertTrue("'" + type13 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX + "'", type13.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX));
        org.junit.Assert.assertTrue("'" + float14 + "' != '" + 0.0f + "'", float14 == 0.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "multi_match" + "'", str29, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder31);
    }

    @Test
    public void test15088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15088");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.fuzzyRewrite("hi!");
        java.lang.String str13 = multiMatchQueryBuilder10.getName();
        float float14 = multiMatchQueryBuilder10.boost();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder10.lenient(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder10.slop((int) (short) -1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type19 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX;
        org.elasticsearch.index.search.MatchQuery.Type type20 = type19.matchQueryType();
        org.elasticsearch.index.search.MatchQuery.Type type21 = type19.matchQueryType();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder10.type(type19);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder10.queryName("multi_match");
        java.lang.String[] strArray32 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder33 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray32);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder35 = multiMatchQueryBuilder33.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder37 = multiMatchQueryBuilder35.fuzzyRewrite("hi!");
        java.lang.String str38 = multiMatchQueryBuilder35.getName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder40 = multiMatchQueryBuilder35.analyzer("multi_match");
        org.elasticsearch.index.query.Operator operator41 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder42 = multiMatchQueryBuilder40.operator(operator41);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder43 = null; // flaky: multiMatchQueryBuilder10.fuzziness((java.lang.Object) multiMatchQueryBuilder40);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder45 = multiMatchQueryBuilder10.maxExpansions(0);
        org.elasticsearch.common.xcontent.XContentType xContentType46 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.bytes.BytesReference bytesReference47 = multiMatchQueryBuilder10.buildAsBytes(xContentType46);
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchException; message: Failed to build ToXContent");
        } catch (org.elasticsearch.ElasticsearchException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "multi_match" + "'", str13, "multi_match");
        org.junit.Assert.assertTrue("'" + float14 + "' != '" + 1.0f + "'", float14 == 1.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertTrue("'" + type19 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX + "'", type19.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX));
        org.junit.Assert.assertTrue("'" + type20 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX + "'", type20.equals(org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX));
        org.junit.Assert.assertTrue("'" + type21 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX + "'", type21.equals(org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder35);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "multi_match" + "'", str38, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder40);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder42);
// flaky:         org.junit.Assert.assertNotNull(multiMatchQueryBuilder43);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder45);
    }

    @Test
    public void test15089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15089");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder8.queryName("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.Operator operator13 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder12.operator(operator13);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder12.field("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"analyzer\" : \"multi_match\",\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}", 10.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder17.cutoffFrequency((float) 100);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
    }

    @Test
    public void test15090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15090");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.fuzzyRewrite("hi!");
        java.lang.String str13 = multiMatchQueryBuilder10.getName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder10.analyzer("multi_match");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder15.cutoffFrequency((float) (short) 1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder15.queryName("{\n  \"multiMatch\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzyRewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder15.field("{\n  \"multiMatch\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\", \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"analyzer\\\" : \\\"multi_match\\\",\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}^10.0\" ],\n    \"fuzzyRewrite\" : \"\",\n    \"boost\" : 1.0,\n    \"Name\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\"\n  }\n}", (float) ' ');
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder15.tieBreaker(0.0f);
        org.elasticsearch.index.query.QueryValidationException queryValidationException25 = multiMatchQueryBuilder15.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder15.cutoffFrequency((float) '#');
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = multiMatchQueryBuilder27.prefixLength(1);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "multi_match" + "'", str13, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertNull(queryValidationException25);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder29);
    }

    @Test
    public void test15091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15091");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery13 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder12.zeroTermsQuery(zeroTermsQuery13);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder14.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder16.queryName("hi!");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery19 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder18.zeroTermsQuery(zeroTermsQuery19);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder18.fuzziness((java.lang.Object) 1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder22.rewrite("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"max_expansions\" : 1,\n    \"fuzzy_rewrite\" : \"\",\n    \"lenient\" : true,\n    \"boost\" : 1.0,\n    \"_name\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\"\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder22.boost((float) (-1L));
        org.elasticsearch.index.query.QueryValidationException queryValidationException27 = multiMatchQueryBuilder26.validate();
        java.lang.String[] strArray35 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder36 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray35);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder38 = multiMatchQueryBuilder36.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder40 = multiMatchQueryBuilder38.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder42 = multiMatchQueryBuilder40.lenient(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder44 = multiMatchQueryBuilder42.rewrite("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery45 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder46 = multiMatchQueryBuilder44.zeroTermsQuery(zeroTermsQuery45);
        java.lang.Object obj47 = null;
        boolean boolean48 = multiMatchQueryBuilder46.equals(obj47);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder50 = multiMatchQueryBuilder46.lenient(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder52 = multiMatchQueryBuilder50.fuzzyRewrite("multi_match");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder54 = multiMatchQueryBuilder52.rewrite("{\n  \"multiMatch\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"minimumShouldMatch\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"slop\\\" : -1,\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"lenient\\\" : true,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder56 = multiMatchQueryBuilder54.boost((float) (short) 1);
        java.lang.Object obj57 = null;
        java.lang.String[] strArray66 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder67 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray66);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder68 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 10.0f, strArray66);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder69 = new org.elasticsearch.index.query.MultiMatchQueryBuilder(obj57, strArray66);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder70 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) multiMatchQueryBuilder56, strArray66);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder71 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) queryValidationException27, strArray66);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertNull(queryValidationException27);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder38);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder40);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder42);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder44);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder50);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder52);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder54);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder56);
        org.junit.Assert.assertNotNull(strArray66);
    }

    @Test
    public void test15092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15092");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.fuzzyRewrite("hi!");
        java.lang.String str13 = multiMatchQueryBuilder10.getName();
        float float14 = multiMatchQueryBuilder10.boost();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder10.lenient(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder10.slop((int) (short) -1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type19 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX;
        org.elasticsearch.index.search.MatchQuery.Type type20 = type19.matchQueryType();
        org.elasticsearch.index.search.MatchQuery.Type type21 = type19.matchQueryType();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder10.type(type19);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder10.queryName("multi_match");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder24.minimumShouldMatch("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = multiMatchQueryBuilder26.rewrite("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\", \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"analyzer\\\" : \\\"multi_match\\\",\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}^10.0\", \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\" ],\n    \"max_expansions\" : 10,\n    \"fuzzy_rewrite\" : \"\",\n    \"boost\" : 1.0,\n    \"_name\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\"\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder30 = multiMatchQueryBuilder26.slop((int) 'a');
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder32 = multiMatchQueryBuilder26.tieBreaker((float) 'a');
        java.lang.String str33 = multiMatchQueryBuilder26.getWriteableName();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery34 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder35 = multiMatchQueryBuilder26.zeroTermsQuery(zeroTermsQuery34);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "multi_match" + "'", str13, "multi_match");
        org.junit.Assert.assertTrue("'" + float14 + "' != '" + 1.0f + "'", float14 == 1.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertTrue("'" + type19 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX + "'", type19.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX));
        org.junit.Assert.assertTrue("'" + type20 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX + "'", type20.equals(org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX));
        org.junit.Assert.assertTrue("'" + type21 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX + "'", type21.equals(org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder28);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder30);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "multi_match" + "'", str33, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder35);
    }

    @Test
    public void test15093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15093");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder12.lenient(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder14.maxExpansions(0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder14.field("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}", (float) (short) 1);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery20 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder19.zeroTermsQuery(zeroTermsQuery20);
        org.elasticsearch.index.query.QueryValidationException queryValidationException22 = multiMatchQueryBuilder19.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder19.rewrite("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type25 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX;
        float float26 = type25.tieBreaker();
        org.elasticsearch.common.ParseField parseField27 = type25.parseField();
        float float28 = type25.tieBreaker();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = multiMatchQueryBuilder19.fuzziness((java.lang.Object) type25);
        float float30 = type25.tieBreaker();
        org.elasticsearch.common.ParseField parseField31 = type25.parseField();
        float float32 = type25.tieBreaker();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNull(queryValidationException22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertTrue("'" + type25 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX + "'", type25.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX));
        org.junit.Assert.assertTrue("'" + float26 + "' != '" + 0.0f + "'", float26 == 0.0f);
        org.junit.Assert.assertNotNull(parseField27);
        org.junit.Assert.assertTrue("'" + float28 + "' != '" + 0.0f + "'", float28 == 0.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder29);
        org.junit.Assert.assertTrue("'" + float30 + "' != '" + 0.0f + "'", float30 == 0.0f);
        org.junit.Assert.assertNotNull(parseField31);
        org.junit.Assert.assertTrue("'" + float32 + "' != '" + 0.0f + "'", float32 == 0.0f);
    }

    @Test
    public void test15094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15094");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.tieBreaker(0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type13 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX;
        float float14 = type13.tieBreaker();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder10.type(type13);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder10.cutoffFrequency((float) 0L);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder10.maxExpansions(10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder19.minimumShouldMatch("");
        java.lang.String str22 = multiMatchQueryBuilder19.getName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder19.tieBreaker((float) '#');
        float float25 = multiMatchQueryBuilder19.boost();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder19.queryName("{\n  \"multiMatch\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\", \"\" ],\n    \"type\" : \"cross_fields\",\n    \"analyzer\" : \"multi_match\",\n    \"maxExpansions\" : 1,\n    \"fuzzyRewrite\" : \"hi!\",\n    \"boost\" : 0.0\n  }\n}");
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertTrue("'" + type13 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX + "'", type13.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX));
        org.junit.Assert.assertTrue("'" + float14 + "' != '" + 0.0f + "'", float14 == 0.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "multi_match" + "'", str22, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertTrue("'" + float25 + "' != '" + 1.0f + "'", float25 == 1.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
    }

    @Test
    public void test15095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15095");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery13 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder12.zeroTermsQuery(zeroTermsQuery13);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder14.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder16.queryName("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder16.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder16.analyzer("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder16.tieBreaker((float) 0);
        java.lang.String[] strArray32 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder33 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray32);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder35 = multiMatchQueryBuilder33.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder37 = multiMatchQueryBuilder35.tieBreaker(0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type38 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX;
        float float39 = type38.tieBreaker();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder40 = multiMatchQueryBuilder35.type(type38);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder42 = multiMatchQueryBuilder35.cutoffFrequency((float) 0L);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder44 = multiMatchQueryBuilder35.lenient(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type45 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        org.elasticsearch.index.search.MatchQuery.Type type46 = type45.matchQueryType();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder47 = multiMatchQueryBuilder35.type(type45);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder49 = multiMatchQueryBuilder35.useDisMax(false);
        java.lang.String[] strArray57 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder58 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray57);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder60 = multiMatchQueryBuilder58.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder62 = multiMatchQueryBuilder60.fuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder64 = multiMatchQueryBuilder60.minimumShouldMatch("multi_match");
        boolean boolean65 = multiMatchQueryBuilder35.equals((java.lang.Object) "multi_match");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder67 = multiMatchQueryBuilder35.queryName("{\n  \"multiMatch\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"type\" : \"phrase_prefix\",\n    \"maxExpansions\" : 10,\n    \"fuzzyRewrite\" : \"\",\n    \"tieBreaker\" : 0.0,\n    \"cutoffFrequency\" : 0.0,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String[] strArray75 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder76 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray75);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder78 = multiMatchQueryBuilder76.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder80 = multiMatchQueryBuilder78.tieBreaker(0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type81 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX;
        float float82 = type81.tieBreaker();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder83 = multiMatchQueryBuilder78.type(type81);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder85 = multiMatchQueryBuilder78.cutoffFrequency((float) 0L);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder87 = multiMatchQueryBuilder78.lenient(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type88 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        org.elasticsearch.index.search.MatchQuery.Type type89 = type88.matchQueryType();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder90 = multiMatchQueryBuilder78.type(type88);
        org.elasticsearch.common.ParseField parseField91 = type88.parseField();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder92 = multiMatchQueryBuilder35.type(type88);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder93 = multiMatchQueryBuilder16.type(type88);
        org.elasticsearch.index.search.MatchQuery.Type type94 = type88.matchQueryType();
        org.elasticsearch.index.search.MatchQuery.Type type95 = type88.matchQueryType();
        float float96 = type88.tieBreaker();
        org.elasticsearch.index.search.MatchQuery.Type type97 = type88.matchQueryType();
        org.elasticsearch.index.search.MatchQuery.Type type98 = type88.matchQueryType();
        org.elasticsearch.common.ParseField parseField99 = type88.parseField();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder35);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder37);
        org.junit.Assert.assertTrue("'" + type38 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX + "'", type38.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX));
        org.junit.Assert.assertTrue("'" + float39 + "' != '" + 0.0f + "'", float39 == 0.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder40);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder42);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder44);
        org.junit.Assert.assertTrue("'" + type45 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type45.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertTrue("'" + type46 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type46.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder47);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder49);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder60);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder62);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder67);
        org.junit.Assert.assertNotNull(strArray75);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder78);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder80);
        org.junit.Assert.assertTrue("'" + type81 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX + "'", type81.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX));
        org.junit.Assert.assertTrue("'" + float82 + "' != '" + 0.0f + "'", float82 == 0.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder83);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder85);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder87);
        org.junit.Assert.assertTrue("'" + type88 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type88.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertTrue("'" + type89 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type89.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder90);
        org.junit.Assert.assertNotNull(parseField91);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder92);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder93);
        org.junit.Assert.assertTrue("'" + type94 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type94.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertTrue("'" + type95 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type95.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertTrue("'" + float96 + "' != '" + 0.0f + "'", float96 == 0.0f);
        org.junit.Assert.assertTrue("'" + type97 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type97.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertTrue("'" + type98 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type98.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertNotNull(parseField99);
    }

    @Test
    public void test15096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15096");
        org.elasticsearch.common.xcontent.XContent xContent0 = null;
        java.io.OutputStream outputStream1 = null;
        java.lang.String[] strArray9 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray9);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder12.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder12.field("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder12.boost(0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder18.analyzer("multi_match");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder20.field("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}", (float) (short) 1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder20.rewrite("");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery26 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder20.zeroTermsQuery(zeroTermsQuery26);
        java.lang.String[] strArray35 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder36 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray35);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder38 = multiMatchQueryBuilder36.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder40 = multiMatchQueryBuilder38.fuzzyRewrite("hi!");
        java.lang.String str41 = multiMatchQueryBuilder38.getName();
        float float42 = multiMatchQueryBuilder38.boost();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder44 = multiMatchQueryBuilder38.lenient(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder46 = multiMatchQueryBuilder38.queryName("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException47 = multiMatchQueryBuilder38.validate();
        java.lang.String[] strArray56 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder57 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray56);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder59 = multiMatchQueryBuilder57.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder61 = multiMatchQueryBuilder57.queryName("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.Operator operator62 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder63 = multiMatchQueryBuilder61.operator(operator62);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder65 = multiMatchQueryBuilder63.lenient(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder67 = multiMatchQueryBuilder65.maxExpansions((int) (short) 1);
        java.lang.String[] strArray75 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder76 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray75);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder77 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) multiMatchQueryBuilder65, strArray75);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder78 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (byte) 1, strArray75);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder79 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) queryValidationException47, strArray75);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder80 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) zeroTermsQuery26, strArray75);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder81 = new org.elasticsearch.common.xcontent.XContentBuilder(xContent0, outputStream1, strArray75);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder38);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "multi_match" + "'", str41, "multi_match");
        org.junit.Assert.assertTrue("'" + float42 + "' != '" + 1.0f + "'", float42 == 1.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder44);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder46);
        org.junit.Assert.assertNull(queryValidationException47);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder59);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder61);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder63);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder65);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder67);
        org.junit.Assert.assertNotNull(strArray75);
    }

    @Test
    public void test15097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15097");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.tieBreaker(0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder10.useDisMax(true);
        float float15 = multiMatchQueryBuilder10.boost();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder10.rewrite("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"analyzer\" : \"multi_match\",\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder10.field("{\n  \"multiMatch\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"type\" : \"phrase_prefix\",\n    \"analyzer\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"type\\\" : \\\"phrase_prefix\\\",\\n    \\\"max_expansions\\\" : 10,\\n    \\\"fuzzy_rewrite\\\" : \\\"\\\",\\n    \\\"tie_breaker\\\" : 0.0,\\n    \\\"cutoff_frequency\\\" : 0.0,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"slop\" : -1,\n    \"fuzzyRewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"analyzer\\\" : \\\"multi_match\\\",\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"lenient\" : true,\n    \"cutoffFrequency\" : 10.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder10.tieBreaker((float) 1L);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder10.cutoffFrequency((float) (byte) 1);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertTrue("'" + float15 + "' != '" + 1.0f + "'", float15 == 1.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
    }

    @Test
    public void test15098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15098");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder8.queryName("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder12.tieBreaker((float) (short) 1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder14.tieBreaker(0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder16.prefixLength((int) '#');
        java.lang.String[] strArray26 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray26);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = multiMatchQueryBuilder27.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = multiMatchQueryBuilder29.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder33 = multiMatchQueryBuilder29.field("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder35 = multiMatchQueryBuilder29.boost(0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder37 = multiMatchQueryBuilder35.analyzer("multi_match");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder39 = multiMatchQueryBuilder37.maxExpansions(1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type40 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS;
        org.elasticsearch.index.search.MatchQuery.Type type41 = type40.matchQueryType();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder42 = multiMatchQueryBuilder37.type(type40);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder44 = multiMatchQueryBuilder42.prefixLength((int) 'a');
        java.lang.String str45 = multiMatchQueryBuilder44.getWriteableName();
        org.elasticsearch.index.query.Operator operator46 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder47 = multiMatchQueryBuilder44.operator(operator46);
        java.lang.Class<?> wildcardClass48 = multiMatchQueryBuilder47.getClass();
        boolean boolean49 = multiMatchQueryBuilder16.equals((java.lang.Object) multiMatchQueryBuilder47);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder51 = multiMatchQueryBuilder16.maxExpansions((int) (short) -1);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery52 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder53 = multiMatchQueryBuilder16.zeroTermsQuery(zeroTermsQuery52);
        org.elasticsearch.common.io.stream.StreamOutput streamOutput54 = null;
        // The following exception was thrown during execution in test generation
        try {
            multiMatchQueryBuilder53.writeTo(streamOutput54);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder29);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder31);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder33);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder35);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder37);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder39);
        org.junit.Assert.assertTrue("'" + type40 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS + "'", type40.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS));
        org.junit.Assert.assertTrue("'" + type41 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type41.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder42);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "multi_match" + "'", str45, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder47);
        org.junit.Assert.assertNotNull(wildcardClass48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder51);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder53);
    }

    @Test
    public void test15099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15099");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery13 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder12.zeroTermsQuery(zeroTermsQuery13);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder14.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder16.queryName("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder16.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder16.analyzer("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder16.tieBreaker((float) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder16.field("multi_match");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = multiMatchQueryBuilder16.slop((int) (short) 0);
        java.lang.String[] strArray36 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder37 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray36);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder39 = multiMatchQueryBuilder37.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder41 = multiMatchQueryBuilder39.fuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder43 = multiMatchQueryBuilder39.minimumShouldMatch("multi_match");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder45 = multiMatchQueryBuilder39.slop((int) (short) -1);
        boolean boolean46 = multiMatchQueryBuilder28.equals((java.lang.Object) multiMatchQueryBuilder39);
        java.lang.String str47 = multiMatchQueryBuilder39.getName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder49 = multiMatchQueryBuilder39.slop((int) 'a');
        org.elasticsearch.index.query.QueryValidationException queryValidationException50 = multiMatchQueryBuilder39.validate();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder28);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder39);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder41);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder43);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "multi_match" + "'", str47, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder49);
        org.junit.Assert.assertNull(queryValidationException50);
    }

    @Test
    public void test15100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15100");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder10.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException15 = multiMatchQueryBuilder14.validate();
        org.elasticsearch.index.query.QueryValidationException queryValidationException16 = multiMatchQueryBuilder14.validate();
        java.lang.String[] strArray24 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray24);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder25.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = multiMatchQueryBuilder27.fuzzyRewrite("hi!");
        java.lang.String str30 = multiMatchQueryBuilder27.getName();
        float float31 = multiMatchQueryBuilder27.boost();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder33 = multiMatchQueryBuilder27.lenient(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder35 = multiMatchQueryBuilder27.slop((int) (short) -1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type36 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX;
        org.elasticsearch.index.search.MatchQuery.Type type37 = type36.matchQueryType();
        org.elasticsearch.index.search.MatchQuery.Type type38 = type36.matchQueryType();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder39 = multiMatchQueryBuilder27.type(type36);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder41 = multiMatchQueryBuilder39.fuzzyRewrite("{\n  \"multiMatch\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzyRewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder43 = multiMatchQueryBuilder41.fuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"slop\" : -1,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        float float44 = multiMatchQueryBuilder43.boost();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder46 = multiMatchQueryBuilder43.fuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"analyzer\" : \"multi_match\",\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder48 = multiMatchQueryBuilder46.analyzer("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"type\" : \"phrase_prefix\",\n    \"max_expansions\" : 10,\n    \"fuzzy_rewrite\" : \"\",\n    \"tie_breaker\" : 0.0,\n    \"cutoff_frequency\" : 0.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder50 = multiMatchQueryBuilder48.cutoffFrequency((float) 10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder52 = multiMatchQueryBuilder48.prefixLength((int) '4');
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder54 = multiMatchQueryBuilder52.boost((float) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder55 = null; // flaky: multiMatchQueryBuilder14.fuzziness((java.lang.Object) multiMatchQueryBuilder52);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder57 = multiMatchQueryBuilder52.tieBreaker(97.0f);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNull(queryValidationException15);
        org.junit.Assert.assertNull(queryValidationException16);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "multi_match" + "'", str30, "multi_match");
        org.junit.Assert.assertTrue("'" + float31 + "' != '" + 1.0f + "'", float31 == 1.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder33);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder35);
        org.junit.Assert.assertTrue("'" + type36 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX + "'", type36.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX));
        org.junit.Assert.assertTrue("'" + type37 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX + "'", type37.equals(org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX));
        org.junit.Assert.assertTrue("'" + type38 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX + "'", type38.equals(org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder39);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder41);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder43);
        org.junit.Assert.assertTrue("'" + float44 + "' != '" + 1.0f + "'", float44 == 1.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder46);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder48);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder50);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder52);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder54);
// flaky:         org.junit.Assert.assertNotNull(multiMatchQueryBuilder55);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder57);
    }

    @Test
    public void test15101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15101");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder10.field("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder10.boost(0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder16.analyzer("multi_match");
        float float19 = multiMatchQueryBuilder18.boost();
        java.lang.String[] strArray27 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray27);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder30 = multiMatchQueryBuilder28.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder32 = multiMatchQueryBuilder30.tieBreaker(0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type33 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX;
        float float34 = type33.tieBreaker();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder35 = multiMatchQueryBuilder30.type(type33);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder37 = multiMatchQueryBuilder30.cutoffFrequency((float) 0L);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder39 = multiMatchQueryBuilder30.lenient(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type40 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        org.elasticsearch.index.search.MatchQuery.Type type41 = type40.matchQueryType();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder42 = multiMatchQueryBuilder30.type(type40);
        org.elasticsearch.index.search.MatchQuery.Type type43 = type40.matchQueryType();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder44 = multiMatchQueryBuilder18.type(type40);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder46 = multiMatchQueryBuilder18.minimumShouldMatch("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\", \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"analyzer\\\" : \\\"multi_match\\\",\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}^10.0\", \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\" ],\n    \"max_expansions\" : 10,\n    \"fuzzy_rewrite\" : \"\",\n    \"boost\" : 1.0,\n    \"_name\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\"\n  }\n}");
        org.elasticsearch.index.query.Operator operator47 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder48 = multiMatchQueryBuilder18.operator(operator47);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder50 = multiMatchQueryBuilder18.minimumShouldMatch("{\n  \"multiMatch\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\", \"\" ],\n    \"analyzer\" : \"multi_match\",\n    \"maxExpansions\" : -1,\n    \"fuzzyRewrite\" : \"hi!\",\n    \"useDisMax\" : true,\n    \"boost\" : 0.0\n  }\n}");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery51 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder52 = multiMatchQueryBuilder18.zeroTermsQuery(zeroTermsQuery51);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertTrue("'" + float19 + "' != '" + 0.0f + "'", float19 == 0.0f);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder30);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder32);
        org.junit.Assert.assertTrue("'" + type33 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX + "'", type33.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX));
        org.junit.Assert.assertTrue("'" + float34 + "' != '" + 0.0f + "'", float34 == 0.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder35);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder37);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder39);
        org.junit.Assert.assertTrue("'" + type40 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type40.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertTrue("'" + type41 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type41.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder42);
        org.junit.Assert.assertTrue("'" + type43 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type43.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder44);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder46);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder48);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder50);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder52);
    }

    @Test
    public void test15102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15102");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder8.queryName("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.Operator operator13 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder12.operator(operator13);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder14.lenient(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder16.maxExpansions((int) (short) 1);
        java.lang.String[] strArray26 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray26);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = multiMatchQueryBuilder27.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = multiMatchQueryBuilder29.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery32 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder33 = multiMatchQueryBuilder31.zeroTermsQuery(zeroTermsQuery32);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder35 = multiMatchQueryBuilder33.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder37 = multiMatchQueryBuilder35.queryName("hi!");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery38 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder39 = multiMatchQueryBuilder37.zeroTermsQuery(zeroTermsQuery38);
        boolean boolean40 = multiMatchQueryBuilder16.equals((java.lang.Object) multiMatchQueryBuilder37);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder42 = multiMatchQueryBuilder16.field("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder44 = multiMatchQueryBuilder16.maxExpansions(100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder47 = multiMatchQueryBuilder44.field("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"slop\" : -1,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 10.0,\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}", (float) (byte) 100);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder29);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder31);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder33);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder35);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder37);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder42);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder44);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder47);
    }

    @Test
    public void test15103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15103");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder12.lenient(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder14.rewrite("multi_match");
        org.elasticsearch.index.query.Operator operator17 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder14.operator(operator17);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder14.queryName("{\n  \"multiMatch\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\", \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"slop\\\" : -1,\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"lenient\\\" : true,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\" ],\n    \"analyzer\" : \"\",\n    \"fuzzyRewrite\" : \"\",\n    \"tieBreaker\" : 0.0,\n    \"cutoffFrequency\" : 0.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder14.useDisMax(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder22.maxExpansions((int) '4');
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder24.boost((float) 1L);
        java.lang.String[] strArray34 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder35 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray34);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder37 = multiMatchQueryBuilder35.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder39 = multiMatchQueryBuilder37.fuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder41 = multiMatchQueryBuilder37.minimumShouldMatch("multi_match");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder43 = multiMatchQueryBuilder37.slop((int) (short) -1);
        java.lang.String str44 = multiMatchQueryBuilder43.queryName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder46 = multiMatchQueryBuilder43.maxExpansions(1);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder47 = null; // flaky: multiMatchQueryBuilder26.type((java.lang.Object) multiMatchQueryBuilder43);
// flaky:             org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchParseException; message: failed to parse [multi_match] query type [{?  \"multi_match\" : {?    \"query\" : 0.0,?    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],?    \"slop\" : -1,?    \"max_expansions\" : 1,?    \"minimum_should_match\" : \"multi_match\",?    \"fuzzy_rewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",?    \"boost\" : 1.0?  }?}]. unknown type.");
        } catch (org.elasticsearch.ElasticsearchParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder37);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder39);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder41);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder43);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder46);
    }

    @Test
    public void test15104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15104");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery13 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder12.zeroTermsQuery(zeroTermsQuery13);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder14.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery17 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder14.zeroTermsQuery(zeroTermsQuery17);
        java.lang.String str19 = multiMatchQueryBuilder18.queryName();
        java.lang.String str20 = multiMatchQueryBuilder18.queryName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder18.analyzer("{\n  \"multiMatch\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzyRewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        float float23 = multiMatchQueryBuilder18.boost();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder18.rewrite("{\n  \"multi_match\" : {\n    \"query\" : 100,\n    \"fields\" : [ \"{\\n  \\\"multiMatch\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"fuzzyRewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\" ],\n    \"fuzzy_rewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"analyzer\\\" : \\\"multi_match\\\",\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"tie_breaker\" : 32.0,\n    \"cutoff_frequency\" : 0.0,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.Class<?> wildcardClass26 = multiMatchQueryBuilder25.getClass();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertTrue("'" + float23 + "' != '" + 1.0f + "'", float23 == 1.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
        org.junit.Assert.assertNotNull(wildcardClass26);
    }

    @Test
    public void test15105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15105");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery13 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder12.zeroTermsQuery(zeroTermsQuery13);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder14.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery17 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder14.zeroTermsQuery(zeroTermsQuery17);
        java.lang.String[] strArray26 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray26);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = multiMatchQueryBuilder27.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = multiMatchQueryBuilder29.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery32 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder33 = multiMatchQueryBuilder31.zeroTermsQuery(zeroTermsQuery32);
        java.lang.String str34 = multiMatchQueryBuilder33.getName();
        boolean boolean35 = multiMatchQueryBuilder18.equals((java.lang.Object) multiMatchQueryBuilder33);
        java.lang.String str36 = multiMatchQueryBuilder33.getWriteableName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder38 = multiMatchQueryBuilder33.analyzer("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder40 = multiMatchQueryBuilder33.lenient(false);
        java.lang.String str41 = multiMatchQueryBuilder40.queryName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder43 = multiMatchQueryBuilder40.tieBreaker(10.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder45 = multiMatchQueryBuilder40.rewrite("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\", \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"fuzzy_rewrite\\\" : \\\"\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}^52.0\" ],\n    \"max_expansions\" : 1,\n    \"fuzzy_rewrite\" : \"\",\n    \"lenient\" : true,\n    \"boost\" : 1.0,\n    \"_name\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\"\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder47 = multiMatchQueryBuilder40.minimumShouldMatch("{\n  \"multiMatch\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\", \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"analyzer\\\" : \\\"multi_match\\\",\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}^10.0\", \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\" ],\n    \"fuzzyRewrite\" : \"\",\n    \"boost\" : 1.0,\n    \"Name\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\"\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder49 = multiMatchQueryBuilder40.field("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\", \"\" ],\n    \"analyzer\" : \"multi_match\",\n    \"max_expansions\" : 1,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 0.0,\n    \"boost\" : 0.0\n  }\n}");
        org.elasticsearch.index.query.QueryShardContext queryShardContext50 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.lucene.search.Query query51 = multiMatchQueryBuilder40.toFilter(queryShardContext50);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder29);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder31);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "multi_match" + "'", str34, "multi_match");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "multi_match" + "'", str36, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder38);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder40);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder43);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder45);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder47);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder49);
    }

    @Test
    public void test15106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15106");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder12.lenient(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder12.prefixLength((int) (byte) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder16.boost((float) 1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder16.rewrite("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"analyzer\" : \"multi_match\",\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder16.maxExpansions((int) (short) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder16.useDisMax(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder24.analyzer("{\n  \"multiMatch\" : {\n    \"query\" : \"class org.elasticsearch.index.query.MultiMatchQueryBuilder$Type\",\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"boost\" : 1.0,\n    \"Name\" : \"{\\n  \\\"multiMatch\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"fuzzyRewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\"\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = multiMatchQueryBuilder26.minimumShouldMatch("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\", \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"fuzzy_rewrite\\\" : \\\"\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}^52.0\" ],\n    \"max_expansions\" : 1,\n    \"fuzzy_rewrite\" : \"\",\n    \"lenient\" : true,\n    \"boost\" : 1.0,\n    \"_name\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\"\n  }\n}");
        java.lang.String str29 = multiMatchQueryBuilder26.queryName();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder28);
        org.junit.Assert.assertNull(str29);
    }

    @Test
    public void test15107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15107");
        java.lang.Object obj0 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type1 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX;
        float float2 = type1.tieBreaker();
        float float3 = type1.tieBreaker();
        org.elasticsearch.index.search.MatchQuery.Type type4 = type1.matchQueryType();
        java.lang.String[] strArray12 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray12);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder13.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder13.queryName("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.Operator operator18 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder17.operator(operator18);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder19.lenient(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder21.maxExpansions((int) (short) 1);
        java.lang.String[] strArray31 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder32 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray31);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder33 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) multiMatchQueryBuilder21, strArray31);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder34 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) type1, strArray31);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder35 = new org.elasticsearch.index.query.MultiMatchQueryBuilder(obj0, strArray31);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder37 = multiMatchQueryBuilder35.minimumShouldMatch("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"slop\\\" : -1,\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"lenient\\\" : true,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"boost\" : 1.0,\n    \"_name\" : \"hi!\"\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder40 = multiMatchQueryBuilder35.field("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"type\" : \"phrase_prefix\",\n    \"prefix_length\" : 0,\n    \"fuzzy_rewrite\" : \"{\\n  \\\"multiMatch\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"type\\\" : \\\"phrase_prefix\\\",\\n    \\\"maxExpansions\\\" : 10,\\n    \\\"fuzzyRewrite\\\" : \\\"\\\",\\n    \\\"tieBreaker\\\" : 0.0,\\n    \\\"cutoffFrequency\\\" : 0.0,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"tie_breaker\" : 0.0,\n    \"cutoff_frequency\" : 0.0,\n    \"boost\" : 1.0\n  }\n}", 0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder42 = multiMatchQueryBuilder35.lenient(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder44 = multiMatchQueryBuilder42.cutoffFrequency((float) '#');
        org.junit.Assert.assertTrue("'" + type1 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX + "'", type1.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX));
        org.junit.Assert.assertTrue("'" + float2 + "' != '" + 0.0f + "'", float2 == 0.0f);
        org.junit.Assert.assertTrue("'" + float3 + "' != '" + 0.0f + "'", float3 == 0.0f);
        org.junit.Assert.assertTrue("'" + type4 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX + "'", type4.equals(org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX));
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder37);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder40);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder42);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder44);
    }

    @Test
    public void test15108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15108");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder10.field("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder10.boost(0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder10.field("");
        java.lang.String[] strArray26 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray26);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = multiMatchQueryBuilder27.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = multiMatchQueryBuilder29.tieBreaker(0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type32 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX;
        float float33 = type32.tieBreaker();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder34 = multiMatchQueryBuilder29.type(type32);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder36 = multiMatchQueryBuilder29.cutoffFrequency((float) 0L);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder38 = multiMatchQueryBuilder29.queryName("multi_match");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder41 = multiMatchQueryBuilder38.field("", (float) 1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder42 = null; // flaky: multiMatchQueryBuilder10.fuzziness((java.lang.Object) multiMatchQueryBuilder38);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder44 = multiMatchQueryBuilder38.tieBreaker((float) '4');
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder46 = multiMatchQueryBuilder38.tieBreaker(35.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder48 = multiMatchQueryBuilder46.maxExpansions((int) '#');
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder29);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder31);
        org.junit.Assert.assertTrue("'" + type32 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX + "'", type32.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX));
        org.junit.Assert.assertTrue("'" + float33 + "' != '" + 0.0f + "'", float33 == 0.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder34);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder36);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder38);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder41);
// flaky:         org.junit.Assert.assertNotNull(multiMatchQueryBuilder42);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder44);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder46);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder48);
    }

    @Test
    public void test15109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15109");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery13 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder12.zeroTermsQuery(zeroTermsQuery13);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder14.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery17 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder14.zeroTermsQuery(zeroTermsQuery17);
        java.lang.String[] strArray26 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray26);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = multiMatchQueryBuilder27.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = multiMatchQueryBuilder29.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery32 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder33 = multiMatchQueryBuilder31.zeroTermsQuery(zeroTermsQuery32);
        java.lang.String str34 = multiMatchQueryBuilder33.getName();
        boolean boolean35 = multiMatchQueryBuilder18.equals((java.lang.Object) multiMatchQueryBuilder33);
        java.lang.String str36 = multiMatchQueryBuilder33.getWriteableName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder38 = multiMatchQueryBuilder33.analyzer("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder40 = multiMatchQueryBuilder33.lenient(false);
        java.lang.String str41 = multiMatchQueryBuilder40.queryName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder43 = multiMatchQueryBuilder40.tieBreaker(10.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder45 = multiMatchQueryBuilder40.rewrite("{\n  \"multiMatch\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"slop\" : -1,\n    \"fuzzyRewrite\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder47 = multiMatchQueryBuilder45.field("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"type\" : \"phrase\",\n    \"rewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"slop\\\" : -1,\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"lenient\\\" : true,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 52.0,\n    \"boost\" : 1.0,\n    \"_name\" : \"hi!\"\n  }\n}");
        java.lang.String[] strArray55 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder56 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray55);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder58 = multiMatchQueryBuilder56.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder60 = multiMatchQueryBuilder58.tieBreaker(0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type61 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX;
        float float62 = type61.tieBreaker();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder63 = multiMatchQueryBuilder58.type(type61);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder65 = multiMatchQueryBuilder58.cutoffFrequency((float) 0L);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder67 = multiMatchQueryBuilder58.fuzzyRewrite("{\n  \"multiMatch\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"type\" : \"phrase_prefix\",\n    \"maxExpansions\" : 10,\n    \"fuzzyRewrite\" : \"\",\n    \"tieBreaker\" : 0.0,\n    \"cutoffFrequency\" : 0.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder69 = multiMatchQueryBuilder58.prefixLength(0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type70 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder71 = multiMatchQueryBuilder69.type(type70);
        org.elasticsearch.index.search.MatchQuery.Type type72 = type70.matchQueryType();
        org.elasticsearch.common.ParseField parseField73 = type70.parseField();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder74 = multiMatchQueryBuilder45.type(type70);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder29);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder31);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "multi_match" + "'", str34, "multi_match");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "multi_match" + "'", str36, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder38);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder40);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder43);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder45);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder47);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder58);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder60);
        org.junit.Assert.assertTrue("'" + type61 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX + "'", type61.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX));
        org.junit.Assert.assertTrue("'" + float62 + "' != '" + 0.0f + "'", float62 == 0.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder63);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder65);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder67);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder69);
        org.junit.Assert.assertTrue("'" + type70 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE + "'", type70.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder71);
        org.junit.Assert.assertTrue("'" + type72 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.PHRASE + "'", type72.equals(org.elasticsearch.index.search.MatchQuery.Type.PHRASE));
        org.junit.Assert.assertNotNull(parseField73);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder74);
    }

    @Test
    public void test15110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15110");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder12.tieBreaker((float) '#');
        java.lang.String str15 = multiMatchQueryBuilder12.queryName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder12.tieBreaker((float) 'a');
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder17.lenient(false);
        java.lang.String str20 = multiMatchQueryBuilder17.queryName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder17.boost((float) (short) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder22.prefixLength((int) (short) 10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder24.maxExpansions((int) (byte) -1);
        java.lang.String str27 = multiMatchQueryBuilder26.getWriteableName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = multiMatchQueryBuilder26.analyzer("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\", \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"slop\\\" : -1,\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"lenient\\\" : true,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\" ],\n    \"analyzer\" : \"\",\n    \"max_expansions\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = multiMatchQueryBuilder29.rewrite("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\", \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}^1.0\" ],\n    \"max_expansions\" : 10,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"lenient\" : false,\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "multi_match" + "'", str27, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder29);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder31);
    }

    @Test
    public void test15111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15111");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.tieBreaker(0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type13 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX;
        float float14 = type13.tieBreaker();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder10.type(type13);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder10.cutoffFrequency((float) 0L);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder10.lenient(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type20 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        org.elasticsearch.index.search.MatchQuery.Type type21 = type20.matchQueryType();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder10.type(type20);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder10.useDisMax(false);
        java.lang.String[] strArray32 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder33 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray32);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder35 = multiMatchQueryBuilder33.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder37 = multiMatchQueryBuilder35.fuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder39 = multiMatchQueryBuilder35.minimumShouldMatch("multi_match");
        boolean boolean40 = multiMatchQueryBuilder10.equals((java.lang.Object) "multi_match");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder42 = multiMatchQueryBuilder10.queryName("{\n  \"multiMatch\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"type\" : \"phrase_prefix\",\n    \"maxExpansions\" : 10,\n    \"fuzzyRewrite\" : \"\",\n    \"tieBreaker\" : 0.0,\n    \"cutoffFrequency\" : 0.0,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String[] strArray50 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder51 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray50);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder53 = multiMatchQueryBuilder51.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder55 = multiMatchQueryBuilder53.tieBreaker(0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type56 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX;
        float float57 = type56.tieBreaker();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder58 = multiMatchQueryBuilder53.type(type56);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder60 = multiMatchQueryBuilder53.cutoffFrequency((float) 0L);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder62 = multiMatchQueryBuilder53.lenient(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type63 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        org.elasticsearch.index.search.MatchQuery.Type type64 = type63.matchQueryType();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder65 = multiMatchQueryBuilder53.type(type63);
        org.elasticsearch.common.ParseField parseField66 = type63.parseField();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder67 = multiMatchQueryBuilder10.type(type63);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder69 = multiMatchQueryBuilder10.fuzzyRewrite("{\n  \"multiMatch\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"type\" : \"phrase_prefix\",\n    \"maxExpansions\" : 10,\n    \"fuzzyRewrite\" : \"\",\n    \"tieBreaker\" : 0.0,\n    \"cutoffFrequency\" : 0.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder71 = multiMatchQueryBuilder69.tieBreaker(0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder73 = multiMatchQueryBuilder71.lenient(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder75 = multiMatchQueryBuilder73.minimumShouldMatch("{\n  \"multiMatch\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\", \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"analyzer\\\" : \\\"multi_match\\\",\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}^10.0\", \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\" ],\n    \"maxExpansions\" : 10,\n    \"fuzzyRewrite\" : \"\",\n    \"boost\" : 1.0,\n    \"Name\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\"\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder77 = multiMatchQueryBuilder73.useDisMax(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder79 = multiMatchQueryBuilder77.rewrite("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"type\" : \"cross_fields\",\n    \"max_expansions\" : 1,\n    \"rewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"slop\\\" : -1,\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"lenient\\\" : true,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"fuzzy_rewrite\" : \"\",\n    \"use_dis_max\" : true,\n    \"lenient\" : true,\n    \"boost\" : 1.0,\n    \"_name\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\"\n  }\n}");
        org.elasticsearch.index.query.Operator operator80 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder81 = multiMatchQueryBuilder77.operator(operator80);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder83 = multiMatchQueryBuilder81.boost(0.0f);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertTrue("'" + type13 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX + "'", type13.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX));
        org.junit.Assert.assertTrue("'" + float14 + "' != '" + 0.0f + "'", float14 == 0.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertTrue("'" + type20 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type20.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertTrue("'" + type21 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type21.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder35);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder37);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder42);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder53);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder55);
        org.junit.Assert.assertTrue("'" + type56 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX + "'", type56.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX));
        org.junit.Assert.assertTrue("'" + float57 + "' != '" + 0.0f + "'", float57 == 0.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder58);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder60);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder62);
        org.junit.Assert.assertTrue("'" + type63 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type63.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertTrue("'" + type64 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type64.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder65);
        org.junit.Assert.assertNotNull(parseField66);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder67);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder69);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder71);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder73);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder75);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder77);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder79);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder81);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder83);
    }

    @Test
    public void test15112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15112");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery13 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder12.zeroTermsQuery(zeroTermsQuery13);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder12.fuzzyRewrite("{\n  \"multiMatch\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzyRewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.Operator operator17 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder16.operator(operator17);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder18.cutoffFrequency((float) (short) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder20.maxExpansions((int) (byte) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder22.cutoffFrequency((float) 1L);
        java.lang.String[] strArray32 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder33 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray32);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder35 = multiMatchQueryBuilder33.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder37 = multiMatchQueryBuilder35.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder39 = multiMatchQueryBuilder35.field("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder41 = multiMatchQueryBuilder35.boost(0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder43 = multiMatchQueryBuilder41.analyzer("multi_match");
        float float44 = multiMatchQueryBuilder43.boost();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder46 = multiMatchQueryBuilder43.tieBreaker((float) '#');
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder48 = multiMatchQueryBuilder46.cutoffFrequency((float) (byte) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder50 = multiMatchQueryBuilder48.tieBreaker((float) (byte) 0);
        java.lang.String str51 = null; // flaky: multiMatchQueryBuilder50.toString();
        boolean boolean52 = multiMatchQueryBuilder24.equals((java.lang.Object) str51);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder35);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder37);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder39);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder41);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder43);
        org.junit.Assert.assertTrue("'" + float44 + "' != '" + 0.0f + "'", float44 == 0.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder46);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder48);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder50);
// flaky:         org.junit.Assert.assertEquals("'" + str51 + "' != '" + "{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\", \"\" ],\n    \"analyzer\" : \"multi_match\",\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 0.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 0.0\n  }\n}" + "'", str51, "{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\", \"\" ],\n    \"analyzer\" : \"multi_match\",\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 0.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 0.0\n  }\n}");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
    }

    @Test
    public void test15113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15113");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder10.field("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder10.boost(0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder16.analyzer("multi_match");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder18.useDisMax(true);
        java.lang.String str21 = multiMatchQueryBuilder18.getName();
        java.lang.Object obj22 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder18.type(obj22);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder23.boost((float) (-1));
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery26 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder25.zeroTermsQuery(zeroTermsQuery26);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = multiMatchQueryBuilder25.prefixLength(1);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "multi_match" + "'", str21, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder29);
    }

    @Test
    public void test15114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15114");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder12.tieBreaker((float) '#');
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder14.tieBreaker((float) ' ');
        java.lang.String[] strArray24 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray24);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder25.fuzzyRewrite("");
        java.lang.String[] strArray35 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder36 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray35);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder38 = multiMatchQueryBuilder36.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder40 = multiMatchQueryBuilder38.tieBreaker(0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type41 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX;
        float float42 = type41.tieBreaker();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder43 = multiMatchQueryBuilder38.type(type41);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder45 = multiMatchQueryBuilder38.cutoffFrequency((float) 0L);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder47 = multiMatchQueryBuilder38.lenient(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type48 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        org.elasticsearch.index.search.MatchQuery.Type type49 = type48.matchQueryType();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder50 = multiMatchQueryBuilder38.type(type48);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder51 = multiMatchQueryBuilder25.fuzziness((java.lang.Object) type48);
        org.elasticsearch.index.query.Operator operator52 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder53 = multiMatchQueryBuilder51.operator(operator52);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder55 = multiMatchQueryBuilder53.slop((int) (byte) -1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder57 = multiMatchQueryBuilder55.analyzer("{\n  \"multiMatch\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"type\" : \"phrase_prefix\",\n    \"maxExpansions\" : 10,\n    \"fuzzyRewrite\" : \"\",\n    \"tieBreaker\" : 0.0,\n    \"cutoffFrequency\" : 0.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder60 = multiMatchQueryBuilder57.field("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"analyzer\" : \"multi_match\",\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}", (float) 10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder62 = multiMatchQueryBuilder60.cutoffFrequency(1.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder64 = multiMatchQueryBuilder60.queryName("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\", \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"analyzer\\\" : \\\"multi_match\\\",\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}^10.0\", \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\" ],\n    \"max_expansions\" : 10,\n    \"fuzzy_rewrite\" : \"\",\n    \"lenient\" : false,\n    \"boost\" : 1.0,\n    \"_name\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\"\n  }\n}");
        boolean boolean65 = multiMatchQueryBuilder16.equals((java.lang.Object) multiMatchQueryBuilder60);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder67 = multiMatchQueryBuilder60.useDisMax(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder69 = multiMatchQueryBuilder60.maxExpansions(0);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder38);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder40);
        org.junit.Assert.assertTrue("'" + type41 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX + "'", type41.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX));
        org.junit.Assert.assertTrue("'" + float42 + "' != '" + 0.0f + "'", float42 == 0.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder43);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder45);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder47);
        org.junit.Assert.assertTrue("'" + type48 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type48.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertTrue("'" + type49 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type49.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder50);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder51);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder53);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder55);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder57);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder60);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder62);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder67);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder69);
    }

    @Test
    public void test15115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15115");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder12.lenient(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder14.rewrite("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery17 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder16.zeroTermsQuery(zeroTermsQuery17);
        java.lang.Object obj19 = null;
        boolean boolean20 = multiMatchQueryBuilder18.equals(obj19);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder18.lenient(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder18.slop(1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder18.lenient(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type27 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = multiMatchQueryBuilder18.type(type27);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder30 = multiMatchQueryBuilder18.minimumShouldMatch("{\n  \"multiMatch\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"analyzer\" : \"multi_match\",\n    \"fuzzyRewrite\" : \"hi!\",\n    \"boost\" : 1.0,\n    \"Name\" : \"hi!\"\n  }\n}");
        java.lang.String[] strArray38 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder39 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray38);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder41 = multiMatchQueryBuilder39.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder43 = multiMatchQueryBuilder41.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder45 = multiMatchQueryBuilder41.field("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder47 = multiMatchQueryBuilder41.boost(0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder49 = multiMatchQueryBuilder47.analyzer("multi_match");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder51 = multiMatchQueryBuilder49.maxExpansions(1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type52 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS;
        org.elasticsearch.index.search.MatchQuery.Type type53 = type52.matchQueryType();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder54 = multiMatchQueryBuilder49.type(type52);
        org.elasticsearch.index.search.MatchQuery.Type type55 = type52.matchQueryType();
        org.elasticsearch.index.search.MatchQuery.Type type56 = type52.matchQueryType();
        org.elasticsearch.common.ParseField parseField57 = type52.parseField();
        org.elasticsearch.common.ParseField parseField58 = type52.parseField();
        org.elasticsearch.index.search.MatchQuery.Type type59 = type52.matchQueryType();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder60 = multiMatchQueryBuilder18.type(type52);
        org.elasticsearch.index.query.QueryValidationException queryValidationException61 = multiMatchQueryBuilder18.validate();
        org.elasticsearch.index.query.QueryValidationException queryValidationException62 = multiMatchQueryBuilder18.validate();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder28);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder30);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder41);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder43);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder45);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder47);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder49);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder51);
        org.junit.Assert.assertTrue("'" + type52 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS + "'", type52.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS));
        org.junit.Assert.assertTrue("'" + type53 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type53.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder54);
        org.junit.Assert.assertTrue("'" + type55 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type55.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertTrue("'" + type56 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type56.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertNotNull(parseField57);
        org.junit.Assert.assertNotNull(parseField58);
        org.junit.Assert.assertTrue("'" + type59 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type59.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder60);
        org.junit.Assert.assertNull(queryValidationException61);
        org.junit.Assert.assertNull(queryValidationException62);
    }

    @Test
    public void test15116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15116");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.fuzzyRewrite("hi!");
        java.lang.String str13 = multiMatchQueryBuilder10.getName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder10.analyzer("multi_match");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder15.field("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\", \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"analyzer\\\" : \\\"multi_match\\\",\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}^10.0\", \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\" ],\n    \"fuzzy_rewrite\" : \"\",\n    \"boost\" : 1.0,\n    \"_name\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\"\n  }\n}");
        java.lang.String[] strArray25 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray25);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = multiMatchQueryBuilder26.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder30 = multiMatchQueryBuilder28.fuzzyRewrite("hi!");
        java.lang.String str31 = multiMatchQueryBuilder28.getName();
        float float32 = multiMatchQueryBuilder28.boost();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder34 = multiMatchQueryBuilder28.lenient(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder36 = multiMatchQueryBuilder28.slop((int) (short) -1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type37 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX;
        org.elasticsearch.index.search.MatchQuery.Type type38 = type37.matchQueryType();
        org.elasticsearch.index.search.MatchQuery.Type type39 = type37.matchQueryType();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder40 = multiMatchQueryBuilder28.type(type37);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder42 = multiMatchQueryBuilder28.queryName("multi_match");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder44 = multiMatchQueryBuilder42.minimumShouldMatch("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder47 = multiMatchQueryBuilder44.field("", (float) 10L);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder49 = multiMatchQueryBuilder47.boost((float) (short) 10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder51 = multiMatchQueryBuilder49.prefixLength((int) '#');
        java.lang.String[] strArray53 = new java.lang.String[] { "{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"analyzer\" : \"hi!\",\n    \"minimum_should_match\" : \"{\\n  \\\"multiMatch\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"type\\\" : \\\"phrase_prefix\\\",\\n    \\\"maxExpansions\\\" : 10,\\n    \\\"fuzzyRewrite\\\" : \\\"\\\",\\n    \\\"tieBreaker\\\" : 0.0,\\n    \\\"cutoffFrequency\\\" : 0.0,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"lenient\" : false,\n    \"cutoff_frequency\" : -1.0,\n    \"boost\" : 1.0\n  }\n}" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder54 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) multiMatchQueryBuilder51, strArray53);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder55 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) multiMatchQueryBuilder15, strArray53);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type56 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE;
        org.elasticsearch.index.search.MatchQuery.Type type57 = type56.matchQueryType();
        float float58 = type56.tieBreaker();
        org.elasticsearch.common.ParseField parseField59 = type56.parseField();
        org.elasticsearch.index.search.MatchQuery.Type type60 = type56.matchQueryType();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder61 = multiMatchQueryBuilder15.type(type56);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "multi_match" + "'", str13, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder28);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "multi_match" + "'", str31, "multi_match");
        org.junit.Assert.assertTrue("'" + float32 + "' != '" + 1.0f + "'", float32 == 1.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder34);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder36);
        org.junit.Assert.assertTrue("'" + type37 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX + "'", type37.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX));
        org.junit.Assert.assertTrue("'" + type38 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX + "'", type38.equals(org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX));
        org.junit.Assert.assertTrue("'" + type39 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX + "'", type39.equals(org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder40);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder42);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder44);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder47);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder49);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder51);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertTrue("'" + type56 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE + "'", type56.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE));
        org.junit.Assert.assertTrue("'" + type57 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.PHRASE + "'", type57.equals(org.elasticsearch.index.search.MatchQuery.Type.PHRASE));
        org.junit.Assert.assertTrue("'" + float58 + "' != '" + 0.0f + "'", float58 == 0.0f);
        org.junit.Assert.assertNotNull(parseField59);
        org.junit.Assert.assertTrue("'" + type60 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.PHRASE + "'", type60.equals(org.elasticsearch.index.search.MatchQuery.Type.PHRASE));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder61);
    }

    @Test
    public void test15117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15117");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder12.lenient(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder14.rewrite("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery17 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder16.zeroTermsQuery(zeroTermsQuery17);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder18.field("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"slop\" : -1,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        float float21 = multiMatchQueryBuilder20.boost();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder20.prefixLength(0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder23.cutoffFrequency(97.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder23.analyzer("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"type\" : \"cross_fields\",\n    \"minimum_should_match\" : \"multi_match\",\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"use_dis_max\" : false,\n    \"boost\" : -1.0,\n    \"_name\" : \"hi!\"\n  }\n}");
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertTrue("'" + float21 + "' != '" + 1.0f + "'", float21 == 1.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
    }

    @Test
    public void test15118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15118");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder8.queryName("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.Operator operator13 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder12.operator(operator13);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder12.field("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"analyzer\" : \"multi_match\",\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}", 10.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder17.field("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery20 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder17.zeroTermsQuery(zeroTermsQuery20);
        org.elasticsearch.index.query.Operator operator22 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder21.operator(operator22);
        java.lang.String str24 = multiMatchQueryBuilder23.getWriteableName();
        org.elasticsearch.index.query.Operator operator25 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder23.operator(operator25);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = multiMatchQueryBuilder23.maxExpansions(10);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery29 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder30 = multiMatchQueryBuilder23.zeroTermsQuery(zeroTermsQuery29);
        java.lang.String[] strArray38 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder39 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray38);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder41 = multiMatchQueryBuilder39.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder43 = multiMatchQueryBuilder41.fuzzyRewrite("hi!");
        java.lang.String str44 = multiMatchQueryBuilder41.getName();
        float float45 = multiMatchQueryBuilder41.boost();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder47 = multiMatchQueryBuilder41.lenient(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder49 = multiMatchQueryBuilder41.queryName("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder51 = multiMatchQueryBuilder41.cutoffFrequency((float) (-1L));
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type52 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX;
        float float53 = type52.tieBreaker();
        boolean boolean54 = multiMatchQueryBuilder51.equals((java.lang.Object) type52);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder55 = multiMatchQueryBuilder23.type(type52);
        float float56 = type52.tieBreaker();
        org.elasticsearch.common.ParseField parseField57 = type52.parseField();
        org.elasticsearch.common.ParseField parseField58 = type52.parseField();
        org.elasticsearch.index.search.MatchQuery.Type type59 = type52.matchQueryType();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "multi_match" + "'", str24, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder28);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder30);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder41);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "multi_match" + "'", str44, "multi_match");
        org.junit.Assert.assertTrue("'" + float45 + "' != '" + 1.0f + "'", float45 == 1.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder47);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder49);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder51);
        org.junit.Assert.assertTrue("'" + type52 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX + "'", type52.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX));
        org.junit.Assert.assertTrue("'" + float53 + "' != '" + 0.0f + "'", float53 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder55);
        org.junit.Assert.assertTrue("'" + float56 + "' != '" + 0.0f + "'", float56 == 0.0f);
        org.junit.Assert.assertNotNull(parseField57);
        org.junit.Assert.assertNotNull(parseField58);
        org.junit.Assert.assertTrue("'" + type59 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX + "'", type59.equals(org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX));
    }

    @Test
    public void test15119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15119");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.tieBreaker(0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder10.cutoffFrequency((float) 0L);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder10.minimumShouldMatch("{\n  \"multiMatch\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzyRewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String[] strArray24 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray24);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder25.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = multiMatchQueryBuilder27.tieBreaker(0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type30 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX;
        float float31 = type30.tieBreaker();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder32 = multiMatchQueryBuilder27.type(type30);
        float float33 = type30.tieBreaker();
        org.elasticsearch.common.ParseField parseField34 = type30.parseField();
        float float35 = type30.tieBreaker();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder36 = multiMatchQueryBuilder10.type(type30);
        org.elasticsearch.index.query.Operator operator37 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder38 = multiMatchQueryBuilder36.operator(operator37);
        java.lang.String[] strArray46 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder47 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray46);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder49 = multiMatchQueryBuilder47.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder51 = multiMatchQueryBuilder49.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery52 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder53 = multiMatchQueryBuilder51.zeroTermsQuery(zeroTermsQuery52);
        java.lang.String str54 = null; // flaky: multiMatchQueryBuilder51.toString();
        java.lang.String str55 = multiMatchQueryBuilder51.queryName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder57 = multiMatchQueryBuilder51.queryName("");
        java.lang.String str58 = multiMatchQueryBuilder51.getName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder61 = multiMatchQueryBuilder51.field("", (float) ' ');
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder63 = multiMatchQueryBuilder51.prefixLength((-1));
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder65 = multiMatchQueryBuilder63.minimumShouldMatch("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"prefix_length\" : -1,\n    \"rewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"multi_match^0.0\\\" ],\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"lenient\\\" : true,\\n    \\\"boost\\\" : 0.0\\n  }\\n}\",\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"lenient\" : false,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.QueryValidationException queryValidationException66 = multiMatchQueryBuilder63.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder67 = null; // flaky: multiMatchQueryBuilder38.fuzziness((java.lang.Object) multiMatchQueryBuilder63);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder69 = multiMatchQueryBuilder38.tieBreaker((float) 'a');
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder29);
        org.junit.Assert.assertTrue("'" + type30 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX + "'", type30.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX));
        org.junit.Assert.assertTrue("'" + float31 + "' != '" + 0.0f + "'", float31 == 0.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder32);
        org.junit.Assert.assertTrue("'" + float33 + "' != '" + 0.0f + "'", float33 == 0.0f);
        org.junit.Assert.assertNotNull(parseField34);
        org.junit.Assert.assertTrue("'" + float35 + "' != '" + 0.0f + "'", float35 == 0.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder36);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder38);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder49);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder51);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder53);
// flaky:         org.junit.Assert.assertEquals("'" + str54 + "' != '" + "{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}" + "'", str54, "{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNull(str55);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "multi_match" + "'", str58, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder61);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder63);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder65);
        org.junit.Assert.assertNull(queryValidationException66);
// flaky:         org.junit.Assert.assertNotNull(multiMatchQueryBuilder67);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder69);
    }

    @Test
    public void test15120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15120");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.tieBreaker(0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type13 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX;
        float float14 = type13.tieBreaker();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder10.type(type13);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder10.cutoffFrequency((float) 0L);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder10.maxExpansions(10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder10.analyzer("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"slop\" : -1,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder10.analyzer("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"analyzer\" : \"multi_match\",\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder10.lenient(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder10.prefixLength((int) (short) 100);
        java.lang.String str28 = null; // flaky: multiMatchQueryBuilder27.toString();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder30 = multiMatchQueryBuilder27.boost((float) (short) 0);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertTrue("'" + type13 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX + "'", type13.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX));
        org.junit.Assert.assertTrue("'" + float14 + "' != '" + 0.0f + "'", float14 == 0.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
// flaky:         org.junit.Assert.assertEquals("'" + str28 + "' != '" + "{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"type\" : \"phrase_prefix\",\n    \"analyzer\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"analyzer\\\" : \\\"multi_match\\\",\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"prefix_length\" : 100,\n    \"max_expansions\" : 10,\n    \"fuzzy_rewrite\" : \"\",\n    \"tie_breaker\" : 0.0,\n    \"lenient\" : false,\n    \"cutoff_frequency\" : 0.0,\n    \"boost\" : 1.0\n  }\n}" + "'", str28, "{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"type\" : \"phrase_prefix\",\n    \"analyzer\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"analyzer\\\" : \\\"multi_match\\\",\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"prefix_length\" : 100,\n    \"max_expansions\" : 10,\n    \"fuzzy_rewrite\" : \"\",\n    \"tie_breaker\" : 0.0,\n    \"lenient\" : false,\n    \"cutoff_frequency\" : 0.0,\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder30);
    }

    @Test
    public void test15121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15121");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.tieBreaker(0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder10.useDisMax(true);
        float float15 = multiMatchQueryBuilder10.boost();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder10.queryName("{\n  \"multiMatch\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzyRewrite\" : \"\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder17.fuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : \"class org.elasticsearch.index.query.MultiMatchQueryBuilder$Type\",\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"rewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"lenient\\\" : true,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"use_dis_max\" : false,\n    \"boost\" : 1.0,\n    \"_name\" : \"{\\n  \\\"multiMatch\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"fuzzyRewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\"\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder17.field("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzziness\" : \"BEST_FIELDS\",\n    \"fuzzy_rewrite\" : \"\",\n    \"boost\" : 1.0\n  }\n}", (float) '#');
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder17.prefixLength((int) (byte) 10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder17.analyzer("{\n  \"multiMatch\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"analyzer\" : \"{\\n  \\\"multiMatch\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"fuzzyRewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"fuzziness\" : \"{\\n  \\\"MULTIMATCH\\\" : {\\n    \\\"QUERY\\\" : 0.0,\\n    \\\"FIELDS\\\" : [ \\\"HI!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"FUZZYREWRITE\\\" : \\\"\\\",\\n    \\\"BOOST\\\" : 1.0\\n  }\\n}\",\n    \"rewrite\" : \"multi_match\",\n    \"fuzzyRewrite\" : \"hi!\",\n    \"lenient\" : false,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = multiMatchQueryBuilder17.tieBreaker((float) 10L);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = multiMatchQueryBuilder17.field("{\n  \"multiMatch\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\", \"{\\n  \\\"multiMatch\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"rewrite\\\" : \\\"multi_match\\\",\\n    \\\"fuzzyRewrite\\\" : \\\"hi!\\\",\\n    \\\"lenient\\\" : false,\\n    \\\"boost\\\" : 1.0\\n  }\\n}^-1.0\" ],\n    \"slop\" : -1,\n    \"prefixLength\" : 0,\n    \"fuzzyRewrite\" : \"hi!\",\n    \"useDisMax\" : false,\n    \"lenient\" : false,\n    \"cutoffFrequency\" : 0.0,\n    \"boost\" : 1.0\n  }\n}", (float) '#');
        org.elasticsearch.index.query.Operator operator32 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder33 = multiMatchQueryBuilder17.operator(operator32);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertTrue("'" + float15 + "' != '" + 1.0f + "'", float15 == 1.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder28);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder31);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder33);
    }

    @Test
    public void test15122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15122");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder8.queryName("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.Operator operator13 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder12.operator(operator13);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder12.field("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"analyzer\" : \"multi_match\",\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}", 10.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder12.field("{\n  \"multiMatch\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzyRewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}", 0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder20.prefixLength((int) ' ');
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder20.rewrite("{\n  \"multi_match\" : {\n    \"query\" : 100,\n    \"fields\" : [ \"{\\n  \\\"multiMatch\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"fuzzyRewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\" ],\n    \"cutoff_frequency\" : 0.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder20.tieBreaker((float) (short) -1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = multiMatchQueryBuilder20.rewrite("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"analyzer\" : \"{\\n  \\\"multiMatch\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"fuzzyRewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"rewrite\" : \"multi_match\",\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"lenient\" : false,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder30 = multiMatchQueryBuilder28.maxExpansions((int) (short) -1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder32 = multiMatchQueryBuilder30.fuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\", \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"slop\\\" : -1,\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"lenient\\\" : true,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\" ],\n    \"slop\" : -1,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.Class<?> wildcardClass33 = multiMatchQueryBuilder30.getClass();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder28);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder30);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder32);
        org.junit.Assert.assertNotNull(wildcardClass33);
    }

    @Test
    public void test15123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15123");
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type0 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX;
        float float1 = type0.tieBreaker();
        float float2 = type0.tieBreaker();
        org.elasticsearch.index.search.MatchQuery.Type type3 = type0.matchQueryType();
        java.lang.String[] strArray11 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray11);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder12.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder12.queryName("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.Operator operator17 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder16.operator(operator17);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder18.lenient(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder20.maxExpansions((int) (short) 1);
        java.lang.String[] strArray30 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray30);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder32 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) multiMatchQueryBuilder20, strArray30);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder33 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) type0, strArray30);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder35 = multiMatchQueryBuilder33.boost(0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder37 = multiMatchQueryBuilder35.useDisMax(false);
        org.junit.Assert.assertTrue("'" + type0 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX + "'", type0.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX));
        org.junit.Assert.assertTrue("'" + float1 + "' != '" + 0.0f + "'", float1 == 0.0f);
        org.junit.Assert.assertTrue("'" + float2 + "' != '" + 0.0f + "'", float2 == 0.0f);
        org.junit.Assert.assertTrue("'" + type3 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX + "'", type3.equals(org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX));
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder35);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder37);
    }

    @Test
    public void test15124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15124");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.fuzzyRewrite("hi!");
        java.lang.String str13 = multiMatchQueryBuilder10.getName();
        float float14 = multiMatchQueryBuilder10.boost();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder10.lenient(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder10.slop((int) (short) -1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type19 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX;
        org.elasticsearch.index.search.MatchQuery.Type type20 = type19.matchQueryType();
        org.elasticsearch.index.search.MatchQuery.Type type21 = type19.matchQueryType();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder10.type(type19);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder22.fuzzyRewrite("{\n  \"multiMatch\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzyRewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder24.fuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"slop\" : -1,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        float float27 = multiMatchQueryBuilder26.boost();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = multiMatchQueryBuilder26.fuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"analyzer\" : \"multi_match\",\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String str30 = multiMatchQueryBuilder26.getName();
        java.lang.String str31 = multiMatchQueryBuilder26.getWriteableName();
        java.lang.Class<?> wildcardClass32 = multiMatchQueryBuilder26.getClass();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "multi_match" + "'", str13, "multi_match");
        org.junit.Assert.assertTrue("'" + float14 + "' != '" + 1.0f + "'", float14 == 1.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertTrue("'" + type19 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX + "'", type19.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX));
        org.junit.Assert.assertTrue("'" + type20 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX + "'", type20.equals(org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX));
        org.junit.Assert.assertTrue("'" + type21 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX + "'", type21.equals(org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertTrue("'" + float27 + "' != '" + 1.0f + "'", float27 == 1.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "multi_match" + "'", str30, "multi_match");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "multi_match" + "'", str31, "multi_match");
        org.junit.Assert.assertNotNull(wildcardClass32);
    }

    @Test
    public void test15125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15125");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder10.field("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder10.boost(0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder16.analyzer("multi_match");
        float float19 = multiMatchQueryBuilder18.boost();
        org.elasticsearch.index.query.Operator operator20 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder18.operator(operator20);
        java.lang.String[] strArray29 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder30 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray29);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder32 = multiMatchQueryBuilder30.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder34 = multiMatchQueryBuilder32.fuzzyRewrite("hi!");
        java.lang.String str35 = multiMatchQueryBuilder32.getName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder37 = multiMatchQueryBuilder32.rewrite("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"slop\" : -1,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder39 = multiMatchQueryBuilder32.tieBreaker((float) '4');
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery40 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder41 = multiMatchQueryBuilder32.zeroTermsQuery(zeroTermsQuery40);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder43 = multiMatchQueryBuilder41.rewrite("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"max_expansions\" : 1,\n    \"minimum_should_match\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"fuzzy_rewrite\" : \"\",\n    \"lenient\" : true,\n    \"boost\" : 1.0,\n    \"_name\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\"\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder46 = multiMatchQueryBuilder43.field("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"slop\" : -1,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}", 10.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder48 = multiMatchQueryBuilder46.fuzzyRewrite("{\n  \"multiMatch\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\", \"\" ],\n    \"analyzer\" : \"multi_match\",\n    \"maxExpansions\" : 1,\n    \"fuzzyRewrite\" : \"hi!\",\n    \"tieBreaker\" : 0.0,\n    \"boost\" : 0.0\n  }\n}");
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder49 = null; // flaky: multiMatchQueryBuilder18.type((java.lang.Object) multiMatchQueryBuilder48);
// flaky:             org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchParseException; message: failed to parse [multi_match] query type [{?  \"multi_match\" : {?    \"query\" : 0.0,?    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\", \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"slop\\\" : -1,\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"lenient\\\" : true,\\n    \\\"boost\\\" : 1.0\\n  }\\n}^10.0\" ],?    \"rewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"max_expansions\\\" : 1,\\n    \\\"minimum_should_match\\\" : \\\"{\\\\n  \\\\\\\"multi_match\\\\\\\" : {\\\\n    \\\\\\\"query\\\\\\\" : 0.0,\\\\n    \\\\\\\"fields\\\\\\\" : [ \\\\\\\"hi!\\\\\\\", \\\\\\\"\\\\\\\", \\\\\\\"\\\\\\\", \\\\\\\"\\\\\\\", \\\\\\\"\\\\\\\", \\\\\\\"\\\\\\\" ],\\\\n    \\\\\\\"fuzzy_rewrite\\\\\\\" : \\\\\\\"hi!\\\\\\\",\\\\n    \\\\\\\"boost\\\\\\\" : 1.0\\\\n  }\\\\n}\\\",\\n    \\\"fuzzy_rewrite\\\" : \\\"\\\",\\n    \\\"lenient\\\" : true,\\n    \\\"boost\\\" : 1.0,\\n    \\\"_name\\\" : \\\"{\\\\n  \\\\\\\"multi_match\\\\\\\" : {\\\\n    \\\\\\\"query\\\\\\\" : 0.0,\\\\n    \\\\\\\"fields\\\\\\\" : [ \\\\\\\"hi!\\\\\\\", \\\\\\\"\\\\\\\", \\\\\\\"\\\\\\\", \\\\\\\"\\\\\\\", \\\\\\\"\\\\\\\", \\\\\\\"\\\\\\\" ],\\\\n    \\\\\\\"fuzzy_rewrite\\\\\\\" : \\\\\\\"hi!\\\\\\\",\\\\n    \\\\\\\"boost\\\\\\\" : 1.0\\\\n  }\\\\n}\\\"\\n  }\\n}\",?    \"fuzzy_rewrite\" : \"{\\n  \\\"multimatch\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"analyzer\\\" : \\\"multi_match\\\",\\n    \\\"maxexpansions\\\" : 1,\\n    \\\"fuzzyrewrite\\\" : \\\"hi!\\\",\\n    \\\"tiebreaker\\\" : 0.0,\\n    \\\"boost\\\" : 0.0\\n  }\\n}\",?    \"tie_breaker\" : 52.0,?    \"boost\" : 1.0?  }?}]. unknown type.");
        } catch (org.elasticsearch.ElasticsearchParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertTrue("'" + float19 + "' != '" + 0.0f + "'", float19 == 0.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder32);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "multi_match" + "'", str35, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder37);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder39);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder41);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder43);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder46);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder48);
    }

    @Test
    public void test15126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15126");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder8.queryName("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.Operator operator13 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder12.operator(operator13);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder14.lenient(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder16.maxExpansions((int) (short) 1);
        java.lang.String str19 = multiMatchQueryBuilder16.getWriteableName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder16.prefixLength(0);
        java.lang.String str22 = multiMatchQueryBuilder21.getWriteableName();
        java.lang.String[] strArray30 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray30);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder33 = multiMatchQueryBuilder31.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder35 = multiMatchQueryBuilder33.fuzzyRewrite("hi!");
        java.lang.String str36 = multiMatchQueryBuilder33.getName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder38 = multiMatchQueryBuilder33.rewrite("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"slop\" : -1,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder40 = multiMatchQueryBuilder33.tieBreaker((float) '4');
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder42 = multiMatchQueryBuilder33.minimumShouldMatch("");
        org.elasticsearch.index.query.Operator operator43 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder44 = multiMatchQueryBuilder42.operator(operator43);
        org.elasticsearch.index.query.Operator operator45 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder46 = multiMatchQueryBuilder44.operator(operator45);
        java.lang.Object obj47 = null;
        java.lang.String[] strArray55 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder56 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray55);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder58 = multiMatchQueryBuilder56.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder60 = multiMatchQueryBuilder58.tieBreaker(0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder62 = multiMatchQueryBuilder58.cutoffFrequency((float) 0L);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder64 = multiMatchQueryBuilder58.minimumShouldMatch("{\n  \"multiMatch\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzyRewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder66 = multiMatchQueryBuilder58.maxExpansions(0);
        org.elasticsearch.index.query.Operator operator67 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder68 = multiMatchQueryBuilder66.operator(operator67);
        java.lang.Object obj69 = null;
        java.lang.String[] strArray78 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder79 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray78);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder80 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 10.0f, strArray78);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder81 = new org.elasticsearch.index.query.MultiMatchQueryBuilder(obj69, strArray78);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder82 = multiMatchQueryBuilder68.fuzziness((java.lang.Object) strArray78);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder83 = new org.elasticsearch.index.query.MultiMatchQueryBuilder(obj47, strArray78);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder84 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) multiMatchQueryBuilder44, strArray78);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder85 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) multiMatchQueryBuilder21, strArray78);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder87 = multiMatchQueryBuilder21.field("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"^1.0\", \"^1.0\", \"^1.0\", \"^1.0\", \"^1.0\", \"^1.0\" ],\n    \"type\" : \"phrase_prefix\",\n    \"fuzzy_rewrite\" : \"\",\n    \"tie_breaker\" : 52.0,\n    \"cutoff_frequency\" : 0.0,\n    \"boost\" : 1.0,\n    \"_name\" : \"multi_match\"\n  }\n}");
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "multi_match" + "'", str19, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "multi_match" + "'", str22, "multi_match");
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder33);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "multi_match" + "'", str36, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder38);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder40);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder42);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder44);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder46);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder58);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder60);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder62);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder64);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder66);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder68);
        org.junit.Assert.assertNotNull(strArray78);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder82);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder87);
    }

    @Test
    public void test15127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15127");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery13 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder12.zeroTermsQuery(zeroTermsQuery13);
        java.lang.String str15 = multiMatchQueryBuilder14.getName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder14.slop((int) (byte) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder14.maxExpansions((int) (short) 10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder14.rewrite("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"type\" : \"phrase_prefix\",\n    \"analyzer\" : \"{\\n  \\\"multiMatch\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"type\\\" : \\\"phrase_prefix\\\",\\n    \\\"maxExpansions\\\" : 10,\\n    \\\"fuzzyRewrite\\\" : \\\"\\\",\\n    \\\"tieBreaker\\\" : 0.0,\\n    \\\"cutoffFrequency\\\" : 0.0,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 35.0,\n    \"boost\" : -1.0\n  }\n}");
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "multi_match" + "'", str15, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
    }

    @Test
    public void test15128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15128");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder12.lenient(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder12.prefixLength((int) (byte) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder12.minimumShouldMatch("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"rewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"slop\\\" : -1,\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"lenient\\\" : true,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 52.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.QueryValidationException queryValidationException19 = multiMatchQueryBuilder18.validate();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery20 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder18.zeroTermsQuery(zeroTermsQuery20);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder21.tieBreaker((float) ' ');
        org.elasticsearch.index.query.Operator operator24 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder21.operator(operator24);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNull(queryValidationException19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
    }

    @Test
    public void test15129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15129");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.fuzzyRewrite("hi!");
        java.lang.String str13 = multiMatchQueryBuilder10.getName();
        float float14 = multiMatchQueryBuilder10.boost();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder10.lenient(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder10.slop((int) (short) -1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type19 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX;
        org.elasticsearch.index.search.MatchQuery.Type type20 = type19.matchQueryType();
        org.elasticsearch.index.search.MatchQuery.Type type21 = type19.matchQueryType();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder10.type(type19);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder10.queryName("multi_match");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder24.minimumShouldMatch("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = multiMatchQueryBuilder26.field("", (float) 10L);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = multiMatchQueryBuilder29.boost((float) (short) 10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder33 = multiMatchQueryBuilder31.prefixLength((int) '#');
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder35 = multiMatchQueryBuilder31.tieBreaker((float) (short) 1);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "multi_match" + "'", str13, "multi_match");
        org.junit.Assert.assertTrue("'" + float14 + "' != '" + 1.0f + "'", float14 == 1.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertTrue("'" + type19 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX + "'", type19.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX));
        org.junit.Assert.assertTrue("'" + type20 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX + "'", type20.equals(org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX));
        org.junit.Assert.assertTrue("'" + type21 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX + "'", type21.equals(org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder29);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder31);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder33);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder35);
    }

    @Test
    public void test15130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15130");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery13 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder12.zeroTermsQuery(zeroTermsQuery13);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder12.maxExpansions((int) (byte) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder12.field("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"slop\" : -1,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder18.analyzer("");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery21 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder20.zeroTermsQuery(zeroTermsQuery21);
        java.lang.String str23 = null; // flaky: multiMatchQueryBuilder22.toString();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder22.tieBreaker(0.0f);
        java.lang.String str26 = multiMatchQueryBuilder25.getWriteableName();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
// flaky:         org.junit.Assert.assertEquals("'" + str23 + "' != '" + "{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\", \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"slop\\\" : -1,\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"lenient\\\" : true,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\" ],\n    \"analyzer\" : \"\",\n    \"max_expansions\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}" + "'", str23, "{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\", \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"slop\\\" : -1,\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"lenient\\\" : true,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\" ],\n    \"analyzer\" : \"\",\n    \"max_expansions\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "multi_match" + "'", str26, "multi_match");
    }

    @Test
    public void test15131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15131");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.tieBreaker(0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder10.cutoffFrequency((float) 0L);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder14.lenient(false);
        java.lang.String[] strArray24 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray24);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder25.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = multiMatchQueryBuilder27.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = multiMatchQueryBuilder29.lenient(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder33 = multiMatchQueryBuilder29.prefixLength((int) (byte) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder34 = null; // flaky: multiMatchQueryBuilder16.fuzziness((java.lang.Object) multiMatchQueryBuilder33);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder36 = multiMatchQueryBuilder33.maxExpansions((int) (short) 10);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder29);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder31);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder33);
// flaky:         org.junit.Assert.assertNotNull(multiMatchQueryBuilder34);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder36);
    }

    @Test
    public void test15132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15132");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.tieBreaker(0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type13 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX;
        float float14 = type13.tieBreaker();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder10.type(type13);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder15.field("multi_match", 0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder18.prefixLength((int) 'a');
        java.lang.String str21 = null; // flaky: multiMatchQueryBuilder20.toString();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder20.prefixLength((int) (short) 0);
        java.lang.String str24 = multiMatchQueryBuilder20.getWriteableName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder20.prefixLength((int) (byte) 1);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertTrue("'" + type13 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX + "'", type13.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX));
        org.junit.Assert.assertTrue("'" + float14 + "' != '" + 0.0f + "'", float14 == 0.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
// flaky:         org.junit.Assert.assertEquals("'" + str21 + "' != '" + "{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\", \"multi_match^0.0\" ],\n    \"type\" : \"phrase_prefix\",\n    \"prefix_length\" : 97,\n    \"fuzzy_rewrite\" : \"\",\n    \"tie_breaker\" : 0.0,\n    \"boost\" : 1.0\n  }\n}" + "'", str21, "{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\", \"multi_match^0.0\" ],\n    \"type\" : \"phrase_prefix\",\n    \"prefix_length\" : 97,\n    \"fuzzy_rewrite\" : \"\",\n    \"tie_breaker\" : 0.0,\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "multi_match" + "'", str24, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
    }

    @Test
    public void test15133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15133");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder12.tieBreaker((float) '#');
        float float15 = multiMatchQueryBuilder14.boost();
        org.elasticsearch.index.query.QueryShardContext queryShardContext16 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.lucene.search.Query query17 = multiMatchQueryBuilder14.toFilter(queryShardContext16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertTrue("'" + float15 + "' != '" + 1.0f + "'", float15 == 1.0f);
    }

    @Test
    public void test15134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15134");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.tieBreaker(0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder10.cutoffFrequency((float) 0L);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder14.analyzer("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder14.tieBreaker((float) '4');
        float float19 = multiMatchQueryBuilder14.boost();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder14.rewrite("{\n  \"multiMatch\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"analyzer\" : \"{\\n  \\\"multiMatch\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"fuzzyRewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"rewrite\" : \"multi_match\",\n    \"fuzzyRewrite\" : \"hi!\",\n    \"tieBreaker\" : 100.0,\n    \"lenient\" : false,\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertTrue("'" + float19 + "' != '" + 1.0f + "'", float19 == 1.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
    }

    @Test
    public void test15135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15135");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.tieBreaker(0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type13 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX;
        float float14 = type13.tieBreaker();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder10.type(type13);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder10.cutoffFrequency((float) 0L);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder10.lenient(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type20 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        org.elasticsearch.index.search.MatchQuery.Type type21 = type20.matchQueryType();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder10.type(type20);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder10.useDisMax(false);
        java.lang.String[] strArray32 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder33 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray32);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder35 = multiMatchQueryBuilder33.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder37 = multiMatchQueryBuilder35.fuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder39 = multiMatchQueryBuilder35.minimumShouldMatch("multi_match");
        boolean boolean40 = multiMatchQueryBuilder10.equals((java.lang.Object) "multi_match");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder42 = multiMatchQueryBuilder10.cutoffFrequency((float) ' ');
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder44 = multiMatchQueryBuilder42.lenient(false);
        org.elasticsearch.index.query.Operator operator45 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder46 = multiMatchQueryBuilder42.operator(operator45);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder48 = multiMatchQueryBuilder46.useDisMax(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder50 = multiMatchQueryBuilder46.tieBreaker((float) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder52 = multiMatchQueryBuilder50.analyzer("{\n  \"multiMatch\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\", \"{\\n  \\\"multiMatch\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"analyzer\\\" : \\\"multi_match\\\",\\n    \\\"maxExpansions\\\" : -1,\\n    \\\"fuzzyRewrite\\\" : \\\"hi!\\\",\\n    \\\"useDisMax\\\" : true,\\n    \\\"boost\\\" : 0.0\\n  }\\n}\" ],\n    \"fuzzyRewrite\" : \"hi!\",\n    \"useDisMax\" : true,\n    \"tieBreaker\" : 35.0,\n    \"cutoffFrequency\" : 1.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder54 = multiMatchQueryBuilder50.fuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"prefix_length\" : 32,\n    \"max_expansions\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"lenient\" : false,\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertTrue("'" + type13 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX + "'", type13.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX));
        org.junit.Assert.assertTrue("'" + float14 + "' != '" + 0.0f + "'", float14 == 0.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertTrue("'" + type20 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type20.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertTrue("'" + type21 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type21.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder35);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder37);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder42);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder44);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder46);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder48);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder50);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder52);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder54);
    }

    @Test
    public void test15136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15136");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        java.lang.String[] strArray18 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray18);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder19.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder21.tieBreaker(0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type24 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX;
        float float25 = type24.tieBreaker();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder21.type(type24);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = multiMatchQueryBuilder21.cutoffFrequency((float) 0L);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder30 = multiMatchQueryBuilder21.lenient(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type31 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        org.elasticsearch.index.search.MatchQuery.Type type32 = type31.matchQueryType();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder33 = multiMatchQueryBuilder21.type(type31);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder34 = multiMatchQueryBuilder8.fuzziness((java.lang.Object) type31);
        org.elasticsearch.index.query.Operator operator35 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder36 = multiMatchQueryBuilder34.operator(operator35);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder38 = multiMatchQueryBuilder36.slop((int) (byte) -1);
        java.lang.String[] strArray46 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder47 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray46);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder49 = multiMatchQueryBuilder47.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder51 = multiMatchQueryBuilder49.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder53 = multiMatchQueryBuilder51.lenient(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder55 = multiMatchQueryBuilder53.maxExpansions(0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder58 = multiMatchQueryBuilder53.field("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}", (float) (short) 1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type59 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX;
        float float60 = type59.tieBreaker();
        float float61 = type59.tieBreaker();
        org.elasticsearch.index.search.MatchQuery.Type type62 = type59.matchQueryType();
        java.lang.String[] strArray70 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder71 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray70);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder73 = multiMatchQueryBuilder71.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder75 = multiMatchQueryBuilder71.queryName("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.Operator operator76 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder77 = multiMatchQueryBuilder75.operator(operator76);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder79 = multiMatchQueryBuilder77.lenient(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder81 = multiMatchQueryBuilder79.maxExpansions((int) (short) 1);
        java.lang.String[] strArray89 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder90 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray89);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder91 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) multiMatchQueryBuilder79, strArray89);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder92 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) type59, strArray89);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder93 = multiMatchQueryBuilder58.type(type59);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder94 = multiMatchQueryBuilder38.type(type59);
        float float95 = type59.tieBreaker();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertTrue("'" + type24 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX + "'", type24.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX));
        org.junit.Assert.assertTrue("'" + float25 + "' != '" + 0.0f + "'", float25 == 0.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder28);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder30);
        org.junit.Assert.assertTrue("'" + type31 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type31.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertTrue("'" + type32 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type32.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder33);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder34);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder36);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder38);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder49);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder51);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder53);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder55);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder58);
        org.junit.Assert.assertTrue("'" + type59 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX + "'", type59.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX));
        org.junit.Assert.assertTrue("'" + float60 + "' != '" + 0.0f + "'", float60 == 0.0f);
        org.junit.Assert.assertTrue("'" + float61 + "' != '" + 0.0f + "'", float61 == 0.0f);
        org.junit.Assert.assertTrue("'" + type62 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX + "'", type62.equals(org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX));
        org.junit.Assert.assertNotNull(strArray70);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder73);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder75);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder77);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder79);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder81);
        org.junit.Assert.assertNotNull(strArray89);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder93);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder94);
        org.junit.Assert.assertTrue("'" + float95 + "' != '" + 0.0f + "'", float95 == 0.0f);
    }

    @Test
    public void test15137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15137");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.fuzzyRewrite("hi!");
        java.lang.String str13 = multiMatchQueryBuilder10.getName();
        float float14 = multiMatchQueryBuilder10.boost();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder10.lenient(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder10.slop((int) (short) -1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type19 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX;
        org.elasticsearch.index.search.MatchQuery.Type type20 = type19.matchQueryType();
        org.elasticsearch.index.search.MatchQuery.Type type21 = type19.matchQueryType();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder10.type(type19);
        org.elasticsearch.index.query.QueryValidationException queryValidationException23 = multiMatchQueryBuilder10.validate();
        org.elasticsearch.index.query.Operator operator24 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder10.operator(operator24);
        org.elasticsearch.index.query.QueryValidationException queryValidationException26 = multiMatchQueryBuilder25.validate();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass27 = queryValidationException26.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "multi_match" + "'", str13, "multi_match");
        org.junit.Assert.assertTrue("'" + float14 + "' != '" + 1.0f + "'", float14 == 1.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertTrue("'" + type19 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX + "'", type19.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX));
        org.junit.Assert.assertTrue("'" + type20 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX + "'", type20.equals(org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX));
        org.junit.Assert.assertTrue("'" + type21 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX + "'", type21.equals(org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNull(queryValidationException23);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
        org.junit.Assert.assertNull(queryValidationException26);
    }

    @Test
    public void test15138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15138");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.tieBreaker(0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder10.cutoffFrequency((float) 0L);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder14.analyzer("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder16.field("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"slop\" : -1,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder18.queryName("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"slop\" : -1,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder20.slop((int) (byte) 10);
        java.lang.String[] strArray30 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray30);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder33 = multiMatchQueryBuilder31.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder35 = multiMatchQueryBuilder33.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery36 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder37 = multiMatchQueryBuilder35.zeroTermsQuery(zeroTermsQuery36);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder39 = multiMatchQueryBuilder37.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder41 = multiMatchQueryBuilder39.queryName("hi!");
        java.lang.String str42 = multiMatchQueryBuilder39.queryName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder44 = multiMatchQueryBuilder39.analyzer("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"slop\" : -1,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String[] strArray53 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder54 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray53);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder55 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 10.0f, strArray53);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder56 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) multiMatchQueryBuilder44, strArray53);
        boolean boolean57 = multiMatchQueryBuilder22.equals((java.lang.Object) multiMatchQueryBuilder44);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder60 = multiMatchQueryBuilder44.field("multi_match", (float) '#');
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder62 = multiMatchQueryBuilder60.cutoffFrequency((float) (short) -1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder64 = multiMatchQueryBuilder60.slop((int) (byte) -1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder66 = multiMatchQueryBuilder60.lenient(false);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder33);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder35);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder37);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder39);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "hi!" + "'", str42, "hi!");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder44);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder60);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder62);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder64);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder66);
    }

    @Test
    public void test15139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15139");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.tieBreaker(0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type13 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX;
        float float14 = type13.tieBreaker();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder10.type(type13);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder10.cutoffFrequency((float) 0L);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder10.maxExpansions(10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder10.analyzer("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"slop\" : -1,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.Operator operator22 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder21.operator(operator22);
        java.lang.String str24 = multiMatchQueryBuilder21.getWriteableName();
        java.lang.String[] strArray32 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder33 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray32);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder35 = multiMatchQueryBuilder33.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder37 = multiMatchQueryBuilder35.tieBreaker(0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type38 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX;
        float float39 = type38.tieBreaker();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder40 = multiMatchQueryBuilder35.type(type38);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder42 = multiMatchQueryBuilder35.cutoffFrequency((float) 0L);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder44 = multiMatchQueryBuilder35.lenient(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type45 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        org.elasticsearch.index.search.MatchQuery.Type type46 = type45.matchQueryType();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder47 = multiMatchQueryBuilder35.type(type45);
        org.elasticsearch.index.search.MatchQuery.Type type48 = type45.matchQueryType();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder49 = multiMatchQueryBuilder21.type(type45);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder51 = multiMatchQueryBuilder49.rewrite("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"max_expansions\" : 1,\n    \"fuzzy_rewrite\" : \"\",\n    \"lenient\" : true,\n    \"boost\" : 1.0,\n    \"_name\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\"\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder53 = multiMatchQueryBuilder49.maxExpansions((int) (short) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder55 = multiMatchQueryBuilder53.fuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\", \"\" ],\n    \"analyzer\" : \"multi_match\",\n    \"max_expansions\" : -1,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"use_dis_max\" : true,\n    \"boost\" : 0.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder57 = multiMatchQueryBuilder55.prefixLength(0);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertTrue("'" + type13 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX + "'", type13.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX));
        org.junit.Assert.assertTrue("'" + float14 + "' != '" + 0.0f + "'", float14 == 0.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "multi_match" + "'", str24, "multi_match");
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder35);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder37);
        org.junit.Assert.assertTrue("'" + type38 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX + "'", type38.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX));
        org.junit.Assert.assertTrue("'" + float39 + "' != '" + 0.0f + "'", float39 == 0.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder40);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder42);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder44);
        org.junit.Assert.assertTrue("'" + type45 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type45.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertTrue("'" + type46 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type46.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder47);
        org.junit.Assert.assertTrue("'" + type48 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type48.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder49);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder51);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder53);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder55);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder57);
    }

    @Test
    public void test15140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15140");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.tieBreaker(0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type13 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX;
        float float14 = type13.tieBreaker();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder10.type(type13);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder10.cutoffFrequency((float) 0L);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder10.maxExpansions(10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder10.analyzer("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"slop\" : -1,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.common.xcontent.XContentBuilder.FieldCaseConversion fieldCaseConversion22 = org.elasticsearch.common.xcontent.XContentBuilder.FieldCaseConversion.UNDERSCORE;
        boolean boolean23 = multiMatchQueryBuilder10.equals((java.lang.Object) fieldCaseConversion22);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder10.lenient(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder10.fuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\", \"\" ],\n    \"analyzer\" : \"multi_match\",\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 0.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 0.0\n  }\n}");
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertTrue("'" + type13 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX + "'", type13.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX));
        org.junit.Assert.assertTrue("'" + float14 + "' != '" + 0.0f + "'", float14 == 0.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertTrue("'" + fieldCaseConversion22 + "' != '" + org.elasticsearch.common.xcontent.XContentBuilder.FieldCaseConversion.UNDERSCORE + "'", fieldCaseConversion22.equals(org.elasticsearch.common.xcontent.XContentBuilder.FieldCaseConversion.UNDERSCORE));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
    }

    @Test
    public void test15141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15141");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.tieBreaker(0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type13 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX;
        float float14 = type13.tieBreaker();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder10.type(type13);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder10.cutoffFrequency((float) 0L);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder10.lenient(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type20 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        org.elasticsearch.index.search.MatchQuery.Type type21 = type20.matchQueryType();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder10.type(type20);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder10.useDisMax(false);
        java.lang.String[] strArray32 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder33 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray32);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder35 = multiMatchQueryBuilder33.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder37 = multiMatchQueryBuilder35.fuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder39 = multiMatchQueryBuilder35.minimumShouldMatch("multi_match");
        boolean boolean40 = multiMatchQueryBuilder10.equals((java.lang.Object) "multi_match");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder42 = multiMatchQueryBuilder10.queryName("{\n  \"multiMatch\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"type\" : \"phrase_prefix\",\n    \"maxExpansions\" : 10,\n    \"fuzzyRewrite\" : \"\",\n    \"tieBreaker\" : 0.0,\n    \"cutoffFrequency\" : 0.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.Operator operator43 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder44 = multiMatchQueryBuilder10.operator(operator43);
        java.lang.String str45 = multiMatchQueryBuilder44.queryName();
        java.lang.String str46 = multiMatchQueryBuilder44.getWriteableName();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertTrue("'" + type13 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX + "'", type13.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX));
        org.junit.Assert.assertTrue("'" + float14 + "' != '" + 0.0f + "'", float14 == 0.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertTrue("'" + type20 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type20.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertTrue("'" + type21 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type21.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder35);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder37);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder42);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "{\n  \"multiMatch\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"type\" : \"phrase_prefix\",\n    \"maxExpansions\" : 10,\n    \"fuzzyRewrite\" : \"\",\n    \"tieBreaker\" : 0.0,\n    \"cutoffFrequency\" : 0.0,\n    \"boost\" : 1.0\n  }\n}" + "'", str45, "{\n  \"multiMatch\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"type\" : \"phrase_prefix\",\n    \"maxExpansions\" : 10,\n    \"fuzzyRewrite\" : \"\",\n    \"tieBreaker\" : 0.0,\n    \"cutoffFrequency\" : 0.0,\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "multi_match" + "'", str46, "multi_match");
    }

    @Test
    public void test15142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15142");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        java.lang.String[] strArray18 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray18);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder19.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder21.tieBreaker(0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type24 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX;
        float float25 = type24.tieBreaker();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder21.type(type24);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = multiMatchQueryBuilder21.cutoffFrequency((float) 0L);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder30 = multiMatchQueryBuilder21.lenient(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type31 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        org.elasticsearch.index.search.MatchQuery.Type type32 = type31.matchQueryType();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder33 = multiMatchQueryBuilder21.type(type31);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder34 = multiMatchQueryBuilder8.fuzziness((java.lang.Object) type31);
        org.elasticsearch.index.query.Operator operator35 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder36 = multiMatchQueryBuilder34.operator(operator35);
        java.lang.String[] strArray44 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder45 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray44);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder47 = multiMatchQueryBuilder45.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder49 = multiMatchQueryBuilder47.fuzzyRewrite("hi!");
        java.lang.String str50 = multiMatchQueryBuilder47.getName();
        float float51 = multiMatchQueryBuilder47.boost();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder53 = multiMatchQueryBuilder47.lenient(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder55 = multiMatchQueryBuilder47.slop((int) (short) -1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type56 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX;
        org.elasticsearch.index.search.MatchQuery.Type type57 = type56.matchQueryType();
        org.elasticsearch.index.search.MatchQuery.Type type58 = type56.matchQueryType();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder59 = multiMatchQueryBuilder47.type(type56);
        org.elasticsearch.index.search.MatchQuery.Type type60 = type56.matchQueryType();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder61 = multiMatchQueryBuilder36.fuzziness((java.lang.Object) type60);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder63 = multiMatchQueryBuilder61.boost((float) 'a');
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder65 = multiMatchQueryBuilder61.fuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\", \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"slop\\\" : -1,\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"lenient\\\" : true,\\n    \\\"boost\\\" : 1.0\\n  }\\n}^0.0\" ],\n    \"analyzer\" : \"multi_match\",\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0,\n    \"_name\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\"\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder67 = multiMatchQueryBuilder61.boost((float) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder69 = multiMatchQueryBuilder67.queryName("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\", \"\", \"{\\n  \\\"multiMatch\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"fuzzyRewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}^10.0\" ],\n    \"analyzer\" : \"multi_match\",\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 0.0\n  }\n}");
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder70 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params71 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder72 = multiMatchQueryBuilder67.toXContent(xContentBuilder70, params71);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertTrue("'" + type24 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX + "'", type24.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX));
        org.junit.Assert.assertTrue("'" + float25 + "' != '" + 0.0f + "'", float25 == 0.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder28);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder30);
        org.junit.Assert.assertTrue("'" + type31 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type31.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertTrue("'" + type32 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type32.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder33);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder34);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder36);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder47);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "multi_match" + "'", str50, "multi_match");
        org.junit.Assert.assertTrue("'" + float51 + "' != '" + 1.0f + "'", float51 == 1.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder53);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder55);
        org.junit.Assert.assertTrue("'" + type56 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX + "'", type56.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX));
        org.junit.Assert.assertTrue("'" + type57 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX + "'", type57.equals(org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX));
        org.junit.Assert.assertTrue("'" + type58 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX + "'", type58.equals(org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder59);
        org.junit.Assert.assertTrue("'" + type60 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX + "'", type60.equals(org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder61);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder63);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder65);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder67);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder69);
    }

    @Test
    public void test15143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15143");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery13 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder12.zeroTermsQuery(zeroTermsQuery13);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder14.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder16.queryName("hi!");
        java.lang.String str19 = multiMatchQueryBuilder16.queryName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder16.analyzer("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"slop\" : -1,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder16.slop((int) (byte) 1);
        org.elasticsearch.index.query.QueryValidationException queryValidationException24 = multiMatchQueryBuilder16.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder16.useDisMax(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = multiMatchQueryBuilder26.analyzer("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"analyzer\" : \"\",\n    \"fuzzy_rewrite\" : \"\",\n    \"tie_breaker\" : 52.0,\n    \"cutoff_frequency\" : 0.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder30 = multiMatchQueryBuilder26.cutoffFrequency((float) (short) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder32 = multiMatchQueryBuilder30.field("{\n  \"multiMatch\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"analyzer\" : \"multi_match\",\n    \"fuzzyRewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.Operator operator33 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder34 = multiMatchQueryBuilder30.operator(operator33);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNull(queryValidationException24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder28);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder30);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder32);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder34);
    }

    @Test
    public void test15144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15144");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder8.queryName("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.Operator operator13 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder12.operator(operator13);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder14.lenient(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder16.maxExpansions((int) (short) 1);
        java.lang.String[] strArray26 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray26);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) multiMatchQueryBuilder16, strArray26);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder30 = multiMatchQueryBuilder16.queryName("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder32 = multiMatchQueryBuilder16.analyzer("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\", \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"analyzer\\\" : \\\"multi_match\\\",\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}^10.0\", \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\" ],\n    \"fuzzy_rewrite\" : \"\",\n    \"boost\" : 1.0,\n    \"_name\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\"\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder34 = multiMatchQueryBuilder16.minimumShouldMatch("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"prefix_length\" : 100,\n    \"minimum_should_match\" : \"\",\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0,\n    \"_name\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\"\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder37 = multiMatchQueryBuilder34.field("{\n  \"multiMatch\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\", \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"analyzer\\\" : \\\"multi_match\\\",\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}^10.0\" ],\n    \"fuzzyRewrite\" : \"\",\n    \"boost\" : 1.0,\n    \"Name\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\"\n  }\n}", (float) 1);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery38 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder39 = multiMatchQueryBuilder34.zeroTermsQuery(zeroTermsQuery38);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder41 = multiMatchQueryBuilder34.lenient(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder43 = multiMatchQueryBuilder41.minimumShouldMatch("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"type\" : \"best_fields\",\n    \"slop\" : -1,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : -1.0,\n    \"_name\" : \"multi_match\"\n  }\n}");
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder30);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder32);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder34);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder37);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder39);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder41);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder43);
    }

    @Test
    public void test15145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15145");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.fuzzyRewrite("hi!");
        java.lang.String str13 = multiMatchQueryBuilder10.getName();
        float float14 = multiMatchQueryBuilder10.boost();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder10.lenient(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder10.slop((int) (short) -1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type19 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX;
        org.elasticsearch.index.search.MatchQuery.Type type20 = type19.matchQueryType();
        org.elasticsearch.index.search.MatchQuery.Type type21 = type19.matchQueryType();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder10.type(type19);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder22.fuzzyRewrite("{\n  \"multiMatch\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzyRewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder24.cutoffFrequency((float) '#');
        java.lang.String str27 = multiMatchQueryBuilder24.queryName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = multiMatchQueryBuilder24.cutoffFrequency((float) (short) 1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = multiMatchQueryBuilder29.fuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"analyzer\" : \"hi!\",\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0,\n    \"_name\" : \"hi!\"\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder33 = multiMatchQueryBuilder31.lenient(false);
        java.lang.String str34 = multiMatchQueryBuilder31.getWriteableName();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "multi_match" + "'", str13, "multi_match");
        org.junit.Assert.assertTrue("'" + float14 + "' != '" + 1.0f + "'", float14 == 1.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertTrue("'" + type19 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX + "'", type19.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX));
        org.junit.Assert.assertTrue("'" + type20 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX + "'", type20.equals(org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX));
        org.junit.Assert.assertTrue("'" + type21 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX + "'", type21.equals(org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder29);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder31);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "multi_match" + "'", str34, "multi_match");
    }

    @Test
    public void test15146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15146");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder12.maxExpansions(1);
        boolean boolean16 = multiMatchQueryBuilder12.equals((java.lang.Object) '#');
        java.lang.String str17 = multiMatchQueryBuilder12.getName();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery18 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder12.zeroTermsQuery(zeroTermsQuery18);
        java.lang.String str20 = multiMatchQueryBuilder19.getName();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "multi_match" + "'", str17, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "multi_match" + "'", str20, "multi_match");
    }

    @Test
    public void test15147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15147");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder12.lenient(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder12.prefixLength((int) (byte) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder16.boost((float) 1);
        java.lang.String[] strArray26 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray26);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = multiMatchQueryBuilder27.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = multiMatchQueryBuilder29.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder33 = multiMatchQueryBuilder31.tieBreaker((float) '#');
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder35 = multiMatchQueryBuilder33.boost((float) 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder44 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray43);
        java.lang.Object obj45 = null;
        java.lang.String[] strArray54 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder55 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray54);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder56 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 10.0f, strArray54);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder57 = new org.elasticsearch.index.query.MultiMatchQueryBuilder(obj45, strArray54);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder58 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray54);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder59 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) multiMatchQueryBuilder33, strArray54);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder60 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 1, strArray54);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder62 = multiMatchQueryBuilder60.cutoffFrequency(0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder64 = multiMatchQueryBuilder62.lenient(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder66 = multiMatchQueryBuilder62.boost((float) (short) -1);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery67 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder68 = multiMatchQueryBuilder62.zeroTermsQuery(zeroTermsQuery67);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder70 = multiMatchQueryBuilder68.useDisMax(true);
        org.elasticsearch.common.io.stream.StreamInput streamInput71 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder72 = multiMatchQueryBuilder68.readFrom(streamInput71);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder29);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder31);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder33);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder35);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder62);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder64);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder66);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder68);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder70);
    }

    @Test
    public void test15148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15148");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery13 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder12.zeroTermsQuery(zeroTermsQuery13);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder12.maxExpansions((int) (byte) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder12.lenient(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder18.analyzer("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"analyzer\" : \"{\\n  \\\"multiMatch\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"rewrite\\\" : \\\"multi_match\\\",\\n    \\\"fuzzyRewrite\\\" : \\\"hi!\\\",\\n    \\\"lenient\\\" : false,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder18.rewrite("multi_match");
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type23 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE;
        org.elasticsearch.common.ParseField parseField24 = type23.parseField();
        org.elasticsearch.index.search.MatchQuery.Type type25 = type23.matchQueryType();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder18.type(type23);
        org.elasticsearch.index.query.Operator operator27 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = multiMatchQueryBuilder18.operator(operator27);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder30 = multiMatchQueryBuilder28.rewrite("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 1.0,\n    \"boost\" : 10.0\n  }\n}");
        java.lang.String str31 = multiMatchQueryBuilder28.getWriteableName();
        float float32 = multiMatchQueryBuilder28.boost();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertTrue("'" + type23 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE + "'", type23.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE));
        org.junit.Assert.assertNotNull(parseField24);
        org.junit.Assert.assertTrue("'" + type25 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.PHRASE + "'", type25.equals(org.elasticsearch.index.search.MatchQuery.Type.PHRASE));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder28);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "multi_match" + "'", str31, "multi_match");
        org.junit.Assert.assertTrue("'" + float32 + "' != '" + 1.0f + "'", float32 == 1.0f);
    }

    @Test
    public void test15149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15149");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder10.field("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder10.boost(0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder10.field("");
        java.lang.String[] strArray26 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray26);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = multiMatchQueryBuilder27.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = multiMatchQueryBuilder29.tieBreaker(0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type32 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX;
        float float33 = type32.tieBreaker();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder34 = multiMatchQueryBuilder29.type(type32);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder36 = multiMatchQueryBuilder29.cutoffFrequency((float) 0L);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder38 = multiMatchQueryBuilder29.queryName("multi_match");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder41 = multiMatchQueryBuilder38.field("", (float) 1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder42 = null; // flaky: multiMatchQueryBuilder10.fuzziness((java.lang.Object) multiMatchQueryBuilder38);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder44 = null; // flaky: multiMatchQueryBuilder42.maxExpansions(0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder46 = null; // flaky: multiMatchQueryBuilder42.cutoffFrequency((float) (short) 100);
        java.lang.String[] strArray54 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder55 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray54);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder57 = multiMatchQueryBuilder55.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder59 = multiMatchQueryBuilder57.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder61 = multiMatchQueryBuilder57.field("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder63 = multiMatchQueryBuilder57.boost(0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder65 = multiMatchQueryBuilder63.analyzer("multi_match");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder67 = multiMatchQueryBuilder65.maxExpansions(1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type68 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS;
        org.elasticsearch.index.search.MatchQuery.Type type69 = type68.matchQueryType();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder70 = multiMatchQueryBuilder65.type(type68);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder72 = multiMatchQueryBuilder70.prefixLength((int) 'a');
        java.lang.String[] strArray80 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder81 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray80);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder83 = multiMatchQueryBuilder81.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder85 = multiMatchQueryBuilder81.queryName("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.Operator operator86 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder87 = multiMatchQueryBuilder85.operator(operator86);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery88 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder89 = multiMatchQueryBuilder85.zeroTermsQuery(zeroTermsQuery88);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder90 = multiMatchQueryBuilder70.type((java.lang.Object) zeroTermsQuery88);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder92 = multiMatchQueryBuilder90.fuzzyRewrite("{\n  \"multiMatch\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\", \"\" ],\n    \"type\" : \"best_fields\",\n    \"analyzer\" : \"multi_match\",\n    \"maxExpansions\" : 1,\n    \"rewrite\" : \"{\\n  \\\"multiMatch\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"analyzer\\\" : \\\"multi_match\\\",\\n    \\\"maxExpansions\\\" : -1,\\n    \\\"fuzzyRewrite\\\" : \\\"hi!\\\",\\n    \\\"useDisMax\\\" : true,\\n    \\\"boost\\\" : 0.0\\n  }\\n}\",\n    \"fuzzyRewrite\" : \"hi!\",\n    \"boost\" : 0.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder94 = multiMatchQueryBuilder90.tieBreaker((float) 1L);
        boolean boolean95 = false; // flaky: multiMatchQueryBuilder42.equals((java.lang.Object) multiMatchQueryBuilder90);
        org.elasticsearch.index.query.QueryValidationException queryValidationException96 = null; // flaky: multiMatchQueryBuilder42.validate();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder29);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder31);
        org.junit.Assert.assertTrue("'" + type32 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX + "'", type32.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX));
        org.junit.Assert.assertTrue("'" + float33 + "' != '" + 0.0f + "'", float33 == 0.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder34);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder36);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder38);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder41);
// flaky:         org.junit.Assert.assertNotNull(multiMatchQueryBuilder42);
// flaky:         org.junit.Assert.assertNotNull(multiMatchQueryBuilder44);
// flaky:         org.junit.Assert.assertNotNull(multiMatchQueryBuilder46);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder57);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder59);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder61);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder63);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder65);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder67);
        org.junit.Assert.assertTrue("'" + type68 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS + "'", type68.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS));
        org.junit.Assert.assertTrue("'" + type69 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type69.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder70);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder72);
        org.junit.Assert.assertNotNull(strArray80);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder83);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder85);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder87);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder89);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder90);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder92);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder94);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertNull(queryValidationException96);
    }

    @Test
    public void test15150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15150");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.tieBreaker(0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type13 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX;
        float float14 = type13.tieBreaker();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder10.type(type13);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder10.cutoffFrequency((float) 0L);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder10.fuzzyRewrite("{\n  \"multiMatch\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"type\" : \"phrase_prefix\",\n    \"maxExpansions\" : 10,\n    \"fuzzyRewrite\" : \"\",\n    \"tieBreaker\" : 0.0,\n    \"cutoffFrequency\" : 0.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder10.prefixLength(0);
        java.lang.String str22 = multiMatchQueryBuilder21.queryName();
        org.elasticsearch.index.query.QueryShardContext queryShardContext23 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.lucene.search.Query query24 = multiMatchQueryBuilder21.toQuery(queryShardContext23);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertTrue("'" + type13 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX + "'", type13.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX));
        org.junit.Assert.assertTrue("'" + float14 + "' != '" + 0.0f + "'", float14 == 0.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNull(str22);
    }

    @Test
    public void test15151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15151");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder8.queryName("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.Operator operator13 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder12.operator(operator13);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder14.lenient(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder16.maxExpansions((int) (short) 1);
        org.elasticsearch.index.query.Operator operator19 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder16.operator(operator19);
        java.lang.String str21 = multiMatchQueryBuilder16.getName();
        java.lang.String[] strArray29 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder30 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray29);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder32 = multiMatchQueryBuilder30.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder34 = multiMatchQueryBuilder32.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder36 = multiMatchQueryBuilder32.field("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder38 = multiMatchQueryBuilder32.boost(0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder40 = multiMatchQueryBuilder38.analyzer("multi_match");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder42 = multiMatchQueryBuilder40.useDisMax(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type43 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder44 = multiMatchQueryBuilder42.type(type43);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder46 = multiMatchQueryBuilder44.field("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"slop\\\" : -1,\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"lenient\\\" : true,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"boost\" : 1.0,\n    \"_name\" : \"hi!\"\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder48 = multiMatchQueryBuilder46.boost((float) (short) 1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder49 = null; // flaky: multiMatchQueryBuilder16.fuzziness((java.lang.Object) multiMatchQueryBuilder48);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder51 = null; // flaky: multiMatchQueryBuilder49.minimumShouldMatch("{\n  \"multiMatch\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzyRewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String str52 = null; // flaky: multiMatchQueryBuilder51.getWriteableName();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "multi_match" + "'", str21, "multi_match");
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder32);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder34);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder36);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder38);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder40);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder42);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder44);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder46);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder48);
// flaky:         org.junit.Assert.assertNotNull(multiMatchQueryBuilder49);
// flaky:         org.junit.Assert.assertNotNull(multiMatchQueryBuilder51);
// flaky:         org.junit.Assert.assertEquals("'" + str52 + "' != '" + "multi_match" + "'", str52, "multi_match");
    }

    @Test
    public void test15152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15152");
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type0 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX;
        float float1 = type0.tieBreaker();
        java.lang.Class<?> wildcardClass2 = type0.getClass();
        java.lang.String[] strArray10 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray10);
        java.lang.Object obj12 = null;
        java.lang.String[] strArray21 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray21);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 10.0f, strArray21);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = new org.elasticsearch.index.query.MultiMatchQueryBuilder(obj12, strArray21);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray21);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) wildcardClass2, strArray21);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = multiMatchQueryBuilder26.queryName("{\n  \"multiMatch\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzyRewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String str29 = null; // flaky: multiMatchQueryBuilder28.toString();
        java.lang.String[] strArray37 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder38 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray37);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder40 = multiMatchQueryBuilder38.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder42 = multiMatchQueryBuilder40.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.QueryValidationException queryValidationException43 = multiMatchQueryBuilder40.validate();
        java.lang.String[] strArray51 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder52 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray51);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder54 = multiMatchQueryBuilder52.fuzzyRewrite("");
        java.lang.String[] strArray62 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder63 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray62);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder65 = multiMatchQueryBuilder63.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder67 = multiMatchQueryBuilder65.tieBreaker(0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type68 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX;
        float float69 = type68.tieBreaker();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder70 = multiMatchQueryBuilder65.type(type68);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder72 = multiMatchQueryBuilder65.cutoffFrequency((float) 0L);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder74 = multiMatchQueryBuilder65.lenient(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type75 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        org.elasticsearch.index.search.MatchQuery.Type type76 = type75.matchQueryType();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder77 = multiMatchQueryBuilder65.type(type75);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder78 = multiMatchQueryBuilder52.fuzziness((java.lang.Object) type75);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder79 = multiMatchQueryBuilder40.type(type75);
        org.elasticsearch.index.search.MatchQuery.Type type80 = type75.matchQueryType();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder81 = multiMatchQueryBuilder28.type(type75);
        org.elasticsearch.index.search.MatchQuery.Type type82 = type75.matchQueryType();
        float float83 = type75.tieBreaker();
        org.elasticsearch.index.search.MatchQuery.Type type84 = type75.matchQueryType();
        org.elasticsearch.common.ParseField parseField85 = type75.parseField();
        org.junit.Assert.assertTrue("'" + type0 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX + "'", type0.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX));
        org.junit.Assert.assertTrue("'" + float1 + "' != '" + 0.0f + "'", float1 == 0.0f);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder28);
// flaky:         org.junit.Assert.assertEquals("'" + str29 + "' != '" + "{\n  \"multi_match\" : {\n    \"query\" : \"class org.elasticsearch.index.query.MultiMatchQueryBuilder$Type\",\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"boost\" : 1.0,\n    \"_name\" : \"{\\n  \\\"multiMatch\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"fuzzyRewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\"\n  }\n}" + "'", str29, "{\n  \"multi_match\" : {\n    \"query\" : \"class org.elasticsearch.index.query.MultiMatchQueryBuilder$Type\",\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"boost\" : 1.0,\n    \"_name\" : \"{\\n  \\\"multiMatch\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"fuzzyRewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\"\n  }\n}");
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder40);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder42);
        org.junit.Assert.assertNull(queryValidationException43);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder54);
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder65);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder67);
        org.junit.Assert.assertTrue("'" + type68 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX + "'", type68.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX));
        org.junit.Assert.assertTrue("'" + float69 + "' != '" + 0.0f + "'", float69 == 0.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder70);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder72);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder74);
        org.junit.Assert.assertTrue("'" + type75 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type75.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertTrue("'" + type76 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type76.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder77);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder78);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder79);
        org.junit.Assert.assertTrue("'" + type80 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type80.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder81);
        org.junit.Assert.assertTrue("'" + type82 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type82.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertTrue("'" + float83 + "' != '" + 0.0f + "'", float83 == 0.0f);
        org.junit.Assert.assertTrue("'" + type84 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type84.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertNotNull(parseField85);
    }

    @Test
    public void test15153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15153");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery13 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder12.zeroTermsQuery(zeroTermsQuery13);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder14.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder16.queryName("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder16.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder20.lenient(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder20.minimumShouldMatch("{\n  \"multiMatch\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"rewrite\" : \"multi_match\",\n    \"fuzzyRewrite\" : \"hi!\",\n    \"lenient\" : false,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder24.maxExpansions((int) (short) 1);
        org.elasticsearch.index.query.Operator operator27 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = multiMatchQueryBuilder24.operator(operator27);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder30 = multiMatchQueryBuilder24.analyzer("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\", \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"type\\\" : \\\"cross_fields\\\",\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"tie_breaker\\\" : 32.0,\\n    \\\"boost\\\" : 1.0\\n  }\\n}^1.0\" ],\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"use_dis_max\" : false,\n    \"boost\" : 1.0,\n    \"_name\" : \"{\\n  \\\"multiMatch\\\" : {\\n    \\\"query\\\" : \\\"PHRASE_PREFIX\\\",\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"fuzziness\\\" : \\\"10\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\"\n  }\n}");
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder31 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params32 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder33 = multiMatchQueryBuilder30.toXContent(xContentBuilder31, params32);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder28);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder30);
        org.junit.Assert.assertNotNull(params32);
    }

    @Test
    public void test15154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15154");
        org.elasticsearch.common.xcontent.XContent xContent0 = null;
        java.io.OutputStream outputStream1 = null;
        java.lang.String[] strArray9 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray9);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder12.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery15 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder14.zeroTermsQuery(zeroTermsQuery15);
        java.lang.String str17 = null; // flaky: multiMatchQueryBuilder14.toString();
        java.lang.String str18 = multiMatchQueryBuilder14.queryName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder14.queryName("");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery21 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder20.zeroTermsQuery(zeroTermsQuery21);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder22.minimumShouldMatch("multi_match");
        java.lang.String[] strArray32 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder33 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray32);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder35 = multiMatchQueryBuilder33.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder37 = multiMatchQueryBuilder35.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery38 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder39 = multiMatchQueryBuilder37.zeroTermsQuery(zeroTermsQuery38);
        java.lang.String str40 = null; // flaky: multiMatchQueryBuilder37.toString();
        java.lang.String str41 = multiMatchQueryBuilder37.queryName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder43 = multiMatchQueryBuilder37.queryName("");
        java.lang.String str44 = multiMatchQueryBuilder37.getName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type45 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX;
        float float46 = type45.tieBreaker();
        org.elasticsearch.common.ParseField parseField47 = type45.parseField();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder48 = multiMatchQueryBuilder37.type(type45);
        java.lang.String[] strArray52 = new java.lang.String[] { "{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\", \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"analyzer\\\" : \\\"multi_match\\\",\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}^10.0\", \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\" ],\n    \"fuzzy_rewrite\" : \"\",\n    \"boost\" : 1.0,\n    \"_name\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\"\n  }\n}", "{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}", "{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder53 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) multiMatchQueryBuilder48, strArray52);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder54 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) multiMatchQueryBuilder24, strArray52);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder55 = new org.elasticsearch.common.xcontent.XContentBuilder(xContent0, outputStream1, strArray52);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}" + "'", str17, "{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder35);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder37);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder39);
// flaky:         org.junit.Assert.assertEquals("'" + str40 + "' != '" + "{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}" + "'", str40, "{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "multi_match" + "'", str44, "multi_match");
        org.junit.Assert.assertTrue("'" + type45 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX + "'", type45.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX));
        org.junit.Assert.assertTrue("'" + float46 + "' != '" + 0.0f + "'", float46 == 0.0f);
        org.junit.Assert.assertNotNull(parseField47);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder48);
        org.junit.Assert.assertNotNull(strArray52);
    }

    @Test
    public void test15155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15155");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder8.cutoffFrequency((float) 100);
        java.lang.String str13 = multiMatchQueryBuilder12.queryName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder12.boost((float) '4');
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder12.minimumShouldMatch("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"type\" : \"phrase_prefix\",\n    \"slop\" : -1,\n    \"minimum_should_match\" : \"hi!\",\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : -1.0,\n    \"_name\" : \"{\\n  \\\"multiMatch\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"fuzzyRewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\"\n  }\n}");
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
    }

    @Test
    public void test15156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15156");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder10.field("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder10.boost(0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder16.analyzer("multi_match");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder18.maxExpansions(1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type21 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS;
        org.elasticsearch.index.search.MatchQuery.Type type22 = type21.matchQueryType();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder18.type(type21);
        java.lang.String str24 = multiMatchQueryBuilder18.queryName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder18.maxExpansions((int) (short) 100);
        java.lang.String str27 = null; // flaky: multiMatchQueryBuilder26.toString();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertTrue("'" + type21 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS + "'", type21.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS));
        org.junit.Assert.assertTrue("'" + type22 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type22.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
// flaky:         org.junit.Assert.assertEquals("'" + str27 + "' != '" + "{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\", \"\" ],\n    \"type\" : \"cross_fields\",\n    \"analyzer\" : \"multi_match\",\n    \"max_expansions\" : 100,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 0.0\n  }\n}" + "'", str27, "{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\", \"\" ],\n    \"type\" : \"cross_fields\",\n    \"analyzer\" : \"multi_match\",\n    \"max_expansions\" : 100,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 0.0\n  }\n}");
    }

    @Test
    public void test15157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15157");
        java.lang.String[] strArray2 = new java.lang.String[] { "{\n  \"multiMatch\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzyRewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder3 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (short) 100, strArray2);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder5 = multiMatchQueryBuilder3.cutoffFrequency(0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder7 = multiMatchQueryBuilder3.fuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"analyzer\" : \"multi_match\",\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder9 = multiMatchQueryBuilder3.tieBreaker((float) ' ');
        java.lang.String str10 = multiMatchQueryBuilder3.queryName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder3.prefixLength((int) (byte) 0);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder13 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params14 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder15 = multiMatchQueryBuilder12.toXContent(xContentBuilder13, params14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder5);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(params14);
    }

    @Test
    public void test15158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15158");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder12.tieBreaker((float) '#');
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder14.useDisMax(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder14.minimumShouldMatch("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\", \"\" ],\n    \"analyzer\" : \"multi_match\",\n    \"max_expansions\" : 1,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 0.0,\n    \"boost\" : 0.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder18.field("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"type\" : \"best_fields\",\n    \"analyzer\" : \"\",\n    \"prefix_length\" : 52,\n    \"minimum_should_match\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"fuzzy_rewrite\" : \"\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 0.0,\n    \"boost\" : 1.0\n  }\n}", (float) 0L);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
    }

    @Test
    public void test15159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15159");
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type0 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        float float1 = type0.tieBreaker();
        org.elasticsearch.common.ParseField parseField2 = type0.parseField();
        org.elasticsearch.index.search.MatchQuery.Type type3 = type0.matchQueryType();
        org.elasticsearch.index.search.MatchQuery.Type type4 = type0.matchQueryType();
        org.elasticsearch.index.search.MatchQuery.Type type5 = type0.matchQueryType();
        org.elasticsearch.common.ParseField parseField6 = type0.parseField();
        org.elasticsearch.common.ParseField parseField7 = type0.parseField();
        float float8 = type0.tieBreaker();
        org.junit.Assert.assertTrue("'" + type0 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type0.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertTrue("'" + float1 + "' != '" + 0.0f + "'", float1 == 0.0f);
        org.junit.Assert.assertNotNull(parseField2);
        org.junit.Assert.assertTrue("'" + type3 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type3.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertTrue("'" + type4 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type4.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertTrue("'" + type5 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type5.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertNotNull(parseField6);
        org.junit.Assert.assertNotNull(parseField7);
        org.junit.Assert.assertTrue("'" + float8 + "' != '" + 0.0f + "'", float8 == 0.0f);
    }

    @Test
    public void test15160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15160");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder10.field("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder10.boost(0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder10.field("");
        java.lang.String[] strArray26 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray26);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = multiMatchQueryBuilder27.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = multiMatchQueryBuilder29.tieBreaker(0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type32 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX;
        float float33 = type32.tieBreaker();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder34 = multiMatchQueryBuilder29.type(type32);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder36 = multiMatchQueryBuilder29.cutoffFrequency((float) 0L);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder38 = multiMatchQueryBuilder29.queryName("multi_match");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder41 = multiMatchQueryBuilder38.field("", (float) 1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder42 = null; // flaky: multiMatchQueryBuilder10.fuzziness((java.lang.Object) multiMatchQueryBuilder38);
        java.lang.String[] strArray50 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder51 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray50);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder53 = multiMatchQueryBuilder51.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder55 = multiMatchQueryBuilder53.fuzzyRewrite("hi!");
        java.lang.String str56 = multiMatchQueryBuilder53.getName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder58 = multiMatchQueryBuilder53.rewrite("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"slop\" : -1,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder60 = multiMatchQueryBuilder53.analyzer("{\n  \"multiMatch\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzyRewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String str61 = multiMatchQueryBuilder53.queryName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder63 = multiMatchQueryBuilder53.tieBreaker(10.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder66 = multiMatchQueryBuilder53.field("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\", \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"analyzer\\\" : \\\"multi_match\\\",\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}^10.0\", \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\" ],\n    \"fuzzy_rewrite\" : \"\",\n    \"boost\" : 1.0,\n    \"_name\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\"\n  }\n}", (float) 1);
        boolean boolean67 = multiMatchQueryBuilder38.equals((java.lang.Object) multiMatchQueryBuilder66);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder69 = multiMatchQueryBuilder38.analyzer("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"analyzer\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"analyzer\\\" : \\\"multi_match\\\",\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"prefix_length\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 32.0,\n    \"lenient\" : false,\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder29);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder31);
        org.junit.Assert.assertTrue("'" + type32 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX + "'", type32.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX));
        org.junit.Assert.assertTrue("'" + float33 + "' != '" + 0.0f + "'", float33 == 0.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder34);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder36);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder38);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder41);
// flaky:         org.junit.Assert.assertNotNull(multiMatchQueryBuilder42);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder53);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "multi_match" + "'", str56, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder58);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder60);
        org.junit.Assert.assertNull(str61);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder63);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder69);
    }

    @Test
    public void test15161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15161");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder8.queryName("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.Operator operator13 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder12.operator(operator13);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder12.field("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"analyzer\" : \"multi_match\",\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}", 10.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder17.field("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery20 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder17.zeroTermsQuery(zeroTermsQuery20);
        org.elasticsearch.index.query.Operator operator22 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder21.operator(operator22);
        java.lang.String str24 = multiMatchQueryBuilder23.getWriteableName();
        org.elasticsearch.index.query.Operator operator25 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder23.operator(operator25);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = multiMatchQueryBuilder23.maxExpansions(10);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery29 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder30 = multiMatchQueryBuilder23.zeroTermsQuery(zeroTermsQuery29);
        java.lang.String[] strArray38 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder39 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray38);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder41 = multiMatchQueryBuilder39.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder43 = multiMatchQueryBuilder41.fuzzyRewrite("hi!");
        java.lang.String str44 = multiMatchQueryBuilder41.getName();
        float float45 = multiMatchQueryBuilder41.boost();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder47 = multiMatchQueryBuilder41.lenient(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder49 = multiMatchQueryBuilder41.queryName("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder51 = multiMatchQueryBuilder41.cutoffFrequency((float) (-1L));
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type52 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX;
        float float53 = type52.tieBreaker();
        boolean boolean54 = multiMatchQueryBuilder51.equals((java.lang.Object) type52);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder55 = multiMatchQueryBuilder23.type(type52);
        org.elasticsearch.index.search.MatchQuery.Type type56 = type52.matchQueryType();
        org.elasticsearch.common.ParseField parseField57 = type52.parseField();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "multi_match" + "'", str24, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder28);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder30);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder41);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "multi_match" + "'", str44, "multi_match");
        org.junit.Assert.assertTrue("'" + float45 + "' != '" + 1.0f + "'", float45 == 1.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder47);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder49);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder51);
        org.junit.Assert.assertTrue("'" + type52 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX + "'", type52.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX));
        org.junit.Assert.assertTrue("'" + float53 + "' != '" + 0.0f + "'", float53 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder55);
        org.junit.Assert.assertTrue("'" + type56 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX + "'", type56.equals(org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX));
        org.junit.Assert.assertNotNull(parseField57);
    }

    @Test
    public void test15162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15162");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder12.lenient(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder12.queryName("{\n  \"multiMatch\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzyRewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder12.rewrite("{\n  \"multiMatch\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"rewrite\" : \"multi_match\",\n    \"fuzzyRewrite\" : \"hi!\",\n    \"lenient\" : false,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String str19 = multiMatchQueryBuilder12.getName();
        java.lang.String str20 = null; // flaky: multiMatchQueryBuilder12.toString();
        java.lang.String str21 = multiMatchQueryBuilder12.getWriteableName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder12.prefixLength(10);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "multi_match" + "'", str19, "multi_match");
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"rewrite\" : \"{\\n  \\\"multiMatch\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"rewrite\\\" : \\\"multi_match\\\",\\n    \\\"fuzzyRewrite\\\" : \\\"hi!\\\",\\n    \\\"lenient\\\" : false,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"lenient\" : false,\n    \"boost\" : 1.0,\n    \"_name\" : \"{\\n  \\\"multiMatch\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"fuzzyRewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\"\n  }\n}" + "'", str20, "{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"rewrite\" : \"{\\n  \\\"multiMatch\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"rewrite\\\" : \\\"multi_match\\\",\\n    \\\"fuzzyRewrite\\\" : \\\"hi!\\\",\\n    \\\"lenient\\\" : false,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"lenient\" : false,\n    \"boost\" : 1.0,\n    \"_name\" : \"{\\n  \\\"multiMatch\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"fuzzyRewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\"\n  }\n}");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "multi_match" + "'", str21, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
    }

    @Test
    public void test15163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15163");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.fuzzyRewrite("hi!");
        java.lang.String str13 = multiMatchQueryBuilder10.getName();
        float float14 = multiMatchQueryBuilder10.boost();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder10.lenient(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder10.slop((int) (short) -1);
        org.elasticsearch.index.query.Operator operator19 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder18.operator(operator19);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder20.tieBreaker((float) '#');
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder20.rewrite("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\", \"\" ],\n    \"analyzer\" : \"multi_match\",\n    \"max_expansions\" : 1,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"cutoff_frequency\" : 0.0,\n    \"boost\" : 0.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder24.maxExpansions((int) (short) -1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = multiMatchQueryBuilder26.field("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\", \"hi!\" ],\n    \"max_expansions\" : 10,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"use_dis_max\" : false,\n    \"tie_breaker\" : 35.0,\n    \"boost\" : 1.0\n  }\n}", (float) ' ');
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "multi_match" + "'", str13, "multi_match");
        org.junit.Assert.assertTrue("'" + float14 + "' != '" + 1.0f + "'", float14 == 1.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder29);
    }

    @Test
    public void test15164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15164");
        org.elasticsearch.common.xcontent.XContent xContent0 = null;
        java.lang.String[] strArray8 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder9 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray8);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder9.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder9.cutoffFrequency((float) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder13.useDisMax(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder15.lenient(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder15.queryName("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\", \"\", \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"fuzzy_rewrite\\\" : \\\"{\\\\n  \\\\\\\"multi_match\\\\\\\" : {\\\\n    \\\\\\\"query\\\\\\\" : 0.0,\\\\n    \\\\\\\"fields\\\\\\\" : [ \\\\\\\"hi!\\\\\\\", \\\\\\\"\\\\\\\", \\\\\\\"\\\\\\\", \\\\\\\"\\\\\\\", \\\\\\\"\\\\\\\", \\\\\\\"\\\\\\\" ],\\\\n    \\\\\\\"slop\\\\\\\" : -1,\\\\n    \\\\\\\"fuzzy_rewrite\\\\\\\" : \\\\\\\"hi!\\\\\\\",\\\\n    \\\\\\\"lenient\\\\\\\" : true,\\\\n    \\\\\\\"boost\\\\\\\" : 1.0\\\\n  }\\\\n}\\\",\\n    \\\"boost\\\" : 1.0,\\n    \\\"_name\\\" : \\\"hi!\\\"\\n  }\\n}\" ],\n    \"analyzer\" : \"multi_match\",\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"use_dis_max\" : true,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.QueryValidationException queryValidationException20 = multiMatchQueryBuilder19.validate();
        java.lang.String[] strArray28 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray28);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = multiMatchQueryBuilder29.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder33 = multiMatchQueryBuilder31.tieBreaker(0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder35 = multiMatchQueryBuilder31.cutoffFrequency((float) 0L);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder37 = multiMatchQueryBuilder35.analyzer("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder39 = multiMatchQueryBuilder37.field("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"slop\" : -1,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder41 = multiMatchQueryBuilder39.queryName("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"slop\" : -1,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder43 = multiMatchQueryBuilder41.slop((int) (byte) 10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder45 = multiMatchQueryBuilder43.useDisMax(true);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery46 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder47 = multiMatchQueryBuilder43.zeroTermsQuery(zeroTermsQuery46);
        java.lang.String[] strArray50 = new java.lang.String[] { "{\n  \"multiMatch\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzyRewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder51 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (short) 100, strArray50);
        java.lang.String[] strArray59 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder60 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray59);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder61 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) multiMatchQueryBuilder51, strArray59);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder62 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) multiMatchQueryBuilder43, strArray59);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder63 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) queryValidationException20, strArray59);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder64 = null; // flaky: org.elasticsearch.common.xcontent.XContentBuilder.builder(xContent0, strArray59);
// flaky:             org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNull(queryValidationException20);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder31);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder33);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder35);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder37);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder39);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder41);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder43);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder45);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder47);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertNotNull(strArray59);
    }

    @Test
    public void test15165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15165");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery13 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder12.zeroTermsQuery(zeroTermsQuery13);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder14.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder16.queryName("hi!");
        java.lang.String str19 = multiMatchQueryBuilder16.queryName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder16.rewrite("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"max_expansions\" : 1,\n    \"fuzzy_rewrite\" : \"\",\n    \"lenient\" : true,\n    \"boost\" : 1.0,\n    \"_name\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\"\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder21.slop((int) ' ');
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder21.tieBreaker((float) '#');
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
    }

    @Test
    public void test15166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15166");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder12.lenient(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder12.prefixLength((int) ' ');
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder16.boost((float) (byte) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder18.cutoffFrequency(0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder20.field("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"analyzer\" : \"{\\n  \\\"multiMatch\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"fuzzyRewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"slop\" : 100,\n    \"rewrite\" : \"multi_match\",\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"use_dis_max\" : false,\n    \"lenient\" : false,\n    \"boost\" : 1.0\n  }\n}", (float) (short) 1);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
    }

    @Test
    public void test15167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15167");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder10.field("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder10.boost(0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder10.field("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder10.lenient(true);
        java.lang.String str21 = multiMatchQueryBuilder20.queryName();
        java.lang.String str22 = multiMatchQueryBuilder20.getWriteableName();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "multi_match" + "'", str22, "multi_match");
    }

    @Test
    public void test15168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15168");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.fuzzyRewrite("hi!");
        java.lang.String str13 = multiMatchQueryBuilder10.getName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder10.analyzer("multi_match");
        org.elasticsearch.index.query.Operator operator16 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder15.operator(operator16);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder15.cutoffFrequency(0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder19.lenient(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder19.field("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\", \"hi!\" ],\n    \"max_expansions\" : 100,\n    \"fuzzy_rewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"analyzer\\\" : \\\"multi_match\\\",\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"lenient\" : true,\n    \"boost\" : 1.0,\n    \"_name\" : \"multi_match\"\n  }\n}", (float) (byte) 1);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "multi_match" + "'", str13, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
    }

    @Test
    public void test15169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15169");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.fuzzyRewrite("hi!");
        java.lang.String str13 = multiMatchQueryBuilder10.getName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder10.analyzer("multi_match");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder10.slop((int) (short) -1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder10.queryName("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder10.field("{\n  \"multiMatch\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"type\" : \"phrase_prefix\",\n    \"maxExpansions\" : 10,\n    \"fuzzyRewrite\" : \"\",\n    \"tieBreaker\" : 0.0,\n    \"cutoffFrequency\" : 0.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder10.fuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"type\" : \"best_fields\",\n    \"fuzzy_rewrite\" : \"\",\n    \"use_dis_max\" : false,\n    \"tie_breaker\" : 0.0,\n    \"lenient\" : false,\n    \"cutoff_frequency\" : 0.0,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String[] strArray31 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder32 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray31);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder34 = multiMatchQueryBuilder32.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder36 = multiMatchQueryBuilder34.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery37 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder38 = multiMatchQueryBuilder36.zeroTermsQuery(zeroTermsQuery37);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder40 = multiMatchQueryBuilder36.maxExpansions((int) (byte) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder42 = multiMatchQueryBuilder36.field("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"slop\" : -1,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder44 = multiMatchQueryBuilder42.useDisMax(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder46 = multiMatchQueryBuilder42.lenient(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder48 = multiMatchQueryBuilder46.queryName("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"max_expansions\" : 1,\n    \"minimum_should_match\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"fuzzy_rewrite\" : \"\",\n    \"lenient\" : true,\n    \"boost\" : 1.0,\n    \"_name\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\"\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder50 = multiMatchQueryBuilder48.fuzzyRewrite("{\n  \"multiMatch\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"minimumShouldMatch\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"slop\\\" : -1,\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"lenient\\\" : true,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"boost\" : 1.0\n  }\n}");
        java.lang.Class<?> wildcardClass51 = multiMatchQueryBuilder50.getClass();
        boolean boolean52 = multiMatchQueryBuilder10.equals((java.lang.Object) multiMatchQueryBuilder50);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "multi_match" + "'", str13, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder34);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder36);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder38);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder40);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder42);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder44);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder46);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder48);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder50);
        org.junit.Assert.assertNotNull(wildcardClass51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
    }

    @Test
    public void test15170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15170");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder8.queryName("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.Operator operator13 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder12.operator(operator13);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder14.field("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder16.field("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"analyzer\" : \"multi_match\",\n    \"slop\" : -1,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0,\n    \"_name\" : \"hi!\"\n  }\n}", (float) 10L);
        java.lang.String str20 = multiMatchQueryBuilder19.getWriteableName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder19.tieBreaker(0.0f);
        java.lang.String str23 = multiMatchQueryBuilder19.getName();
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder24 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params25 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        // The following exception was thrown during execution in test generation
        try {
            multiMatchQueryBuilder19.doXContent(xContentBuilder24, params25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "multi_match" + "'", str20, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "multi_match" + "'", str23, "multi_match");
        org.junit.Assert.assertNotNull(params25);
    }

    @Test
    public void test15171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15171");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.fuzzyRewrite("hi!");
        java.lang.String str13 = multiMatchQueryBuilder10.getName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder10.rewrite("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"slop\" : -1,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder10.tieBreaker((float) '4');
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery18 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder10.zeroTermsQuery(zeroTermsQuery18);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder19.boost(100.0f);
        java.lang.String[] strArray29 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder30 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray29);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder32 = multiMatchQueryBuilder30.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder34 = multiMatchQueryBuilder32.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder36 = multiMatchQueryBuilder32.field("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder38 = multiMatchQueryBuilder32.boost(0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder40 = multiMatchQueryBuilder38.analyzer("multi_match");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder42 = multiMatchQueryBuilder40.maxExpansions(1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder44 = multiMatchQueryBuilder42.rewrite("{\n  \"multiMatch\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\", \"\" ],\n    \"analyzer\" : \"multi_match\",\n    \"maxExpansions\" : -1,\n    \"fuzzyRewrite\" : \"hi!\",\n    \"useDisMax\" : true,\n    \"boost\" : 0.0\n  }\n}");
        org.elasticsearch.index.query.Operator operator45 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder46 = multiMatchQueryBuilder44.operator(operator45);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder48 = multiMatchQueryBuilder46.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder51 = multiMatchQueryBuilder46.field("{\n  \"multiMatch\" : {\n    \"query\" : \"PHRASE_PREFIX\",\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzziness\" : \"10\",\n    \"boost\" : 1.0\n  }\n}", (float) (-1L));
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder52 = null; // flaky: multiMatchQueryBuilder19.fuzziness((java.lang.Object) multiMatchQueryBuilder46);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder54 = null; // flaky: multiMatchQueryBuilder52.cutoffFrequency((float) (short) -1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder56 = null; // flaky: multiMatchQueryBuilder52.fuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"type\" : \"best_fields\",\n    \"analyzer\" : \"{\\n  \\\"multiMatch\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"type\\\" : \\\"phrase_prefix\\\",\\n    \\\"maxExpansions\\\" : 10,\\n    \\\"fuzzyRewrite\\\" : \\\"\\\",\\n    \\\"tieBreaker\\\" : 0.0,\\n    \\\"cutoffFrequency\\\" : 0.0,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"rewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder58 = null; // flaky: multiMatchQueryBuilder56.tieBreaker((float) '#');
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "multi_match" + "'", str13, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder32);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder34);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder36);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder38);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder40);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder42);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder44);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder46);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder48);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder51);
// flaky:         org.junit.Assert.assertNotNull(multiMatchQueryBuilder52);
// flaky:         org.junit.Assert.assertNotNull(multiMatchQueryBuilder54);
// flaky:         org.junit.Assert.assertNotNull(multiMatchQueryBuilder56);
// flaky:         org.junit.Assert.assertNotNull(multiMatchQueryBuilder58);
    }

    @Test
    public void test15172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15172");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder10.field("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder10.boost(0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder16.analyzer("multi_match");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder18.maxExpansions(1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder18.cutoffFrequency((float) (short) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder22.fuzzyRewrite("{\n  \"multiMatch\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzyRewrite\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type25 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder22.type(type25);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = multiMatchQueryBuilder22.field("{\n  \"multiMatch\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"^1.0\", \"^1.0\", \"^1.0\", \"^1.0\", \"^1.0\", \"^1.0\" ],\n    \"type\" : \"phrase_prefix\",\n    \"fuzzyRewrite\" : \"\",\n    \"tieBreaker\" : 0.0,\n    \"cutoffFrequency\" : 0.0,\n    \"boost\" : 1.0,\n    \"Name\" : \"multi_match\"\n  }\n}");
        java.lang.String str29 = multiMatchQueryBuilder22.getWriteableName();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery30 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = multiMatchQueryBuilder22.zeroTermsQuery(zeroTermsQuery30);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder33 = multiMatchQueryBuilder22.queryName("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\", \"\" ],\n    \"analyzer\" : \"multi_match\",\n    \"max_expansions\" : 1,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"use_dis_max\" : true,\n    \"boost\" : 0.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder35 = multiMatchQueryBuilder22.useDisMax(false);
        org.elasticsearch.common.io.stream.StreamInput streamInput36 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder37 = multiMatchQueryBuilder22.readFrom(streamInput36);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "multi_match" + "'", str29, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder31);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder33);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder35);
    }

    @Test
    public void test15173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15173");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder8.queryName("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.Operator operator13 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder12.operator(operator13);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder12.field("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"analyzer\" : \"multi_match\",\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}", 10.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder12.field("{\n  \"multiMatch\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzyRewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}", 0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder20.prefixLength((int) ' ');
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder20.rewrite("{\n  \"multi_match\" : {\n    \"query\" : 100,\n    \"fields\" : [ \"{\\n  \\\"multiMatch\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"fuzzyRewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\" ],\n    \"cutoff_frequency\" : 0.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder24.cutoffFrequency((float) (short) 1);
        java.lang.String str27 = multiMatchQueryBuilder24.queryName();
        java.lang.String[] strArray35 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder36 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray35);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder38 = multiMatchQueryBuilder36.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder40 = multiMatchQueryBuilder38.fuzzyRewrite("hi!");
        java.lang.String str41 = multiMatchQueryBuilder38.getName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder43 = multiMatchQueryBuilder38.analyzer("multi_match");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder45 = multiMatchQueryBuilder43.cutoffFrequency((float) (short) 1);
        java.lang.String str46 = multiMatchQueryBuilder45.getWriteableName();
        java.lang.String[] strArray54 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder55 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray54);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder57 = multiMatchQueryBuilder55.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder59 = multiMatchQueryBuilder57.tieBreaker(0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type60 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX;
        float float61 = type60.tieBreaker();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder62 = multiMatchQueryBuilder57.type(type60);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder64 = multiMatchQueryBuilder57.cutoffFrequency((float) 0L);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder66 = multiMatchQueryBuilder57.lenient(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type67 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        org.elasticsearch.index.search.MatchQuery.Type type68 = type67.matchQueryType();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder69 = multiMatchQueryBuilder57.type(type67);
        org.elasticsearch.common.ParseField parseField70 = type67.parseField();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder71 = multiMatchQueryBuilder45.type(type67);
        org.elasticsearch.index.search.MatchQuery.Type type72 = type67.matchQueryType();
        org.elasticsearch.common.ParseField parseField73 = type67.parseField();
        float float74 = type67.tieBreaker();
        org.elasticsearch.common.ParseField parseField75 = type67.parseField();
        org.elasticsearch.index.search.MatchQuery.Type type76 = type67.matchQueryType();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder77 = multiMatchQueryBuilder24.type(type67);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}" + "'", str27, "{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder38);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "multi_match" + "'", str41, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder43);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "multi_match" + "'", str46, "multi_match");
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder57);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder59);
        org.junit.Assert.assertTrue("'" + type60 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX + "'", type60.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX));
        org.junit.Assert.assertTrue("'" + float61 + "' != '" + 0.0f + "'", float61 == 0.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder62);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder64);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder66);
        org.junit.Assert.assertTrue("'" + type67 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type67.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertTrue("'" + type68 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type68.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder69);
        org.junit.Assert.assertNotNull(parseField70);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder71);
        org.junit.Assert.assertTrue("'" + type72 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type72.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertNotNull(parseField73);
        org.junit.Assert.assertTrue("'" + float74 + "' != '" + 0.0f + "'", float74 == 0.0f);
        org.junit.Assert.assertNotNull(parseField75);
        org.junit.Assert.assertTrue("'" + type76 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type76.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder77);
    }

    @Test
    public void test15174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15174");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder8.queryName("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.Operator operator13 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder12.operator(operator13);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder12.field("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"analyzer\" : \"multi_match\",\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}", 10.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder17.field("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery20 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder17.zeroTermsQuery(zeroTermsQuery20);
        org.elasticsearch.index.query.Operator operator22 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder21.operator(operator22);
        java.lang.String str24 = multiMatchQueryBuilder23.getWriteableName();
        java.lang.String str25 = multiMatchQueryBuilder23.queryName();
        java.lang.String[] strArray33 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder34 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray33);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder36 = multiMatchQueryBuilder34.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder38 = multiMatchQueryBuilder36.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery39 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder40 = multiMatchQueryBuilder38.zeroTermsQuery(zeroTermsQuery39);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder42 = multiMatchQueryBuilder40.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder44 = multiMatchQueryBuilder42.queryName("hi!");
        java.lang.String str45 = multiMatchQueryBuilder42.queryName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder47 = multiMatchQueryBuilder42.analyzer("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"slop\" : -1,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String[] strArray55 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder56 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray55);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder58 = multiMatchQueryBuilder56.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder60 = multiMatchQueryBuilder56.queryName("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.Operator operator61 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder62 = multiMatchQueryBuilder60.operator(operator61);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder64 = multiMatchQueryBuilder62.lenient(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder66 = multiMatchQueryBuilder64.maxExpansions((int) (short) 1);
        java.lang.String[] strArray74 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder75 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray74);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder76 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) multiMatchQueryBuilder64, strArray74);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder77 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) multiMatchQueryBuilder47, strArray74);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder78 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) multiMatchQueryBuilder23, strArray74);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder80 = multiMatchQueryBuilder23.tieBreaker((float) (short) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder82 = multiMatchQueryBuilder23.minimumShouldMatch("{\n  \"multiMatch\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"slop\" : 100,\n    \"fuzzyRewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.QueryValidationException queryValidationException83 = multiMatchQueryBuilder23.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder85 = multiMatchQueryBuilder23.field("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"max_expansions\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"use_dis_max\" : false,\n    \"lenient\" : false,\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "multi_match" + "'", str24, "multi_match");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}" + "'", str25, "{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder36);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder38);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder40);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder42);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "hi!" + "'", str45, "hi!");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder47);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder58);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder60);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder62);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder64);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder66);
        org.junit.Assert.assertNotNull(strArray74);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder80);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder82);
        org.junit.Assert.assertNull(queryValidationException83);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder85);
    }

    @Test
    public void test15175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15175");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder8.cutoffFrequency((float) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder8.boost((float) 100);
        org.elasticsearch.index.query.Operator operator15 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder14.operator(operator15);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder16.boost((float) (byte) -1);
        java.lang.String str19 = multiMatchQueryBuilder16.getName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder16.field("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"analyzer\" : \"{\\n  \\\"multiMatch\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"fuzzyRewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"rewrite\" : \"multi_match\",\n    \"fuzzy_rewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery22 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder21.zeroTermsQuery(zeroTermsQuery22);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder21.tieBreaker((float) (short) 10);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "multi_match" + "'", str19, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
    }

    @Test
    public void test15176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15176");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder12.tieBreaker((float) '#');
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder14.useDisMax(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder16.cutoffFrequency((float) 1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder18.field("{\n  \"multiMatch\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\", \"\" ],\n    \"analyzer\" : \"multi_match\",\n    \"maxExpansions\" : -1,\n    \"fuzzyRewrite\" : \"hi!\",\n    \"useDisMax\" : true,\n    \"boost\" : 0.0\n  }\n}");
        java.lang.String[] strArray28 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray28);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = multiMatchQueryBuilder29.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder33 = multiMatchQueryBuilder31.tieBreaker(0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder35 = multiMatchQueryBuilder31.cutoffFrequency((float) 0L);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder37 = multiMatchQueryBuilder35.analyzer("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder39 = multiMatchQueryBuilder37.field("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"slop\" : -1,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder41 = multiMatchQueryBuilder39.queryName("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"slop\" : -1,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder43 = multiMatchQueryBuilder39.field("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"analyzer\" : \"multi_match\",\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder45 = multiMatchQueryBuilder39.slop((int) (short) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder47 = multiMatchQueryBuilder39.field("{\n  \"multiMatch\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\", \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"analyzer\\\" : \\\"multi_match\\\",\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}^10.0\" ],\n    \"fuzzyRewrite\" : \"\",\n    \"boost\" : 1.0,\n    \"Name\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\"\n  }\n}");
        boolean boolean48 = multiMatchQueryBuilder20.equals((java.lang.Object) multiMatchQueryBuilder47);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder50 = multiMatchQueryBuilder20.minimumShouldMatch("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"slop\" : 1,\n    \"rewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"fuzzy_rewrite\" : \"{\\n  \\\"multiMatch\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"type\\\" : \\\"phrase_prefix\\\",\\n    \\\"maxExpansions\\\" : 10,\\n    \\\"fuzzyRewrite\\\" : \\\"\\\",\\n    \\\"tieBreaker\\\" : 0.0,\\n    \\\"cutoffFrequency\\\" : 0.0,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"lenient\" : false,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder52 = multiMatchQueryBuilder50.useDisMax(true);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder31);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder33);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder35);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder37);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder39);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder41);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder43);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder45);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder50);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder52);
    }

    @Test
    public void test15177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15177");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder10.field("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder10.boost(0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder16.analyzer("multi_match");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder18.useDisMax(true);
        java.lang.String str21 = multiMatchQueryBuilder18.getName();
        java.lang.String str22 = multiMatchQueryBuilder18.getName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder18.tieBreaker((float) (-1L));
        java.lang.String[] strArray32 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder33 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray32);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder35 = multiMatchQueryBuilder33.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder37 = multiMatchQueryBuilder35.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery38 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder39 = multiMatchQueryBuilder37.zeroTermsQuery(zeroTermsQuery38);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder41 = multiMatchQueryBuilder39.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder43 = multiMatchQueryBuilder41.queryName("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder45 = multiMatchQueryBuilder43.analyzer("multi_match");
        java.lang.String[] strArray53 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder54 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray53);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder56 = multiMatchQueryBuilder54.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder58 = multiMatchQueryBuilder56.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder60 = multiMatchQueryBuilder56.field("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder62 = multiMatchQueryBuilder56.boost(0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder64 = multiMatchQueryBuilder62.analyzer("multi_match");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder66 = multiMatchQueryBuilder64.maxExpansions(1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder68 = multiMatchQueryBuilder64.cutoffFrequency((float) (short) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder69 = null; // flaky: multiMatchQueryBuilder43.fuzziness((java.lang.Object) multiMatchQueryBuilder68);
        float float70 = 0.0f; // flaky: multiMatchQueryBuilder69.boost();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder72 = null; // flaky: multiMatchQueryBuilder69.rewrite("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"slop\" : -1,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 10.0,\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        boolean boolean73 = multiMatchQueryBuilder24.equals((java.lang.Object) multiMatchQueryBuilder69);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder75 = null; // flaky: multiMatchQueryBuilder69.boost((float) 10L);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "multi_match" + "'", str21, "multi_match");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "multi_match" + "'", str22, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder35);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder37);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder39);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder41);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder43);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder45);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder56);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder58);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder60);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder62);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder64);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder66);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder68);
// flaky:         org.junit.Assert.assertNotNull(multiMatchQueryBuilder69);
// flaky:         org.junit.Assert.assertTrue("'" + float70 + "' != '" + 1.0f + "'", float70 == 1.0f);
// flaky:         org.junit.Assert.assertNotNull(multiMatchQueryBuilder72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
// flaky:         org.junit.Assert.assertNotNull(multiMatchQueryBuilder75);
    }

    @Test
    public void test15178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15178");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder12.lenient(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder14.rewrite("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder16.field("{\n  \"multiMatch\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzyRewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}", (float) (short) -1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder16.minimumShouldMatch("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"minimum_should_match\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"slop\\\" : -1,\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"lenient\\\" : true,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.Operator operator22 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder16.operator(operator22);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder16.rewrite("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery26 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder16.zeroTermsQuery(zeroTermsQuery26);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = multiMatchQueryBuilder16.slop((int) (byte) 100);
        java.lang.String[] strArray37 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder38 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray37);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder40 = multiMatchQueryBuilder38.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder42 = multiMatchQueryBuilder38.queryName("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.Operator operator43 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder44 = multiMatchQueryBuilder42.operator(operator43);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder46 = multiMatchQueryBuilder44.lenient(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder48 = multiMatchQueryBuilder46.maxExpansions((int) (short) 1);
        java.lang.String[] strArray56 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder57 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray56);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder58 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) multiMatchQueryBuilder46, strArray56);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder60 = multiMatchQueryBuilder46.field("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder62 = multiMatchQueryBuilder60.maxExpansions((int) (short) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder64 = multiMatchQueryBuilder60.queryName("multi_match");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder65 = null; // flaky: multiMatchQueryBuilder16.fuzziness((java.lang.Object) multiMatchQueryBuilder60);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder67 = multiMatchQueryBuilder60.fuzzyRewrite("{\n  \"multiMatch\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\", \"\" ],\n    \"type\" : \"cross_fields\",\n    \"analyzer\" : \"multi_match\",\n    \"fuzzyRewrite\" : \"hi!\",\n    \"useDisMax\" : true,\n    \"boost\" : 0.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder69 = multiMatchQueryBuilder60.field("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder71 = multiMatchQueryBuilder69.minimumShouldMatch("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzziness\" : \"{\\n  \\\"MULTI_MATCH\\\" : {\\n    \\\"QUERY\\\" : 0.0,\\n    \\\"FIELDS\\\" : [ \\\"HI!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"{\\\\N  \\\\\\\"MULTI_MATCH\\\\\\\" : {\\\\N    \\\\\\\"QUERY\\\\\\\" : 0.0,\\\\N    \\\\\\\"FIELDS\\\\\\\" : [ \\\\\\\"HI!\\\\\\\", \\\\\\\"\\\\\\\", \\\\\\\"\\\\\\\", \\\\\\\"\\\\\\\", \\\\\\\"\\\\\\\", \\\\\\\"\\\\\\\" ],\\\\N    \\\\\\\"FUZZY_REWRITE\\\\\\\" : \\\\\\\"HI!\\\\\\\",\\\\N    \\\\\\\"BOOST\\\\\\\" : 1.0\\\\N  }\\\\N}^1.0\\\" ],\\n    \\\"ANALYZER\\\" : \\\"MULTI_MATCH\\\",\\n    \\\"REWRITE\\\" : \\\"\\\",\\n    \\\"FUZZY_REWRITE\\\" : \\\"HI!\\\",\\n    \\\"BOOST\\\" : 0.0\\n  }\\n}\",\n    \"fuzzy_rewrite\" : \"\",\n    \"lenient\" : false,\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder29);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder40);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder42);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder44);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder46);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder48);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder60);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder62);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder64);
// flaky:         org.junit.Assert.assertNotNull(multiMatchQueryBuilder65);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder67);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder69);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder71);
    }

    @Test
    public void test15179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15179");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.tieBreaker(0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder10.cutoffFrequency((float) 0L);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder10.minimumShouldMatch("{\n  \"multiMatch\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzyRewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder10.lenient(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder18.maxExpansions((int) (byte) -1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder18.maxExpansions((int) (byte) 1);
        java.lang.String str23 = multiMatchQueryBuilder18.queryName();
        org.elasticsearch.index.query.QueryShardContext queryShardContext24 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.lucene.search.Query query25 = multiMatchQueryBuilder18.toQuery(queryShardContext24);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNull(str23);
    }

    @Test
    public void test15180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15180");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder10.field("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder10.rewrite("{\n  \"multiMatch\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"rewrite\" : \"multi_match\",\n    \"fuzzyRewrite\" : \"hi!\",\n    \"lenient\" : false,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder16.lenient(false);
        java.lang.String str19 = multiMatchQueryBuilder16.getName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder16.cutoffFrequency((float) (short) -1);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "multi_match" + "'", str19, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
    }

    @Test
    public void test15181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15181");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder8.queryName("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.Operator operator13 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder12.operator(operator13);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder14.lenient(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder16.maxExpansions((int) (short) 1);
        java.lang.String[] strArray26 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray26);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = multiMatchQueryBuilder27.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = multiMatchQueryBuilder29.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery32 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder33 = multiMatchQueryBuilder31.zeroTermsQuery(zeroTermsQuery32);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder35 = multiMatchQueryBuilder33.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder37 = multiMatchQueryBuilder35.queryName("hi!");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery38 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder39 = multiMatchQueryBuilder37.zeroTermsQuery(zeroTermsQuery38);
        boolean boolean40 = multiMatchQueryBuilder16.equals((java.lang.Object) multiMatchQueryBuilder37);
        org.elasticsearch.index.query.Operator operator41 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder42 = multiMatchQueryBuilder37.operator(operator41);
        org.elasticsearch.index.query.Operator operator43 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder44 = multiMatchQueryBuilder37.operator(operator43);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder29);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder31);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder33);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder35);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder37);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder42);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder44);
    }

    @Test
    public void test15182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15182");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery13 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder12.zeroTermsQuery(zeroTermsQuery13);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder14.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder16.queryName("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder16.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder20.lenient(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type23 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE;
        org.elasticsearch.index.search.MatchQuery.Type type24 = type23.matchQueryType();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder20.type(type23);
        java.lang.Object obj26 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type27 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX;
        float float28 = type27.tieBreaker();
        float float29 = type27.tieBreaker();
        org.elasticsearch.index.search.MatchQuery.Type type30 = type27.matchQueryType();
        java.lang.String[] strArray38 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder39 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray38);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder41 = multiMatchQueryBuilder39.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder43 = multiMatchQueryBuilder39.queryName("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.Operator operator44 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder45 = multiMatchQueryBuilder43.operator(operator44);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder47 = multiMatchQueryBuilder45.lenient(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder49 = multiMatchQueryBuilder47.maxExpansions((int) (short) 1);
        java.lang.String[] strArray57 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder58 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray57);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder59 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) multiMatchQueryBuilder47, strArray57);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder60 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) type27, strArray57);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder61 = new org.elasticsearch.index.query.MultiMatchQueryBuilder(obj26, strArray57);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder62 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) multiMatchQueryBuilder25, strArray57);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder64 = multiMatchQueryBuilder62.fuzzyRewrite("{\n  \"multiMatch\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"type\" : \"phrase_prefix\",\n    \"maxExpansions\" : 10,\n    \"fuzzyRewrite\" : \"\",\n    \"tieBreaker\" : 0.0,\n    \"cutoffFrequency\" : 0.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery65 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder66 = multiMatchQueryBuilder62.zeroTermsQuery(zeroTermsQuery65);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder68 = multiMatchQueryBuilder66.lenient(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder70 = multiMatchQueryBuilder66.tieBreaker(35.0f);
        java.lang.String[] strArray78 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder79 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray78);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder81 = multiMatchQueryBuilder79.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder83 = multiMatchQueryBuilder81.tieBreaker(0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder85 = multiMatchQueryBuilder81.cutoffFrequency((float) 0L);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder87 = multiMatchQueryBuilder81.minimumShouldMatch("{\n  \"multiMatch\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzyRewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder89 = multiMatchQueryBuilder81.maxExpansions(0);
        org.elasticsearch.index.query.Operator operator90 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder91 = multiMatchQueryBuilder89.operator(operator90);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder93 = multiMatchQueryBuilder91.rewrite("{\n  \"multiMatch\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\", \"\" ],\n    \"analyzer\" : \"multi_match\",\n    \"fuzzyRewrite\" : \"hi!\",\n    \"tieBreaker\" : 100.0,\n    \"boost\" : 0.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder94 = null; // flaky: multiMatchQueryBuilder66.fuzziness((java.lang.Object) multiMatchQueryBuilder93);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder97 = multiMatchQueryBuilder93.field("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"analyzer\" : \"{\\n  \\\"multiMatch\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"fuzzyRewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"rewrite\" : \"multi_match\",\n    \"fuzzy_rewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"tie_breaker\" : 35.0,\n    \"lenient\" : false,\n    \"boost\" : 1.0\n  }\n}", 100.0f);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertTrue("'" + type23 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE + "'", type23.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE));
        org.junit.Assert.assertTrue("'" + type24 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.PHRASE + "'", type24.equals(org.elasticsearch.index.search.MatchQuery.Type.PHRASE));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
        org.junit.Assert.assertTrue("'" + type27 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX + "'", type27.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX));
        org.junit.Assert.assertTrue("'" + float28 + "' != '" + 0.0f + "'", float28 == 0.0f);
        org.junit.Assert.assertTrue("'" + float29 + "' != '" + 0.0f + "'", float29 == 0.0f);
        org.junit.Assert.assertTrue("'" + type30 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX + "'", type30.equals(org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX));
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder41);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder43);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder45);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder47);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder49);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder64);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder66);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder68);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder70);
        org.junit.Assert.assertNotNull(strArray78);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder81);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder83);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder85);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder87);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder89);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder91);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder93);
// flaky:         org.junit.Assert.assertNotNull(multiMatchQueryBuilder94);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder97);
    }

    @Test
    public void test15183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15183");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery13 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder12.zeroTermsQuery(zeroTermsQuery13);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder14.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery17 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder14.zeroTermsQuery(zeroTermsQuery17);
        java.lang.String str19 = multiMatchQueryBuilder18.queryName();
        java.lang.String str20 = multiMatchQueryBuilder18.queryName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder18.analyzer("{\n  \"multiMatch\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzyRewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder22.useDisMax(false);
        float float25 = multiMatchQueryBuilder24.boost();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder24.minimumShouldMatch("{\n  \"multiMatch\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzyRewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"slop\\\" : -1,\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"lenient\\\" : true,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"boost\" : 1.0,\n    \"Name\" : \"hi!\"\n  }\n}");
        org.elasticsearch.index.query.QueryShardContext queryShardContext28 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.lucene.search.Query query29 = multiMatchQueryBuilder27.toFilter(queryShardContext28);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertTrue("'" + float25 + "' != '" + 1.0f + "'", float25 == 1.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
    }

    @Test
    public void test15184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15184");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery13 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder12.zeroTermsQuery(zeroTermsQuery13);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder14.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder16.queryName("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder16.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder16.analyzer("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder16.tieBreaker((float) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder16.field("multi_match");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = multiMatchQueryBuilder26.lenient(true);
        org.elasticsearch.index.query.Operator operator29 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder30 = multiMatchQueryBuilder26.operator(operator29);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery31 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder32 = multiMatchQueryBuilder30.zeroTermsQuery(zeroTermsQuery31);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder35 = multiMatchQueryBuilder32.field("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"^32.0\", \"^32.0\", \"^32.0\", \"^32.0\", \"^32.0\", \"^32.0\" ],\n    \"minimum_should_match\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"lenient\\\" : true,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0,\n    \"_name\" : \"\"\n  }\n}", (float) 10);
        org.elasticsearch.common.io.stream.StreamOutput streamOutput36 = null;
        // The following exception was thrown during execution in test generation
        try {
            multiMatchQueryBuilder32.writeTo(streamOutput36);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder28);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder30);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder32);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder35);
    }

    @Test
    public void test15185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15185");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder8.queryName("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.Operator operator13 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder12.operator(operator13);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder14.lenient(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder16.maxExpansions((int) (short) 1);
        java.lang.String str19 = multiMatchQueryBuilder16.getWriteableName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder16.prefixLength(0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder21.slop((int) (short) -1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder21.minimumShouldMatch("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"prefix_length\" : -1,\n    \"rewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"multi_match^0.0\\\" ],\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"lenient\\\" : true,\\n    \\\"boost\\\" : 0.0\\n  }\\n}\",\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"lenient\" : false,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder25.fuzzyRewrite("{\n  \"multiMatch\" : {\n    \"query\" : 100,\n    \"fields\" : [ \"{\\n  \\\"multiMatch\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"fuzzyRewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\" ],\n    \"cutoffFrequency\" : 0.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = multiMatchQueryBuilder25.maxExpansions(100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = multiMatchQueryBuilder29.maxExpansions((int) (byte) 1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder33 = multiMatchQueryBuilder29.minimumShouldMatch("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"use_dis_max\" : false,\n    \"boost\" : 0.0,\n    \"_name\" : \"hi!\"\n  }\n}");
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "multi_match" + "'", str19, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder29);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder31);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder33);
    }

    @Test
    public void test15186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15186");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.tieBreaker(0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type13 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX;
        float float14 = type13.tieBreaker();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder10.type(type13);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder10.cutoffFrequency((float) 0L);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder10.fuzzyRewrite("{\n  \"multiMatch\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"type\" : \"phrase_prefix\",\n    \"maxExpansions\" : 10,\n    \"fuzzyRewrite\" : \"\",\n    \"tieBreaker\" : 0.0,\n    \"cutoffFrequency\" : 0.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.Operator operator20 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder10.operator(operator20);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder10.rewrite("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\", \"\", \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"type\\\" : \\\"phrase_prefix\\\",\\n    \\\"max_expansions\\\" : 10,\\n    \\\"fuzzy_rewrite\\\" : \\\"\\\",\\n    \\\"tie_breaker\\\" : 0.0,\\n    \\\"cutoff_frequency\\\" : 0.0,\\n    \\\"boost\\\" : 1.0\\n  }\\n}^1.0\" ],\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"use_dis_max\" : false,\n    \"boost\" : 0.0\n  }\n}");
        java.lang.String str24 = multiMatchQueryBuilder10.getWriteableName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder10.lenient(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = multiMatchQueryBuilder10.tieBreaker((float) (byte) 0);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertTrue("'" + type13 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX + "'", type13.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX));
        org.junit.Assert.assertTrue("'" + float14 + "' != '" + 0.0f + "'", float14 == 0.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "multi_match" + "'", str24, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder28);
    }

    @Test
    public void test15187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15187");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder12.lenient(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder14.rewrite("multi_match");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder16.queryName("multi_match");
        java.lang.String str19 = multiMatchQueryBuilder16.getWriteableName();
        org.elasticsearch.index.query.QueryShardContext queryShardContext20 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.lucene.search.Query query21 = multiMatchQueryBuilder16.toQuery(queryShardContext20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "multi_match" + "'", str19, "multi_match");
    }

    @Test
    public void test15188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15188");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.tieBreaker(0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type13 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX;
        float float14 = type13.tieBreaker();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder10.type(type13);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder10.lenient(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder10.maxExpansions((int) (byte) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder19.prefixLength((int) (short) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder19.field("{\n  \"multiMatch\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\", \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"analyzer\\\" : \\\"multi_match\\\",\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}^10.0\" ],\n    \"fuzzyRewrite\" : \"\",\n    \"boost\" : 1.0,\n    \"Name\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\"\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder23.minimumShouldMatch("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"analyzer\" : \"{\\n  \\\"multiMatch\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"type\\\" : \\\"phrase_prefix\\\",\\n    \\\"maxExpansions\\\" : 10,\\n    \\\"fuzzyRewrite\\\" : \\\"\\\",\\n    \\\"tieBreaker\\\" : 0.0,\\n    \\\"cutoffFrequency\\\" : 0.0,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"slop\" : 32,\n    \"prefix_length\" : 0,\n    \"rewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"lenient\" : false,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String[] strArray33 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder34 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray33);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder36 = multiMatchQueryBuilder34.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder38 = multiMatchQueryBuilder36.tieBreaker(0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type39 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX;
        float float40 = type39.tieBreaker();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder41 = multiMatchQueryBuilder36.type(type39);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder43 = multiMatchQueryBuilder36.cutoffFrequency((float) 0L);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder45 = multiMatchQueryBuilder36.lenient(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type46 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        org.elasticsearch.index.search.MatchQuery.Type type47 = type46.matchQueryType();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder48 = multiMatchQueryBuilder36.type(type46);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder50 = multiMatchQueryBuilder36.useDisMax(false);
        java.lang.String[] strArray58 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder59 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray58);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder61 = multiMatchQueryBuilder59.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder63 = multiMatchQueryBuilder61.fuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder65 = multiMatchQueryBuilder61.minimumShouldMatch("multi_match");
        boolean boolean66 = multiMatchQueryBuilder36.equals((java.lang.Object) "multi_match");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder68 = multiMatchQueryBuilder36.queryName("{\n  \"multiMatch\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"type\" : \"phrase_prefix\",\n    \"maxExpansions\" : 10,\n    \"fuzzyRewrite\" : \"\",\n    \"tieBreaker\" : 0.0,\n    \"cutoffFrequency\" : 0.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.Operator operator69 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder70 = multiMatchQueryBuilder36.operator(operator69);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder72 = multiMatchQueryBuilder70.prefixLength((int) (byte) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder74 = multiMatchQueryBuilder70.slop((int) (short) 1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder76 = multiMatchQueryBuilder70.tieBreaker((float) 100L);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder77 = multiMatchQueryBuilder25.fuzziness((java.lang.Object) 100L);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder79 = multiMatchQueryBuilder25.field("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\", \"multi_match^-1.0\" ],\n    \"minimum_should_match\" : \"{\\n  \\\"multiMatch\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"maxExpansions\\\" : 1,\\n    \\\"fuzzyRewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0,\n    \"_name\" : \"hi!\"\n  }\n}");
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertTrue("'" + type13 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX + "'", type13.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX));
        org.junit.Assert.assertTrue("'" + float14 + "' != '" + 0.0f + "'", float14 == 0.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder36);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder38);
        org.junit.Assert.assertTrue("'" + type39 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX + "'", type39.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX));
        org.junit.Assert.assertTrue("'" + float40 + "' != '" + 0.0f + "'", float40 == 0.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder41);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder43);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder45);
        org.junit.Assert.assertTrue("'" + type46 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type46.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertTrue("'" + type47 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type47.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder48);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder50);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder61);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder63);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder68);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder70);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder72);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder74);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder76);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder77);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder79);
    }

    @Test
    public void test15189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15189");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery13 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder12.zeroTermsQuery(zeroTermsQuery13);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder14.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery17 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder14.zeroTermsQuery(zeroTermsQuery17);
        java.lang.String[] strArray26 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray26);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = multiMatchQueryBuilder27.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = multiMatchQueryBuilder29.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery32 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder33 = multiMatchQueryBuilder31.zeroTermsQuery(zeroTermsQuery32);
        java.lang.String str34 = multiMatchQueryBuilder33.getName();
        boolean boolean35 = multiMatchQueryBuilder18.equals((java.lang.Object) multiMatchQueryBuilder33);
        java.lang.String str36 = multiMatchQueryBuilder33.getWriteableName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder38 = multiMatchQueryBuilder33.analyzer("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder40 = multiMatchQueryBuilder33.fuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"slop\" : -1,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder42 = multiMatchQueryBuilder33.queryName("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder44 = multiMatchQueryBuilder33.slop(100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder46 = multiMatchQueryBuilder33.field("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"^32.0\", \"^32.0\", \"^32.0\", \"^32.0\", \"^32.0\", \"^32.0\" ],\n    \"minimum_should_match\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"lenient\\\" : true,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0,\n    \"_name\" : \"\"\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder48 = multiMatchQueryBuilder46.fuzzyRewrite("{\n  \"multiMatch\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"analyzer\" : \"{\\n  \\\"multiMatch\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"fuzzyRewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"rewrite\" : \"multi_match\",\n    \"fuzzyRewrite\" : \"hi!\",\n    \"tieBreaker\" : 100.0,\n    \"lenient\" : false,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder50 = multiMatchQueryBuilder48.lenient(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder52 = multiMatchQueryBuilder48.lenient(false);
        org.elasticsearch.common.io.stream.StreamOutput streamOutput53 = null;
        // The following exception was thrown during execution in test generation
        try {
            multiMatchQueryBuilder52.writeTo(streamOutput53);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder29);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder31);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "multi_match" + "'", str34, "multi_match");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "multi_match" + "'", str36, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder38);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder40);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder42);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder44);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder46);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder48);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder50);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder52);
    }

    @Test
    public void test15190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15190");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder8.queryName("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.Operator operator13 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder12.operator(operator13);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder12.field("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"analyzer\" : \"multi_match\",\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}", 10.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder17.field("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery20 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder17.zeroTermsQuery(zeroTermsQuery20);
        org.elasticsearch.index.query.Operator operator22 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder21.operator(operator22);
        java.lang.String[] strArray31 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder32 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray31);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder34 = multiMatchQueryBuilder32.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder36 = multiMatchQueryBuilder34.fuzzyRewrite("hi!");
        java.lang.String str37 = multiMatchQueryBuilder34.getName();
        float float38 = multiMatchQueryBuilder34.boost();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder40 = multiMatchQueryBuilder34.lenient(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder42 = multiMatchQueryBuilder34.queryName("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder44 = multiMatchQueryBuilder34.cutoffFrequency((float) (-1L));
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder46 = multiMatchQueryBuilder34.useDisMax(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder47 = multiMatchQueryBuilder23.fuzziness((java.lang.Object) true);
        java.lang.String[] strArray55 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder56 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray55);
        java.lang.Object obj57 = null;
        java.lang.String[] strArray66 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder67 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray66);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder68 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 10.0f, strArray66);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder69 = new org.elasticsearch.index.query.MultiMatchQueryBuilder(obj57, strArray66);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder70 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray66);
        org.elasticsearch.index.query.Operator operator71 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder72 = multiMatchQueryBuilder70.operator(operator71);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder74 = multiMatchQueryBuilder72.cutoffFrequency((float) (-1L));
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder75 = null; // flaky: multiMatchQueryBuilder23.fuzziness((java.lang.Object) multiMatchQueryBuilder74);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder77 = multiMatchQueryBuilder74.slop(1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder79 = multiMatchQueryBuilder77.rewrite("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzziness\" : \"PHRASE_PREFIX\",\n    \"fuzzy_rewrite\" : \"\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder81 = multiMatchQueryBuilder79.minimumShouldMatch("{\n  \"multiMatch\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"rewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"slop\\\" : -1,\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"lenient\\\" : true,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"fuzzyRewrite\" : \"hi!\",\n    \"tieBreaker\" : 52.0,\n    \"boost\" : -1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder83 = multiMatchQueryBuilder81.fuzzyRewrite("{\n  \"multiMatch\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\", \"{\\n  \\\"multiMatch\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"rewrite\\\" : \\\"multi_match\\\",\\n    \\\"fuzzyRewrite\\\" : \\\"hi!\\\",\\n    \\\"lenient\\\" : false,\\n    \\\"boost\\\" : 1.0\\n  }\\n}^-1.0\" ],\n    \"prefixLength\" : 0,\n    \"fuzzyRewrite\" : \"hi!\",\n    \"lenient\" : false,\n    \"cutoffFrequency\" : 0.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder85 = multiMatchQueryBuilder83.prefixLength(100);
        org.elasticsearch.common.io.stream.StreamOutput streamOutput86 = null;
        // The following exception was thrown during execution in test generation
        try {
            multiMatchQueryBuilder85.writeTo(streamOutput86);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder34);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "multi_match" + "'", str37, "multi_match");
        org.junit.Assert.assertTrue("'" + float38 + "' != '" + 1.0f + "'", float38 == 1.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder40);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder42);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder44);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder46);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder47);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder72);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder74);
// flaky:         org.junit.Assert.assertNotNull(multiMatchQueryBuilder75);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder77);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder79);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder81);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder83);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder85);
    }

    @Test
    public void test15191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15191");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.fuzzyRewrite("hi!");
        java.lang.String str13 = multiMatchQueryBuilder10.getName();
        float float14 = multiMatchQueryBuilder10.boost();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder10.lenient(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder10.slop((int) (short) -1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type19 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX;
        org.elasticsearch.index.search.MatchQuery.Type type20 = type19.matchQueryType();
        org.elasticsearch.index.search.MatchQuery.Type type21 = type19.matchQueryType();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder10.type(type19);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder10.queryName("multi_match");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder24.minimumShouldMatch("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = multiMatchQueryBuilder26.field("", (float) 10L);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = multiMatchQueryBuilder29.boost((float) (short) 10);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery32 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder33 = multiMatchQueryBuilder31.zeroTermsQuery(zeroTermsQuery32);
        java.lang.String[] strArray41 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder42 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray41);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder44 = multiMatchQueryBuilder42.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder46 = multiMatchQueryBuilder44.tieBreaker(0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type47 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX;
        float float48 = type47.tieBreaker();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder49 = multiMatchQueryBuilder44.type(type47);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder51 = multiMatchQueryBuilder44.cutoffFrequency((float) 0L);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder53 = multiMatchQueryBuilder44.maxExpansions(10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder55 = multiMatchQueryBuilder44.analyzer("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"slop\" : -1,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder57 = multiMatchQueryBuilder44.analyzer("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"analyzer\" : \"multi_match\",\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder59 = multiMatchQueryBuilder57.rewrite("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String[] strArray67 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder68 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray67);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder70 = multiMatchQueryBuilder68.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder72 = multiMatchQueryBuilder70.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder74 = multiMatchQueryBuilder72.tieBreaker((float) '#');
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder76 = multiMatchQueryBuilder74.useDisMax(true);
        java.lang.Class<?> wildcardClass77 = multiMatchQueryBuilder74.getClass();
        boolean boolean78 = multiMatchQueryBuilder57.equals((java.lang.Object) multiMatchQueryBuilder74);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder80 = multiMatchQueryBuilder57.prefixLength((int) (short) 10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder82 = multiMatchQueryBuilder57.slop((int) (short) 100);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery83 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder84 = multiMatchQueryBuilder57.zeroTermsQuery(zeroTermsQuery83);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder86 = multiMatchQueryBuilder84.queryName("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"slop\" : 0,\n    \"prefix_length\" : 0,\n    \"rewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"analyzer\\\" : \\\"multi_match\\\",\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"lenient\" : false,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder88 = multiMatchQueryBuilder84.field("{\n  \"multiMatch\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\", \"\" ],\n    \"analyzer\" : \"multi_match\",\n    \"maxExpansions\" : 1,\n    \"fuzzyRewrite\" : \"hi!\",\n    \"tieBreaker\" : 0.0,\n    \"boost\" : 0.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder89 = null; // flaky: multiMatchQueryBuilder31.fuzziness((java.lang.Object) multiMatchQueryBuilder88);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery90 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder91 = multiMatchQueryBuilder88.zeroTermsQuery(zeroTermsQuery90);
        org.elasticsearch.common.io.stream.StreamInput streamInput92 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder93 = multiMatchQueryBuilder88.readFrom(streamInput92);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "multi_match" + "'", str13, "multi_match");
        org.junit.Assert.assertTrue("'" + float14 + "' != '" + 1.0f + "'", float14 == 1.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertTrue("'" + type19 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX + "'", type19.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX));
        org.junit.Assert.assertTrue("'" + type20 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX + "'", type20.equals(org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX));
        org.junit.Assert.assertTrue("'" + type21 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX + "'", type21.equals(org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder29);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder31);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder33);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder44);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder46);
        org.junit.Assert.assertTrue("'" + type47 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX + "'", type47.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX));
        org.junit.Assert.assertTrue("'" + float48 + "' != '" + 0.0f + "'", float48 == 0.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder49);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder51);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder53);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder55);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder57);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder59);
        org.junit.Assert.assertNotNull(strArray67);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder70);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder72);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder74);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder76);
        org.junit.Assert.assertNotNull(wildcardClass77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder80);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder82);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder84);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder86);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder88);
// flaky:         org.junit.Assert.assertNotNull(multiMatchQueryBuilder89);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder91);
    }

    @Test
    public void test15192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15192");
        org.elasticsearch.common.xcontent.XContent xContent0 = null;
        java.io.OutputStream outputStream1 = null;
        java.lang.Object obj2 = null;
        java.lang.String[] strArray10 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder11.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder13.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.QueryValidationException queryValidationException16 = multiMatchQueryBuilder13.validate();
        java.lang.String[] strArray24 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray24);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder25.fuzzyRewrite("");
        java.lang.String[] strArray35 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder36 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray35);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder38 = multiMatchQueryBuilder36.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder40 = multiMatchQueryBuilder38.tieBreaker(0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type41 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX;
        float float42 = type41.tieBreaker();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder43 = multiMatchQueryBuilder38.type(type41);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder45 = multiMatchQueryBuilder38.cutoffFrequency((float) 0L);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder47 = multiMatchQueryBuilder38.lenient(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type48 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        org.elasticsearch.index.search.MatchQuery.Type type49 = type48.matchQueryType();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder50 = multiMatchQueryBuilder38.type(type48);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder51 = multiMatchQueryBuilder25.fuzziness((java.lang.Object) type48);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder52 = multiMatchQueryBuilder13.type(type48);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder54 = multiMatchQueryBuilder13.analyzer("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\", \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"analyzer\\\" : \\\"multi_match\\\",\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}^10.0\", \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\" ],\n    \"fuzzy_rewrite\" : \"\",\n    \"boost\" : 1.0,\n    \"_name\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\"\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder56 = multiMatchQueryBuilder54.cutoffFrequency((float) 1L);
        java.lang.Object obj57 = null;
        java.lang.String[] strArray66 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder67 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray66);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder68 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 10.0f, strArray66);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder69 = new org.elasticsearch.index.query.MultiMatchQueryBuilder(obj57, strArray66);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder70 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) multiMatchQueryBuilder54, strArray66);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder71 = new org.elasticsearch.index.query.MultiMatchQueryBuilder(obj2, strArray66);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder72 = new org.elasticsearch.common.xcontent.XContentBuilder(xContent0, outputStream1, strArray66);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNull(queryValidationException16);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder38);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder40);
        org.junit.Assert.assertTrue("'" + type41 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX + "'", type41.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX));
        org.junit.Assert.assertTrue("'" + float42 + "' != '" + 0.0f + "'", float42 == 0.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder43);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder45);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder47);
        org.junit.Assert.assertTrue("'" + type48 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type48.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertTrue("'" + type49 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type49.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder50);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder51);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder52);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder54);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder56);
        org.junit.Assert.assertNotNull(strArray66);
    }

    @Test
    public void test15193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15193");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.tieBreaker(0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder10.maxExpansions((int) (byte) 1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder14.fuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder14.lenient(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder14.rewrite("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\", \"\", \"{\\n  \\\"multiMatch\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"fuzzyRewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}^10.0\" ],\n    \"analyzer\" : \"multi_match\",\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 0.0\n  }\n}");
        java.lang.String str21 = multiMatchQueryBuilder20.getName();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "multi_match" + "'", str21, "multi_match");
    }

    @Test
    public void test15194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15194");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery13 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder12.zeroTermsQuery(zeroTermsQuery13);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder14.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder16.queryName("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder16.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder16.analyzer("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder16.tieBreaker((float) 0);
        org.elasticsearch.index.query.Operator operator25 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder16.operator(operator25);
        java.lang.String[] strArray34 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder35 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray34);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder37 = multiMatchQueryBuilder35.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder39 = multiMatchQueryBuilder37.tieBreaker(0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder41 = multiMatchQueryBuilder37.cutoffFrequency((float) 0L);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder43 = multiMatchQueryBuilder41.analyzer("");
        java.lang.String[] strArray51 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder52 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray51);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder54 = multiMatchQueryBuilder52.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder56 = multiMatchQueryBuilder54.tieBreaker(0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type57 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX;
        float float58 = type57.tieBreaker();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder59 = multiMatchQueryBuilder54.type(type57);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder61 = multiMatchQueryBuilder54.cutoffFrequency((float) 0L);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder63 = multiMatchQueryBuilder54.lenient(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type64 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        org.elasticsearch.index.search.MatchQuery.Type type65 = type64.matchQueryType();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder66 = multiMatchQueryBuilder54.type(type64);
        org.elasticsearch.index.search.MatchQuery.Type type67 = type64.matchQueryType();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder68 = multiMatchQueryBuilder41.type(type64);
        org.elasticsearch.common.ParseField parseField69 = type64.parseField();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder70 = multiMatchQueryBuilder16.type(type64);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder72 = multiMatchQueryBuilder16.queryName("{\n  \"multiMatch\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"analyzer\" : \"{\\n  \\\"multiMatch\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"fuzzyRewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"rewrite\" : \"multi_match\",\n    \"fuzzyRewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery73 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder74 = multiMatchQueryBuilder16.zeroTermsQuery(zeroTermsQuery73);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder76 = multiMatchQueryBuilder74.rewrite("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"^10.0\", \"^10.0\", \"^10.0\", \"^10.0\", \"^10.0\", \"^10.0\" ],\n    \"type\" : \"phrase_prefix\",\n    \"slop\" : -1,\n    \"prefix_length\" : 35,\n    \"minimum_should_match\" : \"hi!\",\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 10.0,\n    \"_name\" : \"{\\n  \\\"multiMatch\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"rewrite\\\" : \\\"multi_match\\\",\\n    \\\"fuzzyRewrite\\\" : \\\"hi!\\\",\\n    \\\"lenient\\\" : false,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\"\n  }\n}");
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder37);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder39);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder41);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder43);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder54);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder56);
        org.junit.Assert.assertTrue("'" + type57 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX + "'", type57.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX));
        org.junit.Assert.assertTrue("'" + float58 + "' != '" + 0.0f + "'", float58 == 0.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder59);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder61);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder63);
        org.junit.Assert.assertTrue("'" + type64 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type64.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertTrue("'" + type65 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type65.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder66);
        org.junit.Assert.assertTrue("'" + type67 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type67.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder68);
        org.junit.Assert.assertNotNull(parseField69);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder70);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder72);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder74);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder76);
    }

    @Test
    public void test15195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15195");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.tieBreaker(0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type13 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX;
        float float14 = type13.tieBreaker();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder10.type(type13);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder10.cutoffFrequency((float) 0L);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder10.lenient(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type20 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        org.elasticsearch.index.search.MatchQuery.Type type21 = type20.matchQueryType();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder10.type(type20);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder10.cutoffFrequency(100.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder10.analyzer("{\n  \"multi_match\" : {\n    \"query\" : {\n      \"multi_match\" : {\n        \"query\" : 0.0,\n        \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n        \"type\" : \"phrase_prefix\",\n        \"analyzer\" : \"\",\n        \"slop\" : -1,\n        \"minimum_should_match\" : \"hi!\",\n        \"fuzzy_rewrite\" : \"hi!\",\n        \"lenient\" : true,\n        \"boost\" : 1.0,\n        \"_name\" : \"multi_match\"\n      }\n    },\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"prefix_length\" : 100,\n    \"tie_breaker\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertTrue("'" + type13 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX + "'", type13.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX));
        org.junit.Assert.assertTrue("'" + float14 + "' != '" + 0.0f + "'", float14 == 0.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertTrue("'" + type20 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type20.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertTrue("'" + type21 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type21.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
    }

    @Test
    public void test15196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15196");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.fuzzyRewrite("hi!");
        java.lang.String str13 = multiMatchQueryBuilder10.getName();
        float float14 = multiMatchQueryBuilder10.boost();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder10.lenient(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder10.slop((int) (short) -1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type19 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX;
        org.elasticsearch.index.search.MatchQuery.Type type20 = type19.matchQueryType();
        org.elasticsearch.index.search.MatchQuery.Type type21 = type19.matchQueryType();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder10.type(type19);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder22.rewrite("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"minimum_should_match\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"slop\\\" : -1,\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"lenient\\\" : true,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder22.tieBreaker((float) (short) 1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = multiMatchQueryBuilder26.prefixLength((int) (byte) -1);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery29 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder30 = multiMatchQueryBuilder26.zeroTermsQuery(zeroTermsQuery29);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery31 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder32 = multiMatchQueryBuilder26.zeroTermsQuery(zeroTermsQuery31);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder34 = multiMatchQueryBuilder32.tieBreaker(0.0f);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "multi_match" + "'", str13, "multi_match");
        org.junit.Assert.assertTrue("'" + float14 + "' != '" + 1.0f + "'", float14 == 1.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertTrue("'" + type19 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX + "'", type19.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX));
        org.junit.Assert.assertTrue("'" + type20 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX + "'", type20.equals(org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX));
        org.junit.Assert.assertTrue("'" + type21 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX + "'", type21.equals(org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder28);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder30);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder32);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder34);
    }

    @Test
    public void test15197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15197");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder8.queryName("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder12.tieBreaker((float) (short) 1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder14.tieBreaker(0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder16.cutoffFrequency((float) ' ');
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder16.lenient(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder16.prefixLength((int) '4');
        float float23 = multiMatchQueryBuilder22.boost();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertTrue("'" + float23 + "' != '" + 1.0f + "'", float23 == 1.0f);
    }

    @Test
    public void test15198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15198");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery13 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder12.zeroTermsQuery(zeroTermsQuery13);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder14.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery17 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder14.zeroTermsQuery(zeroTermsQuery17);
        java.lang.String[] strArray26 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray26);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = multiMatchQueryBuilder27.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = multiMatchQueryBuilder29.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery32 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder33 = multiMatchQueryBuilder31.zeroTermsQuery(zeroTermsQuery32);
        java.lang.String str34 = multiMatchQueryBuilder33.getName();
        boolean boolean35 = multiMatchQueryBuilder18.equals((java.lang.Object) multiMatchQueryBuilder33);
        java.lang.String str36 = multiMatchQueryBuilder33.getWriteableName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder38 = multiMatchQueryBuilder33.analyzer("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder40 = multiMatchQueryBuilder33.fuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"slop\" : -1,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder49 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray48);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder51 = multiMatchQueryBuilder49.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder53 = multiMatchQueryBuilder49.queryName("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.Operator operator54 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder55 = multiMatchQueryBuilder53.operator(operator54);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder58 = multiMatchQueryBuilder53.field("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"analyzer\" : \"multi_match\",\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}", 10.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder60 = multiMatchQueryBuilder58.field("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery61 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder62 = multiMatchQueryBuilder58.zeroTermsQuery(zeroTermsQuery61);
        org.elasticsearch.index.query.Operator operator63 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder64 = multiMatchQueryBuilder62.operator(operator63);
        java.lang.String str65 = multiMatchQueryBuilder62.getName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder66 = null; // flaky: multiMatchQueryBuilder40.fuzziness((java.lang.Object) multiMatchQueryBuilder62);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder68 = null; // flaky: multiMatchQueryBuilder66.minimumShouldMatch("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"max_expansions\" : 1,\n    \"minimum_should_match\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"fuzzy_rewrite\" : \"\",\n    \"lenient\" : true,\n    \"boost\" : 1.0,\n    \"_name\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\"\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder70 = null; // flaky: multiMatchQueryBuilder66.queryName("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"analyzer\" : \"multi_match\",\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder72 = null; // flaky: multiMatchQueryBuilder70.maxExpansions((int) (short) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder74 = null; // flaky: multiMatchQueryBuilder70.maxExpansions((int) (byte) 10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder76 = null; // flaky: multiMatchQueryBuilder70.analyzer("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"type\" : \"phrase_prefix\",\n    \"slop\" : -1,\n    \"minimum_should_match\" : \"hi!\",\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"lenient\" : true,\n    \"cutoff_frequency\" : 97.0,\n    \"boost\" : -1.0,\n    \"_name\" : \"{\\n  \\\"multiMatch\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"fuzzyRewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\"\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder78 = null; // flaky: multiMatchQueryBuilder70.tieBreaker((float) 'a');
        org.elasticsearch.index.query.QueryValidationException queryValidationException79 = null; // flaky: multiMatchQueryBuilder78.validate();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder29);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder31);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "multi_match" + "'", str34, "multi_match");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "multi_match" + "'", str36, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder38);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder40);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder51);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder53);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder55);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder58);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder60);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder62);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "multi_match" + "'", str65, "multi_match");
// flaky:         org.junit.Assert.assertNotNull(multiMatchQueryBuilder66);
// flaky:         org.junit.Assert.assertNotNull(multiMatchQueryBuilder68);
// flaky:         org.junit.Assert.assertNotNull(multiMatchQueryBuilder70);
// flaky:         org.junit.Assert.assertNotNull(multiMatchQueryBuilder72);
// flaky:         org.junit.Assert.assertNotNull(multiMatchQueryBuilder74);
// flaky:         org.junit.Assert.assertNotNull(multiMatchQueryBuilder76);
// flaky:         org.junit.Assert.assertNotNull(multiMatchQueryBuilder78);
        org.junit.Assert.assertNull(queryValidationException79);
    }

    @Test
    public void test15199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15199");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.fuzzyRewrite("hi!");
        java.lang.String str13 = multiMatchQueryBuilder10.getName();
        float float14 = multiMatchQueryBuilder10.boost();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder10.lenient(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder10.slop((int) (short) -1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type19 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX;
        org.elasticsearch.index.search.MatchQuery.Type type20 = type19.matchQueryType();
        org.elasticsearch.index.search.MatchQuery.Type type21 = type19.matchQueryType();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder10.type(type19);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder10.queryName("multi_match");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder24.minimumShouldMatch("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = multiMatchQueryBuilder24.lenient(true);
        java.lang.String[] strArray36 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder37 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray36);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder39 = multiMatchQueryBuilder37.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder41 = multiMatchQueryBuilder39.fuzzyRewrite("hi!");
        java.lang.String str42 = multiMatchQueryBuilder39.getName();
        float float43 = multiMatchQueryBuilder39.boost();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder45 = multiMatchQueryBuilder39.lenient(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder47 = multiMatchQueryBuilder39.queryName("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder49 = multiMatchQueryBuilder39.cutoffFrequency((float) (-1L));
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder50 = multiMatchQueryBuilder24.fuzziness((java.lang.Object) (-1L));
        float float51 = multiMatchQueryBuilder50.boost();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder53 = multiMatchQueryBuilder50.cutoffFrequency((float) 1L);
        org.elasticsearch.index.query.Operator operator54 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder55 = multiMatchQueryBuilder53.operator(operator54);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "multi_match" + "'", str13, "multi_match");
        org.junit.Assert.assertTrue("'" + float14 + "' != '" + 1.0f + "'", float14 == 1.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertTrue("'" + type19 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX + "'", type19.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX));
        org.junit.Assert.assertTrue("'" + type20 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX + "'", type20.equals(org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX));
        org.junit.Assert.assertTrue("'" + type21 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX + "'", type21.equals(org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder28);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder39);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "multi_match" + "'", str42, "multi_match");
        org.junit.Assert.assertTrue("'" + float43 + "' != '" + 1.0f + "'", float43 == 1.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder45);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder47);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder49);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder50);
        org.junit.Assert.assertTrue("'" + float51 + "' != '" + 1.0f + "'", float51 == 1.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder53);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder55);
    }

    @Test
    public void test15200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15200");
        org.elasticsearch.common.xcontent.XContent xContent0 = null;
        java.lang.String[] strArray8 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder9 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray8);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder9.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder11.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery14 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder13.zeroTermsQuery(zeroTermsQuery14);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder15.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder17.queryName("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder19.useDisMax(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type22 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS;
        org.elasticsearch.index.search.MatchQuery.Type type23 = type22.matchQueryType();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder21.type(type22);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type25 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder21.type(type25);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = multiMatchQueryBuilder26.cutoffFrequency((float) (short) 1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder30 = multiMatchQueryBuilder26.queryName("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!^-1.0\", \"\", \"\", \"\", \"\", \"\", \"hi!^-1.0\" ],\n    \"analyzer\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"slop\\\" : -1,\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"lenient\\\" : true,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0,\n    \"_name\" : \"hi!\"\n  }\n}");
        java.lang.String[] strArray38 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder39 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray38);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder41 = multiMatchQueryBuilder39.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder43 = multiMatchQueryBuilder41.tieBreaker(0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type44 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX;
        float float45 = type44.tieBreaker();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder46 = multiMatchQueryBuilder41.type(type44);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder48 = multiMatchQueryBuilder41.cutoffFrequency((float) 0L);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder50 = multiMatchQueryBuilder41.lenient(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type51 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        org.elasticsearch.index.search.MatchQuery.Type type52 = type51.matchQueryType();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder53 = multiMatchQueryBuilder41.type(type51);
        org.elasticsearch.common.ParseField parseField54 = type51.parseField();
        float float55 = type51.tieBreaker();
        org.elasticsearch.index.search.MatchQuery.Type type56 = type51.matchQueryType();
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type57 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX;
        float float58 = type57.tieBreaker();
        float float59 = type57.tieBreaker();
        org.elasticsearch.index.search.MatchQuery.Type type60 = type57.matchQueryType();
        java.lang.String[] strArray68 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder69 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray68);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder71 = multiMatchQueryBuilder69.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder73 = multiMatchQueryBuilder69.queryName("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.Operator operator74 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder75 = multiMatchQueryBuilder73.operator(operator74);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder77 = multiMatchQueryBuilder75.lenient(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder79 = multiMatchQueryBuilder77.maxExpansions((int) (short) 1);
        java.lang.String[] strArray87 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder88 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray87);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder89 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) multiMatchQueryBuilder77, strArray87);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder90 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) type57, strArray87);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder91 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) type51, strArray87);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder92 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!^-1.0\", \"\", \"\", \"\", \"\", \"\", \"hi!^-1.0\" ],\n    \"analyzer\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"slop\\\" : -1,\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"lenient\\\" : true,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0,\n    \"_name\" : \"hi!\"\n  }\n}", strArray87);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder93 = null; // flaky: org.elasticsearch.common.xcontent.XContentBuilder.builder(xContent0, strArray87);
// flaky:             org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertTrue("'" + type22 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS + "'", type22.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS));
        org.junit.Assert.assertTrue("'" + type23 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type23.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertTrue("'" + type25 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type25.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder28);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder30);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder41);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder43);
        org.junit.Assert.assertTrue("'" + type44 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX + "'", type44.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX));
        org.junit.Assert.assertTrue("'" + float45 + "' != '" + 0.0f + "'", float45 == 0.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder46);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder48);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder50);
        org.junit.Assert.assertTrue("'" + type51 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type51.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertTrue("'" + type52 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type52.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder53);
        org.junit.Assert.assertNotNull(parseField54);
        org.junit.Assert.assertTrue("'" + float55 + "' != '" + 0.0f + "'", float55 == 0.0f);
        org.junit.Assert.assertTrue("'" + type56 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type56.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertTrue("'" + type57 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX + "'", type57.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX));
        org.junit.Assert.assertTrue("'" + float58 + "' != '" + 0.0f + "'", float58 == 0.0f);
        org.junit.Assert.assertTrue("'" + float59 + "' != '" + 0.0f + "'", float59 == 0.0f);
        org.junit.Assert.assertTrue("'" + type60 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX + "'", type60.equals(org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX));
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder71);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder73);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder75);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder77);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder79);
        org.junit.Assert.assertNotNull(strArray87);
    }

    @Test
    public void test15201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15201");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder10.field("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder10.boost(0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder16.analyzer("multi_match");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder18.maxExpansions(1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder20.rewrite("{\n  \"multiMatch\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\", \"\" ],\n    \"analyzer\" : \"multi_match\",\n    \"maxExpansions\" : -1,\n    \"fuzzyRewrite\" : \"hi!\",\n    \"useDisMax\" : true,\n    \"boost\" : 0.0\n  }\n}");
        org.elasticsearch.index.query.Operator operator23 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder22.operator(operator23);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder24.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = multiMatchQueryBuilder24.field("{\n  \"multiMatch\" : {\n    \"query\" : \"PHRASE_PREFIX\",\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzziness\" : \"10\",\n    \"boost\" : 1.0\n  }\n}", (float) (-1L));
        float float30 = multiMatchQueryBuilder29.boost();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder32 = multiMatchQueryBuilder29.maxExpansions((int) '4');
        org.elasticsearch.common.io.stream.StreamInput streamInput33 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder34 = multiMatchQueryBuilder32.readFrom(streamInput33);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder29);
        org.junit.Assert.assertTrue("'" + float30 + "' != '" + 0.0f + "'", float30 == 0.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder32);
    }

    @Test
    public void test15202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15202");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.fuzzyRewrite("hi!");
        java.lang.String str13 = multiMatchQueryBuilder10.getName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder10.rewrite("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"slop\" : -1,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder10.prefixLength((int) (short) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder17.tieBreaker(0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder19.field("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"max_expansions\" : 1,\n    \"minimum_should_match\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"fuzzy_rewrite\" : \"\",\n    \"lenient\" : true,\n    \"boost\" : 1.0,\n    \"_name\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\"\n  }\n}");
        java.lang.String[] strArray29 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder30 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray29);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder32 = multiMatchQueryBuilder30.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder34 = multiMatchQueryBuilder30.queryName("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.Operator operator35 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder36 = multiMatchQueryBuilder34.operator(operator35);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder39 = multiMatchQueryBuilder34.field("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"analyzer\" : \"multi_match\",\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}", 10.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder41 = multiMatchQueryBuilder39.field("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery42 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder43 = multiMatchQueryBuilder39.zeroTermsQuery(zeroTermsQuery42);
        org.elasticsearch.index.query.Operator operator44 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder45 = multiMatchQueryBuilder43.operator(operator44);
        java.lang.String str46 = multiMatchQueryBuilder45.getWriteableName();
        org.elasticsearch.index.query.Operator operator47 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder48 = multiMatchQueryBuilder45.operator(operator47);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder50 = multiMatchQueryBuilder45.maxExpansions(10);
        java.lang.String str51 = null; // flaky: multiMatchQueryBuilder50.toString();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder53 = multiMatchQueryBuilder50.analyzer("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"slop\" : 0,\n    \"prefix_length\" : 0,\n    \"rewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"analyzer\\\" : \\\"multi_match\\\",\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"lenient\" : false,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder55 = multiMatchQueryBuilder50.maxExpansions(100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder57 = multiMatchQueryBuilder55.minimumShouldMatch("{\n  \"multiMatch\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"type\" : \"phrase_prefix\",\n    \"maxExpansions\" : 10,\n    \"fuzzyRewrite\" : \"\",\n    \"tieBreaker\" : 0.0,\n    \"cutoffFrequency\" : 0.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder59 = multiMatchQueryBuilder57.minimumShouldMatch("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"slop\\\" : -1,\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"lenient\\\" : true,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"boost\" : 1.0,\n    \"_name\" : \"hi!\"\n  }\n}");
        boolean boolean60 = multiMatchQueryBuilder19.equals((java.lang.Object) "{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"slop\\\" : -1,\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"lenient\\\" : true,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"boost\" : 1.0,\n    \"_name\" : \"hi!\"\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder62 = multiMatchQueryBuilder19.tieBreaker((float) (-1));
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder64 = multiMatchQueryBuilder62.maxExpansions((int) '#');
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "multi_match" + "'", str13, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder32);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder34);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder36);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder39);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder41);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder43);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "multi_match" + "'", str46, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder48);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder50);
// flaky:         org.junit.Assert.assertEquals("'" + str51 + "' != '" + "{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\", \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"analyzer\\\" : \\\"multi_match\\\",\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}^10.0\", \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\" ],\n    \"max_expansions\" : 10,\n    \"fuzzy_rewrite\" : \"\",\n    \"boost\" : 1.0,\n    \"_name\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\"\n  }\n}" + "'", str51, "{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\", \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"analyzer\\\" : \\\"multi_match\\\",\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}^10.0\", \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\" ],\n    \"max_expansions\" : 10,\n    \"fuzzy_rewrite\" : \"\",\n    \"boost\" : 1.0,\n    \"_name\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\"\n  }\n}");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder53);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder55);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder57);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder62);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder64);
    }

    @Test
    public void test15203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15203");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder12.lenient(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder14.rewrite("multi_match");
        org.elasticsearch.index.query.Operator operator17 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder14.operator(operator17);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder14.queryName("{\n  \"multiMatch\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\", \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"slop\\\" : -1,\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"lenient\\\" : true,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\" ],\n    \"analyzer\" : \"\",\n    \"fuzzyRewrite\" : \"\",\n    \"tieBreaker\" : 0.0,\n    \"cutoffFrequency\" : 0.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder14.field("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"type\" : \"best_fields\",\n    \"analyzer\" : \"{\\n  \\\"multiMatch\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"type\\\" : \\\"phrase_prefix\\\",\\n    \\\"maxExpansions\\\" : 10,\\n    \\\"fuzzyRewrite\\\" : \\\"\\\",\\n    \\\"tieBreaker\\\" : 0.0,\\n    \\\"cutoffFrequency\\\" : 0.0,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"rewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"use_dis_max\" : false,\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}", (float) (byte) 0);
        org.elasticsearch.common.xcontent.XContentType xContentType24 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.bytes.BytesReference bytesReference25 = multiMatchQueryBuilder23.buildAsBytes(xContentType24);
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchException; message: Failed to build ToXContent");
        } catch (org.elasticsearch.ElasticsearchException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
    }

    @Test
    public void test15204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15204");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder12.maxExpansions(1);
        boolean boolean16 = multiMatchQueryBuilder12.equals((java.lang.Object) '#');
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder12.boost((float) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder18.field("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"analyzer\" : \"{\\n  \\\"multiMatch\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"rewrite\\\" : \\\"multi_match\\\",\\n    \\\"fuzzyRewrite\\\" : \\\"hi!\\\",\\n    \\\"lenient\\\" : false,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}", (float) ' ');
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder18.tieBreaker((float) '4');
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder18.cutoffFrequency((float) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder18.queryName("{\n  \"multiMatch\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"type\" : \"cross_fields\",\n    \"maxExpansions\" : 1,\n    \"rewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"slop\\\" : -1,\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"lenient\\\" : true,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"fuzzyRewrite\" : \"\",\n    \"useDisMax\" : true,\n    \"lenient\" : true,\n    \"boost\" : 1.0,\n    \"Name\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\"\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = multiMatchQueryBuilder18.prefixLength(1);
        java.lang.String[] strArray37 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder38 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray37);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder40 = multiMatchQueryBuilder38.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder42 = multiMatchQueryBuilder40.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery43 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder44 = multiMatchQueryBuilder42.zeroTermsQuery(zeroTermsQuery43);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder46 = multiMatchQueryBuilder42.maxExpansions((int) (byte) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder48 = multiMatchQueryBuilder42.lenient(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder50 = multiMatchQueryBuilder48.analyzer("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"analyzer\" : \"{\\n  \\\"multiMatch\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"rewrite\\\" : \\\"multi_match\\\",\\n    \\\"fuzzyRewrite\\\" : \\\"hi!\\\",\\n    \\\"lenient\\\" : false,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder52 = multiMatchQueryBuilder48.rewrite("multi_match");
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type53 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE;
        org.elasticsearch.common.ParseField parseField54 = type53.parseField();
        org.elasticsearch.index.search.MatchQuery.Type type55 = type53.matchQueryType();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder56 = multiMatchQueryBuilder48.type(type53);
        org.elasticsearch.common.ParseField parseField57 = type53.parseField();
        org.elasticsearch.common.ParseField parseField58 = type53.parseField();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder59 = multiMatchQueryBuilder29.type(type53);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder29);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder40);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder42);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder44);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder46);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder48);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder50);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder52);
        org.junit.Assert.assertTrue("'" + type53 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE + "'", type53.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE));
        org.junit.Assert.assertNotNull(parseField54);
        org.junit.Assert.assertTrue("'" + type55 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.PHRASE + "'", type55.equals(org.elasticsearch.index.search.MatchQuery.Type.PHRASE));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder56);
        org.junit.Assert.assertNotNull(parseField57);
        org.junit.Assert.assertNotNull(parseField58);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder59);
    }

    @Test
    public void test15205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15205");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder10.field("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder10.boost(0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder16.analyzer("multi_match");
        float float19 = multiMatchQueryBuilder18.boost();
        java.lang.String[] strArray27 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray27);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder30 = multiMatchQueryBuilder28.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder32 = multiMatchQueryBuilder28.queryName("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.Operator operator33 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder34 = multiMatchQueryBuilder32.operator(operator33);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder36 = multiMatchQueryBuilder34.lenient(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder38 = multiMatchQueryBuilder36.maxExpansions((int) (short) 1);
        java.lang.String[] strArray46 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder47 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray46);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder48 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) multiMatchQueryBuilder36, strArray46);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder50 = multiMatchQueryBuilder36.boost((float) 10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder51 = null; // flaky: multiMatchQueryBuilder18.fuzziness((java.lang.Object) multiMatchQueryBuilder36);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder53 = null; // flaky: multiMatchQueryBuilder51.lenient(true);
        org.elasticsearch.index.query.QueryValidationException queryValidationException54 = null; // flaky: multiMatchQueryBuilder53.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder56 = null; // flaky: multiMatchQueryBuilder53.queryName("{\n  \"multi_match\" : {\n    \"query\" : 10,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"prefix_length\" : 35,\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertTrue("'" + float19 + "' != '" + 0.0f + "'", float19 == 0.0f);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder30);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder32);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder34);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder36);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder38);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder50);
// flaky:         org.junit.Assert.assertNotNull(multiMatchQueryBuilder51);
// flaky:         org.junit.Assert.assertNotNull(multiMatchQueryBuilder53);
        org.junit.Assert.assertNull(queryValidationException54);
// flaky:         org.junit.Assert.assertNotNull(multiMatchQueryBuilder56);
    }

    @Test
    public void test15206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15206");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder12.lenient(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder12.prefixLength((int) (byte) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder16.boost((float) 1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder16.slop((int) (byte) -1);
        java.lang.String str21 = multiMatchQueryBuilder16.getWriteableName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder16.queryName("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\", \"\" ],\n    \"analyzer\" : \"multi_match\",\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 0.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder23.lenient(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder25.boost((float) (short) 100);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "multi_match" + "'", str21, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
    }

    @Test
    public void test15207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15207");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.fuzzyRewrite("hi!");
        java.lang.String str13 = multiMatchQueryBuilder10.getName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder10.analyzer("multi_match");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder15.field("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\", \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"analyzer\\\" : \\\"multi_match\\\",\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}^10.0\", \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\" ],\n    \"fuzzy_rewrite\" : \"\",\n    \"boost\" : 1.0,\n    \"_name\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\"\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder17.minimumShouldMatch("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"\",\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 52.0\n  }\n}");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery20 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder17.zeroTermsQuery(zeroTermsQuery20);
        java.lang.String[] strArray29 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder30 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray29);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder32 = multiMatchQueryBuilder30.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder34 = multiMatchQueryBuilder30.queryName("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.Operator operator35 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder36 = multiMatchQueryBuilder34.operator(operator35);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder38 = multiMatchQueryBuilder36.lenient(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder40 = multiMatchQueryBuilder38.maxExpansions((int) (short) 1);
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder49 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray48);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder50 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) multiMatchQueryBuilder38, strArray48);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder52 = multiMatchQueryBuilder38.field("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder54 = multiMatchQueryBuilder52.analyzer("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\", \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"analyzer\\\" : \\\"multi_match\\\",\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}^10.0\", \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\" ],\n    \"fuzzy_rewrite\" : \"\",\n    \"boost\" : 1.0,\n    \"_name\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\"\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type55 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX;
        float float56 = type55.tieBreaker();
        float float57 = type55.tieBreaker();
        float float58 = type55.tieBreaker();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder59 = multiMatchQueryBuilder52.type(type55);
        org.elasticsearch.common.ParseField parseField60 = type55.parseField();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder61 = multiMatchQueryBuilder21.type(type55);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder63 = multiMatchQueryBuilder21.analyzer("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"slop\" : -1,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 10.0,\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder65 = multiMatchQueryBuilder63.prefixLength((int) (byte) 10);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "multi_match" + "'", str13, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder32);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder34);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder36);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder38);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder40);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder52);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder54);
        org.junit.Assert.assertTrue("'" + type55 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX + "'", type55.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX));
        org.junit.Assert.assertTrue("'" + float56 + "' != '" + 0.0f + "'", float56 == 0.0f);
        org.junit.Assert.assertTrue("'" + float57 + "' != '" + 0.0f + "'", float57 == 0.0f);
        org.junit.Assert.assertTrue("'" + float58 + "' != '" + 0.0f + "'", float58 == 0.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder59);
        org.junit.Assert.assertNotNull(parseField60);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder61);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder63);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder65);
    }

    @Test
    public void test15208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15208");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.fuzzyRewrite("hi!");
        java.lang.String str13 = multiMatchQueryBuilder10.getName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder10.rewrite("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"slop\" : -1,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder10.tieBreaker((float) '4');
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder10.minimumShouldMatch("");
        java.lang.String str20 = multiMatchQueryBuilder10.queryName();
        java.lang.String[] strArray28 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray28);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = multiMatchQueryBuilder29.fuzzyRewrite("");
        java.lang.String str32 = multiMatchQueryBuilder31.getWriteableName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder35 = multiMatchQueryBuilder31.field("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"^32.0\", \"^32.0\", \"^32.0\", \"^32.0\", \"^32.0\", \"^32.0\" ],\n    \"minimum_should_match\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"lenient\\\" : true,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0,\n    \"_name\" : \"\"\n  }\n}", (float) (short) 10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder37 = multiMatchQueryBuilder35.maxExpansions((int) (short) 1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder39 = multiMatchQueryBuilder37.lenient(false);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery40 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder41 = multiMatchQueryBuilder39.zeroTermsQuery(zeroTermsQuery40);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder42 = multiMatchQueryBuilder10.fuzziness((java.lang.Object) zeroTermsQuery40);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "multi_match" + "'", str13, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "multi_match" + "'", str32, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder35);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder37);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder39);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder41);
    }

    @Test
    public void test15209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15209");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery13 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder12.zeroTermsQuery(zeroTermsQuery13);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder14.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder16.queryName("hi!");
        java.lang.String str19 = multiMatchQueryBuilder16.queryName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder16.analyzer("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"slop\" : -1,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String str22 = multiMatchQueryBuilder16.getWriteableName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder16.field("{\n  \"multiMatch\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"type\" : \"phrase_prefix\",\n    \"maxExpansions\" : 10,\n    \"fuzzyRewrite\" : \"\",\n    \"tieBreaker\" : 0.0,\n    \"cutoffFrequency\" : 0.0,\n    \"boost\" : 1.0\n  }\n}", (float) 'a');
        java.lang.String str26 = multiMatchQueryBuilder25.getWriteableName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = multiMatchQueryBuilder25.queryName("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"slop\" : 0,\n    \"prefix_length\" : 0,\n    \"rewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"analyzer\\\" : \\\"multi_match\\\",\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"lenient\" : false,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.Object obj29 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder30 = multiMatchQueryBuilder25.type(obj29);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder32 = multiMatchQueryBuilder25.cutoffFrequency(100.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder34 = multiMatchQueryBuilder32.maxExpansions((int) (byte) 1);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder35 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params36 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder37 = multiMatchQueryBuilder32.toXContent(xContentBuilder35, params36);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "multi_match" + "'", str22, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "multi_match" + "'", str26, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder28);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder30);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder32);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder34);
        org.junit.Assert.assertNotNull(params36);
    }

    @Test
    public void test15210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15210");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder8.queryName("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.Operator operator13 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder12.operator(operator13);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder14.lenient(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder16.maxExpansions((int) (short) 1);
        java.lang.String str19 = multiMatchQueryBuilder16.getWriteableName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder16.prefixLength(0);
        java.lang.String str22 = multiMatchQueryBuilder21.getWriteableName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder21.prefixLength((int) (short) 10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder21.fuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : \"class org.elasticsearch.index.query.MultiMatchQueryBuilder$Type\",\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"use_dis_max\" : false,\n    \"lenient\" : true,\n    \"boost\" : 1.0,\n    \"_name\" : \"{\\n  \\\"multiMatch\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"fuzzyRewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\"\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = multiMatchQueryBuilder26.queryName("{\n  \"multiMatch\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"^10.0\", \"^10.0\", \"^10.0\", \"^10.0\", \"^10.0\", \"^10.0\" ],\n    \"type\" : \"phrase_prefix\",\n    \"slop\" : -1,\n    \"prefixLength\" : 35,\n    \"minimumShouldMatch\" : \"hi!\",\n    \"fuzzyRewrite\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 10.0,\n    \"Name\" : \"multi_match\"\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder30 = multiMatchQueryBuilder26.field("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"analyzer\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"analyzer\\\" : \\\"multi_match\\\",\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"prefix_length\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 32.0,\n    \"lenient\" : false,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.common.xcontent.XContentType xContentType31 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.bytes.BytesReference bytesReference32 = multiMatchQueryBuilder30.buildAsBytes(xContentType31);
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchException; message: Failed to build ToXContent");
        } catch (org.elasticsearch.ElasticsearchException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "multi_match" + "'", str19, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "multi_match" + "'", str22, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder28);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder30);
    }

    @Test
    public void test15211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15211");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.tieBreaker(0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder10.maxExpansions((int) (byte) 1);
        java.lang.String[] strArray22 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray22);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder23.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder25.fuzzyRewrite("hi!");
        java.lang.String str28 = multiMatchQueryBuilder25.getName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type29 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder30 = multiMatchQueryBuilder25.type(type29);
        org.elasticsearch.index.search.MatchQuery.Type type31 = type29.matchQueryType();
        org.elasticsearch.index.search.MatchQuery.Type type32 = type29.matchQueryType();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder33 = multiMatchQueryBuilder10.type(type29);
        org.elasticsearch.common.ParseField parseField34 = type29.parseField();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "multi_match" + "'", str28, "multi_match");
        org.junit.Assert.assertTrue("'" + type29 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS + "'", type29.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder30);
        org.junit.Assert.assertTrue("'" + type31 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type31.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertTrue("'" + type32 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type32.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder33);
        org.junit.Assert.assertNotNull(parseField34);
    }

    @Test
    public void test15212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15212");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.fuzzyRewrite("hi!");
        java.lang.String str13 = multiMatchQueryBuilder10.getName();
        float float14 = multiMatchQueryBuilder10.boost();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder10.lenient(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder10.slop((int) (short) -1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder18.field("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"slop\" : -1,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder18.fuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\", \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"analyzer\\\" : \\\"multi_match\\\",\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}^10.0\", \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\" ],\n    \"max_expansions\" : 10,\n    \"fuzzy_rewrite\" : \"\",\n    \"boost\" : 1.0,\n    \"_name\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\"\n  }\n}");
        java.lang.String[] strArray30 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray30);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder33 = multiMatchQueryBuilder31.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder35 = multiMatchQueryBuilder31.queryName("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.Operator operator36 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder37 = multiMatchQueryBuilder35.operator(operator36);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder39 = multiMatchQueryBuilder37.lenient(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder41 = multiMatchQueryBuilder39.maxExpansions((int) (short) 1);
        java.lang.String[] strArray49 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder50 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray49);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder51 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) multiMatchQueryBuilder39, strArray49);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder53 = multiMatchQueryBuilder39.queryName("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder55 = multiMatchQueryBuilder39.useDisMax(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder57 = multiMatchQueryBuilder55.rewrite("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"slop\" : -1,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder58 = null; // flaky: multiMatchQueryBuilder22.fuzziness((java.lang.Object) multiMatchQueryBuilder57);
        java.lang.String str59 = multiMatchQueryBuilder57.queryName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder61 = multiMatchQueryBuilder57.queryName("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"rewrite\" : \"\",\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"lenient\" : false,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder63 = multiMatchQueryBuilder61.lenient(true);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "multi_match" + "'", str13, "multi_match");
        org.junit.Assert.assertTrue("'" + float14 + "' != '" + 1.0f + "'", float14 == 1.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder33);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder35);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder37);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder39);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder41);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder53);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder55);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder57);
// flaky:         org.junit.Assert.assertNotNull(multiMatchQueryBuilder58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}" + "'", str59, "{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder61);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder63);
    }

    @Test
    public void test15213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15213");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.fuzzyRewrite("hi!");
        java.lang.String str13 = multiMatchQueryBuilder10.getName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder10.rewrite("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"slop\" : -1,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder10.prefixLength((int) (short) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder17.tieBreaker(0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder17.cutoffFrequency(10.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder21.fuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 1.0,\n    \"boost\" : 10.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder21.rewrite("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"slop\" : 10,\n    \"rewrite\" : \"multi_match\",\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"lenient\" : false,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.QueryValidationException queryValidationException26 = multiMatchQueryBuilder21.validate();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "multi_match" + "'", str13, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
        org.junit.Assert.assertNull(queryValidationException26);
    }

    @Test
    public void test15214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15214");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.fuzzyRewrite("hi!");
        java.lang.String str13 = multiMatchQueryBuilder10.getName();
        float float14 = multiMatchQueryBuilder10.boost();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder10.lenient(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder10.slop((int) (short) -1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type19 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX;
        org.elasticsearch.index.search.MatchQuery.Type type20 = type19.matchQueryType();
        org.elasticsearch.index.search.MatchQuery.Type type21 = type19.matchQueryType();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder10.type(type19);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder22.fuzzyRewrite("{\n  \"multiMatch\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzyRewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder24.fuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"slop\" : -1,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        float float27 = multiMatchQueryBuilder26.boost();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = multiMatchQueryBuilder26.fuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"analyzer\" : \"multi_match\",\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = multiMatchQueryBuilder29.analyzer("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"type\" : \"phrase_prefix\",\n    \"max_expansions\" : 10,\n    \"fuzzy_rewrite\" : \"\",\n    \"tie_breaker\" : 0.0,\n    \"cutoff_frequency\" : 0.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder33 = multiMatchQueryBuilder31.cutoffFrequency((float) 10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder35 = multiMatchQueryBuilder31.prefixLength((int) '4');
        org.elasticsearch.common.xcontent.XContentType xContentType36 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.bytes.BytesReference bytesReference37 = multiMatchQueryBuilder31.buildAsBytes(xContentType36);
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchException; message: Failed to build ToXContent");
        } catch (org.elasticsearch.ElasticsearchException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "multi_match" + "'", str13, "multi_match");
        org.junit.Assert.assertTrue("'" + float14 + "' != '" + 1.0f + "'", float14 == 1.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertTrue("'" + type19 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX + "'", type19.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX));
        org.junit.Assert.assertTrue("'" + type20 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX + "'", type20.equals(org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX));
        org.junit.Assert.assertTrue("'" + type21 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX + "'", type21.equals(org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertTrue("'" + float27 + "' != '" + 1.0f + "'", float27 == 1.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder29);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder31);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder33);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder35);
    }

    @Test
    public void test15215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15215");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery13 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder12.zeroTermsQuery(zeroTermsQuery13);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder14.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder16.queryName("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder18.useDisMax(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type21 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS;
        org.elasticsearch.index.search.MatchQuery.Type type22 = type21.matchQueryType();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder20.type(type21);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder23.boost((float) (short) -1);
        java.lang.String str26 = multiMatchQueryBuilder25.getWriteableName();
        java.lang.String str27 = multiMatchQueryBuilder25.queryName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = multiMatchQueryBuilder25.tieBreaker((float) (short) 0);
        java.lang.String str30 = null; // flaky: multiMatchQueryBuilder29.toString();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertTrue("'" + type21 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS + "'", type21.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS));
        org.junit.Assert.assertTrue("'" + type22 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type22.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "multi_match" + "'", str26, "multi_match");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "hi!" + "'", str27, "hi!");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder29);
// flaky:         org.junit.Assert.assertEquals("'" + str30 + "' != '" + "{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"type\" : \"cross_fields\",\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"use_dis_max\" : false,\n    \"tie_breaker\" : 0.0,\n    \"boost\" : -1.0,\n    \"_name\" : \"hi!\"\n  }\n}" + "'", str30, "{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"type\" : \"cross_fields\",\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"use_dis_max\" : false,\n    \"tie_breaker\" : 0.0,\n    \"boost\" : -1.0,\n    \"_name\" : \"hi!\"\n  }\n}");
    }

    @Test
    public void test15216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15216");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        java.lang.String[] strArray18 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray18);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder19.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder21.tieBreaker(0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type24 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX;
        float float25 = type24.tieBreaker();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder21.type(type24);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = multiMatchQueryBuilder21.cutoffFrequency((float) 0L);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder30 = multiMatchQueryBuilder21.lenient(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type31 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        org.elasticsearch.index.search.MatchQuery.Type type32 = type31.matchQueryType();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder33 = multiMatchQueryBuilder21.type(type31);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder34 = multiMatchQueryBuilder8.fuzziness((java.lang.Object) type31);
        org.elasticsearch.index.query.Operator operator35 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder36 = multiMatchQueryBuilder34.operator(operator35);
        java.lang.String[] strArray44 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder45 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray44);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder47 = multiMatchQueryBuilder45.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder49 = multiMatchQueryBuilder47.fuzzyRewrite("hi!");
        java.lang.String str50 = multiMatchQueryBuilder47.getName();
        float float51 = multiMatchQueryBuilder47.boost();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder53 = multiMatchQueryBuilder47.lenient(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder55 = multiMatchQueryBuilder47.slop((int) (short) -1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type56 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX;
        org.elasticsearch.index.search.MatchQuery.Type type57 = type56.matchQueryType();
        org.elasticsearch.index.search.MatchQuery.Type type58 = type56.matchQueryType();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder59 = multiMatchQueryBuilder47.type(type56);
        org.elasticsearch.index.search.MatchQuery.Type type60 = type56.matchQueryType();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder61 = multiMatchQueryBuilder36.fuzziness((java.lang.Object) type60);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder63 = multiMatchQueryBuilder61.boost((float) 'a');
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder65 = multiMatchQueryBuilder61.fuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\", \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"slop\\\" : -1,\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"lenient\\\" : true,\\n    \\\"boost\\\" : 1.0\\n  }\\n}^0.0\" ],\n    \"analyzer\" : \"multi_match\",\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0,\n    \"_name\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\"\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder67 = multiMatchQueryBuilder61.boost((float) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder69 = multiMatchQueryBuilder67.queryName("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\", \"\", \"{\\n  \\\"multiMatch\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"fuzzyRewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}^10.0\" ],\n    \"analyzer\" : \"multi_match\",\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 0.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder71 = multiMatchQueryBuilder69.prefixLength(0);
        java.lang.String str72 = multiMatchQueryBuilder71.getName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder74 = multiMatchQueryBuilder71.prefixLength((int) (short) 1);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertTrue("'" + type24 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX + "'", type24.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX));
        org.junit.Assert.assertTrue("'" + float25 + "' != '" + 0.0f + "'", float25 == 0.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder28);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder30);
        org.junit.Assert.assertTrue("'" + type31 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type31.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertTrue("'" + type32 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type32.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder33);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder34);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder36);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder47);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "multi_match" + "'", str50, "multi_match");
        org.junit.Assert.assertTrue("'" + float51 + "' != '" + 1.0f + "'", float51 == 1.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder53);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder55);
        org.junit.Assert.assertTrue("'" + type56 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX + "'", type56.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX));
        org.junit.Assert.assertTrue("'" + type57 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX + "'", type57.equals(org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX));
        org.junit.Assert.assertTrue("'" + type58 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX + "'", type58.equals(org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder59);
        org.junit.Assert.assertTrue("'" + type60 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX + "'", type60.equals(org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder61);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder63);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder65);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder67);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder69);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder71);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "multi_match" + "'", str72, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder74);
    }

    @Test
    public void test15217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15217");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder8.queryName("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.Operator operator13 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder12.operator(operator13);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder14.lenient(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder16.maxExpansions((int) (short) 1);
        java.lang.String[] strArray26 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray26);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) multiMatchQueryBuilder16, strArray26);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder30 = multiMatchQueryBuilder16.field("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder32 = multiMatchQueryBuilder16.field("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"analyzer\" : \"multi_match\",\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.Operator operator33 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder34 = multiMatchQueryBuilder16.operator(operator33);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder36 = multiMatchQueryBuilder34.minimumShouldMatch("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\", \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"analyzer\\\" : \\\"multi_match\\\",\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}^10.0\", \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\" ],\n    \"max_expansions\" : 10,\n    \"fuzzy_rewrite\" : \"\",\n    \"boost\" : 1.0,\n    \"_name\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\"\n  }\n}");
        java.lang.String str37 = multiMatchQueryBuilder36.getName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder40 = multiMatchQueryBuilder36.field("{\n  \"multiMatch\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"prefixLength\" : -1,\n    \"rewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"multi_match^0.0\\\" ],\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"lenient\\\" : true,\\n    \\\"boost\\\" : 0.0\\n  }\\n}\",\n    \"fuzzyRewrite\" : \"hi!\",\n    \"lenient\" : false,\n    \"boost\" : 1.0\n  }\n}", 0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder43 = multiMatchQueryBuilder36.field("{\n  \"multiMatch\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"rewrite\" : \"{\\n  \\\"multiMatch\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"minimumShouldMatch\\\" : \\\"{\\\\n  \\\\\\\"multi_match\\\\\\\" : {\\\\n    \\\\\\\"query\\\\\\\" : 0.0,\\\\n    \\\\\\\"fields\\\\\\\" : [ \\\\\\\"hi!\\\\\\\", \\\\\\\"\\\\\\\", \\\\\\\"\\\\\\\", \\\\\\\"\\\\\\\", \\\\\\\"\\\\\\\", \\\\\\\"\\\\\\\" ],\\\\n    \\\\\\\"slop\\\\\\\" : -1,\\\\n    \\\\\\\"fuzzy_rewrite\\\\\\\" : \\\\\\\"hi!\\\\\\\",\\\\n    \\\\\\\"lenient\\\\\\\" : true,\\\\n    \\\\\\\"boost\\\\\\\" : 1.0\\\\n  }\\\\n}\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"fuzzyRewrite\" : \"multi_match\",\n    \"lenient\" : false,\n    \"boost\" : 1.0\n  }\n}", 0.0f);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder30);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder32);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder34);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "multi_match" + "'", str37, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder40);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder43);
    }

    @Test
    public void test15218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15218");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder8.queryName("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.Operator operator13 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder12.operator(operator13);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder14.lenient(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder16.maxExpansions((int) (short) 1);
        org.elasticsearch.index.query.Operator operator19 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder16.operator(operator19);
        java.lang.String str21 = multiMatchQueryBuilder16.getName();
        java.lang.String str22 = null; // flaky: multiMatchQueryBuilder16.toString();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder16.field("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"\",\n    \"boost\" : 1.0\n  }\n}", (float) '4');
        java.lang.String[] strArray33 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder34 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray33);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder36 = multiMatchQueryBuilder34.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder38 = multiMatchQueryBuilder36.tieBreaker(0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type39 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX;
        float float40 = type39.tieBreaker();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder41 = multiMatchQueryBuilder36.type(type39);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder43 = multiMatchQueryBuilder36.cutoffFrequency((float) 0L);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder45 = multiMatchQueryBuilder36.lenient(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type46 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        org.elasticsearch.index.search.MatchQuery.Type type47 = type46.matchQueryType();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder48 = multiMatchQueryBuilder36.type(type46);
        float float49 = type46.tieBreaker();
        org.elasticsearch.index.search.MatchQuery.Type type50 = type46.matchQueryType();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder51 = multiMatchQueryBuilder16.type(type46);
        java.lang.String[] strArray60 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder61 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray60);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder62 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 10.0f, strArray60);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder64 = multiMatchQueryBuilder62.analyzer("");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery65 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder66 = multiMatchQueryBuilder64.zeroTermsQuery(zeroTermsQuery65);
        java.lang.String str67 = multiMatchQueryBuilder66.queryName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder68 = multiMatchQueryBuilder16.type((java.lang.Object) str67);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "multi_match" + "'", str21, "multi_match");
// flaky:         org.junit.Assert.assertEquals("'" + str22 + "' != '" + "{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"max_expansions\" : 1,\n    \"fuzzy_rewrite\" : \"\",\n    \"lenient\" : true,\n    \"boost\" : 1.0,\n    \"_name\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\"\n  }\n}" + "'", str22, "{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"max_expansions\" : 1,\n    \"fuzzy_rewrite\" : \"\",\n    \"lenient\" : true,\n    \"boost\" : 1.0,\n    \"_name\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\"\n  }\n}");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder36);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder38);
        org.junit.Assert.assertTrue("'" + type39 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX + "'", type39.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX));
        org.junit.Assert.assertTrue("'" + float40 + "' != '" + 0.0f + "'", float40 == 0.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder41);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder43);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder45);
        org.junit.Assert.assertTrue("'" + type46 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type46.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertTrue("'" + type47 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type47.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder48);
        org.junit.Assert.assertTrue("'" + float49 + "' != '" + 0.0f + "'", float49 == 0.0f);
        org.junit.Assert.assertTrue("'" + type50 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type50.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder51);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder64);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder66);
        org.junit.Assert.assertNull(str67);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder68);
    }

    @Test
    public void test15219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15219");
        java.lang.Object obj0 = null;
        java.lang.String[] strArray1 = new java.lang.String[] {};
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder2 = new org.elasticsearch.index.query.MultiMatchQueryBuilder(obj0, strArray1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = multiMatchQueryBuilder2.minimumShouldMatch("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\", \"\" ],\n    \"analyzer\" : \"multi_match\",\n    \"max_expansions\" : -1,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"use_dis_max\" : true,\n    \"boost\" : 0.0\n  }\n}");
        java.lang.String[] strArray12 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray12);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder13.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder15.tieBreaker(0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type18 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX;
        float float19 = type18.tieBreaker();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder15.type(type18);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder15.cutoffFrequency((float) 0L);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder15.lenient(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type25 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX;
        float float26 = type25.tieBreaker();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder24.type(type25);
        org.elasticsearch.index.search.MatchQuery.Type type28 = type25.matchQueryType();
        float float29 = type25.tieBreaker();
        org.elasticsearch.index.search.MatchQuery.Type type30 = type25.matchQueryType();
        org.elasticsearch.index.search.MatchQuery.Type type31 = type25.matchQueryType();
        org.elasticsearch.index.search.MatchQuery.Type type32 = type25.matchQueryType();
        org.elasticsearch.common.ParseField parseField33 = type25.parseField();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder34 = multiMatchQueryBuilder2.type(type25);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder36 = multiMatchQueryBuilder2.slop((int) (short) 0);
        java.lang.String[] strArray44 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder45 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray44);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder47 = multiMatchQueryBuilder45.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder49 = multiMatchQueryBuilder47.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery50 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder51 = multiMatchQueryBuilder49.zeroTermsQuery(zeroTermsQuery50);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder53 = multiMatchQueryBuilder51.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder55 = multiMatchQueryBuilder53.queryName("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder57 = multiMatchQueryBuilder53.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder59 = multiMatchQueryBuilder53.analyzer("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder61 = multiMatchQueryBuilder53.tieBreaker((float) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder63 = multiMatchQueryBuilder53.boost((float) (-1));
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder65 = multiMatchQueryBuilder63.maxExpansions(0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder67 = multiMatchQueryBuilder63.field("{\n  \"multi_match\" : {\n    \"query\" : \"PHRASE_PREFIX\",\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzziness\" : \"10\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.QueryValidationException queryValidationException68 = multiMatchQueryBuilder67.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder70 = multiMatchQueryBuilder67.cutoffFrequency((float) (byte) -1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder72 = multiMatchQueryBuilder67.boost((float) 1L);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder73 = null; // flaky: multiMatchQueryBuilder36.fuzziness((java.lang.Object) multiMatchQueryBuilder72);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder75 = null; // flaky: multiMatchQueryBuilder73.useDisMax(false);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder4);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertTrue("'" + type18 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX + "'", type18.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX));
        org.junit.Assert.assertTrue("'" + float19 + "' != '" + 0.0f + "'", float19 == 0.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertTrue("'" + type25 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX + "'", type25.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX));
        org.junit.Assert.assertTrue("'" + float26 + "' != '" + 0.0f + "'", float26 == 0.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
        org.junit.Assert.assertTrue("'" + type28 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX + "'", type28.equals(org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX));
        org.junit.Assert.assertTrue("'" + float29 + "' != '" + 0.0f + "'", float29 == 0.0f);
        org.junit.Assert.assertTrue("'" + type30 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX + "'", type30.equals(org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX));
        org.junit.Assert.assertTrue("'" + type31 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX + "'", type31.equals(org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX));
        org.junit.Assert.assertTrue("'" + type32 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX + "'", type32.equals(org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX));
        org.junit.Assert.assertNotNull(parseField33);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder34);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder36);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder47);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder49);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder51);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder53);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder55);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder57);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder59);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder61);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder63);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder65);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder67);
        org.junit.Assert.assertNull(queryValidationException68);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder70);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder72);
// flaky:         org.junit.Assert.assertNotNull(multiMatchQueryBuilder73);
// flaky:         org.junit.Assert.assertNotNull(multiMatchQueryBuilder75);
    }

    @Test
    public void test15220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15220");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.tieBreaker(0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder10.cutoffFrequency((float) 0L);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder14.analyzer("");
        java.lang.String[] strArray24 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray24);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder25.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = multiMatchQueryBuilder27.tieBreaker(0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type30 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX;
        float float31 = type30.tieBreaker();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder32 = multiMatchQueryBuilder27.type(type30);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder34 = multiMatchQueryBuilder27.cutoffFrequency((float) 0L);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder36 = multiMatchQueryBuilder27.lenient(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type37 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        org.elasticsearch.index.search.MatchQuery.Type type38 = type37.matchQueryType();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder39 = multiMatchQueryBuilder27.type(type37);
        org.elasticsearch.index.search.MatchQuery.Type type40 = type37.matchQueryType();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder41 = multiMatchQueryBuilder14.type(type37);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder43 = multiMatchQueryBuilder14.lenient(true);
        float float44 = multiMatchQueryBuilder14.boost();
        org.elasticsearch.index.query.QueryValidationException queryValidationException45 = multiMatchQueryBuilder14.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder48 = multiMatchQueryBuilder14.field("{\n  \"multiMatch\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\", \"\" ],\n    \"analyzer\" : \"multi_match\",\n    \"rewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"minimum_should_match\\\" : \\\"{\\\\n  \\\\\\\"multi_match\\\\\\\" : {\\\\n    \\\\\\\"query\\\\\\\" : 0.0,\\\\n    \\\\\\\"fields\\\\\\\" : [ \\\\\\\"hi!\\\\\\\", \\\\\\\"\\\\\\\", \\\\\\\"\\\\\\\", \\\\\\\"\\\\\\\", \\\\\\\"\\\\\\\", \\\\\\\"\\\\\\\" ],\\\\n    \\\\\\\"slop\\\\\\\" : -1,\\\\n    \\\\\\\"fuzzy_rewrite\\\\\\\" : \\\\\\\"hi!\\\\\\\",\\\\n    \\\\\\\"lenient\\\\\\\" : true,\\\\n    \\\\\\\"boost\\\\\\\" : 1.0\\\\n  }\\\\n}\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"fuzzyRewrite\" : \"hi!\",\n    \"useDisMax\" : true,\n    \"boost\" : 0.0\n  }\n}", (float) ' ');
        org.elasticsearch.index.query.Operator operator49 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder50 = multiMatchQueryBuilder14.operator(operator49);
        java.lang.String[] strArray58 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder59 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray58);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder61 = multiMatchQueryBuilder59.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder63 = multiMatchQueryBuilder61.tieBreaker(0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type64 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX;
        float float65 = type64.tieBreaker();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder66 = multiMatchQueryBuilder61.type(type64);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder68 = multiMatchQueryBuilder61.cutoffFrequency((float) 0L);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder70 = multiMatchQueryBuilder61.lenient(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder72 = multiMatchQueryBuilder61.queryName("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"analyzer\" : \"multi_match\",\n    \"slop\" : -1,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0,\n    \"_name\" : \"hi!\"\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder74 = multiMatchQueryBuilder61.analyzer("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"type\" : \"cross_fields\",\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 32.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder76 = multiMatchQueryBuilder61.field("{\n  \"multiMatch\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"maxExpansions\" : 1,\n    \"fuzzyRewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type77 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX;
        float float78 = type77.tieBreaker();
        float float79 = type77.tieBreaker();
        org.elasticsearch.index.search.MatchQuery.Type type80 = type77.matchQueryType();
        org.elasticsearch.index.search.MatchQuery.Type type81 = type77.matchQueryType();
        org.elasticsearch.common.ParseField parseField82 = type77.parseField();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder83 = multiMatchQueryBuilder76.type(type77);
        org.elasticsearch.common.ParseField parseField84 = type77.parseField();
        org.elasticsearch.index.search.MatchQuery.Type type85 = type77.matchQueryType();
        org.elasticsearch.index.search.MatchQuery.Type type86 = type77.matchQueryType();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder87 = multiMatchQueryBuilder50.type(type77);
        float float88 = type77.tieBreaker();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder29);
        org.junit.Assert.assertTrue("'" + type30 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX + "'", type30.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX));
        org.junit.Assert.assertTrue("'" + float31 + "' != '" + 0.0f + "'", float31 == 0.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder32);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder34);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder36);
        org.junit.Assert.assertTrue("'" + type37 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type37.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertTrue("'" + type38 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type38.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder39);
        org.junit.Assert.assertTrue("'" + type40 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type40.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder41);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder43);
        org.junit.Assert.assertTrue("'" + float44 + "' != '" + 1.0f + "'", float44 == 1.0f);
        org.junit.Assert.assertNull(queryValidationException45);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder48);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder50);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder61);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder63);
        org.junit.Assert.assertTrue("'" + type64 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX + "'", type64.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX));
        org.junit.Assert.assertTrue("'" + float65 + "' != '" + 0.0f + "'", float65 == 0.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder66);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder68);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder70);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder72);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder74);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder76);
        org.junit.Assert.assertTrue("'" + type77 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX + "'", type77.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX));
        org.junit.Assert.assertTrue("'" + float78 + "' != '" + 0.0f + "'", float78 == 0.0f);
        org.junit.Assert.assertTrue("'" + float79 + "' != '" + 0.0f + "'", float79 == 0.0f);
        org.junit.Assert.assertTrue("'" + type80 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX + "'", type80.equals(org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX));
        org.junit.Assert.assertTrue("'" + type81 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX + "'", type81.equals(org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX));
        org.junit.Assert.assertNotNull(parseField82);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder83);
        org.junit.Assert.assertNotNull(parseField84);
        org.junit.Assert.assertTrue("'" + type85 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX + "'", type85.equals(org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX));
        org.junit.Assert.assertTrue("'" + type86 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX + "'", type86.equals(org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder87);
        org.junit.Assert.assertTrue("'" + float88 + "' != '" + 0.0f + "'", float88 == 0.0f);
    }

    @Test
    public void test15221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15221");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder12.lenient(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder12.prefixLength((int) (byte) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder16.boost((float) 1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder16.rewrite("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"analyzer\" : \"multi_match\",\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder16.maxExpansions((int) (short) 0);
        java.lang.String[] strArray30 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray30);
        java.lang.Object obj32 = null;
        java.lang.String[] strArray41 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder42 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray41);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder43 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 10.0f, strArray41);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder44 = new org.elasticsearch.index.query.MultiMatchQueryBuilder(obj32, strArray41);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder45 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray41);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder46 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) multiMatchQueryBuilder22, strArray41);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder48 = multiMatchQueryBuilder22.analyzer("{\n  \"multiMatch\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzyRewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"slop\\\" : -1,\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"lenient\\\" : true,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"boost\" : 1.0,\n    \"Name\" : \"hi!\"\n  }\n}");
        org.elasticsearch.index.query.QueryValidationException queryValidationException49 = multiMatchQueryBuilder48.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder51 = multiMatchQueryBuilder48.boost((float) ' ');
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder53 = multiMatchQueryBuilder51.fuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\", \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"analyzer\\\" : \\\"multi_match\\\",\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}^10.0\", \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\" ],\n    \"fuzzy_rewrite\" : \"\",\n    \"lenient\" : true,\n    \"boost\" : 1.0,\n    \"_name\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\"\n  }\n}");
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder48);
        org.junit.Assert.assertNull(queryValidationException49);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder51);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder53);
    }

    @Test
    public void test15222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15222");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.fuzzyRewrite("hi!");
        java.lang.String str13 = multiMatchQueryBuilder10.getName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder10.analyzer("multi_match");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder15.field("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\", \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"analyzer\\\" : \\\"multi_match\\\",\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}^10.0\", \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\" ],\n    \"fuzzy_rewrite\" : \"\",\n    \"boost\" : 1.0,\n    \"_name\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\"\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder17.slop((int) (byte) -1);
        java.lang.String str20 = multiMatchQueryBuilder19.getName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder19.prefixLength((int) (short) 10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder22.tieBreaker(0.0f);
        java.lang.String str25 = multiMatchQueryBuilder22.getName();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "multi_match" + "'", str13, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "multi_match" + "'", str20, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "multi_match" + "'", str25, "multi_match");
    }

    @Test
    public void test15223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15223");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery13 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder12.zeroTermsQuery(zeroTermsQuery13);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder14.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder16.queryName("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder16.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder16.analyzer("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder16.tieBreaker((float) 0);
        java.lang.String[] strArray32 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder33 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray32);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder35 = multiMatchQueryBuilder33.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder37 = multiMatchQueryBuilder35.tieBreaker(0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type38 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX;
        float float39 = type38.tieBreaker();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder40 = multiMatchQueryBuilder35.type(type38);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder42 = multiMatchQueryBuilder35.cutoffFrequency((float) 0L);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder44 = multiMatchQueryBuilder35.lenient(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type45 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        org.elasticsearch.index.search.MatchQuery.Type type46 = type45.matchQueryType();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder47 = multiMatchQueryBuilder35.type(type45);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder49 = multiMatchQueryBuilder35.useDisMax(false);
        java.lang.String[] strArray57 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder58 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray57);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder60 = multiMatchQueryBuilder58.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder62 = multiMatchQueryBuilder60.fuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder64 = multiMatchQueryBuilder60.minimumShouldMatch("multi_match");
        boolean boolean65 = multiMatchQueryBuilder35.equals((java.lang.Object) "multi_match");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder67 = multiMatchQueryBuilder35.queryName("{\n  \"multiMatch\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"type\" : \"phrase_prefix\",\n    \"maxExpansions\" : 10,\n    \"fuzzyRewrite\" : \"\",\n    \"tieBreaker\" : 0.0,\n    \"cutoffFrequency\" : 0.0,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String[] strArray75 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder76 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray75);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder78 = multiMatchQueryBuilder76.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder80 = multiMatchQueryBuilder78.tieBreaker(0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type81 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX;
        float float82 = type81.tieBreaker();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder83 = multiMatchQueryBuilder78.type(type81);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder85 = multiMatchQueryBuilder78.cutoffFrequency((float) 0L);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder87 = multiMatchQueryBuilder78.lenient(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type88 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        org.elasticsearch.index.search.MatchQuery.Type type89 = type88.matchQueryType();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder90 = multiMatchQueryBuilder78.type(type88);
        org.elasticsearch.common.ParseField parseField91 = type88.parseField();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder92 = multiMatchQueryBuilder35.type(type88);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder93 = multiMatchQueryBuilder16.type(type88);
        java.lang.String str94 = multiMatchQueryBuilder93.queryName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder96 = multiMatchQueryBuilder93.boost((float) 1L);
        org.elasticsearch.index.query.Operator operator97 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder98 = multiMatchQueryBuilder96.operator(operator97);
        java.lang.Class<?> wildcardClass99 = multiMatchQueryBuilder96.getClass();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder35);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder37);
        org.junit.Assert.assertTrue("'" + type38 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX + "'", type38.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX));
        org.junit.Assert.assertTrue("'" + float39 + "' != '" + 0.0f + "'", float39 == 0.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder40);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder42);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder44);
        org.junit.Assert.assertTrue("'" + type45 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type45.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertTrue("'" + type46 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type46.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder47);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder49);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder60);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder62);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder67);
        org.junit.Assert.assertNotNull(strArray75);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder78);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder80);
        org.junit.Assert.assertTrue("'" + type81 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX + "'", type81.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX));
        org.junit.Assert.assertTrue("'" + float82 + "' != '" + 0.0f + "'", float82 == 0.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder83);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder85);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder87);
        org.junit.Assert.assertTrue("'" + type88 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type88.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertTrue("'" + type89 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type89.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder90);
        org.junit.Assert.assertNotNull(parseField91);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder92);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder93);
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "hi!" + "'", str94, "hi!");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder96);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder98);
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test15224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15224");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery13 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder12.zeroTermsQuery(zeroTermsQuery13);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder14.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder16.queryName("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder16.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder16.analyzer("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder16.tieBreaker((float) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder16.boost((float) (-1));
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = multiMatchQueryBuilder16.rewrite("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"\",\n    \"cutoff_frequency\" : 1.0,\n    \"boost\" : 1.0,\n    \"_name\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"analyzer\\\" : \\\"multi_match\\\",\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\"\n  }\n}");
        java.lang.String[] strArray36 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder37 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray36);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder39 = multiMatchQueryBuilder37.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder41 = multiMatchQueryBuilder39.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder43 = multiMatchQueryBuilder41.lenient(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder45 = multiMatchQueryBuilder41.prefixLength((int) (byte) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder47 = multiMatchQueryBuilder45.boost((float) 1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder50 = multiMatchQueryBuilder47.field("{\n  \"multiMatch\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"rewrite\" : \"multi_match\",\n    \"fuzzyRewrite\" : \"hi!\",\n    \"lenient\" : false,\n    \"boost\" : 1.0\n  }\n}", (-1.0f));
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder52 = multiMatchQueryBuilder50.cutoffFrequency((float) (byte) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder53 = null; // flaky: multiMatchQueryBuilder28.fuzziness((java.lang.Object) multiMatchQueryBuilder52);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder55 = multiMatchQueryBuilder52.minimumShouldMatch("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"prefix_length\" : 0,\n    \"max_expansions\" : 1,\n    \"fuzzy_rewrite\" : \"\",\n    \"lenient\" : true,\n    \"boost\" : 1.0,\n    \"_name\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\"\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder57 = multiMatchQueryBuilder55.minimumShouldMatch("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"slop\" : -1,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 10.0,\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder59 = multiMatchQueryBuilder55.boost((float) 10L);
        java.lang.String[] strArray67 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder68 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray67);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder70 = multiMatchQueryBuilder68.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder72 = multiMatchQueryBuilder70.tieBreaker(0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type73 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX;
        float float74 = type73.tieBreaker();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder75 = multiMatchQueryBuilder70.type(type73);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder77 = multiMatchQueryBuilder70.cutoffFrequency((float) 0L);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder79 = multiMatchQueryBuilder70.lenient(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type80 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX;
        float float81 = type80.tieBreaker();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder82 = multiMatchQueryBuilder79.type(type80);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder83 = multiMatchQueryBuilder55.type(type80);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder28);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder39);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder41);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder43);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder45);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder47);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder50);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder52);
// flaky:         org.junit.Assert.assertNotNull(multiMatchQueryBuilder53);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder55);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder57);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder59);
        org.junit.Assert.assertNotNull(strArray67);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder70);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder72);
        org.junit.Assert.assertTrue("'" + type73 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX + "'", type73.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX));
        org.junit.Assert.assertTrue("'" + float74 + "' != '" + 0.0f + "'", float74 == 0.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder75);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder77);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder79);
        org.junit.Assert.assertTrue("'" + type80 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX + "'", type80.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX));
        org.junit.Assert.assertTrue("'" + float81 + "' != '" + 0.0f + "'", float81 == 0.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder82);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder83);
    }

    @Test
    public void test15225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15225");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder10.field("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder10.boost(0.0f);
        java.lang.String str17 = multiMatchQueryBuilder16.getWriteableName();
        org.elasticsearch.index.query.Operator operator18 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder16.operator(operator18);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder19.tieBreaker((float) '4');
        org.elasticsearch.index.query.Operator operator22 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder21.operator(operator22);
        org.elasticsearch.index.query.Operator operator24 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder23.operator(operator24);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder25.prefixLength(0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = multiMatchQueryBuilder25.analyzer("{\n  \"multi_match\" : {\n    \"query\" : \"class org.elasticsearch.index.query.MultiMatchQueryBuilder$Type\",\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"use_dis_max\" : false,\n    \"lenient\" : true,\n    \"boost\" : 1.0,\n    \"_name\" : \"{\\n  \\\"multiMatch\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"fuzzyRewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\"\n  }\n}");
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "multi_match" + "'", str17, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder29);
    }

    @Test
    public void test15226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15226");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery13 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder12.zeroTermsQuery(zeroTermsQuery13);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder14.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder16.queryName("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder18.analyzer("multi_match");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder18.field("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"slop\" : -1,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}", 0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder18.queryName("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder18.tieBreaker((float) (-1L));
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = multiMatchQueryBuilder27.slop((int) (short) -1);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder29);
    }

    @Test
    public void test15227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15227");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder10.field("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder10.boost(0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder16.analyzer("multi_match");
        float float19 = multiMatchQueryBuilder18.boost();
        java.lang.String[] strArray27 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray27);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder30 = multiMatchQueryBuilder28.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder32 = multiMatchQueryBuilder28.queryName("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.Operator operator33 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder34 = multiMatchQueryBuilder32.operator(operator33);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder36 = multiMatchQueryBuilder34.lenient(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder38 = multiMatchQueryBuilder36.maxExpansions((int) (short) 1);
        java.lang.String[] strArray46 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder47 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray46);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder48 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) multiMatchQueryBuilder36, strArray46);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder50 = multiMatchQueryBuilder36.boost((float) 10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder51 = null; // flaky: multiMatchQueryBuilder18.fuzziness((java.lang.Object) multiMatchQueryBuilder36);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery52 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder53 = multiMatchQueryBuilder18.zeroTermsQuery(zeroTermsQuery52);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder55 = multiMatchQueryBuilder18.lenient(false);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery56 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder57 = multiMatchQueryBuilder18.zeroTermsQuery(zeroTermsQuery56);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder59 = multiMatchQueryBuilder18.rewrite("{\n  \"multiMatch\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzyRewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        java.lang.Class<?> wildcardClass60 = multiMatchQueryBuilder59.getClass();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertTrue("'" + float19 + "' != '" + 0.0f + "'", float19 == 0.0f);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder30);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder32);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder34);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder36);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder38);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder50);
// flaky:         org.junit.Assert.assertNotNull(multiMatchQueryBuilder51);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder53);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder55);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder57);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder59);
        org.junit.Assert.assertNotNull(wildcardClass60);
    }

    @Test
    public void test15228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15228");
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type0 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX;
        float float1 = type0.tieBreaker();
        java.lang.Class<?> wildcardClass2 = type0.getClass();
        java.lang.String[] strArray10 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray10);
        java.lang.Object obj12 = null;
        java.lang.String[] strArray21 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray21);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 10.0f, strArray21);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = new org.elasticsearch.index.query.MultiMatchQueryBuilder(obj12, strArray21);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray21);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) wildcardClass2, strArray21);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = multiMatchQueryBuilder26.maxExpansions(0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder30 = multiMatchQueryBuilder26.prefixLength((-1));
        java.lang.String str31 = multiMatchQueryBuilder26.queryName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder33 = multiMatchQueryBuilder26.slop(0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder35 = multiMatchQueryBuilder26.useDisMax(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder37 = multiMatchQueryBuilder35.prefixLength((int) (short) 100);
        java.lang.String[] strArray45 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder46 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray45);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder48 = multiMatchQueryBuilder46.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder50 = multiMatchQueryBuilder48.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder52 = multiMatchQueryBuilder50.lenient(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder54 = multiMatchQueryBuilder52.maxExpansions(0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder57 = multiMatchQueryBuilder52.field("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}", (float) (short) 1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type58 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS;
        org.elasticsearch.index.search.MatchQuery.Type type59 = type58.matchQueryType();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder60 = multiMatchQueryBuilder57.type(type58);
        org.elasticsearch.index.search.MatchQuery.Type type61 = type58.matchQueryType();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder62 = multiMatchQueryBuilder35.type(type58);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder64 = multiMatchQueryBuilder35.rewrite("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\", \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"slop\\\" : -1,\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"lenient\\\" : true,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\", \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"max_expansions\\\" : 1,\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\" ],\n    \"analyzer\" : \"\",\n    \"fuzzy_rewrite\" : \"\",\n    \"tie_breaker\" : 0.0,\n    \"cutoff_frequency\" : 0.0,\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertTrue("'" + type0 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX + "'", type0.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX));
        org.junit.Assert.assertTrue("'" + float1 + "' != '" + 0.0f + "'", float1 == 0.0f);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder28);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder30);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder33);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder35);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder37);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder48);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder50);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder52);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder54);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder57);
        org.junit.Assert.assertTrue("'" + type58 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS + "'", type58.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS));
        org.junit.Assert.assertTrue("'" + type59 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type59.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder60);
        org.junit.Assert.assertTrue("'" + type61 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type61.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder62);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder64);
    }

    @Test
    public void test15229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15229");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder8.queryName("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.Operator operator13 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder12.operator(operator13);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder12.field("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"analyzer\" : \"multi_match\",\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}", 10.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder17.field("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery20 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder17.zeroTermsQuery(zeroTermsQuery20);
        org.elasticsearch.index.query.Operator operator22 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder21.operator(operator22);
        java.lang.String[] strArray31 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder32 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray31);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder34 = multiMatchQueryBuilder32.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder36 = multiMatchQueryBuilder34.fuzzyRewrite("hi!");
        java.lang.String str37 = multiMatchQueryBuilder34.getName();
        float float38 = multiMatchQueryBuilder34.boost();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder40 = multiMatchQueryBuilder34.lenient(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder42 = multiMatchQueryBuilder34.queryName("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder44 = multiMatchQueryBuilder34.cutoffFrequency((float) (-1L));
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder46 = multiMatchQueryBuilder34.useDisMax(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder47 = multiMatchQueryBuilder23.fuzziness((java.lang.Object) true);
        java.lang.String[] strArray55 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder56 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray55);
        java.lang.Object obj57 = null;
        java.lang.String[] strArray66 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder67 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray66);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder68 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 10.0f, strArray66);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder69 = new org.elasticsearch.index.query.MultiMatchQueryBuilder(obj57, strArray66);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder70 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray66);
        org.elasticsearch.index.query.Operator operator71 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder72 = multiMatchQueryBuilder70.operator(operator71);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder74 = multiMatchQueryBuilder72.cutoffFrequency((float) (-1L));
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder75 = null; // flaky: multiMatchQueryBuilder23.fuzziness((java.lang.Object) multiMatchQueryBuilder74);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder77 = multiMatchQueryBuilder74.slop(1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder79 = multiMatchQueryBuilder77.rewrite("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzziness\" : \"PHRASE_PREFIX\",\n    \"fuzzy_rewrite\" : \"\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder81 = multiMatchQueryBuilder79.minimumShouldMatch("{\n  \"multiMatch\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"rewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"slop\\\" : -1,\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"lenient\\\" : true,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"fuzzyRewrite\" : \"hi!\",\n    \"tieBreaker\" : 52.0,\n    \"boost\" : -1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder83 = multiMatchQueryBuilder79.slop((int) (byte) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder85 = multiMatchQueryBuilder83.tieBreaker((float) 0);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder34);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "multi_match" + "'", str37, "multi_match");
        org.junit.Assert.assertTrue("'" + float38 + "' != '" + 1.0f + "'", float38 == 1.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder40);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder42);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder44);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder46);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder47);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder72);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder74);
// flaky:         org.junit.Assert.assertNotNull(multiMatchQueryBuilder75);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder77);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder79);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder81);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder83);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder85);
    }

    @Test
    public void test15230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15230");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.tieBreaker(0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type13 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX;
        float float14 = type13.tieBreaker();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder10.type(type13);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder10.cutoffFrequency((float) 0L);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder10.maxExpansions(10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder10.analyzer("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"slop\" : -1,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder10.analyzer("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"analyzer\" : \"multi_match\",\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder10.lenient(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder25.field("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = multiMatchQueryBuilder27.field("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"rewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"slop\\\" : -1,\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"lenient\\\" : true,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 52.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = multiMatchQueryBuilder29.cutoffFrequency(0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder33 = multiMatchQueryBuilder31.minimumShouldMatch("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"analyzer\" : \"{\\n  \\\"multiMatch\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"fuzzyRewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"rewrite\" : \"multi_match\",\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"lenient\" : false,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder35 = multiMatchQueryBuilder33.boost(0.0f);
        float float36 = multiMatchQueryBuilder35.boost();
        org.elasticsearch.index.query.QueryValidationException queryValidationException37 = multiMatchQueryBuilder35.validate();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertTrue("'" + type13 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX + "'", type13.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX));
        org.junit.Assert.assertTrue("'" + float14 + "' != '" + 0.0f + "'", float14 == 0.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder29);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder31);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder33);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder35);
        org.junit.Assert.assertTrue("'" + float36 + "' != '" + 0.0f + "'", float36 == 0.0f);
        org.junit.Assert.assertNull(queryValidationException37);
    }

    @Test
    public void test15231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15231");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.fuzzyRewrite("hi!");
        java.lang.String str13 = multiMatchQueryBuilder10.getName();
        float float14 = multiMatchQueryBuilder10.boost();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder10.lenient(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder10.slop((int) (short) -1);
        org.elasticsearch.index.query.Operator operator19 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder18.operator(operator19);
        java.lang.String[] strArray28 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray28);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = multiMatchQueryBuilder29.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder33 = multiMatchQueryBuilder31.tieBreaker(0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder35 = multiMatchQueryBuilder31.cutoffFrequency((float) 0L);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder37 = multiMatchQueryBuilder31.minimumShouldMatch("{\n  \"multiMatch\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzyRewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder39 = multiMatchQueryBuilder31.maxExpansions(0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder41 = multiMatchQueryBuilder39.minimumShouldMatch("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"slop\" : 0,\n    \"prefix_length\" : 0,\n    \"rewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"analyzer\\\" : \\\"multi_match\\\",\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"lenient\" : false,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String[] strArray49 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder50 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray49);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder52 = multiMatchQueryBuilder50.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder54 = multiMatchQueryBuilder52.tieBreaker(0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type55 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX;
        float float56 = type55.tieBreaker();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder57 = multiMatchQueryBuilder52.type(type55);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder59 = multiMatchQueryBuilder52.cutoffFrequency((float) 0L);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder61 = multiMatchQueryBuilder52.lenient(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type62 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        org.elasticsearch.index.search.MatchQuery.Type type63 = type62.matchQueryType();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder64 = multiMatchQueryBuilder52.type(type62);
        float float65 = type62.tieBreaker();
        org.elasticsearch.index.search.MatchQuery.Type type66 = type62.matchQueryType();
        org.elasticsearch.index.search.MatchQuery.Type type67 = type62.matchQueryType();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder68 = multiMatchQueryBuilder39.type(type62);
        org.elasticsearch.index.search.MatchQuery.Type type69 = type62.matchQueryType();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder70 = multiMatchQueryBuilder20.type(type62);
        org.elasticsearch.common.ParseField parseField71 = type62.parseField();
        org.elasticsearch.common.ParseField parseField72 = type62.parseField();
        float float73 = type62.tieBreaker();
        org.elasticsearch.index.search.MatchQuery.Type type74 = type62.matchQueryType();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "multi_match" + "'", str13, "multi_match");
        org.junit.Assert.assertTrue("'" + float14 + "' != '" + 1.0f + "'", float14 == 1.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder31);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder33);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder35);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder37);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder39);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder41);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder52);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder54);
        org.junit.Assert.assertTrue("'" + type55 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX + "'", type55.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX));
        org.junit.Assert.assertTrue("'" + float56 + "' != '" + 0.0f + "'", float56 == 0.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder57);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder59);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder61);
        org.junit.Assert.assertTrue("'" + type62 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type62.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertTrue("'" + type63 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type63.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder64);
        org.junit.Assert.assertTrue("'" + float65 + "' != '" + 0.0f + "'", float65 == 0.0f);
        org.junit.Assert.assertTrue("'" + type66 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type66.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertTrue("'" + type67 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type67.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder68);
        org.junit.Assert.assertTrue("'" + type69 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type69.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder70);
        org.junit.Assert.assertNotNull(parseField71);
        org.junit.Assert.assertNotNull(parseField72);
        org.junit.Assert.assertTrue("'" + float73 + "' != '" + 0.0f + "'", float73 == 0.0f);
        org.junit.Assert.assertTrue("'" + type74 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type74.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
    }

    @Test
    public void test15232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15232");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder12.lenient(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder12.prefixLength((int) (byte) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder12.cutoffFrequency((float) (-1));
        float float19 = multiMatchQueryBuilder12.boost();
        java.lang.String str20 = multiMatchQueryBuilder12.queryName();
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder21 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params22 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder23 = multiMatchQueryBuilder12.toXContent(xContentBuilder21, params22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertTrue("'" + float19 + "' != '" + 1.0f + "'", float19 == 1.0f);
        org.junit.Assert.assertNull(str20);
    }

    @Test
    public void test15233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15233");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery13 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder12.zeroTermsQuery(zeroTermsQuery13);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder14.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery17 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder14.zeroTermsQuery(zeroTermsQuery17);
        java.lang.String[] strArray26 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray26);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = multiMatchQueryBuilder27.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = multiMatchQueryBuilder29.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery32 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder33 = multiMatchQueryBuilder31.zeroTermsQuery(zeroTermsQuery32);
        java.lang.String str34 = multiMatchQueryBuilder33.getName();
        boolean boolean35 = multiMatchQueryBuilder18.equals((java.lang.Object) multiMatchQueryBuilder33);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder37 = multiMatchQueryBuilder33.queryName("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder39 = multiMatchQueryBuilder33.prefixLength(100);
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder49 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray48);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder51 = multiMatchQueryBuilder49.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder53 = multiMatchQueryBuilder49.queryName("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.Operator operator54 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder55 = multiMatchQueryBuilder53.operator(operator54);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder57 = multiMatchQueryBuilder55.lenient(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder59 = multiMatchQueryBuilder57.maxExpansions((int) (short) 1);
        java.lang.String[] strArray67 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder68 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray67);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder69 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) multiMatchQueryBuilder57, strArray67);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder70 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (byte) 1, strArray67);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder71 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) multiMatchQueryBuilder33, strArray67);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type72 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder73 = multiMatchQueryBuilder71.type((java.lang.Object) type72);
        org.elasticsearch.index.search.MatchQuery.Type type74 = type72.matchQueryType();
        org.elasticsearch.common.ParseField parseField75 = type72.parseField();
        org.elasticsearch.common.ParseField parseField76 = type72.parseField();
        java.lang.Class<?> wildcardClass77 = parseField76.getClass();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder29);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder31);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "multi_match" + "'", str34, "multi_match");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder37);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder39);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder51);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder53);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder55);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder57);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder59);
        org.junit.Assert.assertNotNull(strArray67);
        org.junit.Assert.assertTrue("'" + type72 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS + "'", type72.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder73);
        org.junit.Assert.assertTrue("'" + type74 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type74.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertNotNull(parseField75);
        org.junit.Assert.assertNotNull(parseField76);
        org.junit.Assert.assertNotNull(wildcardClass77);
    }

    @Test
    public void test15234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15234");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder10.field("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder10.boost(0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder16.analyzer("multi_match");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder18.maxExpansions(1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder18.cutoffFrequency((float) (short) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder18.field("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}", (float) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder25.prefixLength((int) (byte) 100);
        java.lang.String[] strArray35 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder36 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray35);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder38 = multiMatchQueryBuilder36.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder40 = multiMatchQueryBuilder38.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder42 = multiMatchQueryBuilder40.tieBreaker((float) '#');
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder44 = multiMatchQueryBuilder42.useDisMax(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder46 = multiMatchQueryBuilder44.cutoffFrequency((float) 1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder48 = multiMatchQueryBuilder46.field("{\n  \"multiMatch\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\", \"\" ],\n    \"analyzer\" : \"multi_match\",\n    \"maxExpansions\" : -1,\n    \"fuzzyRewrite\" : \"hi!\",\n    \"useDisMax\" : true,\n    \"boost\" : 0.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder49 = null; // flaky: multiMatchQueryBuilder27.fuzziness((java.lang.Object) multiMatchQueryBuilder46);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder51 = multiMatchQueryBuilder27.useDisMax(false);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery52 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder53 = multiMatchQueryBuilder51.zeroTermsQuery(zeroTermsQuery52);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder38);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder40);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder42);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder44);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder46);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder48);
// flaky:         org.junit.Assert.assertNotNull(multiMatchQueryBuilder49);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder51);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder53);
    }

    @Test
    public void test15235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15235");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery13 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder12.zeroTermsQuery(zeroTermsQuery13);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder14.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder16.queryName("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder16.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder16.analyzer("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder16.tieBreaker((float) 0);
        java.lang.String[] strArray32 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder33 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray32);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder35 = multiMatchQueryBuilder33.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder37 = multiMatchQueryBuilder35.tieBreaker(0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type38 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX;
        float float39 = type38.tieBreaker();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder40 = multiMatchQueryBuilder35.type(type38);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder42 = multiMatchQueryBuilder35.cutoffFrequency((float) 0L);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder44 = multiMatchQueryBuilder35.lenient(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type45 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        org.elasticsearch.index.search.MatchQuery.Type type46 = type45.matchQueryType();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder47 = multiMatchQueryBuilder35.type(type45);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder49 = multiMatchQueryBuilder35.useDisMax(false);
        java.lang.String[] strArray57 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder58 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray57);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder60 = multiMatchQueryBuilder58.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder62 = multiMatchQueryBuilder60.fuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder64 = multiMatchQueryBuilder60.minimumShouldMatch("multi_match");
        boolean boolean65 = multiMatchQueryBuilder35.equals((java.lang.Object) "multi_match");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder67 = multiMatchQueryBuilder35.queryName("{\n  \"multiMatch\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"type\" : \"phrase_prefix\",\n    \"maxExpansions\" : 10,\n    \"fuzzyRewrite\" : \"\",\n    \"tieBreaker\" : 0.0,\n    \"cutoffFrequency\" : 0.0,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String[] strArray75 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder76 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray75);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder78 = multiMatchQueryBuilder76.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder80 = multiMatchQueryBuilder78.tieBreaker(0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type81 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX;
        float float82 = type81.tieBreaker();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder83 = multiMatchQueryBuilder78.type(type81);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder85 = multiMatchQueryBuilder78.cutoffFrequency((float) 0L);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder87 = multiMatchQueryBuilder78.lenient(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type88 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        org.elasticsearch.index.search.MatchQuery.Type type89 = type88.matchQueryType();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder90 = multiMatchQueryBuilder78.type(type88);
        org.elasticsearch.common.ParseField parseField91 = type88.parseField();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder92 = multiMatchQueryBuilder35.type(type88);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder93 = multiMatchQueryBuilder16.type(type88);
        org.elasticsearch.index.search.MatchQuery.Type type94 = type88.matchQueryType();
        org.elasticsearch.index.search.MatchQuery.Type type95 = type88.matchQueryType();
        float float96 = type88.tieBreaker();
        float float97 = type88.tieBreaker();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder35);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder37);
        org.junit.Assert.assertTrue("'" + type38 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX + "'", type38.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX));
        org.junit.Assert.assertTrue("'" + float39 + "' != '" + 0.0f + "'", float39 == 0.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder40);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder42);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder44);
        org.junit.Assert.assertTrue("'" + type45 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type45.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertTrue("'" + type46 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type46.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder47);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder49);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder60);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder62);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder67);
        org.junit.Assert.assertNotNull(strArray75);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder78);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder80);
        org.junit.Assert.assertTrue("'" + type81 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX + "'", type81.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX));
        org.junit.Assert.assertTrue("'" + float82 + "' != '" + 0.0f + "'", float82 == 0.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder83);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder85);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder87);
        org.junit.Assert.assertTrue("'" + type88 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type88.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertTrue("'" + type89 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type89.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder90);
        org.junit.Assert.assertNotNull(parseField91);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder92);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder93);
        org.junit.Assert.assertTrue("'" + type94 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type94.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertTrue("'" + type95 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type95.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertTrue("'" + float96 + "' != '" + 0.0f + "'", float96 == 0.0f);
        org.junit.Assert.assertTrue("'" + float97 + "' != '" + 0.0f + "'", float97 == 0.0f);
    }

    @Test
    public void test15236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15236");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery13 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder12.zeroTermsQuery(zeroTermsQuery13);
        java.lang.String str15 = null; // flaky: multiMatchQueryBuilder12.toString();
        java.lang.String str16 = multiMatchQueryBuilder12.queryName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder12.queryName("");
        java.lang.String str19 = multiMatchQueryBuilder12.getName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type20 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX;
        float float21 = type20.tieBreaker();
        org.elasticsearch.common.ParseField parseField22 = type20.parseField();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder12.type(type20);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder23.maxExpansions((int) (short) 10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder25.field("{\n  \"multiMatch\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\", \"multi_match^0.0\" ],\n    \"type\" : \"phrase_prefix\",\n    \"prefixLength\" : 97,\n    \"fuzzyRewrite\" : \"\",\n    \"tieBreaker\" : 0.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder30 = multiMatchQueryBuilder27.field("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"minimum_should_match\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"slop\\\" : -1,\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"lenient\\\" : true,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"boost\" : 1.0\n  }\n}", (float) (byte) 0);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}" + "'", str15, "{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "multi_match" + "'", str19, "multi_match");
        org.junit.Assert.assertTrue("'" + type20 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX + "'", type20.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX));
        org.junit.Assert.assertTrue("'" + float21 + "' != '" + 0.0f + "'", float21 == 0.0f);
        org.junit.Assert.assertNotNull(parseField22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder30);
    }

    @Test
    public void test15237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15237");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.fuzzyRewrite("hi!");
        java.lang.String str13 = multiMatchQueryBuilder10.getName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder10.analyzer("multi_match");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder10.slop((int) (short) 100);
        org.elasticsearch.index.query.QueryValidationException queryValidationException18 = multiMatchQueryBuilder10.validate();
        org.elasticsearch.common.io.stream.StreamOutput streamOutput19 = null;
        // The following exception was thrown during execution in test generation
        try {
            multiMatchQueryBuilder10.writeTo(streamOutput19);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "multi_match" + "'", str13, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNull(queryValidationException18);
    }

    @Test
    public void test15238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15238");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery13 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder12.zeroTermsQuery(zeroTermsQuery13);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder14.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder16.queryName("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder16.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder16.fuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"slop\" : -1,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String str23 = multiMatchQueryBuilder22.queryName();
        java.lang.String[] strArray31 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder32 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray31);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder34 = multiMatchQueryBuilder32.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder36 = multiMatchQueryBuilder32.prefixLength(10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder37 = null; // flaky: multiMatchQueryBuilder22.fuzziness((java.lang.Object) multiMatchQueryBuilder36);
        java.lang.String str38 = null; // flaky: multiMatchQueryBuilder37.queryName();
        org.elasticsearch.index.query.QueryValidationException queryValidationException39 = null; // flaky: multiMatchQueryBuilder37.validate();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "hi!" + "'", str23, "hi!");
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder34);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder36);
// flaky:         org.junit.Assert.assertNotNull(multiMatchQueryBuilder37);
// flaky:         org.junit.Assert.assertEquals("'" + str38 + "' != '" + "hi!" + "'", str38, "hi!");
        org.junit.Assert.assertNull(queryValidationException39);
    }

    @Test
    public void test15239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15239");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery13 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder12.zeroTermsQuery(zeroTermsQuery13);
        java.lang.String str15 = null; // flaky: multiMatchQueryBuilder12.toString();
        java.lang.String str16 = multiMatchQueryBuilder12.queryName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder12.prefixLength((int) (byte) -1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder12.slop((int) '4');
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder12.analyzer("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"type\" : \"best_fields\",\n    \"fuzzy_rewrite\" : \"\",\n    \"use_dis_max\" : false,\n    \"tie_breaker\" : 0.0,\n    \"lenient\" : false,\n    \"cutoff_frequency\" : 0.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder12.minimumShouldMatch("{\n  \"multiMatch\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"^10.0\", \"^10.0\", \"^10.0\", \"^10.0\", \"^10.0\", \"^10.0\" ],\n    \"type\" : \"phrase_prefix\",\n    \"slop\" : -1,\n    \"prefixLength\" : 35,\n    \"minimumShouldMatch\" : \"hi!\",\n    \"fuzzyRewrite\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 10.0,\n    \"Name\" : \"multi_match\"\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder24.minimumShouldMatch("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"analyzer\" : \"{\\n  \\\"multiMatch\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"fuzzyRewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"slop\" : 100,\n    \"rewrite\" : \"multi_match\",\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"lenient\" : false,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = multiMatchQueryBuilder26.useDisMax(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder30 = multiMatchQueryBuilder26.maxExpansions((int) (byte) 1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder32 = multiMatchQueryBuilder26.queryName("");
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}" + "'", str15, "{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder28);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder30);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder32);
    }

    @Test
    public void test15240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15240");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.tieBreaker(0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type13 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX;
        float float14 = type13.tieBreaker();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder10.type(type13);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder10.cutoffFrequency((float) 0L);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder10.fuzzyRewrite("{\n  \"multiMatch\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"type\" : \"phrase_prefix\",\n    \"maxExpansions\" : 10,\n    \"fuzzyRewrite\" : \"\",\n    \"tieBreaker\" : 0.0,\n    \"cutoffFrequency\" : 0.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder10.prefixLength(0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type22 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder21.type(type22);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder23.field("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"^1.0\", \"^1.0\", \"^1.0\", \"^1.0\", \"^1.0\", \"^1.0\" ],\n    \"type\" : \"phrase_prefix\",\n    \"minimum_should_match\" : \"{\\n  \\\"multiMatch\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"fuzzyRewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"fuzzy_rewrite\" : \"\",\n    \"tie_breaker\" : 0.0,\n    \"cutoff_frequency\" : 0.0,\n    \"boost\" : 1.0,\n    \"_name\" : \"multi_match\"\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder25.queryName("");
        float float28 = multiMatchQueryBuilder27.boost();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder30 = multiMatchQueryBuilder27.cutoffFrequency((float) 100L);
        org.elasticsearch.index.query.Operator operator31 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder32 = multiMatchQueryBuilder30.operator(operator31);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertTrue("'" + type13 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX + "'", type13.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX));
        org.junit.Assert.assertTrue("'" + float14 + "' != '" + 0.0f + "'", float14 == 0.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertTrue("'" + type22 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE + "'", type22.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
        org.junit.Assert.assertTrue("'" + float28 + "' != '" + 1.0f + "'", float28 == 1.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder30);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder32);
    }

    @Test
    public void test15241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15241");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        java.lang.String[] strArray18 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray18);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder19.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder21.tieBreaker(0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type24 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX;
        float float25 = type24.tieBreaker();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder21.type(type24);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = multiMatchQueryBuilder21.cutoffFrequency((float) 0L);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder30 = multiMatchQueryBuilder21.lenient(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type31 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        org.elasticsearch.index.search.MatchQuery.Type type32 = type31.matchQueryType();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder33 = multiMatchQueryBuilder21.type(type31);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder34 = multiMatchQueryBuilder8.fuzziness((java.lang.Object) type31);
        org.elasticsearch.index.query.Operator operator35 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder36 = multiMatchQueryBuilder34.operator(operator35);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder38 = multiMatchQueryBuilder34.fuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"slop\\\" : -1,\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"lenient\\\" : true,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"boost\" : 1.0,\n    \"_name\" : \"hi!\"\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder40 = multiMatchQueryBuilder34.queryName("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\", \"\" ],\n    \"analyzer\" : \"multi_match\",\n    \"max_expansions\" : 1,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"cutoff_frequency\" : 0.0,\n    \"boost\" : 0.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder42 = multiMatchQueryBuilder40.cutoffFrequency((float) 10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder44 = multiMatchQueryBuilder42.queryName("{\n  \"multi_match\" : {\n    \"query\" : 10,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"prefix_length\" : 35,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String[] strArray52 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder53 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray52);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder55 = multiMatchQueryBuilder53.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder57 = multiMatchQueryBuilder55.fuzzyRewrite("hi!");
        java.lang.String str58 = multiMatchQueryBuilder55.getName();
        float float59 = multiMatchQueryBuilder55.boost();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder61 = multiMatchQueryBuilder55.lenient(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder63 = multiMatchQueryBuilder55.slop((int) (short) -1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type64 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX;
        org.elasticsearch.index.search.MatchQuery.Type type65 = type64.matchQueryType();
        org.elasticsearch.index.search.MatchQuery.Type type66 = type64.matchQueryType();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder67 = multiMatchQueryBuilder55.type(type64);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder69 = multiMatchQueryBuilder55.queryName("multi_match");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder71 = multiMatchQueryBuilder69.minimumShouldMatch("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder73 = multiMatchQueryBuilder69.lenient(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder75 = multiMatchQueryBuilder69.queryName("{\n  \"multiMatch\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzyRewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder77 = multiMatchQueryBuilder69.maxExpansions((int) (byte) 1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder79 = multiMatchQueryBuilder77.minimumShouldMatch("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"rewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"slop\\\" : -1,\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"lenient\\\" : true,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 52.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.Operator operator80 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder81 = multiMatchQueryBuilder79.operator(operator80);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder83 = multiMatchQueryBuilder79.queryName("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"prefix_length\" : 100,\n    \"minimum_should_match\" : \"\",\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0,\n    \"_name\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\"\n  }\n}");
        org.elasticsearch.index.query.QueryValidationException queryValidationException84 = multiMatchQueryBuilder83.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder86 = multiMatchQueryBuilder83.useDisMax(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder88 = multiMatchQueryBuilder86.fuzzyRewrite("{\n  \"multiMatch\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzziness\" : \"PHRASE_PREFIX\",\n    \"fuzzyRewrite\" : \"\",\n    \"boost\" : 1.0\n  }\n}");
        boolean boolean89 = multiMatchQueryBuilder44.equals((java.lang.Object) "{\n  \"multiMatch\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzziness\" : \"PHRASE_PREFIX\",\n    \"fuzzyRewrite\" : \"\",\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertTrue("'" + type24 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX + "'", type24.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX));
        org.junit.Assert.assertTrue("'" + float25 + "' != '" + 0.0f + "'", float25 == 0.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder28);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder30);
        org.junit.Assert.assertTrue("'" + type31 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type31.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertTrue("'" + type32 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type32.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder33);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder34);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder36);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder38);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder40);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder42);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder44);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder55);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "multi_match" + "'", str58, "multi_match");
        org.junit.Assert.assertTrue("'" + float59 + "' != '" + 1.0f + "'", float59 == 1.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder61);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder63);
        org.junit.Assert.assertTrue("'" + type64 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX + "'", type64.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX));
        org.junit.Assert.assertTrue("'" + type65 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX + "'", type65.equals(org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX));
        org.junit.Assert.assertTrue("'" + type66 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX + "'", type66.equals(org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder67);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder69);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder71);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder73);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder75);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder77);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder79);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder81);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder83);
        org.junit.Assert.assertNull(queryValidationException84);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder86);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
    }

    @Test
    public void test15242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15242");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.fuzzyRewrite("hi!");
        java.lang.String str13 = multiMatchQueryBuilder10.getName();
        float float14 = multiMatchQueryBuilder10.boost();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder10.lenient(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder10.slop((int) (short) -1);
        java.lang.String str19 = multiMatchQueryBuilder10.queryName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder10.useDisMax(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder10.analyzer("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"analyzer\" : \"hi!\",\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0,\n    \"_name\" : \"hi!\"\n  }\n}");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery24 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder23.zeroTermsQuery(zeroTermsQuery24);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "multi_match" + "'", str13, "multi_match");
        org.junit.Assert.assertTrue("'" + float14 + "' != '" + 1.0f + "'", float14 == 1.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
    }

    @Test
    public void test15243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15243");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder12.lenient(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder14.rewrite("multi_match");
        java.lang.String str17 = multiMatchQueryBuilder16.getWriteableName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder16.analyzer("{\n  \"multiMatch\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzyRewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder19.lenient(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder21.fuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String[] strArray31 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder32 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray31);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder34 = multiMatchQueryBuilder32.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder36 = multiMatchQueryBuilder34.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder38 = multiMatchQueryBuilder34.field("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder40 = multiMatchQueryBuilder34.boost(0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder42 = multiMatchQueryBuilder40.analyzer("multi_match");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder45 = multiMatchQueryBuilder42.field("{\n  \"multiMatch\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzyRewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}", (float) (byte) 10);
        boolean boolean46 = multiMatchQueryBuilder21.equals((java.lang.Object) multiMatchQueryBuilder42);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder48 = multiMatchQueryBuilder42.maxExpansions((int) (byte) 10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder50 = multiMatchQueryBuilder48.field("{\n  \"multiMatch\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"maxExpansions\" : 1,\n    \"minimumShouldMatch\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"fuzzyRewrite\" : \"\",\n    \"lenient\" : true,\n    \"boost\" : 1.0,\n    \"Name\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"type\\\" : \\\"best_fields\\\",\\n    \\\"fuzzy_rewrite\\\" : \\\"\\\",\\n    \\\"use_dis_max\\\" : false,\\n    \\\"tie_breaker\\\" : 0.0,\\n    \\\"lenient\\\" : false,\\n    \\\"cutoff_frequency\\\" : 0.0,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\"\n  }\n}");
        java.lang.String str51 = multiMatchQueryBuilder50.getName();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "multi_match" + "'", str17, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder34);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder36);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder38);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder40);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder42);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder48);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "multi_match" + "'", str51, "multi_match");
    }

    @Test
    public void test15244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15244");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.fuzzyRewrite("hi!");
        java.lang.String str13 = multiMatchQueryBuilder10.getName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder10.analyzer("multi_match");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder10.slop((int) (short) -1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder10.queryName("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder10.queryName("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"multi_match^0.0\" ],\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 0.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder21.fuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\", \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"fuzzy_rewrite\\\" : \\\"\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}^52.0\" ],\n    \"max_expansions\" : 1,\n    \"fuzzy_rewrite\" : \"\",\n    \"lenient\" : true,\n    \"boost\" : 1.0,\n    \"_name\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\"\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder21.minimumShouldMatch("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"slop\" : -1,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 10.0,\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String[] strArray33 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder34 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray33);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder36 = multiMatchQueryBuilder34.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder38 = multiMatchQueryBuilder36.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder40 = multiMatchQueryBuilder36.field("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder42 = multiMatchQueryBuilder36.boost(0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder44 = multiMatchQueryBuilder42.analyzer("multi_match");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder46 = multiMatchQueryBuilder44.useDisMax(true);
        java.lang.String str47 = multiMatchQueryBuilder44.getName();
        java.lang.Object obj48 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder49 = multiMatchQueryBuilder44.type(obj48);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder51 = multiMatchQueryBuilder49.boost((float) (-1));
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery52 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder53 = multiMatchQueryBuilder49.zeroTermsQuery(zeroTermsQuery52);
        java.lang.String[] strArray61 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder62 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray61);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder64 = multiMatchQueryBuilder62.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder66 = multiMatchQueryBuilder62.queryName("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder68 = multiMatchQueryBuilder66.tieBreaker((float) (short) 1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder70 = multiMatchQueryBuilder68.slop((int) (byte) 100);
        java.lang.Object obj71 = null;
        java.lang.String[] strArray80 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder81 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray80);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder82 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 10.0f, strArray80);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder83 = new org.elasticsearch.index.query.MultiMatchQueryBuilder(obj71, strArray80);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder84 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (byte) 100, strArray80);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder85 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) multiMatchQueryBuilder53, strArray80);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder86 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) multiMatchQueryBuilder25, strArray80);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "multi_match" + "'", str13, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder36);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder38);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder40);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder42);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder44);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "multi_match" + "'", str47, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder49);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder51);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder53);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder64);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder66);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder68);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder70);
        org.junit.Assert.assertNotNull(strArray80);
    }

    @Test
    public void test15245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15245");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.tieBreaker(0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder10.cutoffFrequency((float) 0L);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder10.minimumShouldMatch("{\n  \"multiMatch\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzyRewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder10.maxExpansions(0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder18.minimumShouldMatch("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"slop\" : 0,\n    \"prefix_length\" : 0,\n    \"rewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"analyzer\\\" : \\\"multi_match\\\",\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"lenient\" : false,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String[] strArray28 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray28);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = multiMatchQueryBuilder29.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder33 = multiMatchQueryBuilder31.tieBreaker(0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type34 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX;
        float float35 = type34.tieBreaker();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder36 = multiMatchQueryBuilder31.type(type34);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder38 = multiMatchQueryBuilder31.cutoffFrequency((float) 0L);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder40 = multiMatchQueryBuilder31.lenient(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type41 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        org.elasticsearch.index.search.MatchQuery.Type type42 = type41.matchQueryType();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder43 = multiMatchQueryBuilder31.type(type41);
        float float44 = type41.tieBreaker();
        org.elasticsearch.index.search.MatchQuery.Type type45 = type41.matchQueryType();
        org.elasticsearch.index.search.MatchQuery.Type type46 = type41.matchQueryType();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder47 = multiMatchQueryBuilder18.type(type41);
        java.lang.String[] strArray55 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder56 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray55);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder58 = multiMatchQueryBuilder56.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder60 = multiMatchQueryBuilder58.fuzzyRewrite("hi!");
        java.lang.String str61 = multiMatchQueryBuilder58.getName();
        float float62 = multiMatchQueryBuilder58.boost();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder64 = multiMatchQueryBuilder58.lenient(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder66 = multiMatchQueryBuilder58.slop((int) (short) -1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type67 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX;
        org.elasticsearch.index.search.MatchQuery.Type type68 = type67.matchQueryType();
        org.elasticsearch.index.search.MatchQuery.Type type69 = type67.matchQueryType();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder70 = multiMatchQueryBuilder58.type(type67);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder72 = multiMatchQueryBuilder58.queryName("multi_match");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder74 = multiMatchQueryBuilder72.minimumShouldMatch("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder76 = multiMatchQueryBuilder72.lenient(true);
        org.elasticsearch.index.query.Operator operator77 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder78 = multiMatchQueryBuilder72.operator(operator77);
        org.elasticsearch.index.query.QueryValidationException queryValidationException79 = multiMatchQueryBuilder78.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder80 = multiMatchQueryBuilder47.type((java.lang.Object) queryValidationException79);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder82 = multiMatchQueryBuilder47.field("{\n  \"multiMatch\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\", \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"analyzer\\\" : \\\"multi_match\\\",\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}^10.0\", \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\" ],\n    \"maxExpansions\" : 10,\n    \"fuzzyRewrite\" : \"\",\n    \"boost\" : 1.0,\n    \"Name\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\"\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder84 = multiMatchQueryBuilder47.field("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\", \"\" ],\n    \"type\" : \"best_fields\",\n    \"analyzer\" : \"multi_match\",\n    \"minimum_should_match\" : \"{\\n  \\\"multiMatch\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"analyzer\\\" : \\\"multi_match\\\",\\n    \\\"maxExpansions\\\" : -1,\\n    \\\"fuzzyRewrite\\\" : \\\"hi!\\\",\\n    \\\"useDisMax\\\" : true,\\n    \\\"boost\\\" : 0.0\\n  }\\n}\",\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 0.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder86 = multiMatchQueryBuilder47.tieBreaker((float) (short) 0);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder31);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder33);
        org.junit.Assert.assertTrue("'" + type34 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX + "'", type34.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX));
        org.junit.Assert.assertTrue("'" + float35 + "' != '" + 0.0f + "'", float35 == 0.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder36);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder38);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder40);
        org.junit.Assert.assertTrue("'" + type41 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type41.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertTrue("'" + type42 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type42.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder43);
        org.junit.Assert.assertTrue("'" + float44 + "' != '" + 0.0f + "'", float44 == 0.0f);
        org.junit.Assert.assertTrue("'" + type45 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type45.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertTrue("'" + type46 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type46.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder47);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder58);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "multi_match" + "'", str61, "multi_match");
        org.junit.Assert.assertTrue("'" + float62 + "' != '" + 1.0f + "'", float62 == 1.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder64);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder66);
        org.junit.Assert.assertTrue("'" + type67 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX + "'", type67.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX));
        org.junit.Assert.assertTrue("'" + type68 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX + "'", type68.equals(org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX));
        org.junit.Assert.assertTrue("'" + type69 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX + "'", type69.equals(org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder70);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder72);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder74);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder76);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder78);
        org.junit.Assert.assertNull(queryValidationException79);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder80);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder82);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder84);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder86);
    }

    @Test
    public void test15246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15246");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder12.lenient(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder14.rewrite("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery17 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder16.zeroTermsQuery(zeroTermsQuery17);
        java.lang.Object obj19 = null;
        boolean boolean20 = multiMatchQueryBuilder18.equals(obj19);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder18.lenient(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder18.rewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder24.tieBreaker((float) 1);
        java.lang.String[] strArray34 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder35 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray34);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder37 = multiMatchQueryBuilder35.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder39 = multiMatchQueryBuilder37.tieBreaker(0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type40 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX;
        float float41 = type40.tieBreaker();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder42 = multiMatchQueryBuilder37.type(type40);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder44 = multiMatchQueryBuilder37.cutoffFrequency((float) 0L);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder46 = multiMatchQueryBuilder37.maxExpansions(10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder48 = multiMatchQueryBuilder46.minimumShouldMatch("");
        float float49 = multiMatchQueryBuilder48.boost();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder52 = multiMatchQueryBuilder48.field("{\n  \"multiMatch\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"analyzer\" : \"{\\n  \\\"multiMatch\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"fuzzyRewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"rewrite\" : \"multi_match\",\n    \"fuzzyRewrite\" : \"hi!\",\n    \"tieBreaker\" : 100.0,\n    \"lenient\" : false,\n    \"boost\" : 1.0\n  }\n}", (float) (byte) -1);
        boolean boolean53 = multiMatchQueryBuilder24.equals((java.lang.Object) (byte) -1);
        java.lang.String str54 = multiMatchQueryBuilder24.getName();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder37);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder39);
        org.junit.Assert.assertTrue("'" + type40 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX + "'", type40.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX));
        org.junit.Assert.assertTrue("'" + float41 + "' != '" + 0.0f + "'", float41 == 0.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder42);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder44);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder46);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder48);
        org.junit.Assert.assertTrue("'" + float49 + "' != '" + 1.0f + "'", float49 == 1.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "multi_match" + "'", str54, "multi_match");
    }

    @Test
    public void test15247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15247");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.fuzzyRewrite("hi!");
        java.lang.String str13 = multiMatchQueryBuilder10.getName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder10.analyzer("multi_match");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder15.cutoffFrequency((float) (short) 1);
        org.elasticsearch.index.query.QueryValidationException queryValidationException18 = multiMatchQueryBuilder15.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder15.boost((float) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder20.minimumShouldMatch("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"type\" : \"phrase_prefix\",\n    \"fuzzy_rewrite\" : \"\",\n    \"tie_breaker\" : 0.0,\n    \"cutoff_frequency\" : 0.0,\n    \"boost\" : 1.0,\n    \"_name\" : \"multi_match\"\n  }\n}");
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "multi_match" + "'", str13, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNull(queryValidationException18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
    }

    @Test
    public void test15248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15248");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder10.field("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder10.boost(0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder10.field("");
        java.lang.String[] strArray26 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray26);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = multiMatchQueryBuilder27.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = multiMatchQueryBuilder29.tieBreaker(0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type32 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX;
        float float33 = type32.tieBreaker();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder34 = multiMatchQueryBuilder29.type(type32);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder36 = multiMatchQueryBuilder29.cutoffFrequency((float) 0L);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder38 = multiMatchQueryBuilder29.queryName("multi_match");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder41 = multiMatchQueryBuilder38.field("", (float) 1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder42 = null; // flaky: multiMatchQueryBuilder10.fuzziness((java.lang.Object) multiMatchQueryBuilder38);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder44 = null; // flaky: multiMatchQueryBuilder42.maxExpansions(0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder46 = null; // flaky: multiMatchQueryBuilder42.cutoffFrequency((float) (short) 100);
        java.lang.String str47 = null; // flaky: multiMatchQueryBuilder42.toString();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder29);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder31);
        org.junit.Assert.assertTrue("'" + type32 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX + "'", type32.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX));
        org.junit.Assert.assertTrue("'" + float33 + "' != '" + 0.0f + "'", float33 == 0.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder34);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder36);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder38);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder41);
// flaky:         org.junit.Assert.assertNotNull(multiMatchQueryBuilder42);
// flaky:         org.junit.Assert.assertNotNull(multiMatchQueryBuilder44);
// flaky:         org.junit.Assert.assertNotNull(multiMatchQueryBuilder46);
// flaky:         org.junit.Assert.assertEquals("'" + str47 + "' != '" + "{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzziness\" : \"{\\n  \\\"MULTI_MATCH\\\" : {\\n    \\\"QUERY\\\" : 0.0,\\n    \\\"FIELDS\\\" : [ \\\"HI!\\\", \\\"^1.0\\\", \\\"^1.0\\\", \\\"^1.0\\\", \\\"^1.0\\\", \\\"^1.0\\\", \\\"^1.0\\\" ],\\n    \\\"TYPE\\\" : \\\"PHRASE_PREFIX\\\",\\n    \\\"FUZZY_REWRITE\\\" : \\\"\\\",\\n    \\\"TIE_BREAKER\\\" : 0.0,\\n    \\\"CUTOFF_FREQUENCY\\\" : 0.0,\\n    \\\"BOOST\\\" : 1.0,\\n    \\\"_NAME\\\" : \\\"MULTI_MATCH\\\"\\n  }\\n}\",\n    \"max_expansions\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 0.0\n  }\n}" + "'", str47, "{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzziness\" : \"{\\n  \\\"MULTI_MATCH\\\" : {\\n    \\\"QUERY\\\" : 0.0,\\n    \\\"FIELDS\\\" : [ \\\"HI!\\\", \\\"^1.0\\\", \\\"^1.0\\\", \\\"^1.0\\\", \\\"^1.0\\\", \\\"^1.0\\\", \\\"^1.0\\\" ],\\n    \\\"TYPE\\\" : \\\"PHRASE_PREFIX\\\",\\n    \\\"FUZZY_REWRITE\\\" : \\\"\\\",\\n    \\\"TIE_BREAKER\\\" : 0.0,\\n    \\\"CUTOFF_FREQUENCY\\\" : 0.0,\\n    \\\"BOOST\\\" : 1.0,\\n    \\\"_NAME\\\" : \\\"MULTI_MATCH\\\"\\n  }\\n}\",\n    \"max_expansions\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 0.0\n  }\n}");
    }

    @Test
    public void test15249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15249");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder8.queryName("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type13 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX;
        org.elasticsearch.index.search.MatchQuery.Type type14 = type13.matchQueryType();
        org.elasticsearch.index.search.MatchQuery.Type type15 = type13.matchQueryType();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder12.type(type13);
        java.lang.String[] strArray24 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray24);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder25.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = multiMatchQueryBuilder27.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = multiMatchQueryBuilder27.field("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder33 = multiMatchQueryBuilder27.boost(0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder35 = multiMatchQueryBuilder33.analyzer("multi_match");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder37 = multiMatchQueryBuilder35.maxExpansions(1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type38 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS;
        org.elasticsearch.index.search.MatchQuery.Type type39 = type38.matchQueryType();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder40 = multiMatchQueryBuilder35.type(type38);
        org.elasticsearch.index.search.MatchQuery.Type type41 = type38.matchQueryType();
        org.elasticsearch.index.search.MatchQuery.Type type42 = type38.matchQueryType();
        org.elasticsearch.common.ParseField parseField43 = type38.parseField();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder44 = multiMatchQueryBuilder16.type(type38);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder46 = multiMatchQueryBuilder16.slop((int) ' ');
        org.elasticsearch.index.query.Operator operator47 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder48 = multiMatchQueryBuilder16.operator(operator47);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder50 = multiMatchQueryBuilder48.field("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"use_dis_max\" : false,\n    \"boost\" : 0.0,\n    \"_name\" : \"hi!\"\n  }\n}");
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertTrue("'" + type13 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX + "'", type13.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX));
        org.junit.Assert.assertTrue("'" + type14 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX + "'", type14.equals(org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX));
        org.junit.Assert.assertTrue("'" + type15 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX + "'", type15.equals(org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder29);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder31);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder33);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder35);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder37);
        org.junit.Assert.assertTrue("'" + type38 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS + "'", type38.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS));
        org.junit.Assert.assertTrue("'" + type39 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type39.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder40);
        org.junit.Assert.assertTrue("'" + type41 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type41.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertTrue("'" + type42 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type42.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertNotNull(parseField43);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder44);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder46);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder48);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder50);
    }

    @Test
    public void test15250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15250");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.fuzzyRewrite("hi!");
        java.lang.String str13 = multiMatchQueryBuilder10.getName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder10.rewrite("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"slop\" : -1,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder10.analyzer("{\n  \"multiMatch\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzyRewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String str18 = multiMatchQueryBuilder10.queryName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder10.tieBreaker(10.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder10.field("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\", \"\" ],\n    \"type\" : \"cross_fields\",\n    \"analyzer\" : \"multi_match\",\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"use_dis_max\" : true,\n    \"boost\" : 0.0\n  }\n}", (float) 'a');
        org.elasticsearch.index.query.QueryValidationException queryValidationException24 = multiMatchQueryBuilder10.validate();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery25 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder10.zeroTermsQuery(zeroTermsQuery25);
        java.lang.String[] strArray34 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder35 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray34);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder37 = multiMatchQueryBuilder35.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder39 = multiMatchQueryBuilder35.queryName("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.Operator operator40 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder41 = multiMatchQueryBuilder39.operator(operator40);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder43 = multiMatchQueryBuilder41.lenient(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder45 = multiMatchQueryBuilder43.maxExpansions((int) (short) 1);
        org.elasticsearch.index.query.Operator operator46 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder47 = multiMatchQueryBuilder43.operator(operator46);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder49 = multiMatchQueryBuilder47.minimumShouldMatch("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.Operator operator50 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder51 = multiMatchQueryBuilder49.operator(operator50);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder53 = multiMatchQueryBuilder51.maxExpansions((int) ' ');
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type54 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder55 = multiMatchQueryBuilder53.type(type54);
        java.lang.String[] strArray63 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder64 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray63);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder66 = multiMatchQueryBuilder64.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder68 = multiMatchQueryBuilder64.cutoffFrequency((float) 100);
        java.lang.String str69 = multiMatchQueryBuilder68.queryName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder71 = multiMatchQueryBuilder68.boost((float) '4');
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery72 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder73 = multiMatchQueryBuilder71.zeroTermsQuery(zeroTermsQuery72);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder75 = multiMatchQueryBuilder71.analyzer("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\", \"multi_match^0.0\" ],\n    \"type\" : \"phrase_prefix\",\n    \"prefix_length\" : 97,\n    \"fuzzy_rewrite\" : \"\",\n    \"tie_breaker\" : 0.0,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.Object obj76 = null;
        java.lang.String[] strArray79 = new java.lang.String[] { "{\n  \"multiMatch\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"rewrite\" : \"multi_match\",\n    \"fuzzyRewrite\" : \"hi!\",\n    \"lenient\" : false,\n    \"boost\" : 1.0\n  }\n}" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder80 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "hi!", strArray79);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder81 = new org.elasticsearch.index.query.MultiMatchQueryBuilder(obj76, strArray79);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder82 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\", \"multi_match^0.0\" ],\n    \"type\" : \"phrase_prefix\",\n    \"prefix_length\" : 97,\n    \"fuzzy_rewrite\" : \"\",\n    \"tie_breaker\" : 0.0,\n    \"boost\" : 1.0\n  }\n}", strArray79);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder83 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) multiMatchQueryBuilder53, strArray79);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder84 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) zeroTermsQuery25, strArray79);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "multi_match" + "'", str13, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNull(queryValidationException24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder37);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder39);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder41);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder43);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder45);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder47);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder49);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder51);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder53);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder55);
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder66);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder68);
        org.junit.Assert.assertNull(str69);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder71);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder73);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder75);
        org.junit.Assert.assertNotNull(strArray79);
    }

    @Test
    public void test15251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15251");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery13 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder12.zeroTermsQuery(zeroTermsQuery13);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder14.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder16.queryName("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder16.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder20.lenient(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder20.minimumShouldMatch("{\n  \"multiMatch\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"rewrite\" : \"multi_match\",\n    \"fuzzyRewrite\" : \"hi!\",\n    \"lenient\" : false,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder24.maxExpansions((int) (short) 1);
        org.elasticsearch.index.query.Operator operator27 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = multiMatchQueryBuilder24.operator(operator27);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder30 = multiMatchQueryBuilder28.minimumShouldMatch("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\", \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"slop\\\" : -1,\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"lenient\\\" : true,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\", \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"max_expansions\\\" : 1,\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\" ],\n    \"analyzer\" : \"\",\n    \"fuzzy_rewrite\" : \"\",\n    \"tie_breaker\" : 0.0,\n    \"cutoff_frequency\" : 0.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder32 = multiMatchQueryBuilder28.lenient(false);
        java.lang.String str33 = multiMatchQueryBuilder32.getWriteableName();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder28);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder30);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "multi_match" + "'", str33, "multi_match");
    }

    @Test
    public void test15252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15252");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder8.queryName("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder12.tieBreaker((float) (short) 1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder14.tieBreaker(0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder16.prefixLength((int) (short) 1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder16.lenient(false);
        java.lang.String[] strArray28 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray28);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = multiMatchQueryBuilder29.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder33 = multiMatchQueryBuilder31.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder35 = multiMatchQueryBuilder31.field("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder37 = multiMatchQueryBuilder31.boost(0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder39 = multiMatchQueryBuilder37.analyzer("multi_match");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder41 = multiMatchQueryBuilder39.maxExpansions(1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type42 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS;
        org.elasticsearch.index.search.MatchQuery.Type type43 = type42.matchQueryType();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder44 = multiMatchQueryBuilder39.type(type42);
        org.elasticsearch.index.search.MatchQuery.Type type45 = type42.matchQueryType();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder46 = multiMatchQueryBuilder16.type(type42);
        float float47 = type42.tieBreaker();
        org.elasticsearch.index.search.MatchQuery.Type type48 = type42.matchQueryType();
        float float49 = type42.tieBreaker();
        org.elasticsearch.common.ParseField parseField50 = type42.parseField();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder31);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder33);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder35);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder37);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder39);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder41);
        org.junit.Assert.assertTrue("'" + type42 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS + "'", type42.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS));
        org.junit.Assert.assertTrue("'" + type43 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type43.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder44);
        org.junit.Assert.assertTrue("'" + type45 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type45.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder46);
        org.junit.Assert.assertTrue("'" + float47 + "' != '" + 0.0f + "'", float47 == 0.0f);
        org.junit.Assert.assertTrue("'" + type48 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type48.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertTrue("'" + float49 + "' != '" + 0.0f + "'", float49 == 0.0f);
        org.junit.Assert.assertNotNull(parseField50);
    }

    @Test
    public void test15253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15253");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder10.field("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder10.boost(0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder16.analyzer("multi_match");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder18.maxExpansions(1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type21 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS;
        org.elasticsearch.index.search.MatchQuery.Type type22 = type21.matchQueryType();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder18.type(type21);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder23.prefixLength((int) 'a');
        java.lang.String str26 = multiMatchQueryBuilder25.getWriteableName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = multiMatchQueryBuilder25.slop((int) '4');
        java.lang.String str29 = null; // flaky: multiMatchQueryBuilder25.toString();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = multiMatchQueryBuilder25.slop((int) (short) 1);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertTrue("'" + type21 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS + "'", type21.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS));
        org.junit.Assert.assertTrue("'" + type22 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type22.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "multi_match" + "'", str26, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder28);
// flaky:         org.junit.Assert.assertEquals("'" + str29 + "' != '" + "{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\", \"\" ],\n    \"type\" : \"cross_fields\",\n    \"analyzer\" : \"multi_match\",\n    \"slop\" : 52,\n    \"prefix_length\" : 97,\n    \"max_expansions\" : 1,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 0.0\n  }\n}" + "'", str29, "{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\", \"\" ],\n    \"type\" : \"cross_fields\",\n    \"analyzer\" : \"multi_match\",\n    \"slop\" : 52,\n    \"prefix_length\" : 97,\n    \"max_expansions\" : 1,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 0.0\n  }\n}");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder31);
    }

    @Test
    public void test15254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15254");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        java.lang.Object obj9 = null;
        java.lang.String[] strArray18 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray18);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 10.0f, strArray18);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = new org.elasticsearch.index.query.MultiMatchQueryBuilder(obj9, strArray18);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray18);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder22.field("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"type\" : \"best_fields\",\n    \"fuzziness\" : \"BEST_FIELDS\",\n    \"rewrite\" : \"\",\n    \"fuzzy_rewrite\" : \"\",\n    \"tie_breaker\" : 97.0,\n    \"boost\" : 100.0,\n    \"_name\" : \"{\\n  \\\"multiMatch\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"rewrite\\\" : \\\"multi_match\\\",\\n    \\\"fuzzyRewrite\\\" : \\\"hi!\\\",\\n    \\\"lenient\\\" : false,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\"\n  }\n}", (float) 100L);
        java.lang.String[] strArray33 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder34 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray33);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder36 = multiMatchQueryBuilder34.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder38 = multiMatchQueryBuilder36.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery39 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder40 = multiMatchQueryBuilder38.zeroTermsQuery(zeroTermsQuery39);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder42 = multiMatchQueryBuilder40.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder44 = multiMatchQueryBuilder42.queryName("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder46 = multiMatchQueryBuilder42.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder48 = multiMatchQueryBuilder42.fuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"slop\" : -1,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder50 = multiMatchQueryBuilder48.prefixLength((int) (short) 10);
        java.lang.String[] strArray58 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder59 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray58);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder61 = multiMatchQueryBuilder59.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder63 = multiMatchQueryBuilder61.fuzzyRewrite("hi!");
        java.lang.String str64 = multiMatchQueryBuilder61.getName();
        float float65 = multiMatchQueryBuilder61.boost();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder67 = multiMatchQueryBuilder61.lenient(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder69 = multiMatchQueryBuilder61.slop((int) (short) -1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type70 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX;
        org.elasticsearch.index.search.MatchQuery.Type type71 = type70.matchQueryType();
        org.elasticsearch.index.search.MatchQuery.Type type72 = type70.matchQueryType();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder73 = multiMatchQueryBuilder61.type(type70);
        org.elasticsearch.index.search.MatchQuery.Type type74 = type70.matchQueryType();
        org.elasticsearch.index.search.MatchQuery.Type type75 = type70.matchQueryType();
        org.elasticsearch.index.search.MatchQuery.Type type76 = type70.matchQueryType();
        float float77 = type70.tieBreaker();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder78 = multiMatchQueryBuilder48.type(type70);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder80 = multiMatchQueryBuilder48.prefixLength((int) (short) 100);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder81 = null; // flaky: multiMatchQueryBuilder25.type((java.lang.Object) multiMatchQueryBuilder80);
// flaky:             org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchParseException; message: failed to parse [multi_match] query type [{?  \"multi_match\" : {?    \"query\" : 0.0,?    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],?    \"type\" : \"phrase_prefix\",?    \"prefix_length\" : 100,?    \"fuzzy_rewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"slop\\\" : -1,\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"lenient\\\" : true,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",?    \"boost\" : 1.0,?    \"_name\" : \"hi!\"?  }?}]. unknown type.");
        } catch (org.elasticsearch.ElasticsearchParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder36);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder38);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder40);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder42);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder44);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder46);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder48);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder50);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder61);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "multi_match" + "'", str64, "multi_match");
        org.junit.Assert.assertTrue("'" + float65 + "' != '" + 1.0f + "'", float65 == 1.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder67);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder69);
        org.junit.Assert.assertTrue("'" + type70 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX + "'", type70.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX));
        org.junit.Assert.assertTrue("'" + type71 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX + "'", type71.equals(org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX));
        org.junit.Assert.assertTrue("'" + type72 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX + "'", type72.equals(org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder73);
        org.junit.Assert.assertTrue("'" + type74 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX + "'", type74.equals(org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX));
        org.junit.Assert.assertTrue("'" + type75 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX + "'", type75.equals(org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX));
        org.junit.Assert.assertTrue("'" + type76 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX + "'", type76.equals(org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX));
        org.junit.Assert.assertTrue("'" + float77 + "' != '" + 0.0f + "'", float77 == 0.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder78);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder80);
    }

    @Test
    public void test15255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15255");
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type2 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.parse("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"use_dis_max\" : true,\n    \"lenient\" : true,\n    \"cutoff_frequency\" : -1.0,\n    \"boost\" : 1.0,\n    \"_name\" : \"\"\n  }\n}", parseFieldMatcher1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test15256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15256");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder12.cutoffFrequency((float) '#');
        org.elasticsearch.index.query.QueryShardContext queryShardContext15 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.lucene.search.Query query16 = multiMatchQueryBuilder12.toFilter(queryShardContext15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
    }

    @Test
    public void test15257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15257");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.fuzzyRewrite("hi!");
        java.lang.String str13 = multiMatchQueryBuilder10.getName();
        float float14 = multiMatchQueryBuilder10.boost();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder10.lenient(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder10.slop((int) (short) -1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type19 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX;
        org.elasticsearch.index.search.MatchQuery.Type type20 = type19.matchQueryType();
        org.elasticsearch.index.search.MatchQuery.Type type21 = type19.matchQueryType();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder10.type(type19);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder22.rewrite("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"minimum_should_match\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"slop\\\" : -1,\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"lenient\\\" : true,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder22.tieBreaker((float) (short) 1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = multiMatchQueryBuilder26.maxExpansions((int) (byte) 10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder30 = multiMatchQueryBuilder28.slop(0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder32 = multiMatchQueryBuilder28.cutoffFrequency(1.0f);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "multi_match" + "'", str13, "multi_match");
        org.junit.Assert.assertTrue("'" + float14 + "' != '" + 1.0f + "'", float14 == 1.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertTrue("'" + type19 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX + "'", type19.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX));
        org.junit.Assert.assertTrue("'" + type20 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX + "'", type20.equals(org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX));
        org.junit.Assert.assertTrue("'" + type21 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX + "'", type21.equals(org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder28);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder30);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder32);
    }

    @Test
    public void test15258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15258");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery13 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder12.zeroTermsQuery(zeroTermsQuery13);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder14.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery17 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder14.zeroTermsQuery(zeroTermsQuery17);
        java.lang.String str19 = multiMatchQueryBuilder18.queryName();
        java.lang.String str20 = multiMatchQueryBuilder18.queryName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder18.analyzer("{\n  \"multiMatch\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzyRewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder22.fuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"analyzer\" : \"multi_match\",\n    \"slop\" : -1,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0,\n    \"_name\" : \"hi!\"\n  }\n}");
        java.lang.String[] strArray32 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder33 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray32);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder35 = multiMatchQueryBuilder33.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder37 = multiMatchQueryBuilder33.queryName("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.Operator operator38 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder39 = multiMatchQueryBuilder37.operator(operator38);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder42 = multiMatchQueryBuilder37.field("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"analyzer\" : \"multi_match\",\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}", 10.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder45 = multiMatchQueryBuilder37.field("{\n  \"multiMatch\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzyRewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}", 0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder47 = multiMatchQueryBuilder45.prefixLength((int) ' ');
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder49 = multiMatchQueryBuilder45.rewrite("{\n  \"multi_match\" : {\n    \"query\" : 100,\n    \"fields\" : [ \"{\\n  \\\"multiMatch\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"fuzzyRewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\" ],\n    \"cutoff_frequency\" : 0.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder51 = multiMatchQueryBuilder49.fuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"type\" : \"phrase_prefix\",\n    \"max_expansions\" : 10,\n    \"fuzzy_rewrite\" : \"\",\n    \"tie_breaker\" : 0.0,\n    \"cutoff_frequency\" : 0.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder52 = multiMatchQueryBuilder22.fuzziness((java.lang.Object) "{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"type\" : \"phrase_prefix\",\n    \"max_expansions\" : 10,\n    \"fuzzy_rewrite\" : \"\",\n    \"tie_breaker\" : 0.0,\n    \"cutoff_frequency\" : 0.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder54 = multiMatchQueryBuilder22.useDisMax(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder56 = multiMatchQueryBuilder22.boost(1.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder59 = multiMatchQueryBuilder56.field("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"type\" : \"phrase_prefix\",\n    \"analyzer\" : \"{\\n  \\\"multiMatch\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"type\\\" : \\\"phrase_prefix\\\",\\n    \\\"maxExpansions\\\" : 10,\\n    \\\"fuzzyRewrite\\\" : \\\"\\\",\\n    \\\"tieBreaker\\\" : 0.0,\\n    \\\"cutoffFrequency\\\" : 0.0,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 35.0,\n    \"boost\" : -1.0\n  }\n}", 52.0f);
        java.lang.String[] strArray67 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder68 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray67);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder70 = multiMatchQueryBuilder68.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder72 = multiMatchQueryBuilder70.tieBreaker(0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type73 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX;
        float float74 = type73.tieBreaker();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder75 = multiMatchQueryBuilder70.type(type73);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder77 = multiMatchQueryBuilder70.cutoffFrequency((float) 0L);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder79 = multiMatchQueryBuilder70.maxExpansions(10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder81 = multiMatchQueryBuilder70.analyzer("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"slop\" : -1,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder83 = multiMatchQueryBuilder70.rewrite("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder85 = multiMatchQueryBuilder83.lenient(false);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder86 = multiMatchQueryBuilder56.type((java.lang.Object) false);
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchParseException; message: failed to parse [multi_match] query type [false]. unknown type.");
        } catch (org.elasticsearch.ElasticsearchParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder35);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder37);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder39);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder42);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder45);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder47);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder49);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder51);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder52);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder54);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder56);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder59);
        org.junit.Assert.assertNotNull(strArray67);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder70);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder72);
        org.junit.Assert.assertTrue("'" + type73 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX + "'", type73.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX));
        org.junit.Assert.assertTrue("'" + float74 + "' != '" + 0.0f + "'", float74 == 0.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder75);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder77);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder79);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder81);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder83);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder85);
    }

    @Test
    public void test15259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15259");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder10.field("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder10.boost(0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder16.analyzer("multi_match");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder16.maxExpansions((int) (short) 1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder16.slop((int) ' ');
        org.elasticsearch.common.io.stream.StreamInput streamInput23 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder16.readFrom(streamInput23);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
    }

    @Test
    public void test15260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15260");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery13 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder12.zeroTermsQuery(zeroTermsQuery13);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder14.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery17 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder14.zeroTermsQuery(zeroTermsQuery17);
        java.lang.String str19 = multiMatchQueryBuilder14.getWriteableName();
        java.lang.String str20 = null; // flaky: multiMatchQueryBuilder14.toString();
        java.lang.String str21 = multiMatchQueryBuilder14.queryName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder14.tieBreaker((float) 10);
        java.lang.String[] strArray28 = new java.lang.String[] { "{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"type\" : \"best_fields\",\n    \"analyzer\" : \"\",\n    \"minimum_should_match\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"fuzzy_rewrite\" : \"\",\n    \"tie_breaker\" : 0.0,\n    \"cutoff_frequency\" : 0.0,\n    \"boost\" : 35.0\n  }\n}", "{\n  \"multiMatch\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"analyzer\" : \"multi_match\",\n    \"fuzzyRewrite\" : \"hi!\",\n    \"boost\" : 1.0,\n    \"Name\" : \"hi!\"\n  }\n}", "{\n  \"multiMatch\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"^32.0\", \"^32.0\", \"^32.0\", \"^32.0\", \"^32.0\", \"^32.0\" ],\n    \"minimumShouldMatch\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"lenient\\\" : true,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"fuzzyRewrite\" : \"hi!\",\n    \"boost\" : 1.0,\n    \"Name\" : \"\"\n  }\n}", "{\n  \"multiMatch\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"analyzer\" : \"multi_match\",\n    \"fuzziness\" : \"{\\n  \\\"MULTIMATCH\\\" : {\\n    \\\"QUERY\\\" : 0.0,\\n    \\\"FIELDS\\\" : [ \\\"HI!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"ANALYZER\\\" : \\\"MULTI_MATCH\\\",\\n    \\\"MAXEXPANSIONS\\\" : 1,\\n    \\\"FUZZYREWRITE\\\" : \\\"HI!\\\",\\n    \\\"CUTOFFFREQUENCY\\\" : 0.0,\\n    \\\"BOOST\\\" : 0.0\\n  }\\n}\",\n    \"prefixLength\" : 0,\n    \"fuzzyRewrite\" : \"hi!\",\n    \"boost\" : 1.0,\n    \"Name\" : \"hi!\"\n  }\n}" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) multiMatchQueryBuilder14, strArray28);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = multiMatchQueryBuilder29.maxExpansions(10);
        java.lang.String str32 = multiMatchQueryBuilder31.getName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder34 = multiMatchQueryBuilder31.boost((float) 10);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "multi_match" + "'", str19, "multi_match");
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}" + "'", str20, "{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "multi_match" + "'", str32, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder34);
    }

    @Test
    public void test15261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15261");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder8.cutoffFrequency((float) 100);
        java.lang.String str13 = multiMatchQueryBuilder12.queryName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder12.boost((float) '4');
        java.lang.String str16 = multiMatchQueryBuilder15.queryName();
        java.lang.String[] strArray24 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray24);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder25.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = multiMatchQueryBuilder27.fuzzyRewrite("hi!");
        java.lang.String str30 = multiMatchQueryBuilder27.getName();
        float float31 = multiMatchQueryBuilder27.boost();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder33 = multiMatchQueryBuilder27.lenient(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder34 = multiMatchQueryBuilder15.fuzziness((java.lang.Object) true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder36 = multiMatchQueryBuilder15.lenient(true);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "multi_match" + "'", str30, "multi_match");
        org.junit.Assert.assertTrue("'" + float31 + "' != '" + 1.0f + "'", float31 == 1.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder33);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder34);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder36);
    }

    @Test
    public void test15262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15262");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder12.lenient(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder12.prefixLength((int) (byte) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder12.rewrite("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"slop\" : -1,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder12.analyzer("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder12.boost((float) ' ');
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder22.boost(0.0f);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery25 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder24.zeroTermsQuery(zeroTermsQuery25);
        org.elasticsearch.index.query.Operator operator27 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = multiMatchQueryBuilder26.operator(operator27);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder28);
    }

    @Test
    public void test15263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15263");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery13 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder12.zeroTermsQuery(zeroTermsQuery13);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder14.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder16.queryName("hi!");
        java.lang.String str19 = multiMatchQueryBuilder16.queryName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder16.analyzer("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"slop\" : -1,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String str22 = multiMatchQueryBuilder16.getWriteableName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder16.field("{\n  \"multiMatch\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"type\" : \"phrase_prefix\",\n    \"maxExpansions\" : 10,\n    \"fuzzyRewrite\" : \"\",\n    \"tieBreaker\" : 0.0,\n    \"cutoffFrequency\" : 0.0,\n    \"boost\" : 1.0\n  }\n}", (float) 'a');
        java.lang.String str26 = multiMatchQueryBuilder25.getWriteableName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = multiMatchQueryBuilder25.queryName("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"slop\" : 0,\n    \"prefix_length\" : 0,\n    \"rewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"analyzer\\\" : \\\"multi_match\\\",\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"lenient\" : false,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.Object obj29 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder30 = multiMatchQueryBuilder25.type(obj29);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder32 = multiMatchQueryBuilder25.cutoffFrequency(100.0f);
        org.elasticsearch.index.query.QueryShardContext queryShardContext33 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.lucene.search.Query query34 = multiMatchQueryBuilder32.toQuery(queryShardContext33);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "multi_match" + "'", str22, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "multi_match" + "'", str26, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder28);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder30);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder32);
    }

    @Test
    public void test15264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15264");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.fuzzyRewrite("hi!");
        java.lang.String str13 = multiMatchQueryBuilder10.getName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder10.rewrite("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"slop\" : -1,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder10.tieBreaker((float) '4');
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder10.minimumShouldMatch("");
        org.elasticsearch.index.query.Operator operator20 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder19.operator(operator20);
        java.lang.String str22 = null; // flaky: multiMatchQueryBuilder21.toString();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder21.maxExpansions((int) (byte) 1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder21.fuzzyRewrite("");
        java.lang.String[] strArray34 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder35 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray34);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder37 = multiMatchQueryBuilder35.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder39 = multiMatchQueryBuilder35.cutoffFrequency((float) 100);
        java.lang.String str40 = multiMatchQueryBuilder39.queryName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder42 = multiMatchQueryBuilder39.boost((float) '4');
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery43 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder44 = multiMatchQueryBuilder42.zeroTermsQuery(zeroTermsQuery43);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder46 = multiMatchQueryBuilder42.analyzer("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\", \"multi_match^0.0\" ],\n    \"type\" : \"phrase_prefix\",\n    \"prefix_length\" : 97,\n    \"fuzzy_rewrite\" : \"\",\n    \"tie_breaker\" : 0.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder48 = multiMatchQueryBuilder42.fuzzyRewrite("{\n  \"multiMatch\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"analyzer\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"minimum_should_match\\\" : \\\"{\\\\n  \\\\\\\"multi_match\\\\\\\" : {\\\\n    \\\\\\\"query\\\\\\\" : 0.0,\\\\n    \\\\\\\"fields\\\\\\\" : [ \\\\\\\"hi!\\\\\\\", \\\\\\\"\\\\\\\", \\\\\\\"\\\\\\\", \\\\\\\"\\\\\\\", \\\\\\\"\\\\\\\", \\\\\\\"\\\\\\\" ],\\\\n    \\\\\\\"slop\\\\\\\" : -1,\\\\n    \\\\\\\"fuzzy_rewrite\\\\\\\" : \\\\\\\"hi!\\\\\\\",\\\\n    \\\\\\\"lenient\\\\\\\" : true,\\\\n    \\\\\\\"boost\\\\\\\" : 1.0\\\\n  }\\\\n}\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"fuzzyRewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder50 = multiMatchQueryBuilder48.rewrite("{\n  \"multiMatch\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\", \"{\\n  \\\"multiMatch\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"type\\\" : \\\"phrase_prefix\\\",\\n    \\\"maxExpansions\\\" : 10,\\n    \\\"fuzzyRewrite\\\" : \\\"\\\",\\n    \\\"tieBreaker\\\" : 0.0,\\n    \\\"cutoffFrequency\\\" : 0.0,\\n    \\\"boost\\\" : 1.0\\n  }\\n}^1.0\" ],\n    \"fuzzyRewrite\" : \"hi!\",\n    \"cutoffFrequency\" : 10.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder52 = multiMatchQueryBuilder48.tieBreaker(35.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder54 = multiMatchQueryBuilder52.fuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"type\" : \"phrase_prefix\",\n    \"analyzer\" : \"{\\n  \\\"multiMatch\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"type\\\" : \\\"phrase_prefix\\\",\\n    \\\"maxExpansions\\\" : 10,\\n    \\\"fuzzyRewrite\\\" : \\\"\\\",\\n    \\\"tieBreaker\\\" : 0.0,\\n    \\\"cutoffFrequency\\\" : 0.0,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 35.0,\n    \"boost\" : -1.0\n  }\n}");
        java.lang.String[] strArray62 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder63 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray62);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder65 = multiMatchQueryBuilder63.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder67 = multiMatchQueryBuilder65.fuzzyRewrite("hi!");
        java.lang.String str68 = multiMatchQueryBuilder65.getName();
        float float69 = multiMatchQueryBuilder65.boost();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder71 = multiMatchQueryBuilder65.lenient(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder73 = multiMatchQueryBuilder65.slop((int) (short) -1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type74 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX;
        org.elasticsearch.index.search.MatchQuery.Type type75 = type74.matchQueryType();
        org.elasticsearch.index.search.MatchQuery.Type type76 = type74.matchQueryType();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder77 = multiMatchQueryBuilder65.type(type74);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder79 = multiMatchQueryBuilder65.queryName("multi_match");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder81 = multiMatchQueryBuilder79.minimumShouldMatch("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder83 = multiMatchQueryBuilder79.lenient(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder85 = multiMatchQueryBuilder79.queryName("{\n  \"multiMatch\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzyRewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder87 = multiMatchQueryBuilder85.boost((float) (-1L));
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder89 = multiMatchQueryBuilder87.useDisMax(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder92 = multiMatchQueryBuilder87.field("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\", \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"analyzer\\\" : \\\"multi_match\\\",\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}^10.0\", \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\" ],\n    \"max_expansions\" : 10,\n    \"fuzzy_rewrite\" : \"\",\n    \"boost\" : 1.0,\n    \"_name\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\"\n  }\n}", (float) (-1));
        java.lang.Object obj93 = null;
        java.lang.String[] strArray94 = new java.lang.String[] {};
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder95 = new org.elasticsearch.index.query.MultiMatchQueryBuilder(obj93, strArray94);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder96 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) multiMatchQueryBuilder92, strArray94);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder97 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) multiMatchQueryBuilder52, strArray94);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder98 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "", strArray94);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "multi_match" + "'", str13, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
// flaky:         org.junit.Assert.assertEquals("'" + str22 + "' != '" + "{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"minimum_should_match\" : \"\",\n    \"rewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"slop\\\" : -1,\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"lenient\\\" : true,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 52.0,\n    \"boost\" : 1.0\n  }\n}" + "'", str22, "{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"minimum_should_match\" : \"\",\n    \"rewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"slop\\\" : -1,\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"lenient\\\" : true,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 52.0,\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder37);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder39);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder42);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder44);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder46);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder48);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder50);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder52);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder54);
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder65);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "multi_match" + "'", str68, "multi_match");
        org.junit.Assert.assertTrue("'" + float69 + "' != '" + 1.0f + "'", float69 == 1.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder71);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder73);
        org.junit.Assert.assertTrue("'" + type74 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX + "'", type74.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX));
        org.junit.Assert.assertTrue("'" + type75 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX + "'", type75.equals(org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX));
        org.junit.Assert.assertTrue("'" + type76 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX + "'", type76.equals(org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder77);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder79);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder81);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder83);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder85);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder87);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder89);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder92);
        org.junit.Assert.assertNotNull(strArray94);
    }

    @Test
    public void test15265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15265");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder10.field("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder10.boost(0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder16.analyzer("multi_match");
        float float19 = multiMatchQueryBuilder18.boost();
        java.lang.String[] strArray27 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray27);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder30 = multiMatchQueryBuilder28.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder32 = multiMatchQueryBuilder28.queryName("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.Operator operator33 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder34 = multiMatchQueryBuilder32.operator(operator33);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder36 = multiMatchQueryBuilder34.lenient(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder38 = multiMatchQueryBuilder36.maxExpansions((int) (short) 1);
        java.lang.String[] strArray46 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder47 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray46);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder48 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) multiMatchQueryBuilder36, strArray46);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder50 = multiMatchQueryBuilder36.boost((float) 10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder51 = null; // flaky: multiMatchQueryBuilder18.fuzziness((java.lang.Object) multiMatchQueryBuilder36);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery52 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder53 = multiMatchQueryBuilder18.zeroTermsQuery(zeroTermsQuery52);
        java.lang.String[] strArray61 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder62 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray61);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder64 = multiMatchQueryBuilder62.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder66 = multiMatchQueryBuilder64.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder68 = multiMatchQueryBuilder66.lenient(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder70 = multiMatchQueryBuilder68.maxExpansions(0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder73 = multiMatchQueryBuilder68.field("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}", (float) (short) 1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type74 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS;
        org.elasticsearch.index.search.MatchQuery.Type type75 = type74.matchQueryType();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder76 = multiMatchQueryBuilder73.type(type74);
        org.elasticsearch.index.search.MatchQuery.Type type77 = type74.matchQueryType();
        org.elasticsearch.common.ParseField parseField78 = type74.parseField();
        float float79 = type74.tieBreaker();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder80 = multiMatchQueryBuilder53.type(type74);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertTrue("'" + float19 + "' != '" + 0.0f + "'", float19 == 0.0f);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder30);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder32);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder34);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder36);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder38);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder50);
// flaky:         org.junit.Assert.assertNotNull(multiMatchQueryBuilder51);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder53);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder64);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder66);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder68);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder70);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder73);
        org.junit.Assert.assertTrue("'" + type74 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS + "'", type74.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS));
        org.junit.Assert.assertTrue("'" + type75 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type75.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder76);
        org.junit.Assert.assertTrue("'" + type77 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type77.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertNotNull(parseField78);
        org.junit.Assert.assertTrue("'" + float79 + "' != '" + 0.0f + "'", float79 == 0.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder80);
    }

    @Test
    public void test15266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15266");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.fuzzyRewrite("hi!");
        java.lang.String str13 = multiMatchQueryBuilder10.getName();
        float float14 = multiMatchQueryBuilder10.boost();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder10.lenient(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder10.slop((int) (short) -1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type19 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX;
        org.elasticsearch.index.search.MatchQuery.Type type20 = type19.matchQueryType();
        org.elasticsearch.index.search.MatchQuery.Type type21 = type19.matchQueryType();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder10.type(type19);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder22.rewrite("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"minimum_should_match\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"slop\\\" : -1,\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"lenient\\\" : true,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder22.tieBreaker((float) (short) 1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = multiMatchQueryBuilder26.maxExpansions((int) (byte) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder30 = multiMatchQueryBuilder26.slop(0);
        java.lang.String[] strArray38 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder39 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray38);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder41 = multiMatchQueryBuilder39.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder43 = multiMatchQueryBuilder41.fuzzyRewrite("hi!");
        java.lang.String str44 = multiMatchQueryBuilder41.getName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder46 = multiMatchQueryBuilder41.rewrite("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"slop\" : -1,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder48 = multiMatchQueryBuilder41.tieBreaker((float) '4');
        java.lang.String[] strArray56 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder57 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray56);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder59 = multiMatchQueryBuilder57.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder61 = multiMatchQueryBuilder59.tieBreaker(0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type62 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX;
        float float63 = type62.tieBreaker();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder64 = multiMatchQueryBuilder59.type(type62);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder65 = multiMatchQueryBuilder41.type(type62);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder67 = multiMatchQueryBuilder41.slop(100);
        java.lang.String str68 = multiMatchQueryBuilder67.getName();
        boolean boolean69 = multiMatchQueryBuilder26.equals((java.lang.Object) str68);
        java.lang.Object obj70 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder71 = multiMatchQueryBuilder26.type(obj70);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "multi_match" + "'", str13, "multi_match");
        org.junit.Assert.assertTrue("'" + float14 + "' != '" + 1.0f + "'", float14 == 1.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertTrue("'" + type19 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX + "'", type19.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX));
        org.junit.Assert.assertTrue("'" + type20 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX + "'", type20.equals(org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX));
        org.junit.Assert.assertTrue("'" + type21 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX + "'", type21.equals(org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder28);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder30);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder41);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "multi_match" + "'", str44, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder46);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder48);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder59);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder61);
        org.junit.Assert.assertTrue("'" + type62 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX + "'", type62.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX));
        org.junit.Assert.assertTrue("'" + float63 + "' != '" + 0.0f + "'", float63 == 0.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder64);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder65);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "multi_match" + "'", str68, "multi_match");
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder71);
    }

    @Test
    public void test15267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15267");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder10.cutoffFrequency((float) 100L);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder10.fuzzyRewrite("{\n  \"multiMatch\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzyRewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder16.useDisMax(false);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery19 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder18.zeroTermsQuery(zeroTermsQuery19);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder21 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params22 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        // The following exception was thrown during execution in test generation
        try {
            multiMatchQueryBuilder20.doXContent(xContentBuilder21, params22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNotNull(params22);
    }

    @Test
    public void test15268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15268");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.tieBreaker(0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder10.cutoffFrequency((float) 0L);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder14.analyzer("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder16.field("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"slop\" : -1,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery19 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder18.zeroTermsQuery(zeroTermsQuery19);
        java.lang.String str21 = null; // flaky: multiMatchQueryBuilder18.toString();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder18.slop((int) (byte) 1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder18.tieBreaker((float) (short) 1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder18.lenient(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = multiMatchQueryBuilder27.prefixLength(0);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
// flaky:         org.junit.Assert.assertEquals("'" + str21 + "' != '" + "{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\", \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"slop\\\" : -1,\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"lenient\\\" : true,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\" ],\n    \"analyzer\" : \"\",\n    \"fuzzy_rewrite\" : \"\",\n    \"tie_breaker\" : 0.0,\n    \"cutoff_frequency\" : 0.0,\n    \"boost\" : 1.0\n  }\n}" + "'", str21, "{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\", \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"slop\\\" : -1,\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"lenient\\\" : true,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\" ],\n    \"analyzer\" : \"\",\n    \"fuzzy_rewrite\" : \"\",\n    \"tie_breaker\" : 0.0,\n    \"cutoff_frequency\" : 0.0,\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder29);
    }

    @Test
    public void test15269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15269");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder8.queryName("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.Operator operator13 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder12.operator(operator13);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery15 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder12.zeroTermsQuery(zeroTermsQuery15);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder16.cutoffFrequency((float) (byte) -1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder18.lenient(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder18.useDisMax(true);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery23 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder18.zeroTermsQuery(zeroTermsQuery23);
        java.lang.Object obj25 = null;
        java.lang.String[] strArray33 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder34 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray33);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder36 = multiMatchQueryBuilder34.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder38 = multiMatchQueryBuilder36.fuzzyRewrite("hi!");
        java.lang.String str39 = multiMatchQueryBuilder36.getName();
        float float40 = multiMatchQueryBuilder36.boost();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder42 = multiMatchQueryBuilder36.lenient(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder44 = multiMatchQueryBuilder36.queryName("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder46 = multiMatchQueryBuilder36.cutoffFrequency((float) (-1L));
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder48 = multiMatchQueryBuilder36.useDisMax(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder50 = multiMatchQueryBuilder36.cutoffFrequency((float) (short) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder52 = multiMatchQueryBuilder36.cutoffFrequency((float) (byte) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder54 = multiMatchQueryBuilder36.slop((int) (byte) 10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type55 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX;
        float float56 = type55.tieBreaker();
        float float57 = type55.tieBreaker();
        org.elasticsearch.index.search.MatchQuery.Type type58 = type55.matchQueryType();
        java.lang.String[] strArray66 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder67 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray66);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder69 = multiMatchQueryBuilder67.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder71 = multiMatchQueryBuilder67.queryName("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.Operator operator72 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder73 = multiMatchQueryBuilder71.operator(operator72);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder75 = multiMatchQueryBuilder73.lenient(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder77 = multiMatchQueryBuilder75.maxExpansions((int) (short) 1);
        java.lang.String[] strArray85 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder86 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray85);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder87 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) multiMatchQueryBuilder75, strArray85);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder88 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) type55, strArray85);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder89 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (byte) 10, strArray85);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder90 = new org.elasticsearch.index.query.MultiMatchQueryBuilder(obj25, strArray85);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder92 = multiMatchQueryBuilder90.analyzer("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\", \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"analyzer\\\" : \\\"multi_match\\\",\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}^10.0\", \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\" ],\n    \"fuzzy_rewrite\" : \"\",\n    \"boost\" : 1.0,\n    \"_name\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\"\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder93 = null; // flaky: multiMatchQueryBuilder24.fuzziness((java.lang.Object) multiMatchQueryBuilder92);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder36);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "multi_match" + "'", str39, "multi_match");
        org.junit.Assert.assertTrue("'" + float40 + "' != '" + 1.0f + "'", float40 == 1.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder42);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder44);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder46);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder48);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder50);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder52);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder54);
        org.junit.Assert.assertTrue("'" + type55 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX + "'", type55.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX));
        org.junit.Assert.assertTrue("'" + float56 + "' != '" + 0.0f + "'", float56 == 0.0f);
        org.junit.Assert.assertTrue("'" + float57 + "' != '" + 0.0f + "'", float57 == 0.0f);
        org.junit.Assert.assertTrue("'" + type58 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX + "'", type58.equals(org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX));
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder69);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder71);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder73);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder75);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder77);
        org.junit.Assert.assertNotNull(strArray85);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder92);
// flaky:         org.junit.Assert.assertNotNull(multiMatchQueryBuilder93);
    }

    @Test
    public void test15270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15270");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery13 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder12.zeroTermsQuery(zeroTermsQuery13);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder14.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder16.queryName("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder18.analyzer("multi_match");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder18.field("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"slop\" : -1,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}", 0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder18.queryName("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String str26 = null; // flaky: multiMatchQueryBuilder18.toString();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = multiMatchQueryBuilder18.fuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"slop\\\" : -1,\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"lenient\\\" : true,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"boost\" : 1.0,\n    \"_name\" : \"hi!\"\n  }\n}");
        org.elasticsearch.index.query.QueryShardContext queryShardContext29 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.lucene.search.Query query30 = multiMatchQueryBuilder18.toFilter(queryShardContext29);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
// flaky:         org.junit.Assert.assertEquals("'" + str26 + "' != '" + "{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\", \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"slop\\\" : -1,\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"lenient\\\" : true,\\n    \\\"boost\\\" : 1.0\\n  }\\n}^0.0\" ],\n    \"analyzer\" : \"multi_match\",\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0,\n    \"_name\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\"\n  }\n}" + "'", str26, "{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\", \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"slop\\\" : -1,\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"lenient\\\" : true,\\n    \\\"boost\\\" : 1.0\\n  }\\n}^0.0\" ],\n    \"analyzer\" : \"multi_match\",\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0,\n    \"_name\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\"\n  }\n}");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder28);
    }

    @Test
    public void test15271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15271");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.tieBreaker(0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder10.cutoffFrequency((float) 0L);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder14.analyzer("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder16.field("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"slop\" : -1,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder18.queryName("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"slop\" : -1,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder18.field("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"analyzer\" : \"multi_match\",\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String[] strArray30 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray30);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder33 = multiMatchQueryBuilder31.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder35 = multiMatchQueryBuilder33.tieBreaker(0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type36 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX;
        float float37 = type36.tieBreaker();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder38 = multiMatchQueryBuilder33.type(type36);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder40 = multiMatchQueryBuilder33.cutoffFrequency((float) 0L);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder42 = multiMatchQueryBuilder33.lenient(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type43 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        org.elasticsearch.index.search.MatchQuery.Type type44 = type43.matchQueryType();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder45 = multiMatchQueryBuilder33.type(type43);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder46 = multiMatchQueryBuilder22.type(type43);
        float float47 = type43.tieBreaker();
        org.elasticsearch.index.search.MatchQuery.Type type48 = type43.matchQueryType();
        org.elasticsearch.index.search.MatchQuery.Type type49 = type43.matchQueryType();
        org.elasticsearch.common.ParseField parseField50 = type43.parseField();
        org.elasticsearch.index.search.MatchQuery.Type type51 = type43.matchQueryType();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder33);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder35);
        org.junit.Assert.assertTrue("'" + type36 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX + "'", type36.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX));
        org.junit.Assert.assertTrue("'" + float37 + "' != '" + 0.0f + "'", float37 == 0.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder38);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder40);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder42);
        org.junit.Assert.assertTrue("'" + type43 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type43.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertTrue("'" + type44 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type44.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder45);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder46);
        org.junit.Assert.assertTrue("'" + float47 + "' != '" + 0.0f + "'", float47 == 0.0f);
        org.junit.Assert.assertTrue("'" + type48 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type48.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertTrue("'" + type49 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type49.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertNotNull(parseField50);
        org.junit.Assert.assertTrue("'" + type51 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type51.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
    }

    @Test
    public void test15272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15272");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery13 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder12.zeroTermsQuery(zeroTermsQuery13);
        java.lang.String str15 = null; // flaky: multiMatchQueryBuilder12.toString();
        java.lang.String str16 = multiMatchQueryBuilder12.queryName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder12.prefixLength((int) (byte) -1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder12.queryName("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"type\" : \"phrase_prefix\",\n    \"fuzzy_rewrite\" : \"\",\n    \"use_dis_max\" : false,\n    \"tie_breaker\" : 0.0,\n    \"cutoff_frequency\" : 0.0,\n    \"boost\" : 1.0,\n    \"_name\" : \"multi_match\"\n  }\n}");
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}" + "'", str15, "{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
    }

    @Test
    public void test15273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15273");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.tieBreaker(0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type13 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX;
        float float14 = type13.tieBreaker();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder10.type(type13);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder10.lenient(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder10.fuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"minimum_should_match\" : \"\",\n    \"rewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"slop\\\" : -1,\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"lenient\\\" : true,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 52.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder19.cutoffFrequency((float) (-1));
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder21.field("{\n  \"multiMatch\" : {\n    \"query\" : 0,\n    \"fields\" : [ \"{\\n  \\\"multiMatch\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"fuzzyRewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\", \"{\\n  \\\"multiMatch\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"fuzziness\\\" : \\\"PHRASE_PREFIX\\\",\\n    \\\"fuzzyRewrite\\\" : \\\"\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\" ],\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder21.cutoffFrequency((float) (-1L));
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder25.cutoffFrequency((float) (short) -1);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertTrue("'" + type13 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX + "'", type13.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX));
        org.junit.Assert.assertTrue("'" + float14 + "' != '" + 0.0f + "'", float14 == 0.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
    }

    @Test
    public void test15274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15274");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery13 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder12.zeroTermsQuery(zeroTermsQuery13);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder14.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder16.queryName("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder18.useDisMax(false);
        org.elasticsearch.index.query.QueryValidationException queryValidationException21 = multiMatchQueryBuilder18.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder18.boost((float) 0L);
        java.lang.String str24 = null; // flaky: multiMatchQueryBuilder23.toString();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder23.boost((float) 'a');
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = multiMatchQueryBuilder26.useDisMax(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder30 = multiMatchQueryBuilder26.lenient(false);
        org.elasticsearch.common.io.stream.StreamInput streamInput31 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder32 = multiMatchQueryBuilder30.readFrom(streamInput31);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNull(queryValidationException21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
// flaky:         org.junit.Assert.assertEquals("'" + str24 + "' != '" + "{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"use_dis_max\" : false,\n    \"boost\" : 0.0,\n    \"_name\" : \"hi!\"\n  }\n}" + "'", str24, "{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"use_dis_max\" : false,\n    \"boost\" : 0.0,\n    \"_name\" : \"hi!\"\n  }\n}");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder28);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder30);
    }

    @Test
    public void test15275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15275");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.fuzzyRewrite("hi!");
        java.lang.String str13 = multiMatchQueryBuilder10.getName();
        float float14 = multiMatchQueryBuilder10.boost();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder10.lenient(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder10.slop((int) (short) -1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type19 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX;
        org.elasticsearch.index.search.MatchQuery.Type type20 = type19.matchQueryType();
        org.elasticsearch.index.search.MatchQuery.Type type21 = type19.matchQueryType();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder10.type(type19);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder10.queryName("multi_match");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder24.minimumShouldMatch("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = multiMatchQueryBuilder24.lenient(true);
        java.lang.String[] strArray36 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder37 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray36);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder39 = multiMatchQueryBuilder37.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder41 = multiMatchQueryBuilder39.fuzzyRewrite("hi!");
        java.lang.String str42 = multiMatchQueryBuilder39.getName();
        float float43 = multiMatchQueryBuilder39.boost();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder45 = multiMatchQueryBuilder39.lenient(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder47 = multiMatchQueryBuilder39.queryName("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder49 = multiMatchQueryBuilder39.cutoffFrequency((float) (-1L));
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder50 = multiMatchQueryBuilder24.fuzziness((java.lang.Object) (-1L));
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder52 = multiMatchQueryBuilder50.field("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\", \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"analyzer\\\" : \\\"multi_match\\\",\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}^10.0\", \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\" ],\n    \"max_expansions\" : 10,\n    \"fuzzy_rewrite\" : \"\",\n    \"boost\" : 1.0,\n    \"_name\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\"\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder54 = multiMatchQueryBuilder50.boost((float) (-1));
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder56 = multiMatchQueryBuilder50.prefixLength((int) (byte) 0);
        org.elasticsearch.index.query.Operator operator57 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder58 = multiMatchQueryBuilder56.operator(operator57);
        org.elasticsearch.common.io.stream.StreamInput streamInput59 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder60 = multiMatchQueryBuilder56.readFrom(streamInput59);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "multi_match" + "'", str13, "multi_match");
        org.junit.Assert.assertTrue("'" + float14 + "' != '" + 1.0f + "'", float14 == 1.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertTrue("'" + type19 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX + "'", type19.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX));
        org.junit.Assert.assertTrue("'" + type20 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX + "'", type20.equals(org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX));
        org.junit.Assert.assertTrue("'" + type21 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX + "'", type21.equals(org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder28);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder39);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "multi_match" + "'", str42, "multi_match");
        org.junit.Assert.assertTrue("'" + float43 + "' != '" + 1.0f + "'", float43 == 1.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder45);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder47);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder49);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder50);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder52);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder54);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder56);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder58);
    }

    @Test
    public void test15276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15276");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder12.tieBreaker((float) '#');
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder12.maxExpansions(10);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery17 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder16.zeroTermsQuery(zeroTermsQuery17);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder18.fuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : null,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder20.queryName("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\", \"hi!\" ],\n    \"analyzer\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"multi_match^0.0\\\" ],\\n    \\\"type\\\" : \\\"phrase_prefix\\\",\\n    \\\"prefix_length\\\" : 97,\\n    \\\"fuzzy_rewrite\\\" : \\\"\\\",\\n    \\\"tie_breaker\\\" : 0.0,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"max_expansions\" : 10,\n    \"fuzzy_rewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"analyzer\\\" : \\\"multi_match\\\",\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"lenient\" : true,\n    \"boost\" : 1.0,\n    \"_name\" : \"multi_match\"\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder22.analyzer("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"slop\" : -1,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 10.0,\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
    }

    @Test
    public void test15277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15277");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder12.lenient(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder12.prefixLength((int) (byte) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder12.rewrite("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"multi_match^0.0\" ],\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 0.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder18.queryName("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"minimum_should_match\" : \"\",\n    \"rewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"slop\\\" : -1,\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"lenient\\\" : true,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 52.0,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String[] strArray28 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray28);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = multiMatchQueryBuilder29.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder33 = multiMatchQueryBuilder29.queryName("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.Operator operator34 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder35 = multiMatchQueryBuilder33.operator(operator34);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder37 = multiMatchQueryBuilder35.lenient(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder39 = multiMatchQueryBuilder37.maxExpansions((int) (short) 1);
        java.lang.String str40 = multiMatchQueryBuilder37.getWriteableName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder42 = multiMatchQueryBuilder37.prefixLength(0);
        java.lang.String str43 = multiMatchQueryBuilder42.getWriteableName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder45 = multiMatchQueryBuilder42.prefixLength((int) (short) 10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder47 = multiMatchQueryBuilder42.useDisMax(false);
        java.lang.String[] strArray55 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder56 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray55);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder58 = multiMatchQueryBuilder56.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder60 = multiMatchQueryBuilder56.queryName("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.Operator operator61 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder62 = multiMatchQueryBuilder60.operator(operator61);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder64 = multiMatchQueryBuilder62.lenient(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder66 = multiMatchQueryBuilder64.maxExpansions((int) (short) 1);
        java.lang.String[] strArray74 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder75 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray74);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder76 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) multiMatchQueryBuilder64, strArray74);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder78 = multiMatchQueryBuilder64.queryName("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder80 = multiMatchQueryBuilder64.useDisMax(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder82 = multiMatchQueryBuilder80.rewrite("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"slop\" : -1,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.QueryValidationException queryValidationException83 = multiMatchQueryBuilder80.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type84 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS;
        float float85 = type84.tieBreaker();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder86 = multiMatchQueryBuilder80.type(type84);
        float float87 = type84.tieBreaker();
        float float88 = type84.tieBreaker();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder89 = multiMatchQueryBuilder42.type(type84);
        org.elasticsearch.index.search.MatchQuery.Type type90 = type84.matchQueryType();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder91 = multiMatchQueryBuilder20.type(type84);
        org.elasticsearch.common.ParseField parseField92 = type84.parseField();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder31);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder33);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder35);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder37);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "multi_match" + "'", str40, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "multi_match" + "'", str43, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder45);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder47);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder58);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder60);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder62);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder64);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder66);
        org.junit.Assert.assertNotNull(strArray74);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder78);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder80);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder82);
        org.junit.Assert.assertNull(queryValidationException83);
        org.junit.Assert.assertTrue("'" + type84 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS + "'", type84.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS));
        org.junit.Assert.assertTrue("'" + float85 + "' != '" + 0.0f + "'", float85 == 0.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder86);
        org.junit.Assert.assertTrue("'" + float87 + "' != '" + 0.0f + "'", float87 == 0.0f);
        org.junit.Assert.assertTrue("'" + float88 + "' != '" + 0.0f + "'", float88 == 0.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder89);
        org.junit.Assert.assertTrue("'" + type90 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type90.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder91);
        org.junit.Assert.assertNotNull(parseField92);
    }

    @Test
    public void test15278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15278");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.tieBreaker(0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type13 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX;
        float float14 = type13.tieBreaker();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder10.type(type13);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder10.cutoffFrequency((float) 0L);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder10.maxExpansions(10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder10.analyzer("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"slop\" : -1,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.common.xcontent.XContentBuilder.FieldCaseConversion fieldCaseConversion22 = org.elasticsearch.common.xcontent.XContentBuilder.FieldCaseConversion.UNDERSCORE;
        boolean boolean23 = multiMatchQueryBuilder10.equals((java.lang.Object) fieldCaseConversion22);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery24 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder10.zeroTermsQuery(zeroTermsQuery24);
        java.lang.String str26 = multiMatchQueryBuilder25.getName();
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder27 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params28 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        // The following exception was thrown during execution in test generation
        try {
            multiMatchQueryBuilder25.doXContent(xContentBuilder27, params28);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertTrue("'" + type13 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX + "'", type13.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX));
        org.junit.Assert.assertTrue("'" + float14 + "' != '" + 0.0f + "'", float14 == 0.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertTrue("'" + fieldCaseConversion22 + "' != '" + org.elasticsearch.common.xcontent.XContentBuilder.FieldCaseConversion.UNDERSCORE + "'", fieldCaseConversion22.equals(org.elasticsearch.common.xcontent.XContentBuilder.FieldCaseConversion.UNDERSCORE));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "multi_match" + "'", str26, "multi_match");
        org.junit.Assert.assertNotNull(params28);
    }

    @Test
    public void test15279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15279");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder8.queryName("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.Operator operator13 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder12.operator(operator13);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder12.field("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"analyzer\" : \"multi_match\",\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}", 10.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder17.field("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery20 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder17.zeroTermsQuery(zeroTermsQuery20);
        org.elasticsearch.index.query.Operator operator22 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder21.operator(operator22);
        java.lang.String[] strArray31 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder32 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray31);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder34 = multiMatchQueryBuilder32.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder36 = multiMatchQueryBuilder34.fuzzyRewrite("hi!");
        java.lang.String str37 = multiMatchQueryBuilder34.getName();
        float float38 = multiMatchQueryBuilder34.boost();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder40 = multiMatchQueryBuilder34.lenient(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder42 = multiMatchQueryBuilder34.queryName("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder44 = multiMatchQueryBuilder34.cutoffFrequency((float) (-1L));
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder46 = multiMatchQueryBuilder34.useDisMax(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder47 = multiMatchQueryBuilder23.fuzziness((java.lang.Object) true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder49 = multiMatchQueryBuilder23.queryName("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"prefix_length\" : -1,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.Operator operator50 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder51 = multiMatchQueryBuilder23.operator(operator50);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder53 = multiMatchQueryBuilder51.tieBreaker((float) (-1));
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder55 = multiMatchQueryBuilder53.boost((float) ' ');
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder34);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "multi_match" + "'", str37, "multi_match");
        org.junit.Assert.assertTrue("'" + float38 + "' != '" + 1.0f + "'", float38 == 1.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder40);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder42);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder44);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder46);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder47);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder49);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder51);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder53);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder55);
    }

    @Test
    public void test15280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15280");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.fuzzyRewrite("hi!");
        java.lang.String str13 = multiMatchQueryBuilder10.getName();
        float float14 = multiMatchQueryBuilder10.boost();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder10.lenient(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder10.slop((int) (short) -1);
        org.elasticsearch.index.query.Operator operator19 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder18.operator(operator19);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery21 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder20.zeroTermsQuery(zeroTermsQuery21);
        org.elasticsearch.index.query.Operator operator23 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder22.operator(operator23);
        org.elasticsearch.index.query.Operator operator25 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder24.operator(operator25);
        org.elasticsearch.common.io.stream.StreamOutput streamOutput27 = null;
        // The following exception was thrown during execution in test generation
        try {
            multiMatchQueryBuilder26.writeTo(streamOutput27);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "multi_match" + "'", str13, "multi_match");
        org.junit.Assert.assertTrue("'" + float14 + "' != '" + 1.0f + "'", float14 == 1.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
    }

    @Test
    public void test15281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15281");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder12.lenient(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder12.prefixLength((int) (byte) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder12.rewrite("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"multi_match^0.0\" ],\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 0.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder12.prefixLength((int) (byte) -1);
        java.lang.String str21 = null; // flaky: multiMatchQueryBuilder20.toString();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder20.tieBreaker((float) ' ');
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder20.prefixLength((-1));
        java.lang.String str26 = multiMatchQueryBuilder25.queryName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = multiMatchQueryBuilder25.boost((-1.0f));
        float float29 = multiMatchQueryBuilder25.boost();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
// flaky:         org.junit.Assert.assertEquals("'" + str21 + "' != '" + "{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"prefix_length\" : -1,\n    \"rewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"multi_match^0.0\\\" ],\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"lenient\\\" : true,\\n    \\\"boost\\\" : 0.0\\n  }\\n}\",\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"lenient\" : false,\n    \"boost\" : 1.0\n  }\n}" + "'", str21, "{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"prefix_length\" : -1,\n    \"rewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"multi_match^0.0\\\" ],\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"lenient\\\" : true,\\n    \\\"boost\\\" : 0.0\\n  }\\n}\",\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"lenient\" : false,\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder28);
        org.junit.Assert.assertTrue("'" + float29 + "' != '" + (-1.0f) + "'", float29 == (-1.0f));
    }

    @Test
    public void test15282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15282");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery13 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder12.zeroTermsQuery(zeroTermsQuery13);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder14.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery17 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder14.zeroTermsQuery(zeroTermsQuery17);
        java.lang.String str19 = multiMatchQueryBuilder18.queryName();
        java.lang.String str20 = multiMatchQueryBuilder18.queryName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder18.analyzer("{\n  \"multiMatch\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzyRewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder22.useDisMax(false);
        float float25 = multiMatchQueryBuilder24.boost();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder24.minimumShouldMatch("{\n  \"multiMatch\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzyRewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"slop\\\" : -1,\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"lenient\\\" : true,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"boost\" : 1.0,\n    \"Name\" : \"hi!\"\n  }\n}");
        org.elasticsearch.index.query.Operator operator28 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = multiMatchQueryBuilder24.operator(operator28);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertTrue("'" + float25 + "' != '" + 1.0f + "'", float25 == 1.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder29);
    }

    @Test
    public void test15283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15283");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        java.lang.String[] strArray18 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray18);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder19.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder21.tieBreaker(0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type24 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX;
        float float25 = type24.tieBreaker();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder21.type(type24);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = multiMatchQueryBuilder21.cutoffFrequency((float) 0L);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder30 = multiMatchQueryBuilder21.lenient(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type31 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        org.elasticsearch.index.search.MatchQuery.Type type32 = type31.matchQueryType();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder33 = multiMatchQueryBuilder21.type(type31);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder34 = multiMatchQueryBuilder8.fuzziness((java.lang.Object) type31);
        org.elasticsearch.index.query.Operator operator35 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder36 = multiMatchQueryBuilder34.operator(operator35);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder38 = multiMatchQueryBuilder36.slop((int) (byte) -1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder40 = multiMatchQueryBuilder38.analyzer("{\n  \"multiMatch\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"type\" : \"phrase_prefix\",\n    \"maxExpansions\" : 10,\n    \"fuzzyRewrite\" : \"\",\n    \"tieBreaker\" : 0.0,\n    \"cutoffFrequency\" : 0.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder43 = multiMatchQueryBuilder40.field("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"analyzer\" : \"multi_match\",\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}", (float) 10);
        java.lang.String[] strArray51 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder52 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray51);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder54 = multiMatchQueryBuilder52.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder56 = multiMatchQueryBuilder54.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery57 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder58 = multiMatchQueryBuilder56.zeroTermsQuery(zeroTermsQuery57);
        java.lang.String str59 = null; // flaky: multiMatchQueryBuilder56.toString();
        java.lang.String str60 = multiMatchQueryBuilder56.queryName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder62 = multiMatchQueryBuilder56.queryName("");
        java.lang.String str63 = multiMatchQueryBuilder56.getName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder66 = multiMatchQueryBuilder56.field("", (float) ' ');
        boolean boolean67 = multiMatchQueryBuilder40.equals((java.lang.Object) multiMatchQueryBuilder56);
        java.lang.String[] strArray75 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder76 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray75);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder78 = multiMatchQueryBuilder76.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder80 = multiMatchQueryBuilder78.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder82 = multiMatchQueryBuilder80.lenient(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder84 = multiMatchQueryBuilder82.maxExpansions(0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder87 = multiMatchQueryBuilder82.field("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}", (float) (short) 1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type88 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS;
        org.elasticsearch.index.search.MatchQuery.Type type89 = type88.matchQueryType();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder90 = multiMatchQueryBuilder87.type(type88);
        org.elasticsearch.index.search.MatchQuery.Type type91 = type88.matchQueryType();
        float float92 = type88.tieBreaker();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder93 = multiMatchQueryBuilder56.type(type88);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder95 = multiMatchQueryBuilder56.minimumShouldMatch("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\", \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"slop\\\" : -1,\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"lenient\\\" : true,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\" ],\n    \"analyzer\" : \"\",\n    \"max_expansions\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertTrue("'" + type24 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX + "'", type24.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX));
        org.junit.Assert.assertTrue("'" + float25 + "' != '" + 0.0f + "'", float25 == 0.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder28);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder30);
        org.junit.Assert.assertTrue("'" + type31 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type31.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertTrue("'" + type32 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type32.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder33);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder34);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder36);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder38);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder40);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder43);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder54);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder56);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder58);
// flaky:         org.junit.Assert.assertEquals("'" + str59 + "' != '" + "{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}" + "'", str59, "{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNull(str60);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "multi_match" + "'", str63, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(strArray75);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder78);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder80);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder82);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder84);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder87);
        org.junit.Assert.assertTrue("'" + type88 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS + "'", type88.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS));
        org.junit.Assert.assertTrue("'" + type89 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type89.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder90);
        org.junit.Assert.assertTrue("'" + type91 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type91.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertTrue("'" + float92 + "' != '" + 0.0f + "'", float92 == 0.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder93);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder95);
    }

    @Test
    public void test15284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15284");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery13 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder12.zeroTermsQuery(zeroTermsQuery13);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder14.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery17 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder14.zeroTermsQuery(zeroTermsQuery17);
        java.lang.String[] strArray26 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray26);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = multiMatchQueryBuilder27.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = multiMatchQueryBuilder29.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery32 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder33 = multiMatchQueryBuilder31.zeroTermsQuery(zeroTermsQuery32);
        java.lang.String str34 = multiMatchQueryBuilder33.getName();
        boolean boolean35 = multiMatchQueryBuilder18.equals((java.lang.Object) multiMatchQueryBuilder33);
        java.lang.String str36 = multiMatchQueryBuilder33.getWriteableName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder38 = multiMatchQueryBuilder33.analyzer("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder40 = multiMatchQueryBuilder33.field("");
        java.lang.String str41 = multiMatchQueryBuilder33.queryName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder43 = multiMatchQueryBuilder33.maxExpansions((int) ' ');
        java.lang.String str44 = multiMatchQueryBuilder33.getWriteableName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder46 = multiMatchQueryBuilder33.analyzer("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"prefix_length\" : 0,\n    \"rewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"slop\\\" : -1,\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"lenient\\\" : true,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 0.0,\n    \"cutoff_frequency\" : 10.0,\n    \"boost\" : 1.0,\n    \"_name\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"type\\\" : \\\"phrase_prefix\\\",\\n    \\\"max_expansions\\\" : 10,\\n    \\\"fuzzy_rewrite\\\" : \\\"\\\",\\n    \\\"tie_breaker\\\" : 0.0,\\n    \\\"cutoff_frequency\\\" : 0.0,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\"\n  }\n}");
        org.elasticsearch.common.io.stream.StreamOutput streamOutput47 = null;
        // The following exception was thrown during execution in test generation
        try {
            multiMatchQueryBuilder33.writeTo(streamOutput47);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder29);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder31);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "multi_match" + "'", str34, "multi_match");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "multi_match" + "'", str36, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder38);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder40);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "multi_match" + "'", str44, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder46);
    }

    @Test
    public void test15285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15285");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder12.analyzer("{\n  \"multiMatch\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"rewrite\" : \"multi_match\",\n    \"fuzzyRewrite\" : \"hi!\",\n    \"lenient\" : false,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String str15 = null; // flaky: multiMatchQueryBuilder12.toString();
        java.lang.String str16 = multiMatchQueryBuilder12.queryName();
        java.lang.String[] strArray24 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray24);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder25.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = multiMatchQueryBuilder25.queryName("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.Operator operator30 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = multiMatchQueryBuilder29.operator(operator30);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder33 = multiMatchQueryBuilder31.lenient(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder35 = multiMatchQueryBuilder33.field("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder37 = multiMatchQueryBuilder35.lenient(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type38 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        org.elasticsearch.index.search.MatchQuery.Type type39 = type38.matchQueryType();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder40 = multiMatchQueryBuilder37.type(type38);
        org.elasticsearch.index.search.MatchQuery.Type type41 = type38.matchQueryType();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder42 = multiMatchQueryBuilder12.type((java.lang.Object) type41);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder44 = multiMatchQueryBuilder12.analyzer("{\n  \"multiMatch\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"analyzer\" : \"multi_match\",\n    \"fuzzyRewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder46 = multiMatchQueryBuilder12.analyzer("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"type\" : \"best_fields\",\n    \"analyzer\" : \"\",\n    \"minimum_should_match\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"fuzzy_rewrite\" : \"\",\n    \"tie_breaker\" : 0.0,\n    \"cutoff_frequency\" : 0.0,\n    \"boost\" : 35.0\n  }\n}");
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"analyzer\" : \"{\\n  \\\"multiMatch\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"rewrite\\\" : \\\"multi_match\\\",\\n    \\\"fuzzyRewrite\\\" : \\\"hi!\\\",\\n    \\\"lenient\\\" : false,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}" + "'", str15, "{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"analyzer\" : \"{\\n  \\\"multiMatch\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"rewrite\\\" : \\\"multi_match\\\",\\n    \\\"fuzzyRewrite\\\" : \\\"hi!\\\",\\n    \\\"lenient\\\" : false,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder29);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder31);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder33);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder35);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder37);
        org.junit.Assert.assertTrue("'" + type38 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type38.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertTrue("'" + type39 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type39.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder40);
        org.junit.Assert.assertTrue("'" + type41 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type41.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder42);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder44);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder46);
    }

    @Test
    public void test15286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15286");
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type2 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.parse("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"max_expansions\" : 0,\n    \"minimum_should_match\" : \"\",\n    \"fuzzy_rewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"slop\\\" : -1,\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"lenient\\\" : true,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"boost\" : 1.0,\n    \"_name\" : \"hi!\"\n  }\n}", parseFieldMatcher1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test15287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15287");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.fuzzyRewrite("hi!");
        java.lang.String str13 = multiMatchQueryBuilder10.getName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder10.analyzer("multi_match");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder15.field("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\", \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"analyzer\\\" : \\\"multi_match\\\",\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}^10.0\", \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\" ],\n    \"fuzzy_rewrite\" : \"\",\n    \"boost\" : 1.0,\n    \"_name\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\"\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder15.lenient(false);
        java.lang.String[] strArray27 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray27);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder30 = multiMatchQueryBuilder28.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder32 = multiMatchQueryBuilder30.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery33 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder34 = multiMatchQueryBuilder32.zeroTermsQuery(zeroTermsQuery33);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder36 = multiMatchQueryBuilder32.maxExpansions((int) (byte) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder38 = multiMatchQueryBuilder32.field("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"slop\" : -1,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder40 = multiMatchQueryBuilder38.analyzer("");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder49 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray48);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder51 = multiMatchQueryBuilder49.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder53 = multiMatchQueryBuilder51.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder55 = multiMatchQueryBuilder53.tieBreaker((float) '#');
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder57 = multiMatchQueryBuilder55.boost((float) 10L);
        java.lang.String[] strArray65 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder66 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray65);
        java.lang.Object obj67 = null;
        java.lang.String[] strArray76 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder77 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray76);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder78 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 10.0f, strArray76);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder79 = new org.elasticsearch.index.query.MultiMatchQueryBuilder(obj67, strArray76);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder80 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray76);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder81 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) multiMatchQueryBuilder55, strArray76);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder82 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) multiMatchQueryBuilder38, strArray76);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder83 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) false, strArray76);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder85 = multiMatchQueryBuilder83.analyzer("{\n  \"multiMatch\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\", \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}^1.0\" ],\n    \"type\" : \"cross_fields\",\n    \"maxExpansions\" : 0,\n    \"rewrite\" : \"{\\n  \\\"multiMatch\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"analyzer\\\" : \\\"multi_match\\\",\\n    \\\"fuzzyRewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0,\\n    \\\"Name\\\" : \\\"hi!\\\"\\n  }\\n}\",\n    \"fuzzyRewrite\" : \"hi!\",\n    \"lenient\" : false,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder87 = multiMatchQueryBuilder83.maxExpansions((int) '#');
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "multi_match" + "'", str13, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder30);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder32);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder34);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder36);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder38);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder40);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder51);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder53);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder55);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder57);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertNotNull(strArray76);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder85);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder87);
    }

    @Test
    public void test15288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15288");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery13 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder12.zeroTermsQuery(zeroTermsQuery13);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder14.fuzzyRewrite("hi!");
        java.lang.String str17 = null; // flaky: multiMatchQueryBuilder16.toString();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder16.analyzer("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"rewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"slop\\\" : -1,\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"lenient\\\" : true,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 52.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder16.rewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder16.cutoffFrequency((float) 'a');
        java.lang.String[] strArray31 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder32 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray31);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder34 = multiMatchQueryBuilder32.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder36 = multiMatchQueryBuilder34.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder38 = multiMatchQueryBuilder36.lenient(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder40 = multiMatchQueryBuilder38.rewrite("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery41 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder42 = multiMatchQueryBuilder40.zeroTermsQuery(zeroTermsQuery41);
        java.lang.Object obj43 = null;
        boolean boolean44 = multiMatchQueryBuilder42.equals(obj43);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder46 = multiMatchQueryBuilder42.lenient(false);
        java.lang.String[] strArray55 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder56 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray55);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder58 = multiMatchQueryBuilder56.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder60 = multiMatchQueryBuilder56.queryName("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.Operator operator61 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder62 = multiMatchQueryBuilder60.operator(operator61);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder64 = multiMatchQueryBuilder62.lenient(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder66 = multiMatchQueryBuilder64.maxExpansions((int) (short) 1);
        java.lang.String[] strArray74 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder75 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray74);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder76 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) multiMatchQueryBuilder64, strArray74);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder77 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (byte) 1, strArray74);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder78 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) multiMatchQueryBuilder46, strArray74);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder79 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) multiMatchQueryBuilder16, strArray74);
        org.elasticsearch.index.query.QueryValidationException queryValidationException80 = multiMatchQueryBuilder16.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder82 = multiMatchQueryBuilder16.prefixLength((int) (byte) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder84 = multiMatchQueryBuilder16.prefixLength((int) (byte) -1);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}" + "'", str17, "{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder34);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder36);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder38);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder40);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder46);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder58);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder60);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder62);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder64);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder66);
        org.junit.Assert.assertNotNull(strArray74);
        org.junit.Assert.assertNull(queryValidationException80);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder82);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder84);
    }

    @Test
    public void test15289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15289");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder8.queryName("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.Operator operator13 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder12.operator(operator13);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder12.field("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"analyzer\" : \"multi_match\",\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}", 10.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder17.field("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery20 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder17.zeroTermsQuery(zeroTermsQuery20);
        org.elasticsearch.index.query.QueryValidationException queryValidationException22 = multiMatchQueryBuilder21.validate();
        java.lang.String str23 = multiMatchQueryBuilder21.getWriteableName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder21.maxExpansions((int) (byte) 10);
        org.elasticsearch.index.query.QueryShardContext queryShardContext26 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.lucene.search.Query query27 = multiMatchQueryBuilder21.toQuery(queryShardContext26);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNull(queryValidationException22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "multi_match" + "'", str23, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
    }

    @Test
    public void test15290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15290");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder8.queryName("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.Operator operator13 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder12.operator(operator13);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder14.field("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder16.field("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"analyzer\" : \"multi_match\",\n    \"slop\" : -1,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0,\n    \"_name\" : \"hi!\"\n  }\n}", (float) 10L);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder19.analyzer("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder21.useDisMax(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder23.minimumShouldMatch("{\n  \"multiMatch\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\", \"\" ],\n    \"type\" : \"cross_fields\",\n    \"analyzer\" : \"{\\n  \\\"multiMatch\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"fuzzyRewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"prefixLength\" : 10,\n    \"maxExpansions\" : 1,\n    \"rewrite\" : \"multi_match\",\n    \"fuzzyRewrite\" : \"hi!\",\n    \"lenient\" : false,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder23.rewrite("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"analyzer\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"^1.0\\\", \\\"^1.0\\\", \\\"^1.0\\\", \\\"^1.0\\\", \\\"^1.0\\\", \\\"^1.0\\\" ],\\n    \\\"type\\\" : \\\"phrase_prefix\\\",\\n    \\\"prefix_length\\\" : 52,\\n    \\\"fuzzy_rewrite\\\" : \\\"\\\",\\n    \\\"tie_breaker\\\" : 0.0,\\n    \\\"cutoff_frequency\\\" : 0.0,\\n    \\\"boost\\\" : 1.0,\\n    \\\"_name\\\" : \\\"multi_match\\\"\\n  }\\n}\",\n    \"slop\" : -1,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"use_dis_max\" : true,\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
    }

    @Test
    public void test15291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15291");
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type2 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.parse("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"type\" : \"best_fields\",\n    \"slop\" : -1,\n    \"fuzzy_rewrite\" : \"{\\n  \\\"multiMatch\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"fuzzyRewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"lenient\" : true,\n    \"cutoff_frequency\" : 35.0,\n    \"boost\" : 1.0\n  }\n}", parseFieldMatcher1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test15292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15292");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.fuzzyRewrite("hi!");
        java.lang.String str13 = multiMatchQueryBuilder10.getName();
        float float14 = multiMatchQueryBuilder10.boost();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder10.lenient(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder10.queryName("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder10.cutoffFrequency((float) (-1L));
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder10.useDisMax(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder10.cutoffFrequency((float) (short) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder24.maxExpansions((int) (short) 1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = multiMatchQueryBuilder26.maxExpansions((-1));
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder30 = multiMatchQueryBuilder28.queryName("{\n  \"multiMatch\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"prefixLength\" : -1,\n    \"rewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"multi_match^0.0\\\" ],\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"lenient\\\" : true,\\n    \\\"boost\\\" : 0.0\\n  }\\n}\",\n    \"fuzzyRewrite\" : \"hi!\",\n    \"lenient\" : false,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String str31 = multiMatchQueryBuilder30.getWriteableName();
        org.elasticsearch.index.query.Operator operator32 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder33 = multiMatchQueryBuilder30.operator(operator32);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "multi_match" + "'", str13, "multi_match");
        org.junit.Assert.assertTrue("'" + float14 + "' != '" + 1.0f + "'", float14 == 1.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder28);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "multi_match" + "'", str31, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder33);
    }

    @Test
    public void test15293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15293");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery13 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder12.zeroTermsQuery(zeroTermsQuery13);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder12.maxExpansions((int) (byte) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder12.field("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"slop\" : -1,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder18.analyzer("");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery21 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder20.zeroTermsQuery(zeroTermsQuery21);
        java.lang.String[] strArray30 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray30);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder33 = multiMatchQueryBuilder31.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder35 = multiMatchQueryBuilder33.tieBreaker(0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder37 = multiMatchQueryBuilder33.cutoffFrequency((float) 0L);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder39 = multiMatchQueryBuilder37.analyzer("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder41 = multiMatchQueryBuilder39.field("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"slop\" : -1,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String[] strArray49 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder50 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray49);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder52 = multiMatchQueryBuilder50.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder54 = multiMatchQueryBuilder52.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder56 = multiMatchQueryBuilder52.field("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder58 = multiMatchQueryBuilder52.boost(0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder60 = multiMatchQueryBuilder58.analyzer("multi_match");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder62 = multiMatchQueryBuilder60.useDisMax(true);
        java.lang.String str63 = multiMatchQueryBuilder60.getName();
        java.lang.Object obj64 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder65 = multiMatchQueryBuilder60.type(obj64);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder66 = null; // flaky: multiMatchQueryBuilder41.fuzziness((java.lang.Object) multiMatchQueryBuilder65);
        java.lang.String[] strArray69 = new java.lang.String[] { "{\n  \"multiMatch\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"rewrite\" : \"multi_match\",\n    \"fuzzyRewrite\" : \"hi!\",\n    \"lenient\" : false,\n    \"boost\" : 1.0\n  }\n}" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder70 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "hi!", strArray69);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder71 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) multiMatchQueryBuilder65, strArray69);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder72 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) multiMatchQueryBuilder22, strArray69);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder74 = multiMatchQueryBuilder22.slop((int) (byte) -1);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder33);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder35);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder37);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder39);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder41);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder52);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder54);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder56);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder58);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder60);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "multi_match" + "'", str63, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder65);
// flaky:         org.junit.Assert.assertNotNull(multiMatchQueryBuilder66);
        org.junit.Assert.assertNotNull(strArray69);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder74);
    }

    @Test
    public void test15294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15294");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder12.lenient(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder12.prefixLength((int) (byte) 0);
        org.elasticsearch.index.query.Operator operator17 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder12.operator(operator17);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder12.tieBreaker((float) ' ');
        org.elasticsearch.index.query.Operator operator21 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder20.operator(operator21);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
    }

    @Test
    public void test15295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15295");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder12.lenient(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder14.rewrite("multi_match");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder16.tieBreaker((float) (short) 10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder18.slop((int) (byte) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder18.slop(0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder18.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder24.fuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"analyzer\" : \"multi_match\",\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"use_dis_max\" : false,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery27 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = multiMatchQueryBuilder26.zeroTermsQuery(zeroTermsQuery27);
        java.lang.String str29 = multiMatchQueryBuilder28.getWriteableName();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "multi_match" + "'", str29, "multi_match");
    }

    @Test
    public void test15296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15296");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder8.queryName("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.Operator operator13 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder12.operator(operator13);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder14.lenient(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder16.maxExpansions((int) (short) 1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder16.minimumShouldMatch("{\n  \"multiMatch\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"rewrite\" : \"multi_match\",\n    \"fuzzyRewrite\" : \"hi!\",\n    \"lenient\" : false,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String[] strArray28 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray28);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = multiMatchQueryBuilder29.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder33 = multiMatchQueryBuilder31.tieBreaker(0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type34 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX;
        float float35 = type34.tieBreaker();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder36 = multiMatchQueryBuilder31.type(type34);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder38 = multiMatchQueryBuilder31.cutoffFrequency((float) 0L);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder40 = multiMatchQueryBuilder31.lenient(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type41 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        org.elasticsearch.index.search.MatchQuery.Type type42 = type41.matchQueryType();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder43 = multiMatchQueryBuilder31.type(type41);
        float float44 = type41.tieBreaker();
        org.elasticsearch.index.search.MatchQuery.Type type45 = type41.matchQueryType();
        org.elasticsearch.common.ParseField parseField46 = type41.parseField();
        boolean boolean47 = multiMatchQueryBuilder20.equals((java.lang.Object) parseField46);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder49 = multiMatchQueryBuilder20.prefixLength((int) 'a');
        java.lang.String str50 = null; // flaky: multiMatchQueryBuilder20.toString();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder31);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder33);
        org.junit.Assert.assertTrue("'" + type34 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX + "'", type34.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX));
        org.junit.Assert.assertTrue("'" + float35 + "' != '" + 0.0f + "'", float35 == 0.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder36);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder38);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder40);
        org.junit.Assert.assertTrue("'" + type41 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type41.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertTrue("'" + type42 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type42.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder43);
        org.junit.Assert.assertTrue("'" + float44 + "' != '" + 0.0f + "'", float44 == 0.0f);
        org.junit.Assert.assertTrue("'" + type45 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type45.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertNotNull(parseField46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder49);
// flaky:         org.junit.Assert.assertEquals("'" + str50 + "' != '" + "{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"prefix_length\" : 97,\n    \"max_expansions\" : 1,\n    \"minimum_should_match\" : \"{\\n  \\\"multiMatch\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"rewrite\\\" : \\\"multi_match\\\",\\n    \\\"fuzzyRewrite\\\" : \\\"hi!\\\",\\n    \\\"lenient\\\" : false,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"fuzzy_rewrite\" : \"\",\n    \"lenient\" : true,\n    \"boost\" : 1.0,\n    \"_name\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\"\n  }\n}" + "'", str50, "{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"prefix_length\" : 97,\n    \"max_expansions\" : 1,\n    \"minimum_should_match\" : \"{\\n  \\\"multiMatch\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"rewrite\\\" : \\\"multi_match\\\",\\n    \\\"fuzzyRewrite\\\" : \\\"hi!\\\",\\n    \\\"lenient\\\" : false,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"fuzzy_rewrite\" : \"\",\n    \"lenient\" : true,\n    \"boost\" : 1.0,\n    \"_name\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\"\n  }\n}");
    }

    @Test
    public void test15297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15297");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.tieBreaker(0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type13 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX;
        float float14 = type13.tieBreaker();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder10.type(type13);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder10.cutoffFrequency((float) 0L);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder10.lenient(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type20 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        org.elasticsearch.index.search.MatchQuery.Type type21 = type20.matchQueryType();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder10.type(type20);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder10.useDisMax(false);
        java.lang.String str25 = multiMatchQueryBuilder10.getWriteableName();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery26 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder10.zeroTermsQuery(zeroTermsQuery26);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = multiMatchQueryBuilder10.analyzer("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = multiMatchQueryBuilder29.slop((int) '4');
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertTrue("'" + type13 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX + "'", type13.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX));
        org.junit.Assert.assertTrue("'" + float14 + "' != '" + 0.0f + "'", float14 == 0.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertTrue("'" + type20 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type20.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertTrue("'" + type21 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type21.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "multi_match" + "'", str25, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder29);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder31);
    }

    @Test
    public void test15298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15298");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery13 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder12.zeroTermsQuery(zeroTermsQuery13);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder14.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder16.queryName("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder16.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder16.analyzer("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder16.tieBreaker((float) 0);
        org.elasticsearch.index.query.Operator operator25 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder16.operator(operator25);
        java.lang.String[] strArray34 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder35 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray34);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder37 = multiMatchQueryBuilder35.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder39 = multiMatchQueryBuilder37.tieBreaker(0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder41 = multiMatchQueryBuilder37.cutoffFrequency((float) 0L);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder43 = multiMatchQueryBuilder41.analyzer("");
        java.lang.String[] strArray51 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder52 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray51);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder54 = multiMatchQueryBuilder52.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder56 = multiMatchQueryBuilder54.tieBreaker(0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type57 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX;
        float float58 = type57.tieBreaker();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder59 = multiMatchQueryBuilder54.type(type57);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder61 = multiMatchQueryBuilder54.cutoffFrequency((float) 0L);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder63 = multiMatchQueryBuilder54.lenient(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type64 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        org.elasticsearch.index.search.MatchQuery.Type type65 = type64.matchQueryType();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder66 = multiMatchQueryBuilder54.type(type64);
        org.elasticsearch.index.search.MatchQuery.Type type67 = type64.matchQueryType();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder68 = multiMatchQueryBuilder41.type(type64);
        org.elasticsearch.common.ParseField parseField69 = type64.parseField();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder70 = multiMatchQueryBuilder16.type(type64);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder72 = multiMatchQueryBuilder16.queryName("{\n  \"multiMatch\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"analyzer\" : \"{\\n  \\\"multiMatch\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"fuzzyRewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"rewrite\" : \"multi_match\",\n    \"fuzzyRewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder74 = multiMatchQueryBuilder72.slop((int) (short) -1);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder37);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder39);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder41);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder43);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder54);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder56);
        org.junit.Assert.assertTrue("'" + type57 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX + "'", type57.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX));
        org.junit.Assert.assertTrue("'" + float58 + "' != '" + 0.0f + "'", float58 == 0.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder59);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder61);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder63);
        org.junit.Assert.assertTrue("'" + type64 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type64.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertTrue("'" + type65 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type65.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder66);
        org.junit.Assert.assertTrue("'" + type67 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type67.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder68);
        org.junit.Assert.assertNotNull(parseField69);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder70);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder72);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder74);
    }

    @Test
    public void test15299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15299");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder10.field("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder10.boost(0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder16.analyzer("multi_match");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder18.useDisMax(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder20.maxExpansions((int) (byte) 1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder22.field("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"slop\" : -1,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        float float25 = multiMatchQueryBuilder24.boost();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder24.tieBreaker((float) '#');
        java.lang.String str28 = null; // flaky: multiMatchQueryBuilder27.toString();
        java.lang.String[] strArray36 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder37 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray36);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder39 = multiMatchQueryBuilder37.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder41 = multiMatchQueryBuilder39.fuzzyRewrite("hi!");
        java.lang.String str42 = multiMatchQueryBuilder39.getName();
        float float43 = multiMatchQueryBuilder39.boost();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder45 = multiMatchQueryBuilder39.lenient(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder47 = multiMatchQueryBuilder39.slop((int) (short) -1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type48 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX;
        org.elasticsearch.index.search.MatchQuery.Type type49 = type48.matchQueryType();
        org.elasticsearch.index.search.MatchQuery.Type type50 = type48.matchQueryType();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder51 = multiMatchQueryBuilder39.type(type48);
        org.elasticsearch.common.ParseField parseField52 = type48.parseField();
        org.elasticsearch.index.search.MatchQuery.Type type53 = type48.matchQueryType();
        org.elasticsearch.common.ParseField parseField54 = type48.parseField();
        float float55 = type48.tieBreaker();
        org.elasticsearch.common.ParseField parseField56 = type48.parseField();
        org.elasticsearch.common.ParseField parseField57 = type48.parseField();
        org.elasticsearch.index.search.MatchQuery.Type type58 = type48.matchQueryType();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder59 = multiMatchQueryBuilder27.type((java.lang.Object) type48);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery60 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder61 = multiMatchQueryBuilder27.zeroTermsQuery(zeroTermsQuery60);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertTrue("'" + float25 + "' != '" + 0.0f + "'", float25 == 0.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
// flaky:         org.junit.Assert.assertEquals("'" + str28 + "' != '" + "{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\", \"\", \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"slop\\\" : -1,\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"lenient\\\" : true,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\" ],\n    \"analyzer\" : \"multi_match\",\n    \"max_expansions\" : 1,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"use_dis_max\" : true,\n    \"tie_breaker\" : 35.0,\n    \"boost\" : 0.0\n  }\n}" + "'", str28, "{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\", \"\", \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"slop\\\" : -1,\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"lenient\\\" : true,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\" ],\n    \"analyzer\" : \"multi_match\",\n    \"max_expansions\" : 1,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"use_dis_max\" : true,\n    \"tie_breaker\" : 35.0,\n    \"boost\" : 0.0\n  }\n}");
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder39);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "multi_match" + "'", str42, "multi_match");
        org.junit.Assert.assertTrue("'" + float43 + "' != '" + 1.0f + "'", float43 == 1.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder45);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder47);
        org.junit.Assert.assertTrue("'" + type48 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX + "'", type48.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX));
        org.junit.Assert.assertTrue("'" + type49 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX + "'", type49.equals(org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX));
        org.junit.Assert.assertTrue("'" + type50 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX + "'", type50.equals(org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder51);
        org.junit.Assert.assertNotNull(parseField52);
        org.junit.Assert.assertTrue("'" + type53 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX + "'", type53.equals(org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX));
        org.junit.Assert.assertNotNull(parseField54);
        org.junit.Assert.assertTrue("'" + float55 + "' != '" + 0.0f + "'", float55 == 0.0f);
        org.junit.Assert.assertNotNull(parseField56);
        org.junit.Assert.assertNotNull(parseField57);
        org.junit.Assert.assertTrue("'" + type58 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX + "'", type58.equals(org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder59);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder61);
    }

    @Test
    public void test15300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15300");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder12.lenient(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder14.rewrite("multi_match");
        java.lang.String str17 = multiMatchQueryBuilder16.getWriteableName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder16.analyzer("{\n  \"multiMatch\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzyRewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder19.lenient(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder19.maxExpansions((int) (short) 1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder19.prefixLength((int) (byte) 10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder19.maxExpansions((int) 'a');
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = multiMatchQueryBuilder27.maxExpansions((int) '4');
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = multiMatchQueryBuilder29.cutoffFrequency((float) (short) 1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder33 = multiMatchQueryBuilder29.rewrite("{\n  \"multiMatch\" : {\n    \"query\" : null,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.common.io.stream.StreamInput streamInput34 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder35 = multiMatchQueryBuilder29.readFrom(streamInput34);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "multi_match" + "'", str17, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder29);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder31);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder33);
    }

    @Test
    public void test15301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15301");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.fuzzyRewrite("hi!");
        java.lang.String str13 = multiMatchQueryBuilder10.getName();
        float float14 = multiMatchQueryBuilder10.boost();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder10.lenient(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder10.slop((int) (short) -1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder10.tieBreaker((float) 10L);
        java.lang.String str21 = null; // flaky: multiMatchQueryBuilder20.toString();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder20.rewrite("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\", \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"analyzer\\\" : \\\"multi_match\\\",\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}^10.0\", \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\" ],\n    \"max_expansions\" : 10,\n    \"fuzzy_rewrite\" : \"\",\n    \"boost\" : 1.0,\n    \"_name\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\"\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder20.boost((float) (byte) 1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder25.rewrite("{\n  \"multiMatch\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"rewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"slop\\\" : -1,\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"lenient\\\" : true,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"fuzzyRewrite\" : \"hi!\",\n    \"tieBreaker\" : 52.0,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String[] strArray35 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder36 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray35);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder38 = multiMatchQueryBuilder36.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder40 = multiMatchQueryBuilder38.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery41 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder42 = multiMatchQueryBuilder40.zeroTermsQuery(zeroTermsQuery41);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder44 = multiMatchQueryBuilder42.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder46 = multiMatchQueryBuilder44.queryName("hi!");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery47 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder48 = multiMatchQueryBuilder46.zeroTermsQuery(zeroTermsQuery47);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder50 = multiMatchQueryBuilder46.fuzziness((java.lang.Object) 1);
        java.lang.String[] strArray58 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder59 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray58);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder61 = multiMatchQueryBuilder59.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder63 = multiMatchQueryBuilder59.queryName("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.Operator operator64 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder65 = multiMatchQueryBuilder63.operator(operator64);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder67 = multiMatchQueryBuilder65.lenient(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder69 = multiMatchQueryBuilder67.maxExpansions((int) (short) 1);
        java.lang.String[] strArray77 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder78 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray77);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder79 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) multiMatchQueryBuilder67, strArray77);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder80 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) multiMatchQueryBuilder50, strArray77);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder82 = multiMatchQueryBuilder80.cutoffFrequency(100.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder84 = multiMatchQueryBuilder82.rewrite("{\n  \"multi_match\" : {\n    \"query\" : \"class org.elasticsearch.index.query.MultiMatchQueryBuilder$Type\",\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"use_dis_max\" : false,\n    \"lenient\" : true,\n    \"boost\" : 1.0,\n    \"_name\" : \"{\\n  \\\"multiMatch\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"fuzzyRewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\"\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder85 = null; // flaky: multiMatchQueryBuilder25.fuzziness((java.lang.Object) multiMatchQueryBuilder84);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder87 = multiMatchQueryBuilder84.prefixLength((int) (byte) 1);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "multi_match" + "'", str13, "multi_match");
        org.junit.Assert.assertTrue("'" + float14 + "' != '" + 1.0f + "'", float14 == 1.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
// flaky:         org.junit.Assert.assertEquals("'" + str21 + "' != '" + "{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"slop\" : -1,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 10.0,\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}" + "'", str21, "{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"slop\" : -1,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 10.0,\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder38);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder40);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder42);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder44);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder46);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder48);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder50);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder61);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder63);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder65);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder67);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder69);
        org.junit.Assert.assertNotNull(strArray77);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder82);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder84);
// flaky:         org.junit.Assert.assertNotNull(multiMatchQueryBuilder85);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder87);
    }

    @Test
    public void test15302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15302");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.fuzzyRewrite("hi!");
        java.lang.String str13 = multiMatchQueryBuilder10.getName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder10.rewrite("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"slop\" : -1,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder10.tieBreaker((float) '4');
        java.lang.String[] strArray25 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray25);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = multiMatchQueryBuilder26.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder30 = multiMatchQueryBuilder28.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder32 = multiMatchQueryBuilder30.lenient(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder34 = multiMatchQueryBuilder30.prefixLength((int) ' ');
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder36 = multiMatchQueryBuilder30.rewrite("");
        java.lang.String str37 = multiMatchQueryBuilder36.queryName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder39 = multiMatchQueryBuilder36.maxExpansions((int) (short) 10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder40 = null; // flaky: multiMatchQueryBuilder17.fuzziness((java.lang.Object) multiMatchQueryBuilder39);
        java.lang.String str41 = multiMatchQueryBuilder17.getName();
        java.lang.String[] strArray49 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder50 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray49);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder52 = multiMatchQueryBuilder50.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder54 = multiMatchQueryBuilder52.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder56 = multiMatchQueryBuilder54.lenient(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder58 = multiMatchQueryBuilder54.prefixLength((int) (byte) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder60 = multiMatchQueryBuilder58.boost((float) 1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder62 = multiMatchQueryBuilder58.rewrite("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"analyzer\" : \"multi_match\",\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder64 = multiMatchQueryBuilder58.maxExpansions((int) (short) 0);
        java.lang.String[] strArray72 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder73 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray72);
        java.lang.Object obj74 = null;
        java.lang.String[] strArray83 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder84 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray83);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder85 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 10.0f, strArray83);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder86 = new org.elasticsearch.index.query.MultiMatchQueryBuilder(obj74, strArray83);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder87 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray83);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder88 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) multiMatchQueryBuilder64, strArray83);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder89 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) multiMatchQueryBuilder17, strArray83);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder91 = multiMatchQueryBuilder17.queryName("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"^10.0\", \"^10.0\", \"^10.0\", \"^10.0\", \"^10.0\", \"^10.0\" ],\n    \"type\" : \"phrase_prefix\",\n    \"slop\" : -1,\n    \"prefix_length\" : 35,\n    \"minimum_should_match\" : \"hi!\",\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 10.0,\n    \"_name\" : \"multi_match\"\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder94 = multiMatchQueryBuilder17.field("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"use_dis_max\" : false,\n    \"boost\" : 0.0,\n    \"_name\" : \"hi!\"\n  }\n}", (float) 1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder96 = multiMatchQueryBuilder94.analyzer("{\n  \"multiMatch\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzyRewrite\" : \"\",\n    \"cutoffFrequency\" : 1.0,\n    \"boost\" : 1.0,\n    \"Name\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"analyzer\\\" : \\\"multi_match\\\",\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\"\n  }\n}");
        org.elasticsearch.index.query.QueryShardContext queryShardContext97 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.lucene.search.Query query98 = multiMatchQueryBuilder96.toQuery(queryShardContext97);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "multi_match" + "'", str13, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder28);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder30);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder32);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder34);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder36);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder39);
// flaky:         org.junit.Assert.assertNotNull(multiMatchQueryBuilder40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "multi_match" + "'", str41, "multi_match");
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder52);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder54);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder56);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder58);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder60);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder62);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder64);
        org.junit.Assert.assertNotNull(strArray72);
        org.junit.Assert.assertNotNull(strArray83);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder91);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder94);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder96);
    }

    @Test
    public void test15303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15303");
        org.elasticsearch.common.xcontent.XContent xContent0 = null;
        java.io.OutputStream outputStream1 = null;
        java.lang.Object obj2 = null;
        java.lang.String[] strArray10 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder11.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder13.fuzzyRewrite("hi!");
        java.lang.String str16 = multiMatchQueryBuilder13.getName();
        float float17 = multiMatchQueryBuilder13.boost();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder13.lenient(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder13.slop((int) (short) -1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type22 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX;
        org.elasticsearch.index.search.MatchQuery.Type type23 = type22.matchQueryType();
        org.elasticsearch.index.search.MatchQuery.Type type24 = type22.matchQueryType();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder13.type(type22);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery26 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder25.zeroTermsQuery(zeroTermsQuery26);
        java.lang.Object obj28 = null;
        java.lang.String[] strArray36 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder37 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray36);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder39 = multiMatchQueryBuilder37.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder41 = multiMatchQueryBuilder39.fuzzyRewrite("hi!");
        java.lang.String str42 = multiMatchQueryBuilder39.getName();
        float float43 = multiMatchQueryBuilder39.boost();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder45 = multiMatchQueryBuilder39.lenient(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder47 = multiMatchQueryBuilder39.queryName("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder49 = multiMatchQueryBuilder39.cutoffFrequency((float) (-1L));
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder51 = multiMatchQueryBuilder39.useDisMax(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder53 = multiMatchQueryBuilder39.cutoffFrequency((float) (short) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder55 = multiMatchQueryBuilder39.cutoffFrequency((float) (byte) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder57 = multiMatchQueryBuilder39.slop((int) (byte) 10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type58 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX;
        float float59 = type58.tieBreaker();
        float float60 = type58.tieBreaker();
        org.elasticsearch.index.search.MatchQuery.Type type61 = type58.matchQueryType();
        java.lang.String[] strArray69 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder70 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray69);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder72 = multiMatchQueryBuilder70.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder74 = multiMatchQueryBuilder70.queryName("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.Operator operator75 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder76 = multiMatchQueryBuilder74.operator(operator75);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder78 = multiMatchQueryBuilder76.lenient(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder80 = multiMatchQueryBuilder78.maxExpansions((int) (short) 1);
        java.lang.String[] strArray88 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder89 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray88);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder90 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) multiMatchQueryBuilder78, strArray88);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder91 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) type58, strArray88);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder92 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (byte) 10, strArray88);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder93 = new org.elasticsearch.index.query.MultiMatchQueryBuilder(obj28, strArray88);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder94 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) multiMatchQueryBuilder25, strArray88);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder95 = new org.elasticsearch.index.query.MultiMatchQueryBuilder(obj2, strArray88);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder96 = new org.elasticsearch.common.xcontent.XContentBuilder(xContent0, outputStream1, strArray88);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "multi_match" + "'", str16, "multi_match");
        org.junit.Assert.assertTrue("'" + float17 + "' != '" + 1.0f + "'", float17 == 1.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertTrue("'" + type22 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX + "'", type22.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX));
        org.junit.Assert.assertTrue("'" + type23 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX + "'", type23.equals(org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX));
        org.junit.Assert.assertTrue("'" + type24 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX + "'", type24.equals(org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder39);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "multi_match" + "'", str42, "multi_match");
        org.junit.Assert.assertTrue("'" + float43 + "' != '" + 1.0f + "'", float43 == 1.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder45);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder47);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder49);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder51);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder53);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder55);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder57);
        org.junit.Assert.assertTrue("'" + type58 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX + "'", type58.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX));
        org.junit.Assert.assertTrue("'" + float59 + "' != '" + 0.0f + "'", float59 == 0.0f);
        org.junit.Assert.assertTrue("'" + float60 + "' != '" + 0.0f + "'", float60 == 0.0f);
        org.junit.Assert.assertTrue("'" + type61 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX + "'", type61.equals(org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX));
        org.junit.Assert.assertNotNull(strArray69);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder72);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder74);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder76);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder78);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder80);
        org.junit.Assert.assertNotNull(strArray88);
    }

    @Test
    public void test15304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15304");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.tieBreaker(0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder10.cutoffFrequency((float) 0L);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder14.analyzer("");
        java.lang.String[] strArray24 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray24);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder25.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = multiMatchQueryBuilder27.tieBreaker(0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type30 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX;
        float float31 = type30.tieBreaker();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder32 = multiMatchQueryBuilder27.type(type30);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder34 = multiMatchQueryBuilder27.cutoffFrequency((float) 0L);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder36 = multiMatchQueryBuilder27.lenient(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type37 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        org.elasticsearch.index.search.MatchQuery.Type type38 = type37.matchQueryType();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder39 = multiMatchQueryBuilder27.type(type37);
        org.elasticsearch.index.search.MatchQuery.Type type40 = type37.matchQueryType();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder41 = multiMatchQueryBuilder14.type(type37);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder43 = multiMatchQueryBuilder14.lenient(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder45 = multiMatchQueryBuilder14.prefixLength((int) (short) 100);
        float float46 = multiMatchQueryBuilder14.boost();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder48 = multiMatchQueryBuilder14.cutoffFrequency((float) (-1));
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder29);
        org.junit.Assert.assertTrue("'" + type30 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX + "'", type30.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX));
        org.junit.Assert.assertTrue("'" + float31 + "' != '" + 0.0f + "'", float31 == 0.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder32);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder34);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder36);
        org.junit.Assert.assertTrue("'" + type37 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type37.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertTrue("'" + type38 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type38.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder39);
        org.junit.Assert.assertTrue("'" + type40 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type40.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder41);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder43);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder45);
        org.junit.Assert.assertTrue("'" + float46 + "' != '" + 1.0f + "'", float46 == 1.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder48);
    }

    @Test
    public void test15305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15305");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.QueryValidationException queryValidationException13 = multiMatchQueryBuilder10.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder10.rewrite("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"\",\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 52.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder15.queryName("{\n  \"multiMatch\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"minimumShouldMatch\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"slop\\\" : -1,\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"lenient\\\" : true,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder15.field("{\n  \"multiMatch\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\", \"\", \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"fuzzy_rewrite\\\" : \\\"{\\\\n  \\\\\\\"multi_match\\\\\\\" : {\\\\n    \\\\\\\"query\\\\\\\" : 0.0,\\\\n    \\\\\\\"fields\\\\\\\" : [ \\\\\\\"hi!\\\\\\\", \\\\\\\"\\\\\\\", \\\\\\\"\\\\\\\", \\\\\\\"\\\\\\\", \\\\\\\"\\\\\\\", \\\\\\\"\\\\\\\" ],\\\\n    \\\\\\\"slop\\\\\\\" : -1,\\\\n    \\\\\\\"fuzzy_rewrite\\\\\\\" : \\\\\\\"hi!\\\\\\\",\\\\n    \\\\\\\"lenient\\\\\\\" : true,\\\\n    \\\\\\\"boost\\\\\\\" : 1.0\\\\n  }\\\\n}\\\",\\n    \\\"boost\\\" : 1.0,\\n    \\\"_name\\\" : \\\"hi!\\\"\\n  }\\n}\" ],\n    \"analyzer\" : \"multi_match\",\n    \"fuzzyRewrite\" : \"hi!\",\n    \"useDisMax\" : true,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder19.useDisMax(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder21.cutoffFrequency((float) (byte) 1);
        float float24 = multiMatchQueryBuilder23.boost();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNull(queryValidationException13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertTrue("'" + float24 + "' != '" + 1.0f + "'", float24 == 1.0f);
    }

    @Test
    public void test15306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15306");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder8.queryName("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.Operator operator13 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder12.operator(operator13);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder14.lenient(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder16.maxExpansions((int) (short) 1);
        java.lang.String str19 = multiMatchQueryBuilder16.getWriteableName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder16.prefixLength(0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder21.analyzer("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\", \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"analyzer\\\" : \\\"multi_match\\\",\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}^10.0\", \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\" ],\n    \"max_expansions\" : 10,\n    \"fuzzy_rewrite\" : \"\",\n    \"boost\" : 1.0,\n    \"_name\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\"\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder21.minimumShouldMatch("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\", \"\", \"{\\n  \\\"multiMatch\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"fuzzyRewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}^10.0\" ],\n    \"analyzer\" : \"multi_match\",\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 0.0\n  }\n}");
        org.elasticsearch.index.query.QueryValidationException queryValidationException26 = multiMatchQueryBuilder21.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = multiMatchQueryBuilder21.field("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\", \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"analyzer\\\" : \\\"multi_match\\\",\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}^10.0\" ],\n    \"fuzzy_rewrite\" : \"\",\n    \"boost\" : 1.0,\n    \"_name\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\"\n  }\n}", (float) 100);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "multi_match" + "'", str19, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
        org.junit.Assert.assertNull(queryValidationException26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder29);
    }

    @Test
    public void test15307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15307");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery13 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder12.zeroTermsQuery(zeroTermsQuery13);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder14.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder16.queryName("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder16.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder16.fuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"slop\" : -1,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String str23 = null; // flaky: multiMatchQueryBuilder16.toString();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder16.maxExpansions((int) (short) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder25.maxExpansions((int) (short) 1);
        java.lang.String[] strArray35 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder36 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray35);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder38 = multiMatchQueryBuilder36.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder40 = multiMatchQueryBuilder38.tieBreaker(0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder42 = multiMatchQueryBuilder38.useDisMax(true);
        float float43 = multiMatchQueryBuilder38.boost();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder45 = multiMatchQueryBuilder38.rewrite("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"analyzer\" : \"multi_match\",\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder47 = multiMatchQueryBuilder38.lenient(true);
        boolean boolean48 = multiMatchQueryBuilder27.equals((java.lang.Object) multiMatchQueryBuilder38);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder50 = multiMatchQueryBuilder27.slop((int) (short) 10);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder51 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params52 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        // The following exception was thrown during execution in test generation
        try {
            multiMatchQueryBuilder50.doXContent(xContentBuilder51, params52);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
// flaky:         org.junit.Assert.assertEquals("'" + str23 + "' != '" + "{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"slop\\\" : -1,\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"lenient\\\" : true,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"boost\" : 1.0,\n    \"_name\" : \"hi!\"\n  }\n}" + "'", str23, "{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"slop\\\" : -1,\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"lenient\\\" : true,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"boost\" : 1.0,\n    \"_name\" : \"hi!\"\n  }\n}");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder38);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder40);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder42);
        org.junit.Assert.assertTrue("'" + float43 + "' != '" + 1.0f + "'", float43 == 1.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder45);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder50);
        org.junit.Assert.assertNotNull(params52);
    }

    @Test
    public void test15308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15308");
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type2 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.parse("{\n  \"multiMatch\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"type\" : \"cross_fields\",\n    \"maxExpansions\" : 1,\n    \"rewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"slop\\\" : -1,\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"lenient\\\" : true,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"fuzzyRewrite\" : \"\",\n    \"useDisMax\" : true,\n    \"lenient\" : true,\n    \"boost\" : 1.0,\n    \"Name\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\"\n  }\n}", parseFieldMatcher1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test15309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15309");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery13 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder12.zeroTermsQuery(zeroTermsQuery13);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder14.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder16.queryName("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder18.useDisMax(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder20.analyzer("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder22.field("", 0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder22.fuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\", \"multi_match^0.0\" ],\n    \"type\" : \"phrase_prefix\",\n    \"prefix_length\" : 97,\n    \"fuzzy_rewrite\" : \"\",\n    \"tie_breaker\" : 0.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = multiMatchQueryBuilder27.tieBreaker(0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = multiMatchQueryBuilder27.boost((float) (byte) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder33 = multiMatchQueryBuilder27.cutoffFrequency(0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder35 = multiMatchQueryBuilder33.tieBreaker(52.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder37 = multiMatchQueryBuilder35.useDisMax(true);
        java.lang.String[] strArray45 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder46 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray45);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder48 = multiMatchQueryBuilder46.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder50 = multiMatchQueryBuilder48.fuzzyRewrite("hi!");
        java.lang.String str51 = multiMatchQueryBuilder48.getName();
        float float52 = multiMatchQueryBuilder48.boost();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder54 = multiMatchQueryBuilder48.lenient(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder56 = multiMatchQueryBuilder48.slop((int) (short) -1);
        java.lang.String str57 = multiMatchQueryBuilder48.queryName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder59 = multiMatchQueryBuilder48.prefixLength((int) (byte) 0);
        java.lang.String[] strArray67 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder68 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray67);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder70 = multiMatchQueryBuilder68.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder72 = multiMatchQueryBuilder70.tieBreaker(0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type73 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX;
        float float74 = type73.tieBreaker();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder75 = multiMatchQueryBuilder70.type(type73);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder77 = multiMatchQueryBuilder70.cutoffFrequency((float) 0L);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder79 = multiMatchQueryBuilder70.lenient(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type80 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        org.elasticsearch.index.search.MatchQuery.Type type81 = type80.matchQueryType();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder82 = multiMatchQueryBuilder70.type(type80);
        org.elasticsearch.common.ParseField parseField83 = type80.parseField();
        float float84 = type80.tieBreaker();
        org.elasticsearch.index.search.MatchQuery.Type type85 = type80.matchQueryType();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder86 = multiMatchQueryBuilder59.type(type80);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder87 = multiMatchQueryBuilder35.type(type80);
        java.lang.String str88 = null; // flaky: multiMatchQueryBuilder87.toString();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder90 = multiMatchQueryBuilder87.queryName("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"\",\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 52.0\n  }\n}");
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder29);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder31);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder33);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder35);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder37);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder48);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "multi_match" + "'", str51, "multi_match");
        org.junit.Assert.assertTrue("'" + float52 + "' != '" + 1.0f + "'", float52 == 1.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder54);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder56);
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder59);
        org.junit.Assert.assertNotNull(strArray67);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder70);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder72);
        org.junit.Assert.assertTrue("'" + type73 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX + "'", type73.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX));
        org.junit.Assert.assertTrue("'" + float74 + "' != '" + 0.0f + "'", float74 == 0.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder75);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder77);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder79);
        org.junit.Assert.assertTrue("'" + type80 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type80.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertTrue("'" + type81 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type81.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder82);
        org.junit.Assert.assertNotNull(parseField83);
        org.junit.Assert.assertTrue("'" + float84 + "' != '" + 0.0f + "'", float84 == 0.0f);
        org.junit.Assert.assertTrue("'" + type85 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type85.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder86);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder87);
// flaky:         org.junit.Assert.assertEquals("'" + str88 + "' != '" + "{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"^0.0\", \"^0.0\", \"^0.0\", \"^0.0\", \"^0.0\", \"^0.0\" ],\n    \"type\" : \"best_fields\",\n    \"analyzer\" : \"\",\n    \"fuzzy_rewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"multi_match^0.0\\\" ],\\n    \\\"type\\\" : \\\"phrase_prefix\\\",\\n    \\\"prefix_length\\\" : 97,\\n    \\\"fuzzy_rewrite\\\" : \\\"\\\",\\n    \\\"tie_breaker\\\" : 0.0,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"use_dis_max\" : true,\n    \"tie_breaker\" : 52.0,\n    \"cutoff_frequency\" : 0.0,\n    \"boost\" : 0.0,\n    \"_name\" : \"hi!\"\n  }\n}" + "'", str88, "{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"^0.0\", \"^0.0\", \"^0.0\", \"^0.0\", \"^0.0\", \"^0.0\" ],\n    \"type\" : \"best_fields\",\n    \"analyzer\" : \"\",\n    \"fuzzy_rewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"multi_match^0.0\\\" ],\\n    \\\"type\\\" : \\\"phrase_prefix\\\",\\n    \\\"prefix_length\\\" : 97,\\n    \\\"fuzzy_rewrite\\\" : \\\"\\\",\\n    \\\"tie_breaker\\\" : 0.0,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"use_dis_max\" : true,\n    \"tie_breaker\" : 52.0,\n    \"cutoff_frequency\" : 0.0,\n    \"boost\" : 0.0,\n    \"_name\" : \"hi!\"\n  }\n}");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder90);
    }

    @Test
    public void test15310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15310");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery13 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder12.zeroTermsQuery(zeroTermsQuery13);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder14.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder16.queryName("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder18.analyzer("multi_match");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder18.field("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"slop\" : -1,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}", 0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder18.queryName("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder18.field("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = multiMatchQueryBuilder27.lenient(true);
        java.lang.String str30 = multiMatchQueryBuilder29.getWriteableName();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "multi_match" + "'", str30, "multi_match");
    }

    @Test
    public void test15311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15311");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder8.queryName("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.Operator operator13 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder12.operator(operator13);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder14.lenient(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder16.maxExpansions((int) (short) 1);
        java.lang.String[] strArray26 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray26);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) multiMatchQueryBuilder16, strArray26);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder30 = multiMatchQueryBuilder16.queryName("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder32 = multiMatchQueryBuilder30.minimumShouldMatch("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"analyzer\" : \"multi_match\",\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String[] strArray40 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder41 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray40);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder43 = multiMatchQueryBuilder41.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder45 = multiMatchQueryBuilder43.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder47 = multiMatchQueryBuilder43.field("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder49 = multiMatchQueryBuilder43.boost(0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder51 = multiMatchQueryBuilder49.analyzer("multi_match");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder53 = multiMatchQueryBuilder51.maxExpansions(1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder55 = multiMatchQueryBuilder53.rewrite("{\n  \"multiMatch\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\", \"\" ],\n    \"analyzer\" : \"multi_match\",\n    \"maxExpansions\" : -1,\n    \"fuzzyRewrite\" : \"hi!\",\n    \"useDisMax\" : true,\n    \"boost\" : 0.0\n  }\n}");
        org.elasticsearch.index.query.Operator operator56 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder57 = multiMatchQueryBuilder55.operator(operator56);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder59 = multiMatchQueryBuilder57.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder62 = multiMatchQueryBuilder57.field("{\n  \"multiMatch\" : {\n    \"query\" : \"PHRASE_PREFIX\",\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzziness\" : \"10\",\n    \"boost\" : 1.0\n  }\n}", (float) (-1L));
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder63 = null; // flaky: multiMatchQueryBuilder30.fuzziness((java.lang.Object) multiMatchQueryBuilder62);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder65 = null; // flaky: multiMatchQueryBuilder63.rewrite("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 1.0,\n    \"boost\" : 10.0\n  }\n}");
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder30);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder32);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder43);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder45);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder47);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder49);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder51);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder53);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder55);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder57);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder59);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder62);
// flaky:         org.junit.Assert.assertNotNull(multiMatchQueryBuilder63);
// flaky:         org.junit.Assert.assertNotNull(multiMatchQueryBuilder65);
    }

    @Test
    public void test15312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15312");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.tieBreaker(0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder10.cutoffFrequency((float) 0L);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder14.analyzer("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder16.field("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"slop\" : -1,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder18.queryName("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"slop\" : -1,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder20.slop((int) (byte) 10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder22.useDisMax(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder22.tieBreaker((float) 10L);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = multiMatchQueryBuilder26.queryName("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"max_expansions\" : 10,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"use_dis_max\" : true,\n    \"tie_breaker\" : 35.0,\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder28);
    }

    @Test
    public void test15313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15313");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery13 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder12.zeroTermsQuery(zeroTermsQuery13);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder12.maxExpansions((int) (byte) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder16.tieBreaker((float) 0);
        org.elasticsearch.index.query.Operator operator19 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder16.operator(operator19);
        java.lang.String str21 = multiMatchQueryBuilder16.getWriteableName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder16.analyzer("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"slop\\\" : -1,\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"lenient\\\" : true,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"boost\" : 1.0,\n    \"_name\" : \"hi!\"\n  }\n}");
        java.lang.String[] strArray31 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder32 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray31);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder34 = multiMatchQueryBuilder32.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder36 = multiMatchQueryBuilder34.fuzzyRewrite("hi!");
        java.lang.String str37 = multiMatchQueryBuilder34.getName();
        float float38 = multiMatchQueryBuilder34.boost();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder40 = multiMatchQueryBuilder34.lenient(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder42 = multiMatchQueryBuilder34.slop((int) (short) -1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder44 = multiMatchQueryBuilder42.field("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"slop\" : -1,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder46 = multiMatchQueryBuilder42.fuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\", \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"analyzer\\\" : \\\"multi_match\\\",\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}^10.0\", \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\" ],\n    \"max_expansions\" : 10,\n    \"fuzzy_rewrite\" : \"\",\n    \"boost\" : 1.0,\n    \"_name\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\"\n  }\n}");
        org.elasticsearch.index.query.QueryValidationException queryValidationException47 = multiMatchQueryBuilder42.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder49 = multiMatchQueryBuilder42.analyzer("{\n  \"multiMatch\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\", \"\", \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"fuzzy_rewrite\\\" : \\\"{\\\\n  \\\\\\\"multi_match\\\\\\\" : {\\\\n    \\\\\\\"query\\\\\\\" : 0.0,\\\\n    \\\\\\\"fields\\\\\\\" : [ \\\\\\\"hi!\\\\\\\", \\\\\\\"\\\\\\\", \\\\\\\"\\\\\\\", \\\\\\\"\\\\\\\", \\\\\\\"\\\\\\\", \\\\\\\"\\\\\\\" ],\\\\n    \\\\\\\"slop\\\\\\\" : -1,\\\\n    \\\\\\\"fuzzy_rewrite\\\\\\\" : \\\\\\\"hi!\\\\\\\",\\\\n    \\\\\\\"lenient\\\\\\\" : true,\\\\n    \\\\\\\"boost\\\\\\\" : 1.0\\\\n  }\\\\n}\\\",\\n    \\\"boost\\\" : 1.0,\\n    \\\"_name\\\" : \\\"hi!\\\"\\n  }\\n}\" ],\n    \"analyzer\" : \"multi_match\",\n    \"fuzzyRewrite\" : \"hi!\",\n    \"useDisMax\" : true,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder51 = multiMatchQueryBuilder42.field("{\n  \"multiMatch\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\", \"{\\n  \\\"multiMatch\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"type\\\" : \\\"phrase_prefix\\\",\\n    \\\"maxExpansions\\\" : 10,\\n    \\\"fuzzyRewrite\\\" : \\\"\\\",\\n    \\\"tieBreaker\\\" : 0.0,\\n    \\\"cutoffFrequency\\\" : 0.0,\\n    \\\"boost\\\" : 1.0\\n  }\\n}^1.0\" ],\n    \"fuzzyRewrite\" : \"hi!\",\n    \"cutoffFrequency\" : 10.0,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String[] strArray59 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder60 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray59);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder62 = multiMatchQueryBuilder60.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder64 = multiMatchQueryBuilder62.tieBreaker(0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type65 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX;
        float float66 = type65.tieBreaker();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder67 = multiMatchQueryBuilder62.type(type65);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder69 = multiMatchQueryBuilder62.cutoffFrequency((float) 0L);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder71 = multiMatchQueryBuilder62.lenient(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type72 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX;
        float float73 = type72.tieBreaker();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder74 = multiMatchQueryBuilder71.type(type72);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder76 = multiMatchQueryBuilder74.maxExpansions((int) (short) -1);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery77 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder78 = multiMatchQueryBuilder74.zeroTermsQuery(zeroTermsQuery77);
        java.lang.String[] strArray82 = new java.lang.String[] { "{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"prefix_length\" : -1,\n    \"rewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"multi_match^0.0\\\" ],\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"lenient\\\" : true,\\n    \\\"boost\\\" : 0.0\\n  }\\n}\",\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"lenient\" : false,\n    \"boost\" : 1.0\n  }\n}", "{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\", \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"slop\\\" : -1,\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"lenient\\\" : true,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\" ],\n    \"analyzer\" : \"\",\n    \"max_expansions\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}", "{\n  \"multiMatch\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzyRewrite\" : \"hi!\",\n    \"cutoffFrequency\" : 0.0,\n    \"boost\" : 0.0\n  }\n}" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder83 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) multiMatchQueryBuilder78, strArray82);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder84 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) multiMatchQueryBuilder42, strArray82);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder85 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) multiMatchQueryBuilder23, strArray82);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "multi_match" + "'", str21, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder34);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "multi_match" + "'", str37, "multi_match");
        org.junit.Assert.assertTrue("'" + float38 + "' != '" + 1.0f + "'", float38 == 1.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder40);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder42);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder44);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder46);
        org.junit.Assert.assertNull(queryValidationException47);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder49);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder51);
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder62);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder64);
        org.junit.Assert.assertTrue("'" + type65 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX + "'", type65.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX));
        org.junit.Assert.assertTrue("'" + float66 + "' != '" + 0.0f + "'", float66 == 0.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder67);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder69);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder71);
        org.junit.Assert.assertTrue("'" + type72 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX + "'", type72.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX));
        org.junit.Assert.assertTrue("'" + float73 + "' != '" + 0.0f + "'", float73 == 0.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder74);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder76);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder78);
        org.junit.Assert.assertNotNull(strArray82);
    }

    @Test
    public void test15314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15314");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder12.lenient(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder14.rewrite("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery17 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder16.zeroTermsQuery(zeroTermsQuery17);
        java.lang.Object obj19 = null;
        boolean boolean20 = multiMatchQueryBuilder18.equals(obj19);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder18.lenient(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder22.fuzzyRewrite("multi_match");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder24.field("{\n  \"multiMatch\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"analyzer\" : \"multi_match\",\n    \"fuzziness\" : \"{\\n  \\\"MULTIMATCH\\\" : {\\n    \\\"QUERY\\\" : 0.0,\\n    \\\"FIELDS\\\" : [ \\\"HI!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"ANALYZER\\\" : \\\"MULTI_MATCH\\\",\\n    \\\"MAXEXPANSIONS\\\" : 1,\\n    \\\"FUZZYREWRITE\\\" : \\\"HI!\\\",\\n    \\\"CUTOFFFREQUENCY\\\" : 0.0,\\n    \\\"BOOST\\\" : 0.0\\n  }\\n}\",\n    \"prefixLength\" : 0,\n    \"fuzzyRewrite\" : \"hi!\",\n    \"boost\" : 1.0,\n    \"Name\" : \"hi!\"\n  }\n}", 35.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = multiMatchQueryBuilder24.boost(97.0f);
        float float30 = multiMatchQueryBuilder24.boost();
        org.elasticsearch.index.query.QueryShardContext queryShardContext31 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.lucene.search.Query query32 = multiMatchQueryBuilder24.toQuery(queryShardContext31);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder29);
        org.junit.Assert.assertTrue("'" + float30 + "' != '" + 97.0f + "'", float30 == 97.0f);
    }

    @Test
    public void test15315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15315");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.tieBreaker(0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder10.cutoffFrequency((float) 0L);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder10.minimumShouldMatch("{\n  \"multiMatch\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzyRewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder10.maxExpansions(0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder10.field("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"analyzer\" : \"multi_match\",\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type21 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder10.type(type21);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder22.slop((int) (byte) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder22.field("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzziness\" : \"PHRASE_PREFIX\",\n    \"fuzzy_rewrite\" : \"\",\n    \"boost\" : 1.0\n  }\n}", (float) (-1));
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = multiMatchQueryBuilder27.maxExpansions((int) '#');
        java.lang.String str30 = multiMatchQueryBuilder27.getWriteableName();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "multi_match" + "'", str30, "multi_match");
    }

    @Test
    public void test15316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15316");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder10.field("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder10.boost(0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder10.field("");
        java.lang.String[] strArray26 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray26);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = multiMatchQueryBuilder27.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = multiMatchQueryBuilder29.tieBreaker(0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type32 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX;
        float float33 = type32.tieBreaker();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder34 = multiMatchQueryBuilder29.type(type32);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder36 = multiMatchQueryBuilder29.cutoffFrequency((float) 0L);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder38 = multiMatchQueryBuilder29.queryName("multi_match");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder41 = multiMatchQueryBuilder38.field("", (float) 1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder42 = null; // flaky: multiMatchQueryBuilder10.fuzziness((java.lang.Object) multiMatchQueryBuilder38);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder44 = null; // flaky: multiMatchQueryBuilder42.maxExpansions(0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder46 = null; // flaky: multiMatchQueryBuilder42.tieBreaker((float) 100L);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder48 = null; // flaky: multiMatchQueryBuilder42.cutoffFrequency((float) (byte) 100);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder29);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder31);
        org.junit.Assert.assertTrue("'" + type32 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX + "'", type32.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX));
        org.junit.Assert.assertTrue("'" + float33 + "' != '" + 0.0f + "'", float33 == 0.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder34);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder36);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder38);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder41);
// flaky:         org.junit.Assert.assertNotNull(multiMatchQueryBuilder42);
// flaky:         org.junit.Assert.assertNotNull(multiMatchQueryBuilder44);
// flaky:         org.junit.Assert.assertNotNull(multiMatchQueryBuilder46);
// flaky:         org.junit.Assert.assertNotNull(multiMatchQueryBuilder48);
    }

    @Test
    public void test15317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15317");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery13 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder12.zeroTermsQuery(zeroTermsQuery13);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder14.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder16.queryName("hi!");
        java.lang.String str19 = multiMatchQueryBuilder16.queryName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder16.analyzer("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"slop\" : -1,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder16.lenient(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder23.rewrite("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"analyzer\" : \"multi_match\",\n    \"slop\" : -1,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0,\n    \"_name\" : \"hi!\"\n  }\n}");
        float float26 = multiMatchQueryBuilder25.boost();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
        org.junit.Assert.assertTrue("'" + float26 + "' != '" + 1.0f + "'", float26 == 1.0f);
    }

    @Test
    public void test15318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15318");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder8.queryName("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.Operator operator13 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder12.operator(operator13);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder14.lenient(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder16.maxExpansions((int) (short) 1);
        java.lang.String[] strArray26 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray26);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = multiMatchQueryBuilder27.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = multiMatchQueryBuilder29.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery32 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder33 = multiMatchQueryBuilder31.zeroTermsQuery(zeroTermsQuery32);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder35 = multiMatchQueryBuilder33.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder37 = multiMatchQueryBuilder35.queryName("hi!");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery38 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder39 = multiMatchQueryBuilder37.zeroTermsQuery(zeroTermsQuery38);
        boolean boolean40 = multiMatchQueryBuilder16.equals((java.lang.Object) multiMatchQueryBuilder37);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder42 = multiMatchQueryBuilder16.maxExpansions((int) (short) 100);
        org.elasticsearch.index.query.QueryValidationException queryValidationException43 = multiMatchQueryBuilder42.validate();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery44 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder45 = multiMatchQueryBuilder42.zeroTermsQuery(zeroTermsQuery44);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder29);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder31);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder33);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder35);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder37);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder42);
        org.junit.Assert.assertNull(queryValidationException43);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder45);
    }

    @Test
    public void test15319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15319");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.fuzzyRewrite("hi!");
        java.lang.String str13 = multiMatchQueryBuilder10.getName();
        float float14 = multiMatchQueryBuilder10.boost();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder10.lenient(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder10.slop((int) (short) -1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type19 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX;
        org.elasticsearch.index.search.MatchQuery.Type type20 = type19.matchQueryType();
        org.elasticsearch.index.search.MatchQuery.Type type21 = type19.matchQueryType();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder10.type(type19);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder22.fuzzyRewrite("{\n  \"multiMatch\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzyRewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder24.fuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"slop\" : -1,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        float float27 = multiMatchQueryBuilder26.boost();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = multiMatchQueryBuilder26.fuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"analyzer\" : \"multi_match\",\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = multiMatchQueryBuilder29.analyzer("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"type\" : \"phrase_prefix\",\n    \"max_expansions\" : 10,\n    \"fuzzy_rewrite\" : \"\",\n    \"tie_breaker\" : 0.0,\n    \"cutoff_frequency\" : 0.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder33 = multiMatchQueryBuilder31.cutoffFrequency((float) 10);
        java.lang.String str34 = null; // flaky: multiMatchQueryBuilder31.toString();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder36 = multiMatchQueryBuilder31.maxExpansions((int) (short) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder39 = multiMatchQueryBuilder36.field("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"analyzer\" : \"hi!\",\n    \"max_expansions\" : 52,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0,\n    \"_name\" : \"{\\n  \\\"multiMatch\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"fuzzyRewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\"\n  }\n}", 52.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder41 = multiMatchQueryBuilder39.minimumShouldMatch("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\", \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"slop\\\" : -1,\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"lenient\\\" : true,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\" ],\n    \"analyzer\" : \"\",\n    \"max_expansions\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder43 = multiMatchQueryBuilder41.tieBreaker(10.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder45 = multiMatchQueryBuilder43.queryName("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"type\" : \"phrase_prefix\",\n    \"max_expansions\" : 10,\n    \"fuzzy_rewrite\" : \"\",\n    \"tie_breaker\" : 0.0,\n    \"cutoff_frequency\" : 0.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.common.io.stream.StreamOutput streamOutput46 = null;
        // The following exception was thrown during execution in test generation
        try {
            multiMatchQueryBuilder45.writeTo(streamOutput46);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "multi_match" + "'", str13, "multi_match");
        org.junit.Assert.assertTrue("'" + float14 + "' != '" + 1.0f + "'", float14 == 1.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertTrue("'" + type19 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX + "'", type19.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX));
        org.junit.Assert.assertTrue("'" + type20 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX + "'", type20.equals(org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX));
        org.junit.Assert.assertTrue("'" + type21 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX + "'", type21.equals(org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertTrue("'" + float27 + "' != '" + 1.0f + "'", float27 == 1.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder29);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder31);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder33);
// flaky:         org.junit.Assert.assertEquals("'" + str34 + "' != '" + "{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"type\" : \"phrase_prefix\",\n    \"analyzer\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"type\\\" : \\\"phrase_prefix\\\",\\n    \\\"max_expansions\\\" : 10,\\n    \\\"fuzzy_rewrite\\\" : \\\"\\\",\\n    \\\"tie_breaker\\\" : 0.0,\\n    \\\"cutoff_frequency\\\" : 0.0,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"slop\" : -1,\n    \"fuzzy_rewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"analyzer\\\" : \\\"multi_match\\\",\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"lenient\" : true,\n    \"cutoff_frequency\" : 10.0,\n    \"boost\" : 1.0\n  }\n}" + "'", str34, "{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"type\" : \"phrase_prefix\",\n    \"analyzer\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"type\\\" : \\\"phrase_prefix\\\",\\n    \\\"max_expansions\\\" : 10,\\n    \\\"fuzzy_rewrite\\\" : \\\"\\\",\\n    \\\"tie_breaker\\\" : 0.0,\\n    \\\"cutoff_frequency\\\" : 0.0,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"slop\" : -1,\n    \"fuzzy_rewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"analyzer\\\" : \\\"multi_match\\\",\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"lenient\" : true,\n    \"cutoff_frequency\" : 10.0,\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder36);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder39);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder41);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder43);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder45);
    }

    @Test
    public void test15320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15320");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder10.field("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder10.boost(0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder16.analyzer("multi_match");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder18.maxExpansions(1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder18.cutoffFrequency((float) (short) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder22.fuzzyRewrite("{\n  \"multiMatch\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzyRewrite\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type25 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder22.type(type25);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = multiMatchQueryBuilder22.field("{\n  \"multiMatch\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"^1.0\", \"^1.0\", \"^1.0\", \"^1.0\", \"^1.0\", \"^1.0\" ],\n    \"type\" : \"phrase_prefix\",\n    \"fuzzyRewrite\" : \"\",\n    \"tieBreaker\" : 0.0,\n    \"cutoffFrequency\" : 0.0,\n    \"boost\" : 1.0,\n    \"Name\" : \"multi_match\"\n  }\n}");
        java.lang.String str29 = multiMatchQueryBuilder22.getWriteableName();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery30 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = multiMatchQueryBuilder22.zeroTermsQuery(zeroTermsQuery30);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder33 = multiMatchQueryBuilder31.type((java.lang.Object) "{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"slop\" : 1,\n    \"rewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"fuzzy_rewrite\" : \"{\\n  \\\"multiMatch\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"type\\\" : \\\"phrase_prefix\\\",\\n    \\\"maxExpansions\\\" : 10,\\n    \\\"fuzzyRewrite\\\" : \\\"\\\",\\n    \\\"tieBreaker\\\" : 0.0,\\n    \\\"cutoffFrequency\\\" : 0.0,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"lenient\" : false,\n    \"boost\" : 1.0\n  }\n}");
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchParseException; message: failed to parse [multi_match] query type [{?  \"multi_match\" : {?    \"query\" : 0.0,?    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],?    \"slop\" : 1,?    \"rewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",?    \"fuzzy_rewrite\" : \"{\\n  \\\"multimatch\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"type\\\" : \\\"phrase_prefix\\\",\\n    \\\"maxexpansions\\\" : 10,\\n    \\\"fuzzyrewrite\\\" : \\\"\\\",\\n    \\\"tiebreaker\\\" : 0.0,\\n    \\\"cutofffrequency\\\" : 0.0,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",?    \"lenient\" : false,?    \"boost\" : 1.0?  }?}]. unknown type.");
        } catch (org.elasticsearch.ElasticsearchParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "multi_match" + "'", str29, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder31);
    }

    @Test
    public void test15321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15321");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.tieBreaker(0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type13 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX;
        float float14 = type13.tieBreaker();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder10.type(type13);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder10.cutoffFrequency((float) 0L);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder10.fuzzyRewrite("{\n  \"multiMatch\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"type\" : \"phrase_prefix\",\n    \"maxExpansions\" : 10,\n    \"fuzzyRewrite\" : \"\",\n    \"tieBreaker\" : 0.0,\n    \"cutoffFrequency\" : 0.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder10.minimumShouldMatch("{\n  \"multiMatch\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"rewrite\" : \"multi_match\",\n    \"fuzzyRewrite\" : \"hi!\",\n    \"lenient\" : false,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder10.analyzer("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"analyzer\" : \"{\\n  \\\"multiMatch\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"fuzzyRewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"slop\" : 100,\n    \"rewrite\" : \"multi_match\",\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"lenient\" : false,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder23.prefixLength((int) (byte) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder23.analyzer("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"type\" : \"phrase_prefix\",\n    \"prefix_length\" : 10,\n    \"max_expansions\" : 10,\n    \"minimum_should_match\" : \"\",\n    \"fuzzy_rewrite\" : \"\",\n    \"tie_breaker\" : 0.0,\n    \"cutoff_frequency\" : 0.0,\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertTrue("'" + type13 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX + "'", type13.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX));
        org.junit.Assert.assertTrue("'" + float14 + "' != '" + 0.0f + "'", float14 == 0.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
    }

    @Test
    public void test15322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15322");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder8.queryName("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder12.tieBreaker((float) (short) 1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder14.tieBreaker(0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder16.prefixLength((int) (short) 1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder16.lenient(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder20.cutoffFrequency(10.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder22.cutoffFrequency((float) (short) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder22.fuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"analyzer\" : \"multi_match\",\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"cutoff_frequency\" : 1.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.QueryShardContext queryShardContext27 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.lucene.search.Query query28 = multiMatchQueryBuilder22.toFilter(queryShardContext27);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
    }

    @Test
    public void test15323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15323");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery13 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder12.zeroTermsQuery(zeroTermsQuery13);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder14.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery17 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder14.zeroTermsQuery(zeroTermsQuery17);
        java.lang.String[] strArray26 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray26);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = multiMatchQueryBuilder27.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = multiMatchQueryBuilder29.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery32 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder33 = multiMatchQueryBuilder31.zeroTermsQuery(zeroTermsQuery32);
        java.lang.String str34 = multiMatchQueryBuilder33.getName();
        boolean boolean35 = multiMatchQueryBuilder18.equals((java.lang.Object) multiMatchQueryBuilder33);
        java.lang.String str36 = multiMatchQueryBuilder33.getWriteableName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder38 = multiMatchQueryBuilder33.analyzer("hi!");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery39 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder40 = multiMatchQueryBuilder38.zeroTermsQuery(zeroTermsQuery39);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder42 = multiMatchQueryBuilder38.analyzer("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\", \"multi_match^-1.0\" ],\n    \"minimum_should_match\" : \"{\\n  \\\"multiMatch\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"maxExpansions\\\" : 1,\\n    \\\"fuzzyRewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0,\n    \"_name\" : \"hi!\"\n  }\n}");
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder29);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder31);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "multi_match" + "'", str34, "multi_match");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "multi_match" + "'", str36, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder38);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder40);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder42);
    }

    @Test
    public void test15324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15324");
        org.elasticsearch.common.xcontent.XContent xContent0 = null;
        java.lang.String[] strArray8 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder9 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray8);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder9.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder11.tieBreaker(0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder11.useDisMax(true);
        float float16 = multiMatchQueryBuilder11.boost();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder11.queryName("{\n  \"multiMatch\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzyRewrite\" : \"\",\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String str19 = null; // flaky: multiMatchQueryBuilder18.toString();
        java.lang.String str20 = null; // flaky: multiMatchQueryBuilder18.toString();
        java.lang.String[] strArray28 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray28);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = multiMatchQueryBuilder29.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder33 = multiMatchQueryBuilder31.fuzzyRewrite("hi!");
        java.lang.String str34 = multiMatchQueryBuilder31.getName();
        float float35 = multiMatchQueryBuilder31.boost();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder37 = multiMatchQueryBuilder31.lenient(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder39 = multiMatchQueryBuilder31.slop((int) (short) -1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type40 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX;
        org.elasticsearch.index.search.MatchQuery.Type type41 = type40.matchQueryType();
        org.elasticsearch.index.search.MatchQuery.Type type42 = type40.matchQueryType();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder43 = multiMatchQueryBuilder31.type(type40);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder45 = multiMatchQueryBuilder31.queryName("multi_match");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder47 = multiMatchQueryBuilder45.minimumShouldMatch("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder49 = multiMatchQueryBuilder47.rewrite("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\", \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"analyzer\\\" : \\\"multi_match\\\",\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}^10.0\", \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\" ],\n    \"max_expansions\" : 10,\n    \"fuzzy_rewrite\" : \"\",\n    \"boost\" : 1.0,\n    \"_name\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\"\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder51 = multiMatchQueryBuilder49.field("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"analyzer\" : \"{\\n  \\\"multiMatch\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"rewrite\\\" : \\\"multi_match\\\",\\n    \\\"fuzzyRewrite\\\" : \\\"hi!\\\",\\n    \\\"lenient\\\" : false,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String[] strArray60 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder61 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray60);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder63 = multiMatchQueryBuilder61.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder65 = multiMatchQueryBuilder61.queryName("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.Operator operator66 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder67 = multiMatchQueryBuilder65.operator(operator66);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder69 = multiMatchQueryBuilder67.lenient(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder71 = multiMatchQueryBuilder69.maxExpansions((int) (short) 1);
        java.lang.String[] strArray79 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder80 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray79);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder81 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) multiMatchQueryBuilder69, strArray79);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder82 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (byte) 1, strArray79);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder83 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"analyzer\" : \"{\\n  \\\"multiMatch\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"rewrite\\\" : \\\"multi_match\\\",\\n    \\\"fuzzyRewrite\\\" : \\\"hi!\\\",\\n    \\\"lenient\\\" : false,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}", strArray79);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder84 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) str20, strArray79);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder85 = null; // flaky: org.elasticsearch.common.xcontent.XContentBuilder.builder(xContent0, strArray79);
// flaky:             org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertTrue("'" + float16 + "' != '" + 1.0f + "'", float16 == 1.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"\",\n    \"use_dis_max\" : true,\n    \"tie_breaker\" : 0.0,\n    \"boost\" : 1.0,\n    \"_name\" : \"{\\n  \\\"multiMatch\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"fuzzyRewrite\\\" : \\\"\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\"\n  }\n}" + "'", str19, "{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"\",\n    \"use_dis_max\" : true,\n    \"tie_breaker\" : 0.0,\n    \"boost\" : 1.0,\n    \"_name\" : \"{\\n  \\\"multiMatch\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"fuzzyRewrite\\\" : \\\"\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\"\n  }\n}");
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"\",\n    \"use_dis_max\" : true,\n    \"tie_breaker\" : 0.0,\n    \"boost\" : 1.0,\n    \"_name\" : \"{\\n  \\\"multiMatch\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"fuzzyRewrite\\\" : \\\"\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\"\n  }\n}" + "'", str20, "{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"\",\n    \"use_dis_max\" : true,\n    \"tie_breaker\" : 0.0,\n    \"boost\" : 1.0,\n    \"_name\" : \"{\\n  \\\"multiMatch\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"fuzzyRewrite\\\" : \\\"\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\"\n  }\n}");
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder31);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "multi_match" + "'", str34, "multi_match");
        org.junit.Assert.assertTrue("'" + float35 + "' != '" + 1.0f + "'", float35 == 1.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder37);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder39);
        org.junit.Assert.assertTrue("'" + type40 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX + "'", type40.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX));
        org.junit.Assert.assertTrue("'" + type41 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX + "'", type41.equals(org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX));
        org.junit.Assert.assertTrue("'" + type42 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX + "'", type42.equals(org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder43);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder45);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder47);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder49);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder51);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder63);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder65);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder67);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder69);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder71);
        org.junit.Assert.assertNotNull(strArray79);
    }

    @Test
    public void test15325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15325");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.fuzzyRewrite("hi!");
        java.lang.String str13 = multiMatchQueryBuilder10.getName();
        float float14 = multiMatchQueryBuilder10.boost();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder10.lenient(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder10.slop((int) (short) -1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type19 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX;
        org.elasticsearch.index.search.MatchQuery.Type type20 = type19.matchQueryType();
        org.elasticsearch.index.search.MatchQuery.Type type21 = type19.matchQueryType();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder10.type(type19);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder10.queryName("multi_match");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder24.minimumShouldMatch("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = multiMatchQueryBuilder24.lenient(true);
        java.lang.String[] strArray36 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder37 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray36);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder39 = multiMatchQueryBuilder37.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder41 = multiMatchQueryBuilder39.fuzzyRewrite("hi!");
        java.lang.String str42 = multiMatchQueryBuilder39.getName();
        float float43 = multiMatchQueryBuilder39.boost();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder45 = multiMatchQueryBuilder39.lenient(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder47 = multiMatchQueryBuilder39.queryName("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder49 = multiMatchQueryBuilder39.cutoffFrequency((float) (-1L));
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder50 = multiMatchQueryBuilder24.fuzziness((java.lang.Object) (-1L));
        float float51 = multiMatchQueryBuilder50.boost();
        java.lang.String[] strArray59 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder60 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray59);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder62 = multiMatchQueryBuilder60.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder64 = multiMatchQueryBuilder60.prefixLength(1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder65 = null; // flaky: multiMatchQueryBuilder50.fuzziness((java.lang.Object) multiMatchQueryBuilder60);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder67 = null; // flaky: multiMatchQueryBuilder65.cutoffFrequency(100.0f);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "multi_match" + "'", str13, "multi_match");
        org.junit.Assert.assertTrue("'" + float14 + "' != '" + 1.0f + "'", float14 == 1.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertTrue("'" + type19 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX + "'", type19.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX));
        org.junit.Assert.assertTrue("'" + type20 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX + "'", type20.equals(org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX));
        org.junit.Assert.assertTrue("'" + type21 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX + "'", type21.equals(org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder28);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder39);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "multi_match" + "'", str42, "multi_match");
        org.junit.Assert.assertTrue("'" + float43 + "' != '" + 1.0f + "'", float43 == 1.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder45);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder47);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder49);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder50);
        org.junit.Assert.assertTrue("'" + float51 + "' != '" + 1.0f + "'", float51 == 1.0f);
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder62);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder64);
// flaky:         org.junit.Assert.assertNotNull(multiMatchQueryBuilder65);
// flaky:         org.junit.Assert.assertNotNull(multiMatchQueryBuilder67);
    }

    @Test
    public void test15326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15326");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder12.tieBreaker((float) '#');
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder12.maxExpansions(10);
        org.elasticsearch.index.query.QueryValidationException queryValidationException17 = multiMatchQueryBuilder12.validate();
        java.lang.String[] strArray25 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray25);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = multiMatchQueryBuilder26.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder30 = multiMatchQueryBuilder28.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery31 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder32 = multiMatchQueryBuilder30.zeroTermsQuery(zeroTermsQuery31);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder34 = multiMatchQueryBuilder32.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder36 = multiMatchQueryBuilder34.queryName("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder38 = multiMatchQueryBuilder36.analyzer("multi_match");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder41 = multiMatchQueryBuilder36.field("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"slop\" : -1,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}", 0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder42 = null; // flaky: multiMatchQueryBuilder12.fuzziness((java.lang.Object) multiMatchQueryBuilder41);
        float float43 = multiMatchQueryBuilder41.boost();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder46 = multiMatchQueryBuilder41.field("{\n  \"multiMatch\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\", \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"slop\\\" : -1,\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"lenient\\\" : true,\\n    \\\"boost\\\" : 1.0\\n  }\\n}^0.0\" ],\n    \"analyzer\" : \"multi_match\",\n    \"fuzzyRewrite\" : \"hi!\",\n    \"boost\" : 1.0,\n    \"Name\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\"\n  }\n}", (float) (short) 0);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNull(queryValidationException17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder28);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder30);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder32);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder34);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder36);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder38);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder41);
// flaky:         org.junit.Assert.assertNotNull(multiMatchQueryBuilder42);
        org.junit.Assert.assertTrue("'" + float43 + "' != '" + 1.0f + "'", float43 == 1.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder46);
    }

    @Test
    public void test15327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15327");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.tieBreaker(0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type13 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX;
        float float14 = type13.tieBreaker();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder10.type(type13);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder10.cutoffFrequency((float) 0L);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder10.lenient(false);
        java.lang.String str20 = multiMatchQueryBuilder19.queryName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder19.analyzer("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"analyzer\" : \"multi_match\",\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        float float23 = multiMatchQueryBuilder22.boost();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder22.analyzer("{\n  \"multiMatch\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"analyzer\" : \"multi_match\",\n    \"fuzzyRewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder25.queryName("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"analyzer\" : \"hi!\",\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0,\n    \"_name\" : \"hi!\"\n  }\n}");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery28 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = multiMatchQueryBuilder25.zeroTermsQuery(zeroTermsQuery28);
        java.lang.Object obj30 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = multiMatchQueryBuilder25.type(obj30);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder33 = multiMatchQueryBuilder31.rewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder35 = multiMatchQueryBuilder33.field("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"type\" : \"best_fields\",\n    \"analyzer\" : \"\",\n    \"minimum_should_match\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"fuzzy_rewrite\" : \"\",\n    \"tie_breaker\" : 0.0,\n    \"cutoff_frequency\" : 0.0,\n    \"boost\" : 35.0\n  }\n}");
        org.elasticsearch.index.query.QueryValidationException queryValidationException36 = multiMatchQueryBuilder33.validate();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery37 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder38 = multiMatchQueryBuilder33.zeroTermsQuery(zeroTermsQuery37);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder39 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params40 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder41 = multiMatchQueryBuilder38.toXContent(xContentBuilder39, params40);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertTrue("'" + type13 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX + "'", type13.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX));
        org.junit.Assert.assertTrue("'" + float14 + "' != '" + 0.0f + "'", float14 == 0.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertTrue("'" + float23 + "' != '" + 1.0f + "'", float23 == 1.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder29);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder31);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder33);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder35);
        org.junit.Assert.assertNull(queryValidationException36);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder38);
    }

    @Test
    public void test15328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15328");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder8.queryName("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.Operator operator13 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder12.operator(operator13);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery15 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder12.zeroTermsQuery(zeroTermsQuery15);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder16.cutoffFrequency((float) (byte) -1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder16.useDisMax(false);
        java.lang.String str21 = null; // flaky: multiMatchQueryBuilder20.toString();
        java.lang.String str22 = multiMatchQueryBuilder20.getName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder20.field("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder24.useDisMax(true);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
// flaky:         org.junit.Assert.assertEquals("'" + str21 + "' != '" + "{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"\",\n    \"use_dis_max\" : false,\n    \"cutoff_frequency\" : -1.0,\n    \"boost\" : 1.0,\n    \"_name\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\"\n  }\n}" + "'", str21, "{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"\",\n    \"use_dis_max\" : false,\n    \"cutoff_frequency\" : -1.0,\n    \"boost\" : 1.0,\n    \"_name\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\"\n  }\n}");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "multi_match" + "'", str22, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
    }

    @Test
    public void test15329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15329");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder8.queryName("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.Operator operator13 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder12.operator(operator13);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder14.lenient(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder16.maxExpansions((int) (short) 1);
        java.lang.String str19 = multiMatchQueryBuilder16.getWriteableName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder16.prefixLength(0);
        java.lang.String str22 = multiMatchQueryBuilder21.getWriteableName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder21.prefixLength((int) (short) 10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder24.field("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\", \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"analyzer\\\" : \\\"multi_match\\\",\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}^10.0\" ],\n    \"fuzzy_rewrite\" : \"\",\n    \"boost\" : 1.0,\n    \"_name\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\"\n  }\n}", (float) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = multiMatchQueryBuilder24.minimumShouldMatch("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\", \"\" ],\n    \"analyzer\" : \"multi_match\",\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"use_dis_max\" : true,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : -1.0\n  }\n}");
        org.elasticsearch.index.query.Operator operator30 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = multiMatchQueryBuilder24.operator(operator30);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder33 = multiMatchQueryBuilder24.lenient(false);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "multi_match" + "'", str19, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "multi_match" + "'", str22, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder29);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder31);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder33);
    }

    @Test
    public void test15330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15330");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.tieBreaker(0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type13 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX;
        float float14 = type13.tieBreaker();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder10.type(type13);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder10.cutoffFrequency((float) 0L);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder10.lenient(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type20 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        org.elasticsearch.index.search.MatchQuery.Type type21 = type20.matchQueryType();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder10.type(type20);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder10.useDisMax(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder10.prefixLength((int) (short) 10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = multiMatchQueryBuilder10.useDisMax(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder30 = multiMatchQueryBuilder10.prefixLength((int) (byte) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder32 = multiMatchQueryBuilder10.tieBreaker((float) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder34 = multiMatchQueryBuilder32.slop((int) 'a');
        org.elasticsearch.index.query.Operator operator35 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder36 = multiMatchQueryBuilder32.operator(operator35);
        org.elasticsearch.index.query.QueryShardContext queryShardContext37 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.lucene.search.Query query38 = multiMatchQueryBuilder32.toQuery(queryShardContext37);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertTrue("'" + type13 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX + "'", type13.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX));
        org.junit.Assert.assertTrue("'" + float14 + "' != '" + 0.0f + "'", float14 == 0.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertTrue("'" + type20 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type20.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertTrue("'" + type21 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type21.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder28);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder30);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder32);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder34);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder36);
    }

    @Test
    public void test15331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15331");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.tieBreaker(0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type13 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX;
        float float14 = type13.tieBreaker();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder10.type(type13);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder10.lenient(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder10.maxExpansions((int) (byte) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder10.cutoffFrequency((float) (short) 10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder10.field("{\n  \"multiMatch\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"prefixLength\" : 0,\n    \"maxExpansions\" : 1,\n    \"fuzzyRewrite\" : \"\",\n    \"lenient\" : true,\n    \"boost\" : 1.0,\n    \"Name\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\"\n  }\n}", 0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder10.slop(0);
        java.lang.String str27 = multiMatchQueryBuilder10.getName();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertTrue("'" + type13 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX + "'", type13.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX));
        org.junit.Assert.assertTrue("'" + float14 + "' != '" + 0.0f + "'", float14 == 0.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "multi_match" + "'", str27, "multi_match");
    }

    @Test
    public void test15332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15332");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.tieBreaker(0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type13 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX;
        float float14 = type13.tieBreaker();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder10.type(type13);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder10.cutoffFrequency((float) 0L);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder10.lenient(false);
        java.lang.String str20 = multiMatchQueryBuilder19.queryName();
        java.lang.String[] strArray28 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray28);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = multiMatchQueryBuilder29.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder33 = multiMatchQueryBuilder31.fuzzyRewrite("hi!");
        java.lang.String str34 = multiMatchQueryBuilder31.getName();
        float float35 = multiMatchQueryBuilder31.boost();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder37 = multiMatchQueryBuilder31.lenient(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder39 = multiMatchQueryBuilder31.slop((int) (short) -1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type40 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX;
        org.elasticsearch.index.search.MatchQuery.Type type41 = type40.matchQueryType();
        org.elasticsearch.index.search.MatchQuery.Type type42 = type40.matchQueryType();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder43 = multiMatchQueryBuilder31.type(type40);
        org.elasticsearch.common.ParseField parseField44 = type40.parseField();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder45 = multiMatchQueryBuilder19.fuzziness((java.lang.Object) parseField44);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder47 = multiMatchQueryBuilder19.cutoffFrequency(0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder49 = multiMatchQueryBuilder47.analyzer("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"analyzer\" : \"multi_match\",\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0,\n    \"_name\" : \"hi!\"\n  }\n}");
        org.elasticsearch.index.query.QueryValidationException queryValidationException50 = multiMatchQueryBuilder49.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder52 = multiMatchQueryBuilder49.tieBreaker(10.0f);
        org.elasticsearch.index.query.QueryShardContext queryShardContext53 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.lucene.search.Query query54 = multiMatchQueryBuilder52.toQuery(queryShardContext53);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertTrue("'" + type13 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX + "'", type13.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX));
        org.junit.Assert.assertTrue("'" + float14 + "' != '" + 0.0f + "'", float14 == 0.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder31);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "multi_match" + "'", str34, "multi_match");
        org.junit.Assert.assertTrue("'" + float35 + "' != '" + 1.0f + "'", float35 == 1.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder37);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder39);
        org.junit.Assert.assertTrue("'" + type40 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX + "'", type40.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX));
        org.junit.Assert.assertTrue("'" + type41 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX + "'", type41.equals(org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX));
        org.junit.Assert.assertTrue("'" + type42 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX + "'", type42.equals(org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder43);
        org.junit.Assert.assertNotNull(parseField44);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder45);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder47);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder49);
        org.junit.Assert.assertNull(queryValidationException50);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder52);
    }

    @Test
    public void test15333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15333");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery13 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder12.zeroTermsQuery(zeroTermsQuery13);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder14.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder16.queryName("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder16.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder16.analyzer("hi!");
        org.elasticsearch.index.query.QueryValidationException queryValidationException23 = multiMatchQueryBuilder22.validate();
        java.lang.String str24 = null; // flaky: multiMatchQueryBuilder22.toString();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder22.maxExpansions((int) '4');
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = multiMatchQueryBuilder26.queryName("{\n  \"multiMatch\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzyRewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder30 = multiMatchQueryBuilder28.slop(100);
        java.lang.String[] strArray38 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder39 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray38);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder41 = multiMatchQueryBuilder39.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder43 = multiMatchQueryBuilder41.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder45 = multiMatchQueryBuilder43.tieBreaker((float) '#');
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder47 = multiMatchQueryBuilder43.maxExpansions(10);
        java.lang.String str48 = multiMatchQueryBuilder47.getName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder50 = multiMatchQueryBuilder47.lenient(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder52 = multiMatchQueryBuilder47.useDisMax(false);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery53 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder54 = multiMatchQueryBuilder47.zeroTermsQuery(zeroTermsQuery53);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder56 = multiMatchQueryBuilder54.minimumShouldMatch("{\n  \"multiMatch\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\", \"\" ],\n    \"analyzer\" : \"multi_match\",\n    \"rewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"minimum_should_match\\\" : \\\"{\\\\n  \\\\\\\"multi_match\\\\\\\" : {\\\\n    \\\\\\\"query\\\\\\\" : 0.0,\\\\n    \\\\\\\"fields\\\\\\\" : [ \\\\\\\"hi!\\\\\\\", \\\\\\\"\\\\\\\", \\\\\\\"\\\\\\\", \\\\\\\"\\\\\\\", \\\\\\\"\\\\\\\", \\\\\\\"\\\\\\\" ],\\\\n    \\\\\\\"slop\\\\\\\" : -1,\\\\n    \\\\\\\"fuzzy_rewrite\\\\\\\" : \\\\\\\"hi!\\\\\\\",\\\\n    \\\\\\\"lenient\\\\\\\" : true,\\\\n    \\\\\\\"boost\\\\\\\" : 1.0\\\\n  }\\\\n}\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"fuzzyRewrite\" : \"hi!\",\n    \"useDisMax\" : true,\n    \"boost\" : 0.0\n  }\n}");
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder57 = null; // flaky: multiMatchQueryBuilder28.type((java.lang.Object) multiMatchQueryBuilder56);
// flaky:             org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchParseException; message: failed to parse [multi_match] query type [{?  \"multi_match\" : {?    \"query\" : 0.0,?    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],?    \"max_expansions\" : 10,?    \"minimum_should_match\" : \"{\\n  \\\"multimatch\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"analyzer\\\" : \\\"multi_match\\\",\\n    \\\"rewrite\\\" : \\\"{\\\\n  \\\\\\\"multi_match\\\\\\\" : {\\\\n    \\\\\\\"query\\\\\\\" : 0.0,\\\\n    \\\\\\\"fields\\\\\\\" : [ \\\\\\\"hi!\\\\\\\", \\\\\\\"\\\\\\\", \\\\\\\"\\\\\\\", \\\\\\\"\\\\\\\", \\\\\\\"\\\\\\\", \\\\\\\"\\\\\\\" ],\\\\n    \\\\\\\"minimum_should_match\\\\\\\" : \\\\\\\"{\\\\\\\\n  \\\\\\\\\\\\\\\"multi_match\\\\\\\\\\\\\\\" : {\\\\\\\\n    \\\\\\\\\\\\\\\"query\\\\\\\\\\\\\\\" : 0.0,\\\\\\\\n    \\\\\\\\\\\\\\\"fields\\\\\\\\\\\\\\\" : [ \\\\\\\\\\\\\\\"hi!\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\" ],\\\\\\\\n    \\\\\\\\\\\\\\\"slop\\\\\\\\\\\\\\\" : -1,\\\\\\\\n    \\\\\\\\\\\\\\\"fuzzy_rewrite\\\\\\\\\\\\\\\" : \\\\\\\\\\\\\\\"hi!\\\\\\\\\\\\\\\",\\\\\\\\n    \\\\\\\\\\\\\\\"lenient\\\\\\\\\\\\\\\" : true,\\\\\\\\n    \\\\\\\\\\\\\\\"boost\\\\\\\\\\\\\\\" : 1.0\\\\\\\\n  }\\\\\\\\n}\\\\\\\",\\\\n    \\\\\\\"boost\\\\\\\" : 1.0\\\\n  }\\\\n}\\\",\\n    \\\"fuzzyrewrite\\\" : \\\"hi!\\\",\\n    \\\"usedismax\\\" : true,\\n    \\\"boost\\\" : 0.0\\n  }\\n}\",?    \"fuzzy_rewrite\" : \"hi!\",?    \"use_dis_max\" : false,?    \"tie_breaker\" : 35.0,?    \"lenient\" : true,?    \"boost\" : 1.0?  }?}]. unknown type.");
        } catch (org.elasticsearch.ElasticsearchParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNull(queryValidationException23);
// flaky:         org.junit.Assert.assertEquals("'" + str24 + "' != '" + "{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"analyzer\" : \"hi!\",\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0,\n    \"_name\" : \"hi!\"\n  }\n}" + "'", str24, "{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"analyzer\" : \"hi!\",\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0,\n    \"_name\" : \"hi!\"\n  }\n}");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder28);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder30);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder41);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder43);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder45);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "multi_match" + "'", str48, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder50);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder52);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder54);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder56);
    }

    @Test
    public void test15334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15334");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.tieBreaker(0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type13 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX;
        float float14 = type13.tieBreaker();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder10.type(type13);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder10.cutoffFrequency((float) 0L);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder10.lenient(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type20 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        org.elasticsearch.index.search.MatchQuery.Type type21 = type20.matchQueryType();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder10.type(type20);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder10.useDisMax(false);
        java.lang.String[] strArray32 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder33 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray32);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder35 = multiMatchQueryBuilder33.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder37 = multiMatchQueryBuilder35.fuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder39 = multiMatchQueryBuilder35.minimumShouldMatch("multi_match");
        boolean boolean40 = multiMatchQueryBuilder10.equals((java.lang.Object) "multi_match");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder42 = multiMatchQueryBuilder10.queryName("{\n  \"multiMatch\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"type\" : \"phrase_prefix\",\n    \"maxExpansions\" : 10,\n    \"fuzzyRewrite\" : \"\",\n    \"tieBreaker\" : 0.0,\n    \"cutoffFrequency\" : 0.0,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String str43 = multiMatchQueryBuilder42.queryName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder45 = multiMatchQueryBuilder42.rewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder47 = multiMatchQueryBuilder42.rewrite("{\n  \"multiMatch\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzyRewrite\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertTrue("'" + type13 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX + "'", type13.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX));
        org.junit.Assert.assertTrue("'" + float14 + "' != '" + 0.0f + "'", float14 == 0.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertTrue("'" + type20 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type20.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertTrue("'" + type21 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type21.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder35);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder37);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "{\n  \"multiMatch\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"type\" : \"phrase_prefix\",\n    \"maxExpansions\" : 10,\n    \"fuzzyRewrite\" : \"\",\n    \"tieBreaker\" : 0.0,\n    \"cutoffFrequency\" : 0.0,\n    \"boost\" : 1.0\n  }\n}" + "'", str43, "{\n  \"multiMatch\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"type\" : \"phrase_prefix\",\n    \"maxExpansions\" : 10,\n    \"fuzzyRewrite\" : \"\",\n    \"tieBreaker\" : 0.0,\n    \"cutoffFrequency\" : 0.0,\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder45);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder47);
    }

    @Test
    public void test15335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15335");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder10.field("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder10.boost(0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder16.analyzer("multi_match");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder18.maxExpansions(1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder20.rewrite("{\n  \"multiMatch\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\", \"\" ],\n    \"analyzer\" : \"multi_match\",\n    \"maxExpansions\" : -1,\n    \"fuzzyRewrite\" : \"hi!\",\n    \"useDisMax\" : true,\n    \"boost\" : 0.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder22.minimumShouldMatch("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"analyzer\" : \"multi_match\",\n    \"slop\" : -1,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0,\n    \"_name\" : \"hi!\"\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder24.slop((-1));
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = multiMatchQueryBuilder24.analyzer("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\", \"\", \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"fuzzy_rewrite\\\" : \\\"{\\\\n  \\\\\\\"multi_match\\\\\\\" : {\\\\n    \\\\\\\"query\\\\\\\" : 0.0,\\\\n    \\\\\\\"fields\\\\\\\" : [ \\\\\\\"hi!\\\\\\\", \\\\\\\"\\\\\\\", \\\\\\\"\\\\\\\", \\\\\\\"\\\\\\\", \\\\\\\"\\\\\\\", \\\\\\\"\\\\\\\" ],\\\\n    \\\\\\\"slop\\\\\\\" : -1,\\\\n    \\\\\\\"fuzzy_rewrite\\\\\\\" : \\\\\\\"hi!\\\\\\\",\\\\n    \\\\\\\"lenient\\\\\\\" : true,\\\\n    \\\\\\\"boost\\\\\\\" : 1.0\\\\n  }\\\\n}\\\",\\n    \\\"boost\\\" : 1.0,\\n    \\\"_name\\\" : \\\"hi!\\\"\\n  }\\n}\" ],\n    \"analyzer\" : \"multi_match\",\n    \"prefix_length\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"use_dis_max\" : true,\n    \"tie_breaker\" : 97.0,\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder28);
    }

    @Test
    public void test15336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15336");
        java.lang.Object obj0 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type1 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX;
        float float2 = type1.tieBreaker();
        float float3 = type1.tieBreaker();
        org.elasticsearch.index.search.MatchQuery.Type type4 = type1.matchQueryType();
        java.lang.String[] strArray12 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray12);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder13.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder13.queryName("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.Operator operator18 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder17.operator(operator18);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder19.lenient(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder21.maxExpansions((int) (short) 1);
        java.lang.String[] strArray31 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder32 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray31);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder33 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) multiMatchQueryBuilder21, strArray31);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder34 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) type1, strArray31);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder35 = new org.elasticsearch.index.query.MultiMatchQueryBuilder(obj0, strArray31);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder37 = multiMatchQueryBuilder35.minimumShouldMatch("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"slop\\\" : -1,\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"lenient\\\" : true,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"boost\" : 1.0,\n    \"_name\" : \"hi!\"\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder40 = multiMatchQueryBuilder35.field("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"type\" : \"phrase_prefix\",\n    \"prefix_length\" : 0,\n    \"fuzzy_rewrite\" : \"{\\n  \\\"multiMatch\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"type\\\" : \\\"phrase_prefix\\\",\\n    \\\"maxExpansions\\\" : 10,\\n    \\\"fuzzyRewrite\\\" : \\\"\\\",\\n    \\\"tieBreaker\\\" : 0.0,\\n    \\\"cutoffFrequency\\\" : 0.0,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"tie_breaker\" : 0.0,\n    \"cutoff_frequency\" : 0.0,\n    \"boost\" : 1.0\n  }\n}", 0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder42 = multiMatchQueryBuilder35.lenient(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder44 = multiMatchQueryBuilder42.maxExpansions((int) (byte) 0);
        org.junit.Assert.assertTrue("'" + type1 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX + "'", type1.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX));
        org.junit.Assert.assertTrue("'" + float2 + "' != '" + 0.0f + "'", float2 == 0.0f);
        org.junit.Assert.assertTrue("'" + float3 + "' != '" + 0.0f + "'", float3 == 0.0f);
        org.junit.Assert.assertTrue("'" + type4 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX + "'", type4.equals(org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX));
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder37);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder40);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder42);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder44);
    }

    @Test
    public void test15337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15337");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder10.field("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder10.boost(0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder16.analyzer("multi_match");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder18.maxExpansions(1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder18.cutoffFrequency((float) (short) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder18.field("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}", (float) 0);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery26 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder18.zeroTermsQuery(zeroTermsQuery26);
        java.lang.String[] strArray35 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder36 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray35);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder38 = multiMatchQueryBuilder36.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder40 = multiMatchQueryBuilder38.fuzzyRewrite("hi!");
        java.lang.String str41 = multiMatchQueryBuilder38.getName();
        float float42 = multiMatchQueryBuilder38.boost();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder44 = multiMatchQueryBuilder38.lenient(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder46 = multiMatchQueryBuilder38.slop((int) (short) -1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type47 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX;
        org.elasticsearch.index.search.MatchQuery.Type type48 = type47.matchQueryType();
        org.elasticsearch.index.search.MatchQuery.Type type49 = type47.matchQueryType();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder50 = multiMatchQueryBuilder38.type(type47);
        org.elasticsearch.common.ParseField parseField51 = type47.parseField();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder52 = multiMatchQueryBuilder18.fuzziness((java.lang.Object) type47);
        float float53 = type47.tieBreaker();
        org.elasticsearch.index.search.MatchQuery.Type type54 = type47.matchQueryType();
        float float55 = type47.tieBreaker();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder38);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "multi_match" + "'", str41, "multi_match");
        org.junit.Assert.assertTrue("'" + float42 + "' != '" + 1.0f + "'", float42 == 1.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder44);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder46);
        org.junit.Assert.assertTrue("'" + type47 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX + "'", type47.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX));
        org.junit.Assert.assertTrue("'" + type48 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX + "'", type48.equals(org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX));
        org.junit.Assert.assertTrue("'" + type49 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX + "'", type49.equals(org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder50);
        org.junit.Assert.assertNotNull(parseField51);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder52);
        org.junit.Assert.assertTrue("'" + float53 + "' != '" + 0.0f + "'", float53 == 0.0f);
        org.junit.Assert.assertTrue("'" + type54 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX + "'", type54.equals(org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX));
        org.junit.Assert.assertTrue("'" + float55 + "' != '" + 0.0f + "'", float55 == 0.0f);
    }

    @Test
    public void test15338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15338");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.tieBreaker(0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type13 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX;
        float float14 = type13.tieBreaker();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder10.type(type13);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder10.cutoffFrequency((float) 0L);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder10.lenient(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type20 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        org.elasticsearch.index.search.MatchQuery.Type type21 = type20.matchQueryType();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder10.type(type20);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder10.useDisMax(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder10.prefixLength((int) (short) 10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = multiMatchQueryBuilder10.useDisMax(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder30 = multiMatchQueryBuilder10.lenient(false);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertTrue("'" + type13 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX + "'", type13.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX));
        org.junit.Assert.assertTrue("'" + float14 + "' != '" + 0.0f + "'", float14 == 0.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertTrue("'" + type20 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type20.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertTrue("'" + type21 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type21.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder28);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder30);
    }

    @Test
    public void test15339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15339");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.tieBreaker(0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder10.cutoffFrequency((float) 0L);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder14.analyzer("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder16.field("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"slop\" : -1,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String[] strArray26 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray26);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = multiMatchQueryBuilder27.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = multiMatchQueryBuilder29.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder33 = multiMatchQueryBuilder29.field("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder35 = multiMatchQueryBuilder29.boost(0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder37 = multiMatchQueryBuilder35.analyzer("multi_match");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder39 = multiMatchQueryBuilder37.useDisMax(true);
        java.lang.String str40 = multiMatchQueryBuilder37.getName();
        java.lang.Object obj41 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder42 = multiMatchQueryBuilder37.type(obj41);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder43 = null; // flaky: multiMatchQueryBuilder18.fuzziness((java.lang.Object) multiMatchQueryBuilder42);
        java.lang.String[] strArray51 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder52 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray51);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder54 = multiMatchQueryBuilder52.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder56 = multiMatchQueryBuilder54.tieBreaker(0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type57 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX;
        float float58 = type57.tieBreaker();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder59 = multiMatchQueryBuilder54.type(type57);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder61 = multiMatchQueryBuilder54.cutoffFrequency((float) 0L);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder63 = multiMatchQueryBuilder54.lenient(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type64 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX;
        float float65 = type64.tieBreaker();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder66 = multiMatchQueryBuilder63.type(type64);
        org.elasticsearch.index.search.MatchQuery.Type type67 = type64.matchQueryType();
        float float68 = type64.tieBreaker();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder69 = multiMatchQueryBuilder42.type(type64);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder71 = multiMatchQueryBuilder69.minimumShouldMatch("{\n  \"multiMatch\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"minimumShouldMatch\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"slop\\\" : -1,\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"lenient\\\" : true,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder74 = multiMatchQueryBuilder69.field("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"type\" : \"phrase_prefix\",\n    \"slop\" : -1,\n    \"fuzzy_rewrite\" : \"{\\n  \\\"multiMatch\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"fuzzyRewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"lenient\" : true,\n    \"cutoff_frequency\" : 35.0,\n    \"boost\" : 1.0\n  }\n}", (float) 1);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder29);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder31);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder33);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder35);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder37);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "multi_match" + "'", str40, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder42);
// flaky:         org.junit.Assert.assertNotNull(multiMatchQueryBuilder43);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder54);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder56);
        org.junit.Assert.assertTrue("'" + type57 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX + "'", type57.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX));
        org.junit.Assert.assertTrue("'" + float58 + "' != '" + 0.0f + "'", float58 == 0.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder59);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder61);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder63);
        org.junit.Assert.assertTrue("'" + type64 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX + "'", type64.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX));
        org.junit.Assert.assertTrue("'" + float65 + "' != '" + 0.0f + "'", float65 == 0.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder66);
        org.junit.Assert.assertTrue("'" + type67 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX + "'", type67.equals(org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX));
        org.junit.Assert.assertTrue("'" + float68 + "' != '" + 0.0f + "'", float68 == 0.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder69);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder71);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder74);
    }

    @Test
    public void test15340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15340");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery13 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder12.zeroTermsQuery(zeroTermsQuery13);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder14.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder16.queryName("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder18.analyzer("multi_match");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder18.field("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"slop\" : -1,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}", 0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder18.queryName("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder18.tieBreaker((float) (-1L));
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = multiMatchQueryBuilder27.rewrite("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"slop\\\" : -1,\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"lenient\\\" : true,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"boost\" : 1.0,\n    \"_name\" : \"hi!\"\n  }\n}");
        java.lang.String[] strArray37 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder38 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray37);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder40 = multiMatchQueryBuilder38.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder42 = multiMatchQueryBuilder40.fuzzyRewrite("hi!");
        java.lang.String str43 = multiMatchQueryBuilder40.getName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder45 = multiMatchQueryBuilder40.rewrite("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"slop\" : -1,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder47 = multiMatchQueryBuilder40.tieBreaker((float) '4');
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder49 = multiMatchQueryBuilder40.minimumShouldMatch("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder51 = multiMatchQueryBuilder49.prefixLength(10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder53 = multiMatchQueryBuilder49.cutoffFrequency((float) 10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder55 = multiMatchQueryBuilder49.minimumShouldMatch("{\n  \"multiMatch\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"analyzer\" : \"hi!\",\n    \"fuzzyRewrite\" : \"hi!\",\n    \"boost\" : 1.0,\n    \"Name\" : \"hi!\"\n  }\n}");
        java.lang.String[] strArray63 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder64 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray63);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder66 = multiMatchQueryBuilder64.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder68 = multiMatchQueryBuilder66.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.Operator operator69 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder70 = multiMatchQueryBuilder68.operator(operator69);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder72 = multiMatchQueryBuilder68.boost((float) (-1));
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder73 = null; // flaky: multiMatchQueryBuilder55.fuzziness((java.lang.Object) multiMatchQueryBuilder72);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type74 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        float float75 = type74.tieBreaker();
        org.elasticsearch.common.ParseField parseField76 = type74.parseField();
        org.elasticsearch.common.ParseField parseField77 = type74.parseField();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder78 = multiMatchQueryBuilder72.type(type74);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder79 = multiMatchQueryBuilder29.type(type74);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder81 = multiMatchQueryBuilder29.boost((float) (byte) 0);
        java.lang.Class<?> wildcardClass82 = multiMatchQueryBuilder29.getClass();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder29);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder40);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "multi_match" + "'", str43, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder45);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder47);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder49);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder51);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder53);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder55);
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder66);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder68);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder70);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder72);
// flaky:         org.junit.Assert.assertNotNull(multiMatchQueryBuilder73);
        org.junit.Assert.assertTrue("'" + type74 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type74.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertTrue("'" + float75 + "' != '" + 0.0f + "'", float75 == 0.0f);
        org.junit.Assert.assertNotNull(parseField76);
        org.junit.Assert.assertNotNull(parseField77);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder78);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder79);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder81);
        org.junit.Assert.assertNotNull(wildcardClass82);
    }

    @Test
    public void test15341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15341");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.fuzzyRewrite("hi!");
        java.lang.String str13 = multiMatchQueryBuilder10.getName();
        float float14 = multiMatchQueryBuilder10.boost();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder10.lenient(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder10.slop((int) (short) -1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type19 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX;
        org.elasticsearch.index.search.MatchQuery.Type type20 = type19.matchQueryType();
        org.elasticsearch.index.search.MatchQuery.Type type21 = type19.matchQueryType();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder10.type(type19);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder10.queryName("multi_match");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder24.minimumShouldMatch("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = multiMatchQueryBuilder26.field("", (float) 10L);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = multiMatchQueryBuilder29.boost((float) (short) 10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder33 = multiMatchQueryBuilder31.prefixLength((int) '#');
        java.lang.String[] strArray35 = new java.lang.String[] { "{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"analyzer\" : \"hi!\",\n    \"minimum_should_match\" : \"{\\n  \\\"multiMatch\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"type\\\" : \\\"phrase_prefix\\\",\\n    \\\"maxExpansions\\\" : 10,\\n    \\\"fuzzyRewrite\\\" : \\\"\\\",\\n    \\\"tieBreaker\\\" : 0.0,\\n    \\\"cutoffFrequency\\\" : 0.0,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"lenient\" : false,\n    \"cutoff_frequency\" : -1.0,\n    \"boost\" : 1.0\n  }\n}" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder36 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) multiMatchQueryBuilder33, strArray35);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder38 = multiMatchQueryBuilder33.queryName("{\n  \"multiMatch\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"rewrite\" : \"multi_match\",\n    \"fuzzyRewrite\" : \"hi!\",\n    \"lenient\" : false,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder40 = multiMatchQueryBuilder38.tieBreaker(0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder42 = multiMatchQueryBuilder40.useDisMax(true);
        java.lang.String str43 = multiMatchQueryBuilder40.getName();
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder44 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params45 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        // The following exception was thrown during execution in test generation
        try {
            multiMatchQueryBuilder40.doXContent(xContentBuilder44, params45);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "multi_match" + "'", str13, "multi_match");
        org.junit.Assert.assertTrue("'" + float14 + "' != '" + 1.0f + "'", float14 == 1.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertTrue("'" + type19 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX + "'", type19.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX));
        org.junit.Assert.assertTrue("'" + type20 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX + "'", type20.equals(org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX));
        org.junit.Assert.assertTrue("'" + type21 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX + "'", type21.equals(org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder29);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder31);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder33);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder38);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder40);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "multi_match" + "'", str43, "multi_match");
        org.junit.Assert.assertNotNull(params45);
    }

    @Test
    public void test15342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15342");
        org.elasticsearch.common.xcontent.XContent xContent0 = null;
        java.lang.String[] strArray8 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder9 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray8);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder9.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder11.tieBreaker(0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type14 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX;
        float float15 = type14.tieBreaker();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder11.type(type14);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder11.lenient(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder11.field("{\n  \"multiMatch\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\", \"\", \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"fuzzy_rewrite\\\" : \\\"{\\\\n  \\\\\\\"multi_match\\\\\\\" : {\\\\n    \\\\\\\"query\\\\\\\" : 0.0,\\\\n    \\\\\\\"fields\\\\\\\" : [ \\\\\\\"hi!\\\\\\\", \\\\\\\"\\\\\\\", \\\\\\\"\\\\\\\", \\\\\\\"\\\\\\\", \\\\\\\"\\\\\\\", \\\\\\\"\\\\\\\" ],\\\\n    \\\\\\\"slop\\\\\\\" : -1,\\\\n    \\\\\\\"fuzzy_rewrite\\\\\\\" : \\\\\\\"hi!\\\\\\\",\\\\n    \\\\\\\"lenient\\\\\\\" : true,\\\\n    \\\\\\\"boost\\\\\\\" : 1.0\\\\n  }\\\\n}\\\",\\n    \\\"boost\\\" : 1.0,\\n    \\\"_name\\\" : \\\"hi!\\\"\\n  }\\n}\" ],\n    \"analyzer\" : \"multi_match\",\n    \"fuzzyRewrite\" : \"hi!\",\n    \"useDisMax\" : true,\n    \"boost\" : 1.0\n  }\n}", 100.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder11.lenient(true);
        java.lang.String[] strArray31 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder32 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray31);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder34 = multiMatchQueryBuilder32.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder36 = multiMatchQueryBuilder34.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery37 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder38 = multiMatchQueryBuilder36.zeroTermsQuery(zeroTermsQuery37);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder40 = multiMatchQueryBuilder38.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder42 = multiMatchQueryBuilder40.queryName("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder44 = multiMatchQueryBuilder40.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder46 = multiMatchQueryBuilder40.analyzer("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder48 = multiMatchQueryBuilder40.tieBreaker((float) 0);
        java.lang.String[] strArray51 = new java.lang.String[] { "{\n  \"multiMatch\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzyRewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder52 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (short) 100, strArray51);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder53 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0, strArray51);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder54 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) true, strArray51);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder55 = null; // flaky: org.elasticsearch.common.xcontent.XContentBuilder.builder(xContent0, strArray51);
// flaky:             org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertTrue("'" + type14 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX + "'", type14.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX));
        org.junit.Assert.assertTrue("'" + float15 + "' != '" + 0.0f + "'", float15 == 0.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder34);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder36);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder38);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder40);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder42);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder44);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder46);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder48);
        org.junit.Assert.assertNotNull(strArray51);
    }

    @Test
    public void test15343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15343");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder8.queryName("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.Operator operator13 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder12.operator(operator13);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder14.field("");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery17 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder16.zeroTermsQuery(zeroTermsQuery17);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder18.maxExpansions((int) (byte) 10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder20.field("{\n  \"multiMatch\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"analyzer\" : \"hi!\",\n    \"fuzzyRewrite\" : \"hi!\",\n    \"boost\" : 1.0,\n    \"Name\" : \"hi!\"\n  }\n}");
        java.lang.String[] strArray30 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray30);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder33 = multiMatchQueryBuilder31.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder35 = multiMatchQueryBuilder33.fuzzyRewrite("hi!");
        java.lang.String str36 = multiMatchQueryBuilder33.getName();
        float float37 = multiMatchQueryBuilder33.boost();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder39 = multiMatchQueryBuilder33.lenient(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder41 = multiMatchQueryBuilder33.slop((int) (short) -1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type42 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX;
        org.elasticsearch.index.search.MatchQuery.Type type43 = type42.matchQueryType();
        org.elasticsearch.index.search.MatchQuery.Type type44 = type42.matchQueryType();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder45 = multiMatchQueryBuilder33.type(type42);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder47 = multiMatchQueryBuilder45.fuzzyRewrite("{\n  \"multiMatch\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzyRewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder49 = multiMatchQueryBuilder47.cutoffFrequency((float) '#');
        java.lang.String str50 = multiMatchQueryBuilder49.getWriteableName();
        java.lang.String str51 = multiMatchQueryBuilder49.queryName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder53 = multiMatchQueryBuilder49.field("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"analyzer\" : \"multi_match\",\n    \"fuzziness\" : \"{\\n  \\\"MULTI_MATCH\\\" : {\\n    \\\"QUERY\\\" : 0.0,\\n    \\\"FIELDS\\\" : [ \\\"HI!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"ANALYZER\\\" : \\\"MULTI_MATCH\\\",\\n    \\\"MAX_EXPANSIONS\\\" : 1,\\n    \\\"FUZZY_REWRITE\\\" : \\\"HI!\\\",\\n    \\\"CUTOFF_FREQUENCY\\\" : 0.0,\\n    \\\"BOOST\\\" : 0.0\\n  }\\n}\",\n    \"prefix_length\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0,\n    \"_name\" : \"hi!\"\n  }\n}");
        java.lang.String str54 = multiMatchQueryBuilder49.getName();
        boolean boolean55 = multiMatchQueryBuilder22.equals((java.lang.Object) str54);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder33);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "multi_match" + "'", str36, "multi_match");
        org.junit.Assert.assertTrue("'" + float37 + "' != '" + 1.0f + "'", float37 == 1.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder39);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder41);
        org.junit.Assert.assertTrue("'" + type42 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX + "'", type42.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX));
        org.junit.Assert.assertTrue("'" + type43 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX + "'", type43.equals(org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX));
        org.junit.Assert.assertTrue("'" + type44 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX + "'", type44.equals(org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder45);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder47);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "multi_match" + "'", str50, "multi_match");
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "multi_match" + "'", str54, "multi_match");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
    }

    @Test
    public void test15344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15344");
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type2 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.parse("{\n  \"multiMatch\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"^1.0\", \"^1.0\", \"^1.0\", \"^1.0\", \"^1.0\", \"^1.0\" ],\n    \"type\" : \"phrase_prefix\",\n    \"fuzzyRewrite\" : \"\",\n    \"tieBreaker\" : 0.0,\n    \"cutoffFrequency\" : 0.0,\n    \"boost\" : 1.0,\n    \"Name\" : \"multi_match\"\n  }\n}", parseFieldMatcher1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test15345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15345");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery13 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder12.zeroTermsQuery(zeroTermsQuery13);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder14.analyzer("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"minimum_should_match\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"slop\\\" : -1,\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"lenient\\\" : true,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.Operator operator17 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder16.operator(operator17);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder16.tieBreaker((float) 0L);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder16.field("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"type\" : \"phrase_prefix\",\n    \"analyzer\" : \"{\\n  \\\"multiMatch\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"type\\\" : \\\"phrase_prefix\\\",\\n    \\\"maxExpansions\\\" : 10,\\n    \\\"fuzzyRewrite\\\" : \\\"\\\",\\n    \\\"tieBreaker\\\" : 0.0,\\n    \\\"cutoffFrequency\\\" : 0.0,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"slop\" : 32,\n    \"prefix_length\" : 0,\n    \"rewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"lenient\" : false,\n    \"boost\" : 1.0\n  }\n}", 0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder16.fuzzyRewrite("{\n  \"multiMatch\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"multi_match^0.0\" ],\n    \"fuzzyRewrite\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 0.0\n  }\n}");
        org.elasticsearch.index.query.Operator operator26 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder16.operator(operator26);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = multiMatchQueryBuilder16.cutoffFrequency(35.0f);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder29);
    }

    @Test
    public void test15346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15346");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.fuzzyRewrite("hi!");
        java.lang.String str13 = multiMatchQueryBuilder10.getName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder10.rewrite("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"slop\" : -1,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder10.tieBreaker((float) '4');
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery18 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder10.zeroTermsQuery(zeroTermsQuery18);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder19.rewrite("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"max_expansions\" : 1,\n    \"minimum_should_match\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"fuzzy_rewrite\" : \"\",\n    \"lenient\" : true,\n    \"boost\" : 1.0,\n    \"_name\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\"\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type22 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX;
        float float23 = type22.tieBreaker();
        org.elasticsearch.index.search.MatchQuery.Type type24 = type22.matchQueryType();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder19.type(type22);
        org.elasticsearch.common.ParseField parseField26 = type22.parseField();
        float float27 = type22.tieBreaker();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "multi_match" + "'", str13, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertTrue("'" + type22 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX + "'", type22.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX));
        org.junit.Assert.assertTrue("'" + float23 + "' != '" + 0.0f + "'", float23 == 0.0f);
        org.junit.Assert.assertTrue("'" + type24 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX + "'", type24.equals(org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
        org.junit.Assert.assertNotNull(parseField26);
        org.junit.Assert.assertTrue("'" + float27 + "' != '" + 0.0f + "'", float27 == 0.0f);
    }

    @Test
    public void test15347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15347");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder8.queryName("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.Operator operator13 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder12.operator(operator13);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder12.field("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"analyzer\" : \"multi_match\",\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}", 10.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder17.field("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery20 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder17.zeroTermsQuery(zeroTermsQuery20);
        org.elasticsearch.index.query.Operator operator22 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder21.operator(operator22);
        java.lang.String[] strArray31 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder32 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray31);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder34 = multiMatchQueryBuilder32.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder36 = multiMatchQueryBuilder34.fuzzyRewrite("hi!");
        java.lang.String str37 = multiMatchQueryBuilder34.getName();
        float float38 = multiMatchQueryBuilder34.boost();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder40 = multiMatchQueryBuilder34.lenient(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder42 = multiMatchQueryBuilder34.queryName("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder44 = multiMatchQueryBuilder34.cutoffFrequency((float) (-1L));
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder46 = multiMatchQueryBuilder34.useDisMax(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder47 = multiMatchQueryBuilder23.fuzziness((java.lang.Object) true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder49 = multiMatchQueryBuilder47.minimumShouldMatch("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"analyzer\" : \"multi_match\",\n    \"slop\" : -1,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0,\n    \"_name\" : \"hi!\"\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder51 = multiMatchQueryBuilder49.maxExpansions((int) (byte) 10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder53 = multiMatchQueryBuilder49.fuzzyRewrite("{\n  \"multiMatch\" : {\n    \"query\" : 100,\n    \"fields\" : [ \"{\\n  \\\"multiMatch\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"fuzzyRewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\" ],\n    \"cutoffFrequency\" : 0.0,\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder34);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "multi_match" + "'", str37, "multi_match");
        org.junit.Assert.assertTrue("'" + float38 + "' != '" + 1.0f + "'", float38 == 1.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder40);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder42);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder44);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder46);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder47);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder49);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder51);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder53);
    }

    @Test
    public void test15348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15348");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder12.lenient(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder14.rewrite("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String str17 = multiMatchQueryBuilder16.getWriteableName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder16.cutoffFrequency((float) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type20 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE;
        org.elasticsearch.index.search.MatchQuery.Type type21 = type20.matchQueryType();
        org.elasticsearch.common.ParseField parseField22 = type20.parseField();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder19.type(type20);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder23.field("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"^1.0\", \"^1.0\", \"^1.0\", \"^1.0\", \"^1.0\", \"^1.0\" ],\n    \"type\" : \"phrase_prefix\",\n    \"fuzzy_rewrite\" : \"\",\n    \"tie_breaker\" : 52.0,\n    \"cutoff_frequency\" : 0.0,\n    \"boost\" : 1.0,\n    \"_name\" : \"multi_match\"\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder25.maxExpansions(100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = multiMatchQueryBuilder27.slop(0);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "multi_match" + "'", str17, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertTrue("'" + type20 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE + "'", type20.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE));
        org.junit.Assert.assertTrue("'" + type21 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.PHRASE + "'", type21.equals(org.elasticsearch.index.search.MatchQuery.Type.PHRASE));
        org.junit.Assert.assertNotNull(parseField22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder29);
    }

    @Test
    public void test15349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15349");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        java.lang.String[] strArray18 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray18);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder19.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder21.tieBreaker(0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type24 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX;
        float float25 = type24.tieBreaker();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder21.type(type24);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = multiMatchQueryBuilder21.cutoffFrequency((float) 0L);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder30 = multiMatchQueryBuilder21.lenient(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type31 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        org.elasticsearch.index.search.MatchQuery.Type type32 = type31.matchQueryType();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder33 = multiMatchQueryBuilder21.type(type31);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder34 = multiMatchQueryBuilder8.fuzziness((java.lang.Object) type31);
        org.elasticsearch.index.query.Operator operator35 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder36 = multiMatchQueryBuilder34.operator(operator35);
        java.lang.String[] strArray44 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder45 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray44);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder47 = multiMatchQueryBuilder45.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder49 = multiMatchQueryBuilder47.fuzzyRewrite("hi!");
        java.lang.String str50 = multiMatchQueryBuilder47.getName();
        float float51 = multiMatchQueryBuilder47.boost();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder53 = multiMatchQueryBuilder47.lenient(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder55 = multiMatchQueryBuilder47.slop((int) (short) -1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type56 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX;
        org.elasticsearch.index.search.MatchQuery.Type type57 = type56.matchQueryType();
        org.elasticsearch.index.search.MatchQuery.Type type58 = type56.matchQueryType();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder59 = multiMatchQueryBuilder47.type(type56);
        org.elasticsearch.index.search.MatchQuery.Type type60 = type56.matchQueryType();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder61 = multiMatchQueryBuilder36.fuzziness((java.lang.Object) type60);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder63 = multiMatchQueryBuilder61.boost((float) 'a');
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder65 = multiMatchQueryBuilder61.fuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\", \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"slop\\\" : -1,\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"lenient\\\" : true,\\n    \\\"boost\\\" : 1.0\\n  }\\n}^0.0\" ],\n    \"analyzer\" : \"multi_match\",\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0,\n    \"_name\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\"\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder67 = multiMatchQueryBuilder61.slop(0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder70 = multiMatchQueryBuilder61.field("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\", \"\" ],\n    \"type\" : \"cross_fields\",\n    \"analyzer\" : \"multi_match\",\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"use_dis_max\" : true,\n    \"boost\" : 0.0\n  }\n}", (float) ' ');
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder72 = multiMatchQueryBuilder61.cutoffFrequency(100.0f);
        java.lang.String str73 = multiMatchQueryBuilder61.getWriteableName();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertTrue("'" + type24 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX + "'", type24.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX));
        org.junit.Assert.assertTrue("'" + float25 + "' != '" + 0.0f + "'", float25 == 0.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder28);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder30);
        org.junit.Assert.assertTrue("'" + type31 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type31.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertTrue("'" + type32 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type32.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder33);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder34);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder36);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder47);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "multi_match" + "'", str50, "multi_match");
        org.junit.Assert.assertTrue("'" + float51 + "' != '" + 1.0f + "'", float51 == 1.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder53);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder55);
        org.junit.Assert.assertTrue("'" + type56 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX + "'", type56.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX));
        org.junit.Assert.assertTrue("'" + type57 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX + "'", type57.equals(org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX));
        org.junit.Assert.assertTrue("'" + type58 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX + "'", type58.equals(org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder59);
        org.junit.Assert.assertTrue("'" + type60 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX + "'", type60.equals(org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder61);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder63);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder65);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder67);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder70);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder72);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "multi_match" + "'", str73, "multi_match");
    }

    @Test
    public void test15350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15350");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder12.tieBreaker((float) '#');
        java.lang.String str15 = multiMatchQueryBuilder12.queryName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder12.tieBreaker((float) 'a');
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder12.minimumShouldMatch("{\n  \"multiMatch\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzyRewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder12.analyzer("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"analyzer\" : \"{\\n  \\\"multiMatch\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"rewrite\\\" : \\\"multi_match\\\",\\n    \\\"fuzzyRewrite\\\" : \\\"hi!\\\",\\n    \\\"lenient\\\" : false,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder21.cutoffFrequency((float) 1L);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder21.analyzer("{\n  \"multiMatch\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"type\" : \"phrase_prefix\",\n    \"analyzer\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"type\\\" : \\\"phrase_prefix\\\",\\n    \\\"max_expansions\\\" : 10,\\n    \\\"fuzzy_rewrite\\\" : \\\"\\\",\\n    \\\"tie_breaker\\\" : 0.0,\\n    \\\"cutoff_frequency\\\" : 0.0,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"slop\" : -1,\n    \"fuzzyRewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"analyzer\\\" : \\\"multi_match\\\",\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"lenient\" : true,\n    \"cutoffFrequency\" : 10.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder25.prefixLength((int) (byte) 100);
        java.lang.String str28 = multiMatchQueryBuilder25.queryName();
        java.lang.String[] strArray36 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder37 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray36);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder39 = multiMatchQueryBuilder37.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder41 = multiMatchQueryBuilder39.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder43 = multiMatchQueryBuilder39.field("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder45 = multiMatchQueryBuilder39.boost(0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder47 = multiMatchQueryBuilder45.analyzer("multi_match");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder49 = multiMatchQueryBuilder47.useDisMax(true);
        java.lang.String str50 = multiMatchQueryBuilder47.getName();
        java.lang.Object obj51 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder52 = multiMatchQueryBuilder47.type(obj51);
        java.lang.String[] strArray60 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder61 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray60);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder63 = multiMatchQueryBuilder61.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder65 = multiMatchQueryBuilder63.fuzzyRewrite("hi!");
        java.lang.String str66 = multiMatchQueryBuilder63.getName();
        float float67 = multiMatchQueryBuilder63.boost();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder69 = multiMatchQueryBuilder63.lenient(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder71 = multiMatchQueryBuilder63.slop((int) (short) -1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type72 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX;
        org.elasticsearch.index.search.MatchQuery.Type type73 = type72.matchQueryType();
        org.elasticsearch.index.search.MatchQuery.Type type74 = type72.matchQueryType();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder75 = multiMatchQueryBuilder63.type(type72);
        org.elasticsearch.common.ParseField parseField76 = type72.parseField();
        boolean boolean77 = multiMatchQueryBuilder52.equals((java.lang.Object) type72);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder78 = multiMatchQueryBuilder25.type(type72);
        org.elasticsearch.index.query.QueryValidationException queryValidationException79 = multiMatchQueryBuilder25.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder81 = multiMatchQueryBuilder25.minimumShouldMatch("{\n  \"multiMatch\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"rewrite\" : \"{\\n  \\\"multiMatch\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"minimumShouldMatch\\\" : \\\"{\\\\n  \\\\\\\"multi_match\\\\\\\" : {\\\\n    \\\\\\\"query\\\\\\\" : 0.0,\\\\n    \\\\\\\"fields\\\\\\\" : [ \\\\\\\"hi!\\\\\\\", \\\\\\\"\\\\\\\", \\\\\\\"\\\\\\\", \\\\\\\"\\\\\\\", \\\\\\\"\\\\\\\", \\\\\\\"\\\\\\\" ],\\\\n    \\\\\\\"slop\\\\\\\" : -1,\\\\n    \\\\\\\"fuzzy_rewrite\\\\\\\" : \\\\\\\"hi!\\\\\\\",\\\\n    \\\\\\\"lenient\\\\\\\" : true,\\\\n    \\\\\\\"boost\\\\\\\" : 1.0\\\\n  }\\\\n}\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"fuzzyRewrite\" : \"multi_match\",\n    \"lenient\" : false,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder83 = multiMatchQueryBuilder25.fuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"type\" : \"phrase_prefix\",\n    \"fuzziness\" : \"PHRASE_PREFIX\",\n    \"fuzzy_rewrite\" : \"\",\n    \"tie_breaker\" : 0.0,\n    \"lenient\" : false,\n    \"cutoff_frequency\" : 0.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder85 = multiMatchQueryBuilder83.boost((float) 0);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder39);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder41);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder43);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder45);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder47);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "multi_match" + "'", str50, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder52);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder63);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "multi_match" + "'", str66, "multi_match");
        org.junit.Assert.assertTrue("'" + float67 + "' != '" + 1.0f + "'", float67 == 1.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder69);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder71);
        org.junit.Assert.assertTrue("'" + type72 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX + "'", type72.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX));
        org.junit.Assert.assertTrue("'" + type73 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX + "'", type73.equals(org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX));
        org.junit.Assert.assertTrue("'" + type74 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX + "'", type74.equals(org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder75);
        org.junit.Assert.assertNotNull(parseField76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder78);
        org.junit.Assert.assertNull(queryValidationException79);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder81);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder83);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder85);
    }

    @Test
    public void test15351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15351");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder8.queryName("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.Operator operator13 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder12.operator(operator13);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder12.field("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"analyzer\" : \"multi_match\",\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}", 10.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder12.field("{\n  \"multiMatch\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzyRewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}", 0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder20.prefixLength((int) ' ');
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder22.fuzzyRewrite("{\n  \"multiMatch\" : {\n    \"query\" : \"class org.elasticsearch.index.query.MultiMatchQueryBuilder$Type\",\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"boost\" : 1.0,\n    \"Name\" : \"{\\n  \\\"multiMatch\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"fuzzyRewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\"\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder24.minimumShouldMatch("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"type\" : \"phrase_prefix\",\n    \"slop\" : -1,\n    \"minimum_should_match\" : \"hi!\",\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"lenient\" : true,\n    \"cutoff_frequency\" : 97.0,\n    \"boost\" : 1.0,\n    \"_name\" : \"{\\n  \\\"multiMatch\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"fuzzyRewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\"\n  }\n}");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery27 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = multiMatchQueryBuilder24.zeroTermsQuery(zeroTermsQuery27);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder28);
    }

    @Test
    public void test15352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15352");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery13 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder12.zeroTermsQuery(zeroTermsQuery13);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder14.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder16.queryName("hi!");
        java.lang.String str19 = multiMatchQueryBuilder16.queryName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder16.rewrite("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"max_expansions\" : 1,\n    \"fuzzy_rewrite\" : \"\",\n    \"lenient\" : true,\n    \"boost\" : 1.0,\n    \"_name\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\"\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder21.slop((int) ' ');
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder21.tieBreaker((float) (byte) 1);
        org.elasticsearch.common.xcontent.XContentType xContentType26 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.bytes.BytesReference bytesReference27 = multiMatchQueryBuilder21.buildAsBytes(xContentType26);
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchException; message: Failed to build ToXContent");
        } catch (org.elasticsearch.ElasticsearchException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
    }

    @Test
    public void test15353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15353");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder12.lenient(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder14.rewrite("multi_match");
        java.lang.String str17 = multiMatchQueryBuilder16.getWriteableName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder16.analyzer("{\n  \"multiMatch\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzyRewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder16.slop(100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder16.lenient(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder23.rewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder25.maxExpansions((int) 'a');
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = multiMatchQueryBuilder25.rewrite("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"rewrite\" : \"{\\n  \\\"multiMatch\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"fuzzyRewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 10.0,\n    \"_name\" : \"hi!\"\n  }\n}");
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "multi_match" + "'", str17, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder29);
    }

    @Test
    public void test15354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15354");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder12.lenient(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder14.rewrite("multi_match");
        java.lang.String str17 = multiMatchQueryBuilder16.getWriteableName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder16.analyzer("{\n  \"multiMatch\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzyRewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder19.lenient(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder21.fuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder23.tieBreaker((float) 10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder23.lenient(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = multiMatchQueryBuilder23.cutoffFrequency((float) 'a');
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = multiMatchQueryBuilder23.analyzer("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\", \"hi!\" ],\n    \"minimum_should_match\" : \"{\\n  \\\"multiMatch\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"fuzzyRewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"fuzzy_rewrite\" : \"\",\n    \"tie_breaker\" : 0.0,\n    \"cutoff_frequency\" : 0.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.QueryShardContext queryShardContext32 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.lucene.search.Query query33 = multiMatchQueryBuilder23.toFilter(queryShardContext32);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "multi_match" + "'", str17, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder29);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder31);
    }

    @Test
    public void test15355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15355");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder8.queryName("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.Operator operator13 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder12.operator(operator13);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder14.field("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder16.minimumShouldMatch("{\n  \"multiMatch\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzyRewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String str19 = multiMatchQueryBuilder18.getName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder18.field("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder18.analyzer("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"prefix_length\" : 0,\n    \"rewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"slop\\\" : -1,\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"lenient\\\" : true,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"use_dis_max\" : false,\n    \"tie_breaker\" : 0.0,\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "multi_match" + "'", str19, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
    }

    @Test
    public void test15356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15356");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.fuzzyRewrite("hi!");
        java.lang.String str13 = multiMatchQueryBuilder10.getName();
        float float14 = multiMatchQueryBuilder10.boost();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder10.lenient(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder10.queryName("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder10.cutoffFrequency((float) (-1L));
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder10.useDisMax(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder10.cutoffFrequency((float) (short) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder10.cutoffFrequency((float) (byte) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = multiMatchQueryBuilder10.analyzer("{\n  \"multiMatch\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\", \"\" ],\n    \"analyzer\" : \"multi_match\",\n    \"fuzzyRewrite\" : \"hi!\",\n    \"tieBreaker\" : 100.0,\n    \"boost\" : 0.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder30 = multiMatchQueryBuilder28.slop((int) '#');
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "multi_match" + "'", str13, "multi_match");
        org.junit.Assert.assertTrue("'" + float14 + "' != '" + 1.0f + "'", float14 == 1.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder28);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder30);
    }

    @Test
    public void test15357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15357");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.fuzzyRewrite("hi!");
        java.lang.String str13 = multiMatchQueryBuilder10.getName();
        float float14 = multiMatchQueryBuilder10.boost();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder10.lenient(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder10.slop((int) (short) -1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type19 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX;
        org.elasticsearch.index.search.MatchQuery.Type type20 = type19.matchQueryType();
        org.elasticsearch.index.search.MatchQuery.Type type21 = type19.matchQueryType();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder10.type(type19);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder10.queryName("multi_match");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder24.minimumShouldMatch("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = multiMatchQueryBuilder26.field("", (float) 10L);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = multiMatchQueryBuilder29.boost((float) (short) 10);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery32 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder33 = multiMatchQueryBuilder31.zeroTermsQuery(zeroTermsQuery32);
        java.lang.String[] strArray41 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder42 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray41);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder44 = multiMatchQueryBuilder42.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder46 = multiMatchQueryBuilder44.tieBreaker(0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type47 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX;
        float float48 = type47.tieBreaker();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder49 = multiMatchQueryBuilder44.type(type47);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder51 = multiMatchQueryBuilder44.cutoffFrequency((float) 0L);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder53 = multiMatchQueryBuilder44.maxExpansions(10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder55 = multiMatchQueryBuilder44.analyzer("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"slop\" : -1,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder57 = multiMatchQueryBuilder44.analyzer("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"analyzer\" : \"multi_match\",\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder59 = multiMatchQueryBuilder57.rewrite("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String[] strArray67 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder68 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray67);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder70 = multiMatchQueryBuilder68.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder72 = multiMatchQueryBuilder70.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder74 = multiMatchQueryBuilder72.tieBreaker((float) '#');
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder76 = multiMatchQueryBuilder74.useDisMax(true);
        java.lang.Class<?> wildcardClass77 = multiMatchQueryBuilder74.getClass();
        boolean boolean78 = multiMatchQueryBuilder57.equals((java.lang.Object) multiMatchQueryBuilder74);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder80 = multiMatchQueryBuilder57.prefixLength((int) (short) 10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder82 = multiMatchQueryBuilder57.slop((int) (short) 100);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery83 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder84 = multiMatchQueryBuilder57.zeroTermsQuery(zeroTermsQuery83);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder86 = multiMatchQueryBuilder84.queryName("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"slop\" : 0,\n    \"prefix_length\" : 0,\n    \"rewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"analyzer\\\" : \\\"multi_match\\\",\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"lenient\" : false,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder88 = multiMatchQueryBuilder84.field("{\n  \"multiMatch\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\", \"\" ],\n    \"analyzer\" : \"multi_match\",\n    \"maxExpansions\" : 1,\n    \"fuzzyRewrite\" : \"hi!\",\n    \"tieBreaker\" : 0.0,\n    \"boost\" : 0.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder89 = null; // flaky: multiMatchQueryBuilder31.fuzziness((java.lang.Object) multiMatchQueryBuilder88);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder91 = multiMatchQueryBuilder88.minimumShouldMatch("{\n  \"multiMatch\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"analyzer\" : \"{\\n  \\\"multiMatch\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"rewrite\\\" : \\\"multi_match\\\",\\n    \\\"fuzzyRewrite\\\" : \\\"hi!\\\",\\n    \\\"lenient\\\" : false,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"fuzzyRewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String str92 = multiMatchQueryBuilder91.getName();
        org.elasticsearch.index.query.QueryShardContext queryShardContext93 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.lucene.search.Query query94 = multiMatchQueryBuilder91.toQuery(queryShardContext93);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "multi_match" + "'", str13, "multi_match");
        org.junit.Assert.assertTrue("'" + float14 + "' != '" + 1.0f + "'", float14 == 1.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertTrue("'" + type19 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX + "'", type19.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX));
        org.junit.Assert.assertTrue("'" + type20 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX + "'", type20.equals(org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX));
        org.junit.Assert.assertTrue("'" + type21 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX + "'", type21.equals(org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder29);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder31);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder33);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder44);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder46);
        org.junit.Assert.assertTrue("'" + type47 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX + "'", type47.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX));
        org.junit.Assert.assertTrue("'" + float48 + "' != '" + 0.0f + "'", float48 == 0.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder49);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder51);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder53);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder55);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder57);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder59);
        org.junit.Assert.assertNotNull(strArray67);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder70);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder72);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder74);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder76);
        org.junit.Assert.assertNotNull(wildcardClass77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder80);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder82);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder84);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder86);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder88);
// flaky:         org.junit.Assert.assertNotNull(multiMatchQueryBuilder89);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder91);
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "multi_match" + "'", str92, "multi_match");
    }

    @Test
    public void test15358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15358");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder12.lenient(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder14.rewrite("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery17 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder16.zeroTermsQuery(zeroTermsQuery17);
        java.lang.Object obj19 = null;
        boolean boolean20 = multiMatchQueryBuilder18.equals(obj19);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder18.lenient(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder22.fuzzyRewrite("multi_match");
        org.elasticsearch.common.io.stream.StreamOutput streamOutput25 = null;
        // The following exception was thrown during execution in test generation
        try {
            multiMatchQueryBuilder24.writeTo(streamOutput25);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
    }

    @Test
    public void test15359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15359");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder12.lenient(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder14.rewrite("multi_match");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder16.tieBreaker((float) (short) 10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder16.rewrite("");
        boolean boolean22 = multiMatchQueryBuilder16.equals((java.lang.Object) "{\n  \"multi_match\" : {\n    \"query\" : \"class org.elasticsearch.index.query.MultiMatchQueryBuilder$Type\",\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"rewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"lenient\\\" : true,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"use_dis_max\" : false,\n    \"boost\" : 1.0,\n    \"_name\" : \"{\\n  \\\"multiMatch\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"fuzzyRewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\"\n  }\n}");
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test15360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15360");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.tieBreaker(0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder10.cutoffFrequency((float) 0L);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder14.analyzer("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder16.field("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"slop\" : -1,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder18.queryName("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"slop\" : -1,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder20.slop((int) (byte) 10);
        java.lang.String[] strArray30 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray30);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder33 = multiMatchQueryBuilder31.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder35 = multiMatchQueryBuilder33.tieBreaker(0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type36 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX;
        float float37 = type36.tieBreaker();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder38 = multiMatchQueryBuilder33.type(type36);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder40 = multiMatchQueryBuilder33.cutoffFrequency((float) 0L);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder42 = multiMatchQueryBuilder33.lenient(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type43 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX;
        float float44 = type43.tieBreaker();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder45 = multiMatchQueryBuilder42.type(type43);
        org.elasticsearch.common.ParseField parseField46 = type43.parseField();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder47 = multiMatchQueryBuilder20.type(type43);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder49 = multiMatchQueryBuilder20.tieBreaker((float) (byte) -1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type50 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS;
        org.elasticsearch.common.ParseField parseField51 = type50.parseField();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder52 = multiMatchQueryBuilder49.type(type50);
        float float53 = multiMatchQueryBuilder52.boost();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder33);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder35);
        org.junit.Assert.assertTrue("'" + type36 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX + "'", type36.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX));
        org.junit.Assert.assertTrue("'" + float37 + "' != '" + 0.0f + "'", float37 == 0.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder38);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder40);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder42);
        org.junit.Assert.assertTrue("'" + type43 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX + "'", type43.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX));
        org.junit.Assert.assertTrue("'" + float44 + "' != '" + 0.0f + "'", float44 == 0.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder45);
        org.junit.Assert.assertNotNull(parseField46);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder47);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder49);
        org.junit.Assert.assertTrue("'" + type50 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS + "'", type50.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS));
        org.junit.Assert.assertNotNull(parseField51);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder52);
        org.junit.Assert.assertTrue("'" + float53 + "' != '" + 1.0f + "'", float53 == 1.0f);
    }

    @Test
    public void test15361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15361");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.fuzzyRewrite("hi!");
        java.lang.String str13 = multiMatchQueryBuilder10.getName();
        float float14 = multiMatchQueryBuilder10.boost();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder10.lenient(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder10.slop((int) (short) -1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type19 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX;
        org.elasticsearch.index.search.MatchQuery.Type type20 = type19.matchQueryType();
        org.elasticsearch.index.search.MatchQuery.Type type21 = type19.matchQueryType();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder10.type(type19);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder10.queryName("multi_match");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder24.minimumShouldMatch("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = multiMatchQueryBuilder24.lenient(true);
        java.lang.String[] strArray36 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder37 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray36);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder39 = multiMatchQueryBuilder37.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder41 = multiMatchQueryBuilder39.fuzzyRewrite("hi!");
        java.lang.String str42 = multiMatchQueryBuilder39.getName();
        float float43 = multiMatchQueryBuilder39.boost();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder45 = multiMatchQueryBuilder39.lenient(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder47 = multiMatchQueryBuilder39.queryName("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder49 = multiMatchQueryBuilder39.cutoffFrequency((float) (-1L));
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder50 = multiMatchQueryBuilder24.fuzziness((java.lang.Object) (-1L));
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder52 = multiMatchQueryBuilder50.analyzer("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"analyzer\" : \"multi_match\",\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder54 = multiMatchQueryBuilder52.prefixLength((int) '4');
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder56 = multiMatchQueryBuilder52.fuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"type\" : \"phrase_prefix\",\n    \"analyzer\" : \"{\\n  \\\"multiMatch\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"type\\\" : \\\"phrase_prefix\\\",\\n    \\\"maxExpansions\\\" : 10,\\n    \\\"fuzzyRewrite\\\" : \\\"\\\",\\n    \\\"tieBreaker\\\" : 0.0,\\n    \\\"cutoffFrequency\\\" : 0.0,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"slop\" : 32,\n    \"prefix_length\" : 0,\n    \"rewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"lenient\" : false,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder58 = multiMatchQueryBuilder52.boost(0.0f);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "multi_match" + "'", str13, "multi_match");
        org.junit.Assert.assertTrue("'" + float14 + "' != '" + 1.0f + "'", float14 == 1.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertTrue("'" + type19 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX + "'", type19.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX));
        org.junit.Assert.assertTrue("'" + type20 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX + "'", type20.equals(org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX));
        org.junit.Assert.assertTrue("'" + type21 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX + "'", type21.equals(org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder28);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder39);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "multi_match" + "'", str42, "multi_match");
        org.junit.Assert.assertTrue("'" + float43 + "' != '" + 1.0f + "'", float43 == 1.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder45);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder47);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder49);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder50);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder52);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder54);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder56);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder58);
    }

    @Test
    public void test15362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15362");
        org.elasticsearch.common.xcontent.XContent xContent0 = null;
        java.io.OutputStream outputStream1 = null;
        java.lang.String[] strArray9 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray9);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder12.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder14.lenient(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder14.prefixLength((int) (byte) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder14.minimumShouldMatch("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"rewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"slop\\\" : -1,\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"lenient\\\" : true,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 52.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder14.fuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"type\" : \"cross_fields\",\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 32.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder14.rewrite("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\", \"\" ],\n    \"analyzer\" : \"multi_match\",\n    \"max_expansions\" : 1,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"cutoff_frequency\" : 0.0,\n    \"boost\" : 0.0\n  }\n}");
        java.lang.Object obj25 = null;
        java.lang.String[] strArray33 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder34 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray33);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder36 = multiMatchQueryBuilder34.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder38 = multiMatchQueryBuilder36.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder40 = multiMatchQueryBuilder38.lenient(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder42 = multiMatchQueryBuilder38.prefixLength((int) (byte) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder44 = multiMatchQueryBuilder42.boost((float) 1);
        java.lang.String[] strArray52 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder53 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray52);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder55 = multiMatchQueryBuilder53.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder57 = multiMatchQueryBuilder55.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder59 = multiMatchQueryBuilder57.tieBreaker((float) '#');
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder61 = multiMatchQueryBuilder59.boost((float) 10L);
        java.lang.String[] strArray69 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder70 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray69);
        java.lang.Object obj71 = null;
        java.lang.String[] strArray80 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder81 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray80);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder82 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 10.0f, strArray80);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder83 = new org.elasticsearch.index.query.MultiMatchQueryBuilder(obj71, strArray80);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder84 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray80);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder85 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) multiMatchQueryBuilder59, strArray80);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder86 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 1, strArray80);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder87 = new org.elasticsearch.index.query.MultiMatchQueryBuilder(obj25, strArray80);
        java.lang.Object obj88 = null;
        java.lang.String[] strArray91 = new java.lang.String[] { "{\n  \"multiMatch\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"rewrite\" : \"multi_match\",\n    \"fuzzyRewrite\" : \"hi!\",\n    \"lenient\" : false,\n    \"boost\" : 1.0\n  }\n}" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder92 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "hi!", strArray91);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder93 = new org.elasticsearch.index.query.MultiMatchQueryBuilder(obj88, strArray91);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder94 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) strArray80, strArray91);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder95 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) multiMatchQueryBuilder24, strArray80);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder96 = new org.elasticsearch.common.xcontent.XContentBuilder(xContent0, outputStream1, strArray80);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder36);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder38);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder40);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder42);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder44);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder55);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder57);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder59);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder61);
        org.junit.Assert.assertNotNull(strArray69);
        org.junit.Assert.assertNotNull(strArray80);
        org.junit.Assert.assertNotNull(strArray91);
    }

    @Test
    public void test15363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15363");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.tieBreaker(0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type13 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX;
        float float14 = type13.tieBreaker();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder10.type(type13);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder10.lenient(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder10.maxExpansions((int) (byte) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder10.cutoffFrequency((float) (short) 10);
        float float22 = multiMatchQueryBuilder21.boost();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder21.field("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"analyzer\" : \"hi!\",\n    \"max_expansions\" : 52,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0,\n    \"_name\" : \"{\\n  \\\"multiMatch\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"fuzzyRewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\"\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder21.maxExpansions((-1));
        java.lang.String[] strArray34 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder35 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray34);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder37 = multiMatchQueryBuilder35.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder39 = multiMatchQueryBuilder37.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder41 = multiMatchQueryBuilder39.lenient(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder43 = multiMatchQueryBuilder41.rewrite("multi_match");
        java.lang.String str44 = multiMatchQueryBuilder43.getWriteableName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder46 = multiMatchQueryBuilder43.analyzer("{\n  \"multiMatch\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzyRewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder48 = multiMatchQueryBuilder46.lenient(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder50 = multiMatchQueryBuilder48.lenient(false);
        java.lang.String str51 = multiMatchQueryBuilder50.getName();
        boolean boolean52 = multiMatchQueryBuilder26.equals((java.lang.Object) multiMatchQueryBuilder50);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertTrue("'" + type13 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX + "'", type13.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX));
        org.junit.Assert.assertTrue("'" + float14 + "' != '" + 0.0f + "'", float14 == 0.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertTrue("'" + float22 + "' != '" + 1.0f + "'", float22 == 1.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder37);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder39);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder41);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "multi_match" + "'", str44, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder46);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder48);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "multi_match" + "'", str51, "multi_match");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
    }

    @Test
    public void test15364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15364");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder8.queryName("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.Operator operator13 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder12.operator(operator13);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder14.lenient(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder16.maxExpansions((int) (short) 1);
        java.lang.String[] strArray26 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray26);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) multiMatchQueryBuilder16, strArray26);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder30 = multiMatchQueryBuilder16.field("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder32 = multiMatchQueryBuilder16.field("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"analyzer\" : \"multi_match\",\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String[] strArray40 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder41 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray40);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder43 = multiMatchQueryBuilder41.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder45 = multiMatchQueryBuilder43.fuzzyRewrite("hi!");
        java.lang.String str46 = multiMatchQueryBuilder43.getName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder48 = multiMatchQueryBuilder43.analyzer("multi_match");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder50 = multiMatchQueryBuilder43.slop((int) (short) -1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder52 = multiMatchQueryBuilder43.queryName("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder54 = multiMatchQueryBuilder43.queryName("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"multi_match^0.0\" ],\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 0.0\n  }\n}");
        java.lang.String[] strArray62 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder63 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray62);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder65 = multiMatchQueryBuilder63.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder67 = multiMatchQueryBuilder65.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery68 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder69 = multiMatchQueryBuilder67.zeroTermsQuery(zeroTermsQuery68);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder71 = multiMatchQueryBuilder69.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder73 = multiMatchQueryBuilder71.queryName("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder75 = multiMatchQueryBuilder73.useDisMax(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type76 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS;
        org.elasticsearch.index.search.MatchQuery.Type type77 = type76.matchQueryType();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder78 = multiMatchQueryBuilder75.type(type76);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder79 = multiMatchQueryBuilder54.type(type76);
        org.elasticsearch.common.ParseField parseField80 = type76.parseField();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder81 = multiMatchQueryBuilder16.type(type76);
        float float82 = type76.tieBreaker();
        float float83 = type76.tieBreaker();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder30);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder32);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder43);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "multi_match" + "'", str46, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder48);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder50);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder52);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder54);
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder65);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder67);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder69);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder71);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder73);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder75);
        org.junit.Assert.assertTrue("'" + type76 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS + "'", type76.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS));
        org.junit.Assert.assertTrue("'" + type77 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type77.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder78);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder79);
        org.junit.Assert.assertNotNull(parseField80);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder81);
        org.junit.Assert.assertTrue("'" + float82 + "' != '" + 0.0f + "'", float82 == 0.0f);
        org.junit.Assert.assertTrue("'" + float83 + "' != '" + 0.0f + "'", float83 == 0.0f);
    }

    @Test
    public void test15365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15365");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder12.lenient(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder14.rewrite("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder16.field("{\n  \"multiMatch\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzyRewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}", (float) (short) -1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder19.analyzer("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\", \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"slop\\\" : -1,\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"lenient\\\" : true,\\n    \\\"boost\\\" : 1.0\\n  }\\n}^0.0\" ],\n    \"analyzer\" : \"multi_match\",\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0,\n    \"_name\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\"\n  }\n}");
        java.lang.String str22 = multiMatchQueryBuilder19.getWriteableName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder19.queryName("{\n  \"multiMatch\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"prefixLength\" : 0,\n    \"maxExpansions\" : 1,\n    \"fuzzyRewrite\" : \"\",\n    \"lenient\" : true,\n    \"boost\" : 1.0,\n    \"Name\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\"\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder19.lenient(false);
        float float27 = multiMatchQueryBuilder19.boost();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "multi_match" + "'", str22, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertTrue("'" + float27 + "' != '" + 1.0f + "'", float27 == 1.0f);
    }

    @Test
    public void test15366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15366");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.tieBreaker(0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type13 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX;
        float float14 = type13.tieBreaker();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder10.type(type13);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder10.cutoffFrequency((float) 0L);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder10.maxExpansions(10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder10.analyzer("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"slop\" : -1,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.Operator operator22 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder21.operator(operator22);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder21.boost((float) (byte) 100);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertTrue("'" + type13 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX + "'", type13.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX));
        org.junit.Assert.assertTrue("'" + float14 + "' != '" + 0.0f + "'", float14 == 0.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
    }

    @Test
    public void test15367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15367");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder12.lenient(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder12.prefixLength((int) (byte) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder12.rewrite("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"slop\" : -1,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder12.useDisMax(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder20.cutoffFrequency((float) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder22.field("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}", (float) (short) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder22.maxExpansions((int) (byte) 1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = multiMatchQueryBuilder27.cutoffFrequency((float) 'a');
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder29);
    }

    @Test
    public void test15368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15368");
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type2 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.parse("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"\",\n    \"boost\" : 1.0,\n    \"_name\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\"\n  }\n}", parseFieldMatcher1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test15369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15369");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.fuzzyRewrite("hi!");
        java.lang.String str13 = multiMatchQueryBuilder10.getName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder10.rewrite("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"slop\" : -1,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder10.tieBreaker((float) '4');
        org.elasticsearch.index.query.QueryValidationException queryValidationException18 = multiMatchQueryBuilder17.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder17.field("", (float) (short) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder21.maxExpansions((int) (byte) 0);
        java.lang.String[] strArray31 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder32 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray31);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder34 = multiMatchQueryBuilder32.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder36 = multiMatchQueryBuilder32.queryName("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder38 = multiMatchQueryBuilder36.tieBreaker((float) (short) 1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder40 = multiMatchQueryBuilder38.tieBreaker(0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder42 = multiMatchQueryBuilder40.cutoffFrequency((float) ' ');
        org.elasticsearch.index.query.Operator operator43 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder44 = multiMatchQueryBuilder42.operator(operator43);
        java.lang.String str45 = multiMatchQueryBuilder42.queryName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder48 = multiMatchQueryBuilder42.field("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"prefix_length\" : 100,\n    \"minimum_should_match\" : \"\",\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0,\n    \"_name\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\"\n  }\n}", 97.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder49 = null; // flaky: multiMatchQueryBuilder21.fuzziness((java.lang.Object) multiMatchQueryBuilder42);
        org.elasticsearch.index.query.Operator operator50 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder51 = null; // flaky: multiMatchQueryBuilder49.operator(operator50);
        org.elasticsearch.index.query.QueryValidationException queryValidationException52 = null; // flaky: multiMatchQueryBuilder49.validate();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "multi_match" + "'", str13, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNull(queryValidationException18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder34);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder36);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder38);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder40);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder42);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}" + "'", str45, "{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder48);
// flaky:         org.junit.Assert.assertNotNull(multiMatchQueryBuilder49);
// flaky:         org.junit.Assert.assertNotNull(multiMatchQueryBuilder51);
        org.junit.Assert.assertNull(queryValidationException52);
    }

    @Test
    public void test15370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15370");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder8.queryName("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.Operator operator13 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder12.operator(operator13);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder12.field("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"analyzer\" : \"multi_match\",\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}", 10.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder12.field("{\n  \"multiMatch\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzyRewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}", 0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder20.prefixLength((int) ' ');
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder22.fuzzyRewrite("{\n  \"multiMatch\" : {\n    \"query\" : \"class org.elasticsearch.index.query.MultiMatchQueryBuilder$Type\",\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"boost\" : 1.0,\n    \"Name\" : \"{\\n  \\\"multiMatch\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"fuzzyRewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\"\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder22.queryName("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\", \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"lenient\\\" : true,\\n    \\\"boost\\\" : 1.0\\n  }\\n}^-1.0\" ],\n    \"type\" : \"phrase_prefix\",\n    \"analyzer\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"analyzer\\\" : \\\"multi_match\\\",\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"slop\" : -1,\n    \"fuzziness\" : \"-1\",\n    \"prefix_length\" : 35,\n    \"minimum_should_match\" : \"hi!\",\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0,\n    \"_name\" : \"multi_match\"\n  }\n}");
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
    }

    @Test
    public void test15371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15371");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.fuzzyRewrite("hi!");
        java.lang.String str13 = multiMatchQueryBuilder10.getName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder10.analyzer("multi_match");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder15.field("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\", \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"analyzer\\\" : \\\"multi_match\\\",\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}^10.0\", \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\" ],\n    \"fuzzy_rewrite\" : \"\",\n    \"boost\" : 1.0,\n    \"_name\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\"\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder15.lenient(false);
        org.elasticsearch.index.query.Operator operator20 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder15.operator(operator20);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder15.field("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"prefix_length\" : -1,\n    \"rewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"multi_match^0.0\\\" ],\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"lenient\\\" : true,\\n    \\\"boost\\\" : 0.0\\n  }\\n}\",\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"lenient\" : false,\n    \"boost\" : 1.0\n  }\n}", (-1.0f));
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder15.field("{\n  \"multi_match\" : {\n    \"query\" : {\n      \"multi_match\" : {\n        \"query\" : 0.0,\n        \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n        \"fuzzy_rewrite\" : \"hi!\",\n        \"tie_breaker\" : 35.0,\n        \"boost\" : 10.0\n      }\n    },\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : -1.0,\n    \"_name\" : \"multi_match\"\n  }\n}");
        java.lang.String[] strArray34 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder35 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray34);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder37 = multiMatchQueryBuilder35.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder39 = multiMatchQueryBuilder37.fuzzyRewrite("hi!");
        java.lang.String str40 = multiMatchQueryBuilder37.getName();
        float float41 = multiMatchQueryBuilder37.boost();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder43 = multiMatchQueryBuilder37.lenient(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder45 = multiMatchQueryBuilder37.slop((int) (short) -1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type46 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX;
        org.elasticsearch.index.search.MatchQuery.Type type47 = type46.matchQueryType();
        org.elasticsearch.index.search.MatchQuery.Type type48 = type46.matchQueryType();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder49 = multiMatchQueryBuilder37.type(type46);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder51 = multiMatchQueryBuilder37.queryName("multi_match");
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type52 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        org.elasticsearch.index.search.MatchQuery.Type type53 = type52.matchQueryType();
        java.lang.String[] strArray62 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder63 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray62);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder65 = multiMatchQueryBuilder63.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder67 = multiMatchQueryBuilder63.queryName("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.Operator operator68 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder69 = multiMatchQueryBuilder67.operator(operator68);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder71 = multiMatchQueryBuilder69.lenient(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder73 = multiMatchQueryBuilder71.maxExpansions((int) (short) 1);
        java.lang.String[] strArray81 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder82 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray81);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder83 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) multiMatchQueryBuilder71, strArray81);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder84 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (byte) 1, strArray81);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder85 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) type52, strArray81);
        org.elasticsearch.common.ParseField parseField86 = type52.parseField();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder87 = multiMatchQueryBuilder51.type(type52);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder89 = multiMatchQueryBuilder51.boost((float) (byte) -1);
        boolean boolean90 = multiMatchQueryBuilder15.equals((java.lang.Object) (byte) -1);
        float float91 = multiMatchQueryBuilder15.boost();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "multi_match" + "'", str13, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder37);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "multi_match" + "'", str40, "multi_match");
        org.junit.Assert.assertTrue("'" + float41 + "' != '" + 1.0f + "'", float41 == 1.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder43);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder45);
        org.junit.Assert.assertTrue("'" + type46 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX + "'", type46.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX));
        org.junit.Assert.assertTrue("'" + type47 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX + "'", type47.equals(org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX));
        org.junit.Assert.assertTrue("'" + type48 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX + "'", type48.equals(org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder49);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder51);
        org.junit.Assert.assertTrue("'" + type52 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type52.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertTrue("'" + type53 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type53.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder65);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder67);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder69);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder71);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder73);
        org.junit.Assert.assertNotNull(strArray81);
        org.junit.Assert.assertNotNull(parseField86);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder87);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + float91 + "' != '" + 1.0f + "'", float91 == 1.0f);
    }

    @Test
    public void test15372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15372");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery13 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder12.zeroTermsQuery(zeroTermsQuery13);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder14.fuzzyRewrite("hi!");
        java.lang.String str17 = null; // flaky: multiMatchQueryBuilder16.toString();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder16.analyzer("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"rewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"slop\\\" : -1,\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"lenient\\\" : true,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 52.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder16.rewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder16.prefixLength(10);
        java.lang.String str24 = multiMatchQueryBuilder23.getWriteableName();
        org.elasticsearch.index.query.QueryValidationException queryValidationException25 = multiMatchQueryBuilder23.validate();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery26 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder23.zeroTermsQuery(zeroTermsQuery26);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}" + "'", str17, "{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "multi_match" + "'", str24, "multi_match");
        org.junit.Assert.assertNull(queryValidationException25);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
    }

    @Test
    public void test15373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15373");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery13 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder12.zeroTermsQuery(zeroTermsQuery13);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder14.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery17 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder14.zeroTermsQuery(zeroTermsQuery17);
        java.lang.String str19 = multiMatchQueryBuilder14.getWriteableName();
        java.lang.String str20 = null; // flaky: multiMatchQueryBuilder14.toString();
        java.lang.String str21 = multiMatchQueryBuilder14.queryName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder14.rewrite("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\", \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"analyzer\\\" : \\\"multi_match\\\",\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}^10.0\", \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\" ],\n    \"fuzzy_rewrite\" : \"\",\n    \"boost\" : 1.0,\n    \"_name\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\"\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder23.minimumShouldMatch("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\", \"\" ],\n    \"analyzer\" : \"multi_match\",\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 35.0,\n    \"cutoff_frequency\" : 97.0,\n    \"boost\" : 0.0\n  }\n}");
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "multi_match" + "'", str19, "multi_match");
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}" + "'", str20, "{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
    }

    @Test
    public void test15374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15374");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder8.queryName("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.Operator operator13 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder12.operator(operator13);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder12.field("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"analyzer\" : \"multi_match\",\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}", 10.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder17.field("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery20 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder17.zeroTermsQuery(zeroTermsQuery20);
        org.elasticsearch.index.query.Operator operator22 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder21.operator(operator22);
        java.lang.String str24 = multiMatchQueryBuilder23.getWriteableName();
        org.elasticsearch.index.query.Operator operator25 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder23.operator(operator25);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = multiMatchQueryBuilder26.maxExpansions(0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder30 = multiMatchQueryBuilder28.minimumShouldMatch("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"type\" : \"best_fields\",\n    \"analyzer\" : \"hi!\",\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 0.0,\n    \"boost\" : 1.0,\n    \"_name\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"prefix_length\\\" : 0,\\n    \\\"max_expansions\\\" : 1,\\n    \\\"fuzzy_rewrite\\\" : \\\"\\\",\\n    \\\"lenient\\\" : true,\\n    \\\"boost\\\" : 1.0,\\n    \\\"_name\\\" : \\\"{\\\\n  \\\\\\\"multi_match\\\\\\\" : {\\\\n    \\\\\\\"query\\\\\\\" : 0.0,\\\\n    \\\\\\\"fields\\\\\\\" : [ \\\\\\\"hi!\\\\\\\", \\\\\\\"\\\\\\\", \\\\\\\"\\\\\\\", \\\\\\\"\\\\\\\", \\\\\\\"\\\\\\\", \\\\\\\"\\\\\\\" ],\\\\n    \\\\\\\"fuzzy_rewrite\\\\\\\" : \\\\\\\"hi!\\\\\\\",\\\\n    \\\\\\\"boost\\\\\\\" : 1.0\\\\n  }\\\\n}\\\"\\n  }\\n}\"\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder32 = multiMatchQueryBuilder30.tieBreaker((float) '4');
        java.lang.String str33 = multiMatchQueryBuilder30.getName();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "multi_match" + "'", str24, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder28);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder30);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "multi_match" + "'", str33, "multi_match");
    }

    @Test
    public void test15375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15375");
        org.elasticsearch.common.xcontent.XContent xContent0 = null;
        java.io.OutputStream outputStream1 = null;
        java.lang.String[] strArray9 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray9);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder12.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder14.analyzer("{\n  \"multiMatch\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"rewrite\" : \"multi_match\",\n    \"fuzzyRewrite\" : \"hi!\",\n    \"lenient\" : false,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String[] strArray24 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray24);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder25.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = multiMatchQueryBuilder27.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = multiMatchQueryBuilder27.field("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder33 = multiMatchQueryBuilder27.boost(0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder35 = multiMatchQueryBuilder33.analyzer("multi_match");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder37 = multiMatchQueryBuilder35.useDisMax(true);
        java.lang.String str38 = multiMatchQueryBuilder35.getName();
        java.lang.String[] strArray46 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder47 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray46);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder49 = multiMatchQueryBuilder47.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder51 = multiMatchQueryBuilder49.fuzzyRewrite("hi!");
        java.lang.String str52 = multiMatchQueryBuilder49.getName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type53 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder54 = multiMatchQueryBuilder49.type(type53);
        org.elasticsearch.index.search.MatchQuery.Type type55 = type53.matchQueryType();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder56 = multiMatchQueryBuilder35.type(type53);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder58 = multiMatchQueryBuilder35.tieBreaker(1.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder59 = null; // flaky: multiMatchQueryBuilder14.fuzziness((java.lang.Object) multiMatchQueryBuilder35);
        java.lang.String[] strArray67 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder68 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray67);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder69 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) multiMatchQueryBuilder59, strArray67);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder70 = new org.elasticsearch.common.xcontent.XContentBuilder(xContent0, outputStream1, strArray67);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder29);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder31);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder33);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder35);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "multi_match" + "'", str38, "multi_match");
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder49);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "multi_match" + "'", str52, "multi_match");
        org.junit.Assert.assertTrue("'" + type53 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS + "'", type53.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder54);
        org.junit.Assert.assertTrue("'" + type55 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type55.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder56);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder58);
// flaky:         org.junit.Assert.assertNotNull(multiMatchQueryBuilder59);
        org.junit.Assert.assertNotNull(strArray67);
    }

    @Test
    public void test15376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15376");
        java.lang.Object obj0 = null;
        java.lang.String[] strArray9 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray9);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 10.0f, strArray9);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = new org.elasticsearch.index.query.MultiMatchQueryBuilder(obj0, strArray9);
        java.lang.String str13 = multiMatchQueryBuilder12.getWriteableName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder12.minimumShouldMatch("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzziness\" : \"BEST_FIELDS\",\n    \"fuzzy_rewrite\" : \"\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder15.cutoffFrequency(1.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder17.prefixLength((int) '#');
        org.elasticsearch.index.query.QueryValidationException queryValidationException20 = multiMatchQueryBuilder19.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder19.field("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"prefix_length\" : 0,\n    \"rewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"slop\\\" : -1,\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"lenient\\\" : true,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 0.0,\n    \"cutoff_frequency\" : 10.0,\n    \"boost\" : 1.0,\n    \"_name\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"type\\\" : \\\"phrase_prefix\\\",\\n    \\\"max_expansions\\\" : 10,\\n    \\\"fuzzy_rewrite\\\" : \\\"\\\",\\n    \\\"tie_breaker\\\" : 0.0,\\n    \\\"cutoff_frequency\\\" : 0.0,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\"\n  }\n}", 52.0f);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "multi_match" + "'", str13, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNull(queryValidationException20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
    }

    @Test
    public void test15377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15377");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.fuzzyRewrite("hi!");
        java.lang.String[] strArray20 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray20);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder21.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder23.fuzzyRewrite("hi!");
        java.lang.String str26 = multiMatchQueryBuilder23.getName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = multiMatchQueryBuilder23.rewrite("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"slop\" : -1,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder30 = multiMatchQueryBuilder23.prefixLength((int) (short) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder32 = multiMatchQueryBuilder30.tieBreaker(0.0f);
        boolean boolean33 = multiMatchQueryBuilder12.equals((java.lang.Object) multiMatchQueryBuilder32);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder35 = multiMatchQueryBuilder12.prefixLength((int) (short) 10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder37 = multiMatchQueryBuilder35.prefixLength((int) (byte) 1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder39 = multiMatchQueryBuilder35.boost(100.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder42 = multiMatchQueryBuilder39.field("{\n  \"multiMatch\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"slop\" : 32,\n    \"prefixLength\" : 32,\n    \"rewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"max_expansions\\\" : 1,\\n    \\\"fuzzy_rewrite\\\" : \\\"\\\",\\n    \\\"lenient\\\" : true,\\n    \\\"boost\\\" : 1.0,\\n    \\\"_name\\\" : \\\"{\\\\n  \\\\\\\"multi_match\\\\\\\" : {\\\\n    \\\\\\\"query\\\\\\\" : 0.0,\\\\n    \\\\\\\"fields\\\\\\\" : [ \\\\\\\"hi!\\\\\\\", \\\\\\\"\\\\\\\", \\\\\\\"\\\\\\\", \\\\\\\"\\\\\\\", \\\\\\\"\\\\\\\", \\\\\\\"\\\\\\\" ],\\\\n    \\\\\\\"fuzzy_rewrite\\\\\\\" : \\\\\\\"hi!\\\\\\\",\\\\n    \\\\\\\"boost\\\\\\\" : 1.0\\\\n  }\\\\n}\\\"\\n  }\\n}\",\n    \"fuzzyRewrite\" : \"hi!\",\n    \"boost\" : 1.0,\n    \"Name\" : \"hi!\"\n  }\n}", 100.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder44 = multiMatchQueryBuilder39.prefixLength((int) (short) -1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder47 = multiMatchQueryBuilder39.field("", (float) 1L);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "multi_match" + "'", str26, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder28);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder30);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder35);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder37);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder39);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder42);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder44);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder47);
    }

    @Test
    public void test15378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15378");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder12.tieBreaker((float) '#');
        java.lang.String str15 = multiMatchQueryBuilder12.queryName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder12.tieBreaker((float) 'a');
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder17.lenient(false);
        java.lang.String str20 = multiMatchQueryBuilder17.queryName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder17.boost((float) (short) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder17.tieBreaker((float) '#');
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder17.lenient(false);
        java.lang.String str27 = multiMatchQueryBuilder17.getWriteableName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = multiMatchQueryBuilder17.lenient(true);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "multi_match" + "'", str27, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder29);
    }

    @Test
    public void test15379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15379");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder8.queryName("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.Operator operator13 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder12.operator(operator13);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder12.field("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"analyzer\" : \"multi_match\",\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}", 10.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder17.field("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery20 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder17.zeroTermsQuery(zeroTermsQuery20);
        org.elasticsearch.index.query.Operator operator22 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder21.operator(operator22);
        java.lang.String str24 = multiMatchQueryBuilder23.getWriteableName();
        org.elasticsearch.index.query.Operator operator25 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder23.operator(operator25);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = multiMatchQueryBuilder23.maxExpansions(10);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery29 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder30 = multiMatchQueryBuilder23.zeroTermsQuery(zeroTermsQuery29);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder33 = multiMatchQueryBuilder23.field("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"multi_match^0.0\" ],\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 0.0\n  }\n}", (float) (short) 10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder35 = multiMatchQueryBuilder23.queryName("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"max_expansions\" : 1,\n    \"fuzzy_rewrite\" : \"\",\n    \"lenient\" : true,\n    \"boost\" : 1.0,\n    \"_name\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\"\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder37 = multiMatchQueryBuilder23.lenient(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type38 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX;
        float float39 = type38.tieBreaker();
        java.lang.Class<?> wildcardClass40 = type38.getClass();
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder49 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray48);
        java.lang.Object obj50 = null;
        java.lang.String[] strArray59 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder60 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray59);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder61 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 10.0f, strArray59);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder62 = new org.elasticsearch.index.query.MultiMatchQueryBuilder(obj50, strArray59);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder63 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray59);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder64 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) wildcardClass40, strArray59);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder66 = multiMatchQueryBuilder64.cutoffFrequency((float) 1L);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder68 = multiMatchQueryBuilder64.field("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"max_expansions\" : 1,\n    \"fuzzy_rewrite\" : \"\",\n    \"lenient\" : true,\n    \"boost\" : 1.0,\n    \"_name\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\"\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder70 = multiMatchQueryBuilder64.analyzer("{\n  \"multiMatch\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"analyzer\" : \"hi!\",\n    \"fuzzyRewrite\" : \"hi!\",\n    \"boost\" : 1.0,\n    \"Name\" : \"hi!\"\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder72 = multiMatchQueryBuilder64.queryName("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder74 = multiMatchQueryBuilder64.slop((int) ' ');
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder76 = multiMatchQueryBuilder64.lenient(true);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder77 = null; // flaky: multiMatchQueryBuilder23.type((java.lang.Object) multiMatchQueryBuilder64);
// flaky:             org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchParseException; message: failed to parse [multi_match] query type [{?  \"multi_match\" : {?    \"query\" : \"class org.elasticsearch.index.query.multimatchquerybuilder$type\",?    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\", \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"max_expansions\\\" : 1,\\n    \\\"fuzzy_rewrite\\\" : \\\"\\\",\\n    \\\"lenient\\\" : true,\\n    \\\"boost\\\" : 1.0,\\n    \\\"_name\\\" : \\\"{\\\\n  \\\\\\\"multi_match\\\\\\\" : {\\\\n    \\\\\\\"query\\\\\\\" : 0.0,\\\\n    \\\\\\\"fields\\\\\\\" : [ \\\\\\\"hi!\\\\\\\", \\\\\\\"\\\\\\\", \\\\\\\"\\\\\\\", \\\\\\\"\\\\\\\", \\\\\\\"\\\\\\\", \\\\\\\"\\\\\\\" ],\\\\n    \\\\\\\"fuzzy_rewrite\\\\\\\" : \\\\\\\"hi!\\\\\\\",\\\\n    \\\\\\\"boost\\\\\\\" : 1.0\\\\n  }\\\\n}\\\"\\n  }\\n}\" ],?    \"analyzer\" : \"{\\n  \\\"multimatch\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"analyzer\\\" : \\\"hi!\\\",\\n    \\\"fuzzyrewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0,\\n    \\\"name\\\" : \\\"hi!\\\"\\n  }\\n}\",?    \"slop\" : 32,?    \"lenient\" : true,?    \"cutoff_frequency\" : 1.0,?    \"boost\" : 1.0,?    \"_name\" : \"hi!\"?  }?}]. unknown type.");
        } catch (org.elasticsearch.ElasticsearchParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "multi_match" + "'", str24, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder28);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder30);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder33);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder35);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder37);
        org.junit.Assert.assertTrue("'" + type38 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX + "'", type38.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX));
        org.junit.Assert.assertTrue("'" + float39 + "' != '" + 0.0f + "'", float39 == 0.0f);
        org.junit.Assert.assertNotNull(wildcardClass40);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder66);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder68);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder70);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder72);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder74);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder76);
    }

    @Test
    public void test15380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15380");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.fuzzyRewrite("hi!");
        java.lang.String str13 = multiMatchQueryBuilder10.getName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder10.analyzer("multi_match");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder15.cutoffFrequency((float) (short) 1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder17.minimumShouldMatch("{\n  \"multiMatch\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzyRewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String[] strArray27 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray27);
        java.lang.Object obj29 = null;
        java.lang.String[] strArray38 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder39 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray38);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder40 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 10.0f, strArray38);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder41 = new org.elasticsearch.index.query.MultiMatchQueryBuilder(obj29, strArray38);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder42 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray38);
        org.elasticsearch.index.query.Operator operator43 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder44 = multiMatchQueryBuilder42.operator(operator43);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder46 = multiMatchQueryBuilder44.cutoffFrequency((float) (-1L));
        boolean boolean47 = multiMatchQueryBuilder19.equals((java.lang.Object) multiMatchQueryBuilder44);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder49 = multiMatchQueryBuilder44.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder51 = multiMatchQueryBuilder49.cutoffFrequency((float) 10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder54 = multiMatchQueryBuilder51.field("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"\",\n    \"boost\" : 1.0\n  }\n}", (float) (byte) 100);
        org.elasticsearch.index.query.Operator operator55 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder56 = multiMatchQueryBuilder51.operator(operator55);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder58 = multiMatchQueryBuilder56.prefixLength((int) ' ');
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder60 = multiMatchQueryBuilder58.rewrite("{\n  \"multiMatch\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"type\" : \"phrase_prefix\",\n    \"fuzzyRewrite\" : \"\",\n    \"tieBreaker\" : 0.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.QueryShardContext queryShardContext61 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.lucene.search.Query query62 = multiMatchQueryBuilder60.toFilter(queryShardContext61);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "multi_match" + "'", str13, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder44);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder49);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder51);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder54);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder56);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder58);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder60);
    }

    @Test
    public void test15381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15381");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery13 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder12.zeroTermsQuery(zeroTermsQuery13);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder12.maxExpansions((int) (byte) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder12.field("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"slop\" : -1,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder18.useDisMax(false);
        float float21 = multiMatchQueryBuilder18.boost();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder18.prefixLength((int) (byte) 1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder23.rewrite("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"max_expansions\" : 10,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"use_dis_max\" : true,\n    \"tie_breaker\" : 35.0,\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String[] strArray33 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder34 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray33);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder36 = multiMatchQueryBuilder34.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder38 = multiMatchQueryBuilder36.tieBreaker(0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder40 = multiMatchQueryBuilder36.cutoffFrequency((float) 0L);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder42 = multiMatchQueryBuilder40.analyzer("");
        java.lang.String[] strArray50 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder51 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray50);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder53 = multiMatchQueryBuilder51.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder55 = multiMatchQueryBuilder53.tieBreaker(0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type56 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX;
        float float57 = type56.tieBreaker();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder58 = multiMatchQueryBuilder53.type(type56);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder60 = multiMatchQueryBuilder53.cutoffFrequency((float) 0L);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder62 = multiMatchQueryBuilder53.lenient(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type63 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        org.elasticsearch.index.search.MatchQuery.Type type64 = type63.matchQueryType();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder65 = multiMatchQueryBuilder53.type(type63);
        org.elasticsearch.index.search.MatchQuery.Type type66 = type63.matchQueryType();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder67 = multiMatchQueryBuilder40.type(type63);
        org.elasticsearch.common.ParseField parseField68 = type63.parseField();
        org.elasticsearch.index.search.MatchQuery.Type type69 = type63.matchQueryType();
        float float70 = type63.tieBreaker();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder71 = multiMatchQueryBuilder23.type(type63);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder73 = multiMatchQueryBuilder23.maxExpansions((int) ' ');
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertTrue("'" + float21 + "' != '" + 1.0f + "'", float21 == 1.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder36);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder38);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder40);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder42);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder53);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder55);
        org.junit.Assert.assertTrue("'" + type56 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX + "'", type56.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX));
        org.junit.Assert.assertTrue("'" + float57 + "' != '" + 0.0f + "'", float57 == 0.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder58);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder60);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder62);
        org.junit.Assert.assertTrue("'" + type63 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type63.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertTrue("'" + type64 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type64.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder65);
        org.junit.Assert.assertTrue("'" + type66 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type66.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder67);
        org.junit.Assert.assertNotNull(parseField68);
        org.junit.Assert.assertTrue("'" + type69 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type69.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertTrue("'" + float70 + "' != '" + 0.0f + "'", float70 == 0.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder71);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder73);
    }

    @Test
    public void test15382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15382");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.fuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder10.minimumShouldMatch("multi_match");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery15 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder10.zeroTermsQuery(zeroTermsQuery15);
        java.lang.Class<?> wildcardClass17 = multiMatchQueryBuilder10.getClass();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test15383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15383");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder8.cutoffFrequency((float) 100);
        java.lang.String str13 = multiMatchQueryBuilder12.queryName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder12.boost((float) '4');
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery16 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder15.zeroTermsQuery(zeroTermsQuery16);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder15.analyzer("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\", \"multi_match^0.0\" ],\n    \"type\" : \"phrase_prefix\",\n    \"prefix_length\" : 97,\n    \"fuzzy_rewrite\" : \"\",\n    \"tie_breaker\" : 0.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder15.slop((int) (byte) 0);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery22 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder21.zeroTermsQuery(zeroTermsQuery22);
        java.lang.String str24 = null; // flaky: multiMatchQueryBuilder21.toString();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
// flaky:         org.junit.Assert.assertEquals("'" + str24 + "' != '" + "{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"analyzer\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"multi_match^0.0\\\" ],\\n    \\\"type\\\" : \\\"phrase_prefix\\\",\\n    \\\"prefix_length\\\" : 97,\\n    \\\"fuzzy_rewrite\\\" : \\\"\\\",\\n    \\\"tie_breaker\\\" : 0.0,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"\",\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 52.0\n  }\n}" + "'", str24, "{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"analyzer\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"multi_match^0.0\\\" ],\\n    \\\"type\\\" : \\\"phrase_prefix\\\",\\n    \\\"prefix_length\\\" : 97,\\n    \\\"fuzzy_rewrite\\\" : \\\"\\\",\\n    \\\"tie_breaker\\\" : 0.0,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"\",\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 52.0\n  }\n}");
    }

    @Test
    public void test15384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15384");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.fuzzyRewrite("hi!");
        java.lang.String str13 = multiMatchQueryBuilder10.getName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder10.analyzer("multi_match");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder15.field("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\", \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"analyzer\\\" : \\\"multi_match\\\",\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}^10.0\", \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\" ],\n    \"fuzzy_rewrite\" : \"\",\n    \"boost\" : 1.0,\n    \"_name\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\"\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder17.field("{\n  \"multiMatch\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"type\" : \"phrase_prefix\",\n    \"maxExpansions\" : 10,\n    \"fuzzyRewrite\" : \"\",\n    \"tieBreaker\" : 0.0,\n    \"cutoffFrequency\" : 0.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder17.cutoffFrequency((float) (byte) -1);
        java.lang.String str22 = multiMatchQueryBuilder21.queryName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder21.field("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\", \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\" ],\n    \"slop\" : 0,\n    \"max_expansions\" : 0,\n    \"fuzzy_rewrite\" : \"\",\n    \"lenient\" : false,\n    \"boost\" : 1.0,\n    \"_name\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\"\n  }\n}");
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "multi_match" + "'", str13, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
    }

    @Test
    public void test15385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15385");
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type0 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX;
        float float1 = type0.tieBreaker();
        java.lang.Class<?> wildcardClass2 = type0.getClass();
        java.lang.String[] strArray10 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray10);
        java.lang.Object obj12 = null;
        java.lang.String[] strArray21 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray21);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 10.0f, strArray21);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = new org.elasticsearch.index.query.MultiMatchQueryBuilder(obj12, strArray21);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray21);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) wildcardClass2, strArray21);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = multiMatchQueryBuilder26.maxExpansions(0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder30 = multiMatchQueryBuilder26.prefixLength((-1));
        java.lang.String str31 = multiMatchQueryBuilder26.queryName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder33 = multiMatchQueryBuilder26.slop(0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder35 = multiMatchQueryBuilder26.useDisMax(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder37 = multiMatchQueryBuilder35.prefixLength((int) (short) 100);
        java.lang.String[] strArray45 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder46 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray45);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder48 = multiMatchQueryBuilder46.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder50 = multiMatchQueryBuilder48.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder52 = multiMatchQueryBuilder50.lenient(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder54 = multiMatchQueryBuilder52.maxExpansions(0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder57 = multiMatchQueryBuilder52.field("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}", (float) (short) 1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type58 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS;
        org.elasticsearch.index.search.MatchQuery.Type type59 = type58.matchQueryType();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder60 = multiMatchQueryBuilder57.type(type58);
        org.elasticsearch.index.search.MatchQuery.Type type61 = type58.matchQueryType();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder62 = multiMatchQueryBuilder35.type(type58);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder64 = multiMatchQueryBuilder62.useDisMax(true);
        java.lang.String str65 = null; // flaky: multiMatchQueryBuilder62.toString();
        org.junit.Assert.assertTrue("'" + type0 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX + "'", type0.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX));
        org.junit.Assert.assertTrue("'" + float1 + "' != '" + 0.0f + "'", float1 == 0.0f);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder28);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder30);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder33);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder35);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder37);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder48);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder50);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder52);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder54);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder57);
        org.junit.Assert.assertTrue("'" + type58 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS + "'", type58.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS));
        org.junit.Assert.assertTrue("'" + type59 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type59.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder60);
        org.junit.Assert.assertTrue("'" + type61 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type61.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder62);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder64);
// flaky:         org.junit.Assert.assertEquals("'" + str65 + "' != '" + "{\n  \"multi_match\" : {\n    \"query\" : \"class org.elasticsearch.index.query.MultiMatchQueryBuilder$Type\",\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"type\" : \"cross_fields\",\n    \"slop\" : 0,\n    \"prefix_length\" : 100,\n    \"max_expansions\" : 0,\n    \"use_dis_max\" : true,\n    \"boost\" : 1.0\n  }\n}" + "'", str65, "{\n  \"multi_match\" : {\n    \"query\" : \"class org.elasticsearch.index.query.MultiMatchQueryBuilder$Type\",\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"type\" : \"cross_fields\",\n    \"slop\" : 0,\n    \"prefix_length\" : 100,\n    \"max_expansions\" : 0,\n    \"use_dis_max\" : true,\n    \"boost\" : 1.0\n  }\n}");
    }

    @Test
    public void test15386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15386");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery13 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder12.zeroTermsQuery(zeroTermsQuery13);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder14.analyzer("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"minimum_should_match\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"slop\\\" : -1,\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"lenient\\\" : true,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.Operator operator17 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder16.operator(operator17);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder16.tieBreaker((float) 0L);
        java.lang.String[] strArray28 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray28);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = multiMatchQueryBuilder29.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder33 = multiMatchQueryBuilder31.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery34 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder35 = multiMatchQueryBuilder33.zeroTermsQuery(zeroTermsQuery34);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder37 = multiMatchQueryBuilder35.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery38 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder39 = multiMatchQueryBuilder35.zeroTermsQuery(zeroTermsQuery38);
        java.lang.String str40 = multiMatchQueryBuilder39.queryName();
        java.lang.String str41 = multiMatchQueryBuilder39.queryName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder43 = multiMatchQueryBuilder39.analyzer("{\n  \"multiMatch\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzyRewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.QueryValidationException queryValidationException44 = multiMatchQueryBuilder43.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder46 = multiMatchQueryBuilder43.analyzer("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"slop\\\" : -1,\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"lenient\\\" : true,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"boost\" : 1.0,\n    \"_name\" : \"hi!\"\n  }\n}");
        org.elasticsearch.index.query.QueryValidationException queryValidationException47 = multiMatchQueryBuilder43.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type48 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX;
        org.elasticsearch.index.search.MatchQuery.Type type49 = type48.matchQueryType();
        org.elasticsearch.common.ParseField parseField50 = type48.parseField();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder51 = multiMatchQueryBuilder43.type(type48);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder52 = multiMatchQueryBuilder16.type(type48);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder54 = multiMatchQueryBuilder16.rewrite("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"rewrite\" : \"\",\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"lenient\" : false,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.QueryValidationException queryValidationException55 = multiMatchQueryBuilder54.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder57 = multiMatchQueryBuilder54.fuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"type\" : \"phrase_prefix\",\n    \"slop\" : -1,\n    \"fuzziness\" : \"{\\n  \\\"MULTI_MATCH\\\" : {\\n    \\\"QUERY\\\" : 0.0,\\n    \\\"FIELDS\\\" : [ \\\"HI!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"FUZZINESS\\\" : \\\"BEST_FIELDS\\\",\\n    \\\"FUZZY_REWRITE\\\" : \\\"\\\",\\n    \\\"BOOST\\\" : 1.0\\n  }\\n}\",\n    \"minimum_should_match\" : \"hi!\",\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"use_dis_max\" : false,\n    \"lenient\" : true,\n    \"boost\" : 1.0,\n    \"_name\" : \"multi_match\"\n  }\n}");
        org.elasticsearch.index.query.QueryValidationException queryValidationException58 = multiMatchQueryBuilder57.validate();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder31);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder33);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder35);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder37);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder39);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder43);
        org.junit.Assert.assertNull(queryValidationException44);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder46);
        org.junit.Assert.assertNull(queryValidationException47);
        org.junit.Assert.assertTrue("'" + type48 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX + "'", type48.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX));
        org.junit.Assert.assertTrue("'" + type49 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX + "'", type49.equals(org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX));
        org.junit.Assert.assertNotNull(parseField50);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder51);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder52);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder54);
        org.junit.Assert.assertNull(queryValidationException55);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder57);
        org.junit.Assert.assertNull(queryValidationException58);
    }

    @Test
    public void test15387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15387");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder12.tieBreaker((float) '#');
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder14.tieBreaker((float) ' ');
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type17 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder16.type(type17);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder18.useDisMax(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder20.queryName("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder20.tieBreaker(1.0f);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder25 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params26 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder27 = multiMatchQueryBuilder20.toXContent(xContentBuilder25, params26);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertTrue("'" + type17 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS + "'", type17.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertNotNull(params26);
    }

    @Test
    public void test15388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15388");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder10.field("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder10.boost(0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder16.analyzer("multi_match");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder16.maxExpansions((int) (short) 1);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery21 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder20.zeroTermsQuery(zeroTermsQuery21);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder20.maxExpansions((int) ' ');
        java.lang.String[] strArray32 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder33 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray32);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder35 = multiMatchQueryBuilder33.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder37 = multiMatchQueryBuilder35.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder39 = multiMatchQueryBuilder37.maxExpansions(1);
        boolean boolean41 = multiMatchQueryBuilder37.equals((java.lang.Object) '#');
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder43 = multiMatchQueryBuilder37.boost((float) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder46 = multiMatchQueryBuilder43.field("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"analyzer\" : \"{\\n  \\\"multiMatch\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"rewrite\\\" : \\\"multi_match\\\",\\n    \\\"fuzzyRewrite\\\" : \\\"hi!\\\",\\n    \\\"lenient\\\" : false,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}", (float) ' ');
        float float47 = multiMatchQueryBuilder46.boost();
        java.lang.String[] strArray55 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder56 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray55);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder58 = multiMatchQueryBuilder56.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder60 = multiMatchQueryBuilder58.tieBreaker(0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type61 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX;
        float float62 = type61.tieBreaker();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder63 = multiMatchQueryBuilder58.type(type61);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder65 = multiMatchQueryBuilder58.cutoffFrequency((float) 0L);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder67 = multiMatchQueryBuilder58.lenient(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type68 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        org.elasticsearch.index.search.MatchQuery.Type type69 = type68.matchQueryType();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder70 = multiMatchQueryBuilder58.type(type68);
        org.elasticsearch.common.ParseField parseField71 = type68.parseField();
        float float72 = type68.tieBreaker();
        float float73 = type68.tieBreaker();
        float float74 = type68.tieBreaker();
        float float75 = type68.tieBreaker();
        org.elasticsearch.common.ParseField parseField76 = type68.parseField();
        org.elasticsearch.common.ParseField parseField77 = type68.parseField();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder78 = multiMatchQueryBuilder46.type(type68);
        org.elasticsearch.common.ParseField parseField79 = type68.parseField();
        boolean boolean80 = multiMatchQueryBuilder20.equals((java.lang.Object) parseField79);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder35);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder37);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder43);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder46);
        org.junit.Assert.assertTrue("'" + float47 + "' != '" + 0.0f + "'", float47 == 0.0f);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder58);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder60);
        org.junit.Assert.assertTrue("'" + type61 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX + "'", type61.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX));
        org.junit.Assert.assertTrue("'" + float62 + "' != '" + 0.0f + "'", float62 == 0.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder63);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder65);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder67);
        org.junit.Assert.assertTrue("'" + type68 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type68.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertTrue("'" + type69 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type69.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder70);
        org.junit.Assert.assertNotNull(parseField71);
        org.junit.Assert.assertTrue("'" + float72 + "' != '" + 0.0f + "'", float72 == 0.0f);
        org.junit.Assert.assertTrue("'" + float73 + "' != '" + 0.0f + "'", float73 == 0.0f);
        org.junit.Assert.assertTrue("'" + float74 + "' != '" + 0.0f + "'", float74 == 0.0f);
        org.junit.Assert.assertTrue("'" + float75 + "' != '" + 0.0f + "'", float75 == 0.0f);
        org.junit.Assert.assertNotNull(parseField76);
        org.junit.Assert.assertNotNull(parseField77);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder78);
        org.junit.Assert.assertNotNull(parseField79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
    }

    @Test
    public void test15389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15389");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery13 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder12.zeroTermsQuery(zeroTermsQuery13);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder14.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder16.queryName("hi!");
        java.lang.String str19 = multiMatchQueryBuilder16.queryName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder16.analyzer("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"slop\" : -1,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder16.field("hi!", (float) (short) -1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder24.prefixLength((int) (byte) 1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = multiMatchQueryBuilder26.field("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"analyzer\" : \"\",\n    \"fuzzy_rewrite\" : \"\",\n    \"tie_breaker\" : 52.0,\n    \"cutoff_frequency\" : 0.0,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String[] strArray36 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder37 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray36);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder39 = multiMatchQueryBuilder37.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder41 = multiMatchQueryBuilder39.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder43 = multiMatchQueryBuilder39.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException44 = multiMatchQueryBuilder43.validate();
        org.elasticsearch.index.query.QueryValidationException queryValidationException45 = multiMatchQueryBuilder43.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder47 = multiMatchQueryBuilder43.tieBreaker((float) 10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder49 = multiMatchQueryBuilder47.queryName("{\n  \"multiMatch\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\", \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"analyzer\\\" : \\\"multi_match\\\",\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}^10.0\", \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\" ],\n    \"fuzzyRewrite\" : \"\",\n    \"boost\" : 1.0,\n    \"Name\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\"\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder51 = multiMatchQueryBuilder47.useDisMax(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder53 = multiMatchQueryBuilder51.boost((float) (byte) 10);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder54 = null; // flaky: multiMatchQueryBuilder28.type((java.lang.Object) multiMatchQueryBuilder51);
// flaky:             org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchParseException; message: failed to parse [multi_match] query type [{?  \"multi_match\" : {?    \"query\" : 0.0,?    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\", \"\" ],?    \"fuzzy_rewrite\" : \"hi!\",?    \"use_dis_max\" : true,?    \"tie_breaker\" : 10.0,?    \"boost\" : 10.0,?    \"_name\" : \"{\\n  \\\"multimatch\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"{\\\\n  \\\\\\\"multi_match\\\\\\\" : {\\\\n    \\\\\\\"query\\\\\\\" : 0.0,\\\\n    \\\\\\\"fields\\\\\\\" : [ \\\\\\\"hi!\\\\\\\", \\\\\\\"\\\\\\\", \\\\\\\"\\\\\\\", \\\\\\\"\\\\\\\", \\\\\\\"\\\\\\\", \\\\\\\"\\\\\\\" ],\\\\n    \\\\\\\"analyzer\\\\\\\" : \\\\\\\"multi_match\\\\\\\",\\\\n    \\\\\\\"fuzzy_rewrite\\\\\\\" : \\\\\\\"hi!\\\\\\\",\\\\n    \\\\\\\"boost\\\\\\\" : 1.0\\\\n  }\\\\n}^10.0\\\", \\\"{\\\\n  \\\\\\\"multi_match\\\\\\\" : {\\\\n    \\\\\\\"query\\\\\\\" : 0.0,\\\\n    \\\\\\\"fields\\\\\\\" : [ \\\\\\\"hi!\\\\\\\", \\\\\\\"\\\\\\\", \\\\\\\"\\\\\\\", \\\\\\\"\\\\\\\", \\\\\\\"\\\\\\\", \\\\\\\"\\\\\\\" ],\\\\n    \\\\\\\"fuzzy_rewrite\\\\\\\" : \\\\\\\"hi!\\\\\\\",\\\\n    \\\\\\\"boost\\\\\\\" : 1.0\\\\n  }\\\\n}\\\" ],\\n    \\\"fuzzyrewrite\\\" : \\\"\\\",\\n    \\\"boost\\\" : 1.0,\\n    \\\"name\\\" : \\\"{\\\\n  \\\\\\\"multi_match\\\\\\\" : {\\\\n    \\\\\\\"query\\\\\\\" : 0.0,\\\\n    \\\\\\\"fields\\\\\\\" : [ \\\\\\\"hi!\\\\\\\", \\\\\\\"\\\\\\\", \\\\\\\"\\\\\\\", \\\\\\\"\\\\\\\", \\\\\\\"\\\\\\\", \\\\\\\"\\\\\\\" ],\\\\n    \\\\\\\"fuzzy_rewrite\\\\\\\" : \\\\\\\"hi!\\\\\\\",\\\\n    \\\\\\\"boost\\\\\\\" : 1.0\\\\n  }\\\\n}\\\"\\n  }\\n}\"?  }?}]. unknown type.");
        } catch (org.elasticsearch.ElasticsearchParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder28);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder39);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder41);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder43);
        org.junit.Assert.assertNull(queryValidationException44);
        org.junit.Assert.assertNull(queryValidationException45);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder47);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder49);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder51);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder53);
    }

    @Test
    public void test15390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15390");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder12.lenient(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder12.prefixLength((int) (byte) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder16.boost((float) 1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder18.field("{\n  \"multiMatch\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"rewrite\" : \"multi_match\",\n    \"fuzzyRewrite\" : \"hi!\",\n    \"lenient\" : false,\n    \"boost\" : 1.0\n  }\n}", (-1.0f));
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder21.cutoffFrequency((float) (byte) 0);
        float float24 = multiMatchQueryBuilder23.boost();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder23.rewrite("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"slop\" : 0,\n    \"prefix_length\" : 0,\n    \"rewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"analyzer\\\" : \\\"multi_match\\\",\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"lenient\" : false,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = multiMatchQueryBuilder26.prefixLength((int) 'a');
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder30 = multiMatchQueryBuilder26.boost((float) (byte) 10);
        java.lang.Object obj31 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder32 = multiMatchQueryBuilder30.type(obj31);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertTrue("'" + float24 + "' != '" + 1.0f + "'", float24 == 1.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder28);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder30);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder32);
    }

    @Test
    public void test15391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15391");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        java.lang.String[] strArray18 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray18);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder19.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder21.tieBreaker(0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type24 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX;
        float float25 = type24.tieBreaker();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder21.type(type24);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = multiMatchQueryBuilder21.cutoffFrequency((float) 0L);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder30 = multiMatchQueryBuilder21.lenient(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type31 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        org.elasticsearch.index.search.MatchQuery.Type type32 = type31.matchQueryType();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder33 = multiMatchQueryBuilder21.type(type31);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder34 = multiMatchQueryBuilder8.fuzziness((java.lang.Object) type31);
        org.elasticsearch.index.query.Operator operator35 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder36 = multiMatchQueryBuilder34.operator(operator35);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder38 = multiMatchQueryBuilder34.tieBreaker((float) 'a');
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder40 = multiMatchQueryBuilder38.rewrite("");
        java.lang.String str41 = multiMatchQueryBuilder40.getName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder43 = multiMatchQueryBuilder40.rewrite("multi_match");
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertTrue("'" + type24 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX + "'", type24.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX));
        org.junit.Assert.assertTrue("'" + float25 + "' != '" + 0.0f + "'", float25 == 0.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder28);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder30);
        org.junit.Assert.assertTrue("'" + type31 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type31.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertTrue("'" + type32 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type32.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder33);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder34);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder36);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder38);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "multi_match" + "'", str41, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder43);
    }

    @Test
    public void test15392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15392");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.tieBreaker(0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder10.cutoffFrequency((float) 0L);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder14.analyzer("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder16.field("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"slop\" : -1,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String str19 = multiMatchQueryBuilder18.queryName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder18.rewrite("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"rewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"slop\\\" : -1,\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"lenient\\\" : true,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 52.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder18.rewrite("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"type\" : \"phrase_prefix\",\n    \"max_expansions\" : 10,\n    \"fuzzy_rewrite\" : \"\",\n    \"tie_breaker\" : 0.0,\n    \"cutoff_frequency\" : 0.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.common.io.stream.StreamInput streamInput24 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder23.readFrom(streamInput24);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
    }

    @Test
    public void test15393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15393");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery13 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder12.zeroTermsQuery(zeroTermsQuery13);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder14.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery17 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder14.zeroTermsQuery(zeroTermsQuery17);
        java.lang.String[] strArray26 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray26);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = multiMatchQueryBuilder27.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = multiMatchQueryBuilder29.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery32 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder33 = multiMatchQueryBuilder31.zeroTermsQuery(zeroTermsQuery32);
        java.lang.String str34 = multiMatchQueryBuilder33.getName();
        boolean boolean35 = multiMatchQueryBuilder18.equals((java.lang.Object) multiMatchQueryBuilder33);
        java.lang.String str36 = multiMatchQueryBuilder33.getWriteableName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder38 = multiMatchQueryBuilder33.analyzer("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder40 = multiMatchQueryBuilder33.lenient(false);
        java.lang.String str41 = multiMatchQueryBuilder40.queryName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder43 = multiMatchQueryBuilder40.minimumShouldMatch("{\n  \"multiMatch\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"type\" : \"phrase_prefix\",\n    \"maxExpansions\" : 10,\n    \"fuzzyRewrite\" : \"\",\n    \"tieBreaker\" : 0.0,\n    \"cutoffFrequency\" : 0.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder45 = multiMatchQueryBuilder40.cutoffFrequency((float) (byte) -1);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery46 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder47 = multiMatchQueryBuilder45.zeroTermsQuery(zeroTermsQuery46);
        java.lang.String str48 = multiMatchQueryBuilder47.queryName();
        java.lang.String str49 = multiMatchQueryBuilder47.getName();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder29);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder31);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "multi_match" + "'", str34, "multi_match");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "multi_match" + "'", str36, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder38);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder40);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder43);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder45);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder47);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "multi_match" + "'", str49, "multi_match");
    }

    @Test
    public void test15394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15394");
        org.elasticsearch.common.xcontent.XContent xContent0 = null;
        java.lang.String[] strArray8 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder9 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray8);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder9.minimumShouldMatch("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"slop\" : -1,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String str12 = null; // flaky: multiMatchQueryBuilder9.toString();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder9.boost((float) (short) 1);
        java.lang.String str15 = multiMatchQueryBuilder14.getWriteableName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder14.fuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"multi_match^0.0\" ],\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 0.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder17.slop((int) (short) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder17.rewrite("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"analyzer\" : \"hi!\",\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 0.0,\n    \"boost\" : 1.0,\n    \"_name\" : \"hi!\"\n  }\n}");
        java.lang.String[] strArray29 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder30 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray29);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder32 = multiMatchQueryBuilder30.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder34 = multiMatchQueryBuilder32.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery35 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder36 = multiMatchQueryBuilder34.zeroTermsQuery(zeroTermsQuery35);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder38 = multiMatchQueryBuilder34.maxExpansions((int) (byte) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder40 = multiMatchQueryBuilder34.field("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"slop\" : -1,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder42 = multiMatchQueryBuilder40.analyzer("");
        java.lang.String[] strArray50 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder51 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray50);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder53 = multiMatchQueryBuilder51.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder55 = multiMatchQueryBuilder53.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder57 = multiMatchQueryBuilder55.tieBreaker((float) '#');
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder59 = multiMatchQueryBuilder57.boost((float) 10L);
        java.lang.String[] strArray67 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder68 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray67);
        java.lang.Object obj69 = null;
        java.lang.String[] strArray78 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder79 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray78);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder80 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 10.0f, strArray78);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder81 = new org.elasticsearch.index.query.MultiMatchQueryBuilder(obj69, strArray78);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder82 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray78);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder83 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) multiMatchQueryBuilder57, strArray78);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder84 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) multiMatchQueryBuilder40, strArray78);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder85 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) multiMatchQueryBuilder17, strArray78);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder86 = null; // flaky: org.elasticsearch.common.xcontent.XContentBuilder.builder(xContent0, strArray78);
// flaky:             org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"minimum_should_match\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"slop\\\" : -1,\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"lenient\\\" : true,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"boost\" : 1.0\n  }\n}" + "'", str12, "{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"minimum_should_match\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"slop\\\" : -1,\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"lenient\\\" : true,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "multi_match" + "'", str15, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder32);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder34);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder36);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder38);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder40);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder42);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder53);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder55);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder57);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder59);
        org.junit.Assert.assertNotNull(strArray67);
        org.junit.Assert.assertNotNull(strArray78);
    }

    @Test
    public void test15395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15395");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder12.lenient(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder12.prefixLength((int) (byte) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder16.boost((float) 1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder18.field("{\n  \"multiMatch\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"rewrite\" : \"multi_match\",\n    \"fuzzyRewrite\" : \"hi!\",\n    \"lenient\" : false,\n    \"boost\" : 1.0\n  }\n}", (-1.0f));
        java.lang.String str22 = multiMatchQueryBuilder18.getName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder18.analyzer("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"analyzer\" : \"hi!\",\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0,\n    \"_name\" : \"hi!\"\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder24.analyzer("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\", \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"slop\\\" : -1,\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"lenient\\\" : true,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\" ],\n    \"analyzer\" : \"\",\n    \"fuzzy_rewrite\" : \"\",\n    \"tie_breaker\" : 0.0,\n    \"cutoff_frequency\" : 0.0,\n    \"boost\" : 1.0\n  }\n}");
        float float27 = multiMatchQueryBuilder24.boost();
        float float28 = multiMatchQueryBuilder24.boost();
        org.elasticsearch.index.query.Operator operator29 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder30 = multiMatchQueryBuilder24.operator(operator29);
        org.elasticsearch.common.xcontent.XContentType xContentType31 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.bytes.BytesReference bytesReference32 = multiMatchQueryBuilder24.buildAsBytes(xContentType31);
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchException; message: Failed to build ToXContent");
        } catch (org.elasticsearch.ElasticsearchException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "multi_match" + "'", str22, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertTrue("'" + float27 + "' != '" + 1.0f + "'", float27 == 1.0f);
        org.junit.Assert.assertTrue("'" + float28 + "' != '" + 1.0f + "'", float28 == 1.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder30);
    }

    @Test
    public void test15396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15396");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        java.lang.String[] strArray18 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray18);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder19.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder21.tieBreaker(0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type24 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX;
        float float25 = type24.tieBreaker();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder21.type(type24);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = multiMatchQueryBuilder21.cutoffFrequency((float) 0L);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder30 = multiMatchQueryBuilder21.lenient(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type31 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        org.elasticsearch.index.search.MatchQuery.Type type32 = type31.matchQueryType();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder33 = multiMatchQueryBuilder21.type(type31);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder34 = multiMatchQueryBuilder8.fuzziness((java.lang.Object) type31);
        org.elasticsearch.index.query.Operator operator35 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder36 = multiMatchQueryBuilder34.operator(operator35);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder38 = multiMatchQueryBuilder34.fuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"slop\\\" : -1,\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"lenient\\\" : true,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"boost\" : 1.0,\n    \"_name\" : \"hi!\"\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder40 = multiMatchQueryBuilder34.lenient(true);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertTrue("'" + type24 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX + "'", type24.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX));
        org.junit.Assert.assertTrue("'" + float25 + "' != '" + 0.0f + "'", float25 == 0.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder28);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder30);
        org.junit.Assert.assertTrue("'" + type31 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type31.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertTrue("'" + type32 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type32.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder33);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder34);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder36);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder38);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder40);
    }

    @Test
    public void test15397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15397");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.fuzzyRewrite("hi!");
        java.lang.String str13 = multiMatchQueryBuilder10.getName();
        float float14 = multiMatchQueryBuilder10.boost();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder10.lenient(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder10.queryName("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder10.cutoffFrequency((float) (-1L));
        java.lang.String str21 = multiMatchQueryBuilder20.queryName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder20.field("{\n  \"multiMatch\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\", \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"slop\\\" : -1,\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"lenient\\\" : true,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\", \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"max_expansions\\\" : 1,\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\" ],\n    \"analyzer\" : \"\",\n    \"fuzzyRewrite\" : \"\",\n    \"tieBreaker\" : 0.0,\n    \"cutoffFrequency\" : 0.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder23.slop((int) (short) 10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder23.fuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"analyzer\" : \"hi!\",\n    \"slop\" : 10,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"lenient\" : false,\n    \"boost\" : 1.0,\n    \"_name\" : \"hi!\"\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = multiMatchQueryBuilder23.minimumShouldMatch("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"type\" : \"phrase_prefix\",\n    \"max_expansions\" : 10,\n    \"fuzzy_rewrite\" : \"\",\n    \"tie_breaker\" : 0.0,\n    \"cutoff_frequency\" : 0.0,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String str30 = multiMatchQueryBuilder23.queryName();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "multi_match" + "'", str13, "multi_match");
        org.junit.Assert.assertTrue("'" + float14 + "' != '" + 1.0f + "'", float14 == 1.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
    }

    @Test
    public void test15398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15398");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder12.lenient(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder14.maxExpansions(0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder14.field("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}", (float) (short) 1);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery20 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder19.zeroTermsQuery(zeroTermsQuery20);
        org.elasticsearch.index.query.QueryValidationException queryValidationException22 = multiMatchQueryBuilder19.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder19.useDisMax(false);
        java.lang.String[] strArray32 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder33 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray32);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder35 = multiMatchQueryBuilder33.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder37 = multiMatchQueryBuilder35.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery38 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder39 = multiMatchQueryBuilder37.zeroTermsQuery(zeroTermsQuery38);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder41 = multiMatchQueryBuilder39.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery42 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder43 = multiMatchQueryBuilder39.zeroTermsQuery(zeroTermsQuery42);
        java.lang.String[] strArray51 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder52 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray51);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder54 = multiMatchQueryBuilder52.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder56 = multiMatchQueryBuilder54.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery57 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder58 = multiMatchQueryBuilder56.zeroTermsQuery(zeroTermsQuery57);
        java.lang.String str59 = multiMatchQueryBuilder58.getName();
        boolean boolean60 = multiMatchQueryBuilder43.equals((java.lang.Object) multiMatchQueryBuilder58);
        java.lang.String str61 = multiMatchQueryBuilder58.getWriteableName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder63 = multiMatchQueryBuilder58.analyzer("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder65 = multiMatchQueryBuilder58.fuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"slop\" : -1,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder67 = multiMatchQueryBuilder65.useDisMax(false);
        boolean boolean68 = multiMatchQueryBuilder19.equals((java.lang.Object) multiMatchQueryBuilder67);
        org.elasticsearch.index.query.QueryShardContext queryShardContext69 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.lucene.search.Query query70 = multiMatchQueryBuilder19.toFilter(queryShardContext69);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNull(queryValidationException22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder35);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder37);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder39);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder41);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder43);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder54);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder56);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "multi_match" + "'", str59, "multi_match");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "multi_match" + "'", str61, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder63);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder65);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
    }

    @Test
    public void test15399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15399");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.tieBreaker(0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type13 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX;
        float float14 = type13.tieBreaker();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder10.type(type13);
        org.elasticsearch.index.search.MatchQuery.Type type16 = type13.matchQueryType();
        org.elasticsearch.index.search.MatchQuery.Type type17 = type13.matchQueryType();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertTrue("'" + type13 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX + "'", type13.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX));
        org.junit.Assert.assertTrue("'" + float14 + "' != '" + 0.0f + "'", float14 == 0.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertTrue("'" + type16 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX + "'", type16.equals(org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX));
        org.junit.Assert.assertTrue("'" + type17 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX + "'", type17.equals(org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX));
    }

    @Test
    public void test15400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15400");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder12.lenient(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder14.rewrite("multi_match");
        java.lang.String str17 = multiMatchQueryBuilder16.getWriteableName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder16.analyzer("{\n  \"multiMatch\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzyRewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder19.lenient(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder21.fuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder23.tieBreaker((float) 10);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery26 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder23.zeroTermsQuery(zeroTermsQuery26);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder30 = multiMatchQueryBuilder23.field("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\", \"{\\n  \\\"multiMatch\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"type\\\" : \\\"phrase_prefix\\\",\\n    \\\"maxExpansions\\\" : 10,\\n    \\\"fuzzyRewrite\\\" : \\\"\\\",\\n    \\\"tieBreaker\\\" : 0.0,\\n    \\\"cutoffFrequency\\\" : 0.0,\\n    \\\"boost\\\" : 1.0\\n  }\\n}^97.0\" ],\n    \"analyzer\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"slop\\\" : -1,\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"lenient\\\" : true,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0,\n    \"_name\" : \"hi!\"\n  }\n}", 52.0f);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "multi_match" + "'", str17, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder30);
    }

    @Test
    public void test15401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15401");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder12.lenient(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder14.rewrite("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder14.lenient(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder14.boost((float) 100);
        java.lang.String[] strArray28 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray28);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = multiMatchQueryBuilder29.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder33 = multiMatchQueryBuilder31.fuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type34 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX;
        org.elasticsearch.index.search.MatchQuery.Type type35 = type34.matchQueryType();
        org.elasticsearch.common.ParseField parseField36 = type34.parseField();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder37 = multiMatchQueryBuilder31.type(type34);
        org.elasticsearch.index.search.MatchQuery.Type type38 = type34.matchQueryType();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder39 = multiMatchQueryBuilder20.type(type34);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder41 = multiMatchQueryBuilder39.queryName("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\", \"\" ],\n    \"analyzer\" : \"multi_match\",\n    \"rewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"analyzer\\\" : \\\"hi!\\\",\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0,\\n    \\\"_name\\\" : \\\"hi!\\\"\\n  }\\n}\",\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"use_dis_max\" : false,\n    \"cutoff_frequency\" : 1.0,\n    \"boost\" : 0.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder43 = multiMatchQueryBuilder39.prefixLength((int) ' ');
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder31);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder33);
        org.junit.Assert.assertTrue("'" + type34 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX + "'", type34.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX));
        org.junit.Assert.assertTrue("'" + type35 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX + "'", type35.equals(org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX));
        org.junit.Assert.assertNotNull(parseField36);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder37);
        org.junit.Assert.assertTrue("'" + type38 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX + "'", type38.equals(org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder39);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder41);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder43);
    }

    @Test
    public void test15402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15402");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder8.queryName("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.Operator operator13 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder12.operator(operator13);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder14.lenient(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder16.maxExpansions((int) (short) 1);
        java.lang.String str19 = multiMatchQueryBuilder16.getWriteableName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder16.prefixLength(0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder21.slop((int) (short) -1);
        java.lang.String[] strArray31 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder32 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray31);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder34 = multiMatchQueryBuilder32.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder36 = multiMatchQueryBuilder34.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery37 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder38 = multiMatchQueryBuilder36.zeroTermsQuery(zeroTermsQuery37);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder40 = multiMatchQueryBuilder38.fuzzyRewrite("hi!");
        float float41 = multiMatchQueryBuilder40.boost();
        java.lang.String str42 = multiMatchQueryBuilder40.getWriteableName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder43 = multiMatchQueryBuilder21.fuzziness((java.lang.Object) str42);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder45 = multiMatchQueryBuilder21.rewrite("{\n  \"multiMatch\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzyRewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder46 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params47 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder48 = multiMatchQueryBuilder45.toXContent(xContentBuilder46, params47);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "multi_match" + "'", str19, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder34);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder36);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder38);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder40);
        org.junit.Assert.assertTrue("'" + float41 + "' != '" + 1.0f + "'", float41 == 1.0f);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "multi_match" + "'", str42, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder43);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder45);
        org.junit.Assert.assertNotNull(params47);
    }

    @Test
    public void test15403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15403");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder12.lenient(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder12.prefixLength((int) (byte) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder12.rewrite("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"multi_match^0.0\" ],\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 0.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder12.prefixLength((int) (byte) -1);
        java.lang.String str21 = null; // flaky: multiMatchQueryBuilder20.toString();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder20.tieBreaker((float) ' ');
        java.lang.String[] strArray31 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder32 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray31);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder34 = multiMatchQueryBuilder32.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder36 = multiMatchQueryBuilder34.fuzzyRewrite("hi!");
        java.lang.String str37 = multiMatchQueryBuilder34.getName();
        float float38 = multiMatchQueryBuilder34.boost();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder40 = multiMatchQueryBuilder34.lenient(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder42 = multiMatchQueryBuilder34.queryName("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder44 = multiMatchQueryBuilder34.cutoffFrequency((float) (-1L));
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type45 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX;
        float float46 = type45.tieBreaker();
        boolean boolean47 = multiMatchQueryBuilder44.equals((java.lang.Object) type45);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder48 = multiMatchQueryBuilder23.type(type45);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder50 = multiMatchQueryBuilder23.boost((float) '#');
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder52 = multiMatchQueryBuilder50.fuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"prefix_length\" : 1,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 0.0,\n    \"boost\" : 0.0\n  }\n}");
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
// flaky:         org.junit.Assert.assertEquals("'" + str21 + "' != '" + "{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"prefix_length\" : -1,\n    \"rewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"multi_match^0.0\\\" ],\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"lenient\\\" : true,\\n    \\\"boost\\\" : 0.0\\n  }\\n}\",\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"lenient\" : false,\n    \"boost\" : 1.0\n  }\n}" + "'", str21, "{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"prefix_length\" : -1,\n    \"rewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"multi_match^0.0\\\" ],\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"lenient\\\" : true,\\n    \\\"boost\\\" : 0.0\\n  }\\n}\",\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"lenient\" : false,\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder34);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "multi_match" + "'", str37, "multi_match");
        org.junit.Assert.assertTrue("'" + float38 + "' != '" + 1.0f + "'", float38 == 1.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder40);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder42);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder44);
        org.junit.Assert.assertTrue("'" + type45 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX + "'", type45.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX));
        org.junit.Assert.assertTrue("'" + float46 + "' != '" + 0.0f + "'", float46 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder48);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder50);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder52);
    }

    @Test
    public void test15404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15404");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder12.lenient(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder14.rewrite("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder16.field("{\n  \"multiMatch\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzyRewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}", (float) (short) -1);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery20 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder19.zeroTermsQuery(zeroTermsQuery20);
        java.lang.String str22 = multiMatchQueryBuilder21.getName();
        java.lang.String str23 = multiMatchQueryBuilder21.getName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder21.field("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"prefix_length\" : -1,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}", (float) (short) 1);
        org.elasticsearch.common.io.stream.StreamOutput streamOutput27 = null;
        // The following exception was thrown during execution in test generation
        try {
            multiMatchQueryBuilder26.writeTo(streamOutput27);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "multi_match" + "'", str22, "multi_match");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "multi_match" + "'", str23, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
    }

    @Test
    public void test15405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15405");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        java.lang.String[] strArray18 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray18);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder19.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder21.tieBreaker(0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type24 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX;
        float float25 = type24.tieBreaker();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder21.type(type24);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = multiMatchQueryBuilder21.cutoffFrequency((float) 0L);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder30 = multiMatchQueryBuilder21.lenient(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type31 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        org.elasticsearch.index.search.MatchQuery.Type type32 = type31.matchQueryType();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder33 = multiMatchQueryBuilder21.type(type31);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder34 = multiMatchQueryBuilder8.fuzziness((java.lang.Object) type31);
        org.elasticsearch.index.query.Operator operator35 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder36 = multiMatchQueryBuilder34.operator(operator35);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder38 = multiMatchQueryBuilder36.slop((int) (byte) -1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder40 = multiMatchQueryBuilder38.analyzer("{\n  \"multiMatch\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"type\" : \"phrase_prefix\",\n    \"maxExpansions\" : 10,\n    \"fuzzyRewrite\" : \"\",\n    \"tieBreaker\" : 0.0,\n    \"cutoffFrequency\" : 0.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder43 = multiMatchQueryBuilder40.field("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"analyzer\" : \"multi_match\",\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}", (float) 10);
        java.lang.String[] strArray51 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder52 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray51);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder54 = multiMatchQueryBuilder52.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder56 = multiMatchQueryBuilder54.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery57 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder58 = multiMatchQueryBuilder56.zeroTermsQuery(zeroTermsQuery57);
        java.lang.String str59 = null; // flaky: multiMatchQueryBuilder56.toString();
        java.lang.String str60 = multiMatchQueryBuilder56.queryName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder62 = multiMatchQueryBuilder56.queryName("");
        java.lang.String str63 = multiMatchQueryBuilder56.getName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder66 = multiMatchQueryBuilder56.field("", (float) ' ');
        boolean boolean67 = multiMatchQueryBuilder40.equals((java.lang.Object) multiMatchQueryBuilder56);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder69 = multiMatchQueryBuilder40.cutoffFrequency((float) (byte) 100);
        org.elasticsearch.index.query.QueryValidationException queryValidationException70 = multiMatchQueryBuilder40.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder72 = multiMatchQueryBuilder40.analyzer("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"type\" : \"phrase_prefix\",\n    \"analyzer\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"analyzer\\\" : \\\"multi_match\\\",\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"max_expansions\" : 10,\n    \"fuzzy_rewrite\" : \"\",\n    \"tie_breaker\" : 0.0,\n    \"lenient\" : false,\n    \"cutoff_frequency\" : 0.0,\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertTrue("'" + type24 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX + "'", type24.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX));
        org.junit.Assert.assertTrue("'" + float25 + "' != '" + 0.0f + "'", float25 == 0.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder28);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder30);
        org.junit.Assert.assertTrue("'" + type31 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type31.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertTrue("'" + type32 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type32.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder33);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder34);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder36);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder38);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder40);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder43);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder54);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder56);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder58);
// flaky:         org.junit.Assert.assertEquals("'" + str59 + "' != '" + "{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}" + "'", str59, "{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNull(str60);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "multi_match" + "'", str63, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder69);
        org.junit.Assert.assertNull(queryValidationException70);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder72);
    }

    @Test
    public void test15406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15406");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery13 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder12.zeroTermsQuery(zeroTermsQuery13);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder14.fuzzyRewrite("hi!");
        float float17 = multiMatchQueryBuilder16.boost();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder16.cutoffFrequency((float) (short) 0);
        java.lang.String str20 = multiMatchQueryBuilder16.queryName();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertTrue("'" + float17 + "' != '" + 1.0f + "'", float17 == 1.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNull(str20);
    }

    @Test
    public void test15407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15407");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.tieBreaker(0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type13 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX;
        float float14 = type13.tieBreaker();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder10.type(type13);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder10.cutoffFrequency((float) 0L);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder10.queryName("multi_match");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder19.field("", (float) 1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder19.minimumShouldMatch("{\n  \"multiMatch\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzyRewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String str25 = null; // flaky: multiMatchQueryBuilder24.toString();
        org.elasticsearch.index.query.Operator operator26 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder24.operator(operator26);
        java.lang.String str28 = multiMatchQueryBuilder27.getWriteableName();
        org.elasticsearch.index.query.QueryValidationException queryValidationException29 = multiMatchQueryBuilder27.validate();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertTrue("'" + type13 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX + "'", type13.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX));
        org.junit.Assert.assertTrue("'" + float14 + "' != '" + 0.0f + "'", float14 == 0.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
// flaky:         org.junit.Assert.assertEquals("'" + str25 + "' != '" + "{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"^1.0\", \"^1.0\", \"^1.0\", \"^1.0\", \"^1.0\", \"^1.0\" ],\n    \"type\" : \"phrase_prefix\",\n    \"minimum_should_match\" : \"{\\n  \\\"multiMatch\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"fuzzyRewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"fuzzy_rewrite\" : \"\",\n    \"tie_breaker\" : 0.0,\n    \"cutoff_frequency\" : 0.0,\n    \"boost\" : 1.0,\n    \"_name\" : \"multi_match\"\n  }\n}" + "'", str25, "{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"^1.0\", \"^1.0\", \"^1.0\", \"^1.0\", \"^1.0\", \"^1.0\" ],\n    \"type\" : \"phrase_prefix\",\n    \"minimum_should_match\" : \"{\\n  \\\"multiMatch\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"fuzzyRewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"fuzzy_rewrite\" : \"\",\n    \"tie_breaker\" : 0.0,\n    \"cutoff_frequency\" : 0.0,\n    \"boost\" : 1.0,\n    \"_name\" : \"multi_match\"\n  }\n}");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "multi_match" + "'", str28, "multi_match");
        org.junit.Assert.assertNull(queryValidationException29);
    }

    @Test
    public void test15408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15408");
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type0 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX;
        float float1 = type0.tieBreaker();
        float float2 = type0.tieBreaker();
        org.elasticsearch.index.search.MatchQuery.Type type3 = type0.matchQueryType();
        java.lang.String[] strArray11 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray11);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder12.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder12.queryName("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.Operator operator17 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder16.operator(operator17);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder18.lenient(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder20.maxExpansions((int) (short) 1);
        java.lang.String[] strArray30 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray30);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder32 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) multiMatchQueryBuilder20, strArray30);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder33 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) type0, strArray30);
        java.lang.String[] strArray41 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder42 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray41);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder44 = multiMatchQueryBuilder42.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder46 = multiMatchQueryBuilder44.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery47 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder48 = multiMatchQueryBuilder46.zeroTermsQuery(zeroTermsQuery47);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder50 = multiMatchQueryBuilder48.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder52 = multiMatchQueryBuilder50.queryName("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder54 = multiMatchQueryBuilder50.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder56 = multiMatchQueryBuilder50.fuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"slop\" : -1,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder58 = multiMatchQueryBuilder56.prefixLength((int) (short) 10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder59 = multiMatchQueryBuilder33.fuzziness((java.lang.Object) (short) 10);
        java.lang.String str60 = null; // flaky: multiMatchQueryBuilder33.toString();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder62 = multiMatchQueryBuilder33.prefixLength(100);
        java.lang.String str63 = multiMatchQueryBuilder62.getWriteableName();
        java.lang.String str64 = multiMatchQueryBuilder62.getName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder66 = multiMatchQueryBuilder62.maxExpansions((int) (short) 10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder68 = multiMatchQueryBuilder62.lenient(true);
        org.junit.Assert.assertTrue("'" + type0 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX + "'", type0.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX));
        org.junit.Assert.assertTrue("'" + float1 + "' != '" + 0.0f + "'", float1 == 0.0f);
        org.junit.Assert.assertTrue("'" + float2 + "' != '" + 0.0f + "'", float2 == 0.0f);
        org.junit.Assert.assertTrue("'" + type3 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX + "'", type3.equals(org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX));
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder44);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder46);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder48);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder50);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder52);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder54);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder56);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder58);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder59);
// flaky:         org.junit.Assert.assertEquals("'" + str60 + "' != '" + "{\n  \"multi_match\" : {\n    \"query\" : \"PHRASE_PREFIX\",\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzziness\" : \"10\",\n    \"boost\" : 1.0\n  }\n}" + "'", str60, "{\n  \"multi_match\" : {\n    \"query\" : \"PHRASE_PREFIX\",\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzziness\" : \"10\",\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "multi_match" + "'", str63, "multi_match");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "multi_match" + "'", str64, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder66);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder68);
    }

    @Test
    public void test15409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15409");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery13 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder12.zeroTermsQuery(zeroTermsQuery13);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder14.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder16.queryName("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder16.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder16.fuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"slop\" : -1,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String str23 = multiMatchQueryBuilder22.queryName();
        java.lang.String[] strArray31 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder32 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray31);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder34 = multiMatchQueryBuilder32.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder36 = multiMatchQueryBuilder32.prefixLength(10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder37 = null; // flaky: multiMatchQueryBuilder22.fuzziness((java.lang.Object) multiMatchQueryBuilder36);
        java.lang.String str38 = null; // flaky: multiMatchQueryBuilder37.queryName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder40 = null; // flaky: multiMatchQueryBuilder37.maxExpansions((int) (byte) 1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder42 = null; // flaky: multiMatchQueryBuilder40.boost(32.0f);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "hi!" + "'", str23, "hi!");
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder34);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder36);
// flaky:         org.junit.Assert.assertNotNull(multiMatchQueryBuilder37);
// flaky:         org.junit.Assert.assertEquals("'" + str38 + "' != '" + "hi!" + "'", str38, "hi!");
// flaky:         org.junit.Assert.assertNotNull(multiMatchQueryBuilder40);
// flaky:         org.junit.Assert.assertNotNull(multiMatchQueryBuilder42);
    }

    @Test
    public void test15410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15410");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.fuzzyRewrite("hi!");
        java.lang.String str13 = multiMatchQueryBuilder10.getName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder10.analyzer("multi_match");
        org.elasticsearch.index.query.Operator operator16 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder15.operator(operator16);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery18 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder15.zeroTermsQuery(zeroTermsQuery18);
        java.lang.String[] strArray27 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray27);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder30 = multiMatchQueryBuilder28.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder32 = multiMatchQueryBuilder30.fuzzyRewrite("hi!");
        java.lang.String str33 = multiMatchQueryBuilder30.getName();
        float float34 = multiMatchQueryBuilder30.boost();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder36 = multiMatchQueryBuilder30.lenient(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder38 = multiMatchQueryBuilder30.queryName("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder40 = multiMatchQueryBuilder30.cutoffFrequency((float) (-1L));
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder42 = multiMatchQueryBuilder30.useDisMax(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder44 = multiMatchQueryBuilder30.cutoffFrequency((float) (short) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder46 = multiMatchQueryBuilder30.cutoffFrequency((float) (byte) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder48 = multiMatchQueryBuilder30.slop((int) (byte) 10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type49 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX;
        float float50 = type49.tieBreaker();
        float float51 = type49.tieBreaker();
        org.elasticsearch.index.search.MatchQuery.Type type52 = type49.matchQueryType();
        java.lang.String[] strArray60 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder61 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray60);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder63 = multiMatchQueryBuilder61.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder65 = multiMatchQueryBuilder61.queryName("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.Operator operator66 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder67 = multiMatchQueryBuilder65.operator(operator66);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder69 = multiMatchQueryBuilder67.lenient(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder71 = multiMatchQueryBuilder69.maxExpansions((int) (short) 1);
        java.lang.String[] strArray79 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder80 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray79);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder81 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) multiMatchQueryBuilder69, strArray79);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder82 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) type49, strArray79);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder83 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (byte) 10, strArray79);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder84 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) multiMatchQueryBuilder15, strArray79);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder86 = multiMatchQueryBuilder84.rewrite("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"max_expansions\" : 1,\n    \"minimum_should_match\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"fuzzy_rewrite\" : \"\",\n    \"lenient\" : true,\n    \"boost\" : 1.0,\n    \"_name\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\"\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder88 = multiMatchQueryBuilder84.rewrite("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"type\" : \"best_fields\",\n    \"analyzer\" : \"{\\n  \\\"multiMatch\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"type\\\" : \\\"phrase_prefix\\\",\\n    \\\"maxExpansions\\\" : 10,\\n    \\\"fuzzyRewrite\\\" : \\\"\\\",\\n    \\\"tieBreaker\\\" : 0.0,\\n    \\\"cutoffFrequency\\\" : 0.0,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"rewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"use_dis_max\" : false,\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder90 = multiMatchQueryBuilder88.analyzer("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"type\" : \"phrase_prefix\",\n    \"slop\" : -1,\n    \"minimum_should_match\" : \"hi!\",\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0,\n    \"_name\" : \"multi_match\"\n  }\n}");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery91 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder92 = multiMatchQueryBuilder90.zeroTermsQuery(zeroTermsQuery91);
        java.lang.String str93 = multiMatchQueryBuilder90.getWriteableName();
        org.elasticsearch.index.query.Operator operator94 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder95 = multiMatchQueryBuilder90.operator(operator94);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "multi_match" + "'", str13, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder30);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "multi_match" + "'", str33, "multi_match");
        org.junit.Assert.assertTrue("'" + float34 + "' != '" + 1.0f + "'", float34 == 1.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder36);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder38);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder40);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder42);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder44);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder46);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder48);
        org.junit.Assert.assertTrue("'" + type49 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX + "'", type49.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX));
        org.junit.Assert.assertTrue("'" + float50 + "' != '" + 0.0f + "'", float50 == 0.0f);
        org.junit.Assert.assertTrue("'" + float51 + "' != '" + 0.0f + "'", float51 == 0.0f);
        org.junit.Assert.assertTrue("'" + type52 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX + "'", type52.equals(org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX));
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder63);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder65);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder67);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder69);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder71);
        org.junit.Assert.assertNotNull(strArray79);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder86);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder88);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder90);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder92);
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "multi_match" + "'", str93, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder95);
    }

    @Test
    public void test15411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15411");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.tieBreaker(0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type13 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX;
        float float14 = type13.tieBreaker();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder10.type(type13);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder10.cutoffFrequency((float) 0L);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder10.maxExpansions(10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder10.analyzer("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"slop\" : -1,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder10.slop((int) (byte) 1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder23.boost((float) (short) 1);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertTrue("'" + type13 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX + "'", type13.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX));
        org.junit.Assert.assertTrue("'" + float14 + "' != '" + 0.0f + "'", float14 == 0.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
    }

    @Test
    public void test15412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15412");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder10.field("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder10.boost(0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder10.prefixLength((int) (short) 10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder18.boost((float) 10L);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder20.analyzer("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\", \"\" ],\n    \"analyzer\" : \"multi_match\",\n    \"max_expansions\" : -1,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"use_dis_max\" : true,\n    \"boost\" : 0.0\n  }\n}");
        java.lang.String[] strArray30 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray30);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder33 = multiMatchQueryBuilder31.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder35 = multiMatchQueryBuilder33.fuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder37 = multiMatchQueryBuilder33.minimumShouldMatch("multi_match");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder39 = multiMatchQueryBuilder33.slop((int) (short) -1);
        boolean boolean40 = multiMatchQueryBuilder22.equals((java.lang.Object) multiMatchQueryBuilder33);
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder49 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray48);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder51 = multiMatchQueryBuilder49.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder53 = multiMatchQueryBuilder51.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery54 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder55 = multiMatchQueryBuilder53.zeroTermsQuery(zeroTermsQuery54);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder57 = multiMatchQueryBuilder55.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder59 = multiMatchQueryBuilder57.queryName("hi!");
        java.lang.String str60 = multiMatchQueryBuilder57.queryName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder62 = multiMatchQueryBuilder57.tieBreaker((float) 1L);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder64 = multiMatchQueryBuilder62.minimumShouldMatch("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"^1.0\", \"^1.0\", \"^1.0\", \"^1.0\", \"^1.0\", \"^1.0\" ],\n    \"type\" : \"phrase_prefix\",\n    \"fuzzy_rewrite\" : \"\",\n    \"tie_breaker\" : 52.0,\n    \"cutoff_frequency\" : 0.0,\n    \"boost\" : 1.0,\n    \"_name\" : \"multi_match\"\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder65 = multiMatchQueryBuilder22.fuzziness((java.lang.Object) "{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"^1.0\", \"^1.0\", \"^1.0\", \"^1.0\", \"^1.0\", \"^1.0\" ],\n    \"type\" : \"phrase_prefix\",\n    \"fuzzy_rewrite\" : \"\",\n    \"tie_breaker\" : 52.0,\n    \"cutoff_frequency\" : 0.0,\n    \"boost\" : 1.0,\n    \"_name\" : \"multi_match\"\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder67 = multiMatchQueryBuilder65.fuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"max_expansions\" : 1,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"use_dis_max\" : true,\n    \"lenient\" : true,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0,\n    \"_name\" : \"\"\n  }\n}");
        java.lang.String str68 = multiMatchQueryBuilder65.getWriteableName();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder33);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder35);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder37);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder51);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder53);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder55);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder57);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "hi!" + "'", str60, "hi!");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder62);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder64);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder65);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "multi_match" + "'", str68, "multi_match");
    }

    @Test
    public void test15413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15413");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.fuzzyRewrite("hi!");
        java.lang.String str13 = multiMatchQueryBuilder10.getName();
        float float14 = multiMatchQueryBuilder10.boost();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder10.lenient(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder10.slop((int) (short) -1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type19 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX;
        org.elasticsearch.index.search.MatchQuery.Type type20 = type19.matchQueryType();
        org.elasticsearch.index.search.MatchQuery.Type type21 = type19.matchQueryType();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder10.type(type19);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder10.queryName("multi_match");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder24.minimumShouldMatch("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = multiMatchQueryBuilder26.field("", (float) 10L);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = multiMatchQueryBuilder29.boost((float) (short) 10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder33 = multiMatchQueryBuilder31.prefixLength((int) '#');
        java.lang.String[] strArray41 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder42 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray41);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder44 = multiMatchQueryBuilder42.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder46 = multiMatchQueryBuilder44.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder48 = multiMatchQueryBuilder46.lenient(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder50 = multiMatchQueryBuilder48.rewrite("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder52 = multiMatchQueryBuilder48.lenient(false);
        java.lang.String str53 = multiMatchQueryBuilder48.queryName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder54 = null; // flaky: multiMatchQueryBuilder31.fuzziness((java.lang.Object) multiMatchQueryBuilder48);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder56 = null; // flaky: multiMatchQueryBuilder54.boost((float) (byte) 100);
        java.lang.String str57 = null; // flaky: multiMatchQueryBuilder56.getName();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "multi_match" + "'", str13, "multi_match");
        org.junit.Assert.assertTrue("'" + float14 + "' != '" + 1.0f + "'", float14 == 1.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertTrue("'" + type19 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX + "'", type19.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX));
        org.junit.Assert.assertTrue("'" + type20 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX + "'", type20.equals(org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX));
        org.junit.Assert.assertTrue("'" + type21 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX + "'", type21.equals(org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder29);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder31);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder33);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder44);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder46);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder48);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder50);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder52);
        org.junit.Assert.assertNull(str53);
// flaky:         org.junit.Assert.assertNotNull(multiMatchQueryBuilder54);
// flaky:         org.junit.Assert.assertNotNull(multiMatchQueryBuilder56);
// flaky:         org.junit.Assert.assertEquals("'" + str57 + "' != '" + "multi_match" + "'", str57, "multi_match");
    }

    @Test
    public void test15414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15414");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder12.lenient(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder14.rewrite("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder16.boost((float) (-1L));
        java.lang.String[] strArray26 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray26);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = multiMatchQueryBuilder27.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = multiMatchQueryBuilder29.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder33 = multiMatchQueryBuilder31.lenient(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder35 = multiMatchQueryBuilder33.maxExpansions(0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder38 = multiMatchQueryBuilder33.field("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}", (float) (short) 1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type39 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS;
        org.elasticsearch.index.search.MatchQuery.Type type40 = type39.matchQueryType();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder41 = multiMatchQueryBuilder38.type(type39);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder42 = multiMatchQueryBuilder18.type(type39);
        float float43 = multiMatchQueryBuilder18.boost();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder45 = multiMatchQueryBuilder18.tieBreaker((float) (-1));
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder48 = multiMatchQueryBuilder45.field("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"analyzer\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"fuzzy_rewrite\\\" : \\\"\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"fuzzy_rewrite\" : \"\",\n    \"use_dis_max\" : false,\n    \"boost\" : 1.0,\n    \"_name\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\"\n  }\n}", (float) '#');
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder29);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder31);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder33);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder35);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder38);
        org.junit.Assert.assertTrue("'" + type39 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS + "'", type39.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS));
        org.junit.Assert.assertTrue("'" + type40 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type40.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder41);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder42);
        org.junit.Assert.assertTrue("'" + float43 + "' != '" + (-1.0f) + "'", float43 == (-1.0f));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder45);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder48);
    }

    @Test
    public void test15415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15415");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder8.queryName("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.Operator operator13 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder12.operator(operator13);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder14.lenient(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder16.field("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder18.lenient(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder18.slop(0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder22.field("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"type\" : \"best_fields\",\n    \"fuzzy_rewrite\" : \"\",\n    \"use_dis_max\" : false,\n    \"tie_breaker\" : 0.0,\n    \"lenient\" : false,\n    \"cutoff_frequency\" : 0.0,\n    \"boost\" : 1.0\n  }\n}", (float) (short) 1);
        java.lang.String str26 = multiMatchQueryBuilder22.queryName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = multiMatchQueryBuilder22.useDisMax(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = multiMatchQueryBuilder22.field("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\", \"\" ],\n    \"analyzer\" : \"multi_match\",\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"use_dis_max\" : true,\n    \"cutoff_frequency\" : -1.0,\n    \"boost\" : 0.0\n  }\n}", 52.0f);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}" + "'", str26, "{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder28);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder31);
    }

    @Test
    public void test15416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15416");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.fuzzyRewrite("hi!");
        java.lang.String str13 = multiMatchQueryBuilder10.getName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder10.rewrite("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"slop\" : -1,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder10.tieBreaker((float) '4');
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder10.queryName("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder10.minimumShouldMatch("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\", \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"analyzer\\\" : \\\"multi_match\\\",\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}^10.0\", \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\" ],\n    \"max_expansions\" : 10,\n    \"fuzzy_rewrite\" : \"\",\n    \"boost\" : 1.0,\n    \"_name\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\"\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder10.minimumShouldMatch("{\n  \"multiMatch\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\", \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"slop\\\" : -1,\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"lenient\\\" : true,\\n    \\\"boost\\\" : 1.0\\n  }\\n}^0.0\" ],\n    \"analyzer\" : \"multi_match\",\n    \"fuzzyRewrite\" : \"hi!\",\n    \"boost\" : 1.0,\n    \"Name\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\"\n  }\n}");
        java.lang.String[] strArray31 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder32 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray31);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder34 = multiMatchQueryBuilder32.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder36 = multiMatchQueryBuilder34.fuzzyRewrite("hi!");
        java.lang.String str37 = multiMatchQueryBuilder34.getName();
        float float38 = multiMatchQueryBuilder34.boost();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder40 = multiMatchQueryBuilder34.lenient(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder42 = multiMatchQueryBuilder34.slop((int) (short) -1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder44 = multiMatchQueryBuilder34.tieBreaker((float) 10L);
        java.lang.String str45 = null; // flaky: multiMatchQueryBuilder44.toString();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder47 = multiMatchQueryBuilder44.rewrite("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\", \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"analyzer\\\" : \\\"multi_match\\\",\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}^10.0\", \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\" ],\n    \"max_expansions\" : 10,\n    \"fuzzy_rewrite\" : \"\",\n    \"boost\" : 1.0,\n    \"_name\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\"\n  }\n}");
        org.elasticsearch.index.query.QueryValidationException queryValidationException48 = multiMatchQueryBuilder47.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder50 = multiMatchQueryBuilder47.minimumShouldMatch("{\n  \"multiMatch\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzyRewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder52 = multiMatchQueryBuilder47.slop(10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder53 = multiMatchQueryBuilder10.fuzziness((java.lang.Object) 10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder55 = multiMatchQueryBuilder53.analyzer("{\n  \"multiMatch\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"rewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"slop\\\" : -1,\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"lenient\\\" : true,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"fuzzyRewrite\" : \"hi!\",\n    \"tieBreaker\" : 52.0,\n    \"boost\" : -1.0\n  }\n}");
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder56 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params57 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder58 = multiMatchQueryBuilder55.toXContent(xContentBuilder56, params57);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "multi_match" + "'", str13, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder34);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "multi_match" + "'", str37, "multi_match");
        org.junit.Assert.assertTrue("'" + float38 + "' != '" + 1.0f + "'", float38 == 1.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder40);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder42);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder44);
// flaky:         org.junit.Assert.assertEquals("'" + str45 + "' != '" + "{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"slop\" : -1,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 10.0,\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}" + "'", str45, "{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"slop\" : -1,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 10.0,\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder47);
        org.junit.Assert.assertNull(queryValidationException48);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder50);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder52);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder53);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder55);
        org.junit.Assert.assertNotNull(params57);
    }

    @Test
    public void test15417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15417");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder12.lenient(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder14.rewrite("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder14.lenient(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder14.boost((float) 100);
        java.lang.String[] strArray28 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray28);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = multiMatchQueryBuilder29.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder33 = multiMatchQueryBuilder31.fuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type34 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX;
        org.elasticsearch.index.search.MatchQuery.Type type35 = type34.matchQueryType();
        org.elasticsearch.common.ParseField parseField36 = type34.parseField();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder37 = multiMatchQueryBuilder31.type(type34);
        org.elasticsearch.index.search.MatchQuery.Type type38 = type34.matchQueryType();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder39 = multiMatchQueryBuilder20.type(type34);
        org.elasticsearch.index.search.MatchQuery.Type type40 = type34.matchQueryType();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder31);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder33);
        org.junit.Assert.assertTrue("'" + type34 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX + "'", type34.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX));
        org.junit.Assert.assertTrue("'" + type35 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX + "'", type35.equals(org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX));
        org.junit.Assert.assertNotNull(parseField36);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder37);
        org.junit.Assert.assertTrue("'" + type38 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX + "'", type38.equals(org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder39);
        org.junit.Assert.assertTrue("'" + type40 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX + "'", type40.equals(org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX));
    }

    @Test
    public void test15418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15418");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder8.cutoffFrequency((float) 100);
        java.lang.String str13 = multiMatchQueryBuilder12.queryName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder12.boost((float) '4');
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder15.tieBreaker(0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder17.queryName("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"type\" : \"best_fields\",\n    \"analyzer\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"analyzer\\\" : \\\"multi_match\\\",\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"fuzzy_rewrite\" : \"\",\n    \"tie_breaker\" : 0.0,\n    \"cutoff_frequency\" : 0.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder17.minimumShouldMatch("{\n  \"multiMatch\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzyRewrite\" : \"hi!\",\n    \"useDisMax\" : true,\n    \"lenient\" : true,\n    \"cutoffFrequency\" : -1.0,\n    \"boost\" : 1.0,\n    \"Name\" : \"\"\n  }\n}");
        java.lang.String[] strArray29 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder30 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray29);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder32 = multiMatchQueryBuilder30.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder34 = multiMatchQueryBuilder32.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder36 = multiMatchQueryBuilder34.lenient(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder38 = multiMatchQueryBuilder34.prefixLength((int) (byte) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder40 = multiMatchQueryBuilder38.boost((float) 1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder43 = multiMatchQueryBuilder40.field("{\n  \"multiMatch\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"rewrite\" : \"multi_match\",\n    \"fuzzyRewrite\" : \"hi!\",\n    \"lenient\" : false,\n    \"boost\" : 1.0\n  }\n}", (-1.0f));
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder45 = multiMatchQueryBuilder40.tieBreaker((float) (-1));
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder47 = multiMatchQueryBuilder40.queryName("{\n  \"multiMatch\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"analyzer\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"slop\\\" : -1,\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"lenient\\\" : true,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"slop\" : 1,\n    \"fuzzyRewrite\" : \"hi!\",\n    \"useDisMax\" : false,\n    \"boost\" : 1.0,\n    \"Name\" : \"hi!\"\n  }\n}");
        org.elasticsearch.index.query.QueryValidationException queryValidationException48 = multiMatchQueryBuilder47.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder49 = null; // flaky: multiMatchQueryBuilder17.fuzziness((java.lang.Object) multiMatchQueryBuilder47);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder32);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder34);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder36);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder38);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder40);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder43);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder45);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder47);
        org.junit.Assert.assertNull(queryValidationException48);
// flaky:         org.junit.Assert.assertNotNull(multiMatchQueryBuilder49);
    }

    @Test
    public void test15419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15419");
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type2 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.parse("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\", \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"analyzer\\\" : \\\"multi_match\\\",\\n    \\\"minimum_should_match\\\" : \\\"{\\\\n  \\\\\\\"multiMatch\\\\\\\" : {\\\\n    \\\\\\\"query\\\\\\\" : 0.0,\\\\n    \\\\\\\"fields\\\\\\\" : [ \\\\\\\"hi!\\\\\\\", \\\\\\\"\\\\\\\", \\\\\\\"\\\\\\\", \\\\\\\"\\\\\\\", \\\\\\\"\\\\\\\", \\\\\\\"\\\\\\\" ],\\\\n    \\\\\\\"fuzzyRewrite\\\\\\\" : \\\\\\\"hi!\\\\\\\",\\\\n    \\\\\\\"boost\\\\\\\" : 1.0\\\\n  }\\\\n}\\\",\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"tie_breaker\\\" : 1.0,\\n    \\\"cutoff_frequency\\\" : 1.0,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\" ],\n    \"type\" : \"cross_fields\",\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 32.0,\n    \"boost\" : 1.0\n  }\n}", parseFieldMatcher1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test15420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15420");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        java.lang.String[] strArray18 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray18);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder19.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder21.tieBreaker(0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type24 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX;
        float float25 = type24.tieBreaker();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder21.type(type24);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = multiMatchQueryBuilder21.cutoffFrequency((float) 0L);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder30 = multiMatchQueryBuilder21.lenient(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type31 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        org.elasticsearch.index.search.MatchQuery.Type type32 = type31.matchQueryType();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder33 = multiMatchQueryBuilder21.type(type31);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder34 = multiMatchQueryBuilder8.fuzziness((java.lang.Object) type31);
        org.elasticsearch.index.query.Operator operator35 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder36 = multiMatchQueryBuilder34.operator(operator35);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder38 = multiMatchQueryBuilder34.boost(100.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder40 = multiMatchQueryBuilder34.maxExpansions((int) (byte) 100);
        java.lang.String str41 = multiMatchQueryBuilder40.getWriteableName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder43 = multiMatchQueryBuilder40.fuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\", \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"slop\\\" : -1,\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"lenient\\\" : true,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\" ],\n    \"analyzer\" : \"\",\n    \"max_expansions\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder44 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params45 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder46 = multiMatchQueryBuilder40.toXContent(xContentBuilder44, params45);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertTrue("'" + type24 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX + "'", type24.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX));
        org.junit.Assert.assertTrue("'" + float25 + "' != '" + 0.0f + "'", float25 == 0.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder28);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder30);
        org.junit.Assert.assertTrue("'" + type31 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type31.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertTrue("'" + type32 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type32.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder33);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder34);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder36);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder38);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "multi_match" + "'", str41, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder43);
        org.junit.Assert.assertNotNull(params45);
    }

    @Test
    public void test15421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15421");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder10.field("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder10.boost(0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder16.analyzer("multi_match");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder18.field("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}", (float) (short) 1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder18.rewrite("");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery24 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder18.zeroTermsQuery(zeroTermsQuery24);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder18.prefixLength(1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = multiMatchQueryBuilder27.field("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"analyzer\" : \"\",\n    \"fuzzy_rewrite\" : \"\",\n    \"tie_breaker\" : 52.0,\n    \"cutoff_frequency\" : 0.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = multiMatchQueryBuilder27.maxExpansions((int) ' ');
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder33 = multiMatchQueryBuilder27.slop((int) (byte) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder35 = multiMatchQueryBuilder27.analyzer("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"prefix_length\" : -1,\n    \"rewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"multi_match^0.0\\\" ],\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"lenient\\\" : true,\\n    \\\"boost\\\" : 0.0\\n  }\\n}\",\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"lenient\" : false,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder38 = multiMatchQueryBuilder35.field("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"type\" : \"best_fields\",\n    \"analyzer\" : \"hi!\",\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 0.0,\n    \"boost\" : 1.0,\n    \"_name\" : \"hi!\"\n  }\n}", 32.0f);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder29);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder31);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder33);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder35);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder38);
    }

    @Test
    public void test15422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15422");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder8.queryName("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.Operator operator13 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder12.operator(operator13);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder14.lenient(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder16.maxExpansions((int) (short) 1);
        java.lang.String str19 = multiMatchQueryBuilder16.getWriteableName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder16.prefixLength(0);
        java.lang.String str22 = multiMatchQueryBuilder21.getWriteableName();
        org.elasticsearch.index.query.QueryValidationException queryValidationException23 = multiMatchQueryBuilder21.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder21.maxExpansions((int) (byte) -1);
        java.lang.String[] strArray33 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder34 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray33);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder36 = multiMatchQueryBuilder34.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder38 = multiMatchQueryBuilder36.fuzzyRewrite("hi!");
        java.lang.String str39 = multiMatchQueryBuilder36.getName();
        float float40 = multiMatchQueryBuilder36.boost();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder42 = multiMatchQueryBuilder36.lenient(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder44 = multiMatchQueryBuilder36.slop((int) (short) -1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type45 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX;
        org.elasticsearch.index.search.MatchQuery.Type type46 = type45.matchQueryType();
        org.elasticsearch.index.search.MatchQuery.Type type47 = type45.matchQueryType();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder48 = multiMatchQueryBuilder36.type(type45);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder50 = multiMatchQueryBuilder36.queryName("multi_match");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder52 = multiMatchQueryBuilder50.minimumShouldMatch("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder54 = multiMatchQueryBuilder50.lenient(true);
        org.elasticsearch.index.query.Operator operator55 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder56 = multiMatchQueryBuilder50.operator(operator55);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery57 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder58 = multiMatchQueryBuilder56.zeroTermsQuery(zeroTermsQuery57);
        java.lang.String str59 = multiMatchQueryBuilder58.queryName();
        boolean boolean60 = multiMatchQueryBuilder25.equals((java.lang.Object) multiMatchQueryBuilder58);
        java.lang.String str61 = multiMatchQueryBuilder25.queryName();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "multi_match" + "'", str19, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "multi_match" + "'", str22, "multi_match");
        org.junit.Assert.assertNull(queryValidationException23);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder36);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "multi_match" + "'", str39, "multi_match");
        org.junit.Assert.assertTrue("'" + float40 + "' != '" + 1.0f + "'", float40 == 1.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder42);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder44);
        org.junit.Assert.assertTrue("'" + type45 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX + "'", type45.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX));
        org.junit.Assert.assertTrue("'" + type46 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX + "'", type46.equals(org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX));
        org.junit.Assert.assertTrue("'" + type47 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX + "'", type47.equals(org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder48);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder50);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder52);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder54);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder56);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "multi_match" + "'", str59, "multi_match");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}" + "'", str61, "{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
    }

    @Test
    public void test15423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15423");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.tieBreaker(0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type13 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX;
        float float14 = type13.tieBreaker();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder10.type(type13);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder10.cutoffFrequency((float) 0L);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder10.maxExpansions(10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder10.analyzer("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"slop\" : -1,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.Operator operator22 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder21.operator(operator22);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder23.tieBreaker((float) 0L);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder23.useDisMax(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = multiMatchQueryBuilder23.tieBreaker((float) (short) 100);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertTrue("'" + type13 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX + "'", type13.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX));
        org.junit.Assert.assertTrue("'" + float14 + "' != '" + 0.0f + "'", float14 == 0.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder29);
    }

    @Test
    public void test15424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15424");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder12.tieBreaker((float) '#');
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder14.tieBreaker((float) ' ');
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type17 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder16.type(type17);
        java.lang.String str19 = null; // flaky: multiMatchQueryBuilder18.toString();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder18.maxExpansions(0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder18.prefixLength((int) (byte) 1);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery24 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder23.zeroTermsQuery(zeroTermsQuery24);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertTrue("'" + type17 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS + "'", type17.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"type\" : \"cross_fields\",\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 32.0,\n    \"boost\" : 1.0\n  }\n}" + "'", str19, "{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"type\" : \"cross_fields\",\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 32.0,\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
    }

    @Test
    public void test15425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15425");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery13 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder12.zeroTermsQuery(zeroTermsQuery13);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder14.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder16.queryName("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder18.useDisMax(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder20.analyzer("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder22.field("", 0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder22.fuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\", \"multi_match^0.0\" ],\n    \"type\" : \"phrase_prefix\",\n    \"prefix_length\" : 97,\n    \"fuzzy_rewrite\" : \"\",\n    \"tie_breaker\" : 0.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = multiMatchQueryBuilder27.tieBreaker(0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = multiMatchQueryBuilder27.rewrite("{\n  \"multi_match\" : {\n    \"query\" : \"PHRASE_PREFIX\",\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzziness\" : \"10\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder33 = multiMatchQueryBuilder27.maxExpansions((int) ' ');
        java.lang.String str34 = null; // flaky: multiMatchQueryBuilder33.toString();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder36 = multiMatchQueryBuilder33.slop((int) (byte) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder38 = multiMatchQueryBuilder33.boost(0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder40 = multiMatchQueryBuilder38.maxExpansions((int) (byte) 100);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder29);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder31);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder33);
// flaky:         org.junit.Assert.assertEquals("'" + str34 + "' != '" + "{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"^0.0\", \"^0.0\", \"^0.0\", \"^0.0\", \"^0.0\", \"^0.0\" ],\n    \"analyzer\" : \"\",\n    \"max_expansions\" : 32,\n    \"rewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"PHRASE_PREFIX\\\",\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"fuzziness\\\" : \\\"10\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"fuzzy_rewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"multi_match^0.0\\\" ],\\n    \\\"type\\\" : \\\"phrase_prefix\\\",\\n    \\\"prefix_length\\\" : 97,\\n    \\\"fuzzy_rewrite\\\" : \\\"\\\",\\n    \\\"tie_breaker\\\" : 0.0,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"use_dis_max\" : false,\n    \"tie_breaker\" : 0.0,\n    \"boost\" : 1.0,\n    \"_name\" : \"hi!\"\n  }\n}" + "'", str34, "{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"^0.0\", \"^0.0\", \"^0.0\", \"^0.0\", \"^0.0\", \"^0.0\" ],\n    \"analyzer\" : \"\",\n    \"max_expansions\" : 32,\n    \"rewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"PHRASE_PREFIX\\\",\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"fuzziness\\\" : \\\"10\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"fuzzy_rewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"multi_match^0.0\\\" ],\\n    \\\"type\\\" : \\\"phrase_prefix\\\",\\n    \\\"prefix_length\\\" : 97,\\n    \\\"fuzzy_rewrite\\\" : \\\"\\\",\\n    \\\"tie_breaker\\\" : 0.0,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"use_dis_max\" : false,\n    \"tie_breaker\" : 0.0,\n    \"boost\" : 1.0,\n    \"_name\" : \"hi!\"\n  }\n}");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder36);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder38);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder40);
    }

    @Test
    public void test15426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15426");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.tieBreaker(0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder10.cutoffFrequency((float) 0L);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder10.minimumShouldMatch("{\n  \"multiMatch\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzyRewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder16.tieBreaker((float) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder18.minimumShouldMatch("{\n  \"multiMatch\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"type\" : \"best_fields\",\n    \"fuzzyRewrite\" : \"hi!\",\n    \"lenient\" : false,\n    \"cutoffFrequency\" : -1.0,\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
    }

    @Test
    public void test15427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15427");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery13 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder12.zeroTermsQuery(zeroTermsQuery13);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder14.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery17 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder14.zeroTermsQuery(zeroTermsQuery17);
        java.lang.String[] strArray26 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray26);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = multiMatchQueryBuilder27.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = multiMatchQueryBuilder29.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery32 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder33 = multiMatchQueryBuilder31.zeroTermsQuery(zeroTermsQuery32);
        java.lang.String str34 = multiMatchQueryBuilder33.getName();
        boolean boolean35 = multiMatchQueryBuilder18.equals((java.lang.Object) multiMatchQueryBuilder33);
        java.lang.String str36 = multiMatchQueryBuilder33.getWriteableName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder38 = multiMatchQueryBuilder33.analyzer("hi!");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery39 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder40 = multiMatchQueryBuilder38.zeroTermsQuery(zeroTermsQuery39);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder42 = multiMatchQueryBuilder38.queryName("");
        java.lang.String str43 = multiMatchQueryBuilder38.queryName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder45 = multiMatchQueryBuilder38.tieBreaker((float) (-1L));
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery46 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder47 = multiMatchQueryBuilder45.zeroTermsQuery(zeroTermsQuery46);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder29);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder31);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "multi_match" + "'", str34, "multi_match");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "multi_match" + "'", str36, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder38);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder40);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder45);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder47);
    }

    @Test
    public void test15428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15428");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery13 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder12.zeroTermsQuery(zeroTermsQuery13);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder12.maxExpansions((int) (byte) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder16.tieBreaker((float) 0);
        java.lang.Object obj19 = null;
        java.lang.String[] strArray27 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray27);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder30 = multiMatchQueryBuilder28.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder32 = multiMatchQueryBuilder30.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder34 = multiMatchQueryBuilder32.lenient(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder36 = multiMatchQueryBuilder32.prefixLength((int) (byte) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder38 = multiMatchQueryBuilder36.boost((float) 1);
        java.lang.String[] strArray46 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder47 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray46);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder49 = multiMatchQueryBuilder47.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder51 = multiMatchQueryBuilder49.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder53 = multiMatchQueryBuilder51.tieBreaker((float) '#');
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder55 = multiMatchQueryBuilder53.boost((float) 10L);
        java.lang.String[] strArray63 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder64 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray63);
        java.lang.Object obj65 = null;
        java.lang.String[] strArray74 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder75 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray74);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder76 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 10.0f, strArray74);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder77 = new org.elasticsearch.index.query.MultiMatchQueryBuilder(obj65, strArray74);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder78 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray74);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder79 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) multiMatchQueryBuilder53, strArray74);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder80 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 1, strArray74);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder81 = new org.elasticsearch.index.query.MultiMatchQueryBuilder(obj19, strArray74);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder82 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) multiMatchQueryBuilder18, strArray74);
        java.lang.String str83 = multiMatchQueryBuilder18.queryName();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder30);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder32);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder34);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder36);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder38);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder49);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder51);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder53);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder55);
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertNotNull(strArray74);
        org.junit.Assert.assertNull(str83);
    }

    @Test
    public void test15429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15429");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder8.queryName("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.Operator operator13 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder12.operator(operator13);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery15 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder12.zeroTermsQuery(zeroTermsQuery15);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder16.cutoffFrequency((float) (byte) -1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder16.useDisMax(false);
        java.lang.String str21 = null; // flaky: multiMatchQueryBuilder20.toString();
        java.lang.String str22 = multiMatchQueryBuilder20.getName();
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder23 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params24 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        // The following exception was thrown during execution in test generation
        try {
            multiMatchQueryBuilder20.doXContent(xContentBuilder23, params24);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
// flaky:         org.junit.Assert.assertEquals("'" + str21 + "' != '" + "{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"\",\n    \"use_dis_max\" : false,\n    \"cutoff_frequency\" : -1.0,\n    \"boost\" : 1.0,\n    \"_name\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\"\n  }\n}" + "'", str21, "{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"\",\n    \"use_dis_max\" : false,\n    \"cutoff_frequency\" : -1.0,\n    \"boost\" : 1.0,\n    \"_name\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\"\n  }\n}");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "multi_match" + "'", str22, "multi_match");
        org.junit.Assert.assertNotNull(params24);
    }

    @Test
    public void test15430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15430");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery13 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder12.zeroTermsQuery(zeroTermsQuery13);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder14.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder16.queryName("hi!");
        java.lang.String str19 = multiMatchQueryBuilder16.queryName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder16.analyzer("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"slop\" : -1,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder16.lenient(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder16.analyzer("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\", \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"type\\\" : \\\"cross_fields\\\",\\n    \\\"analyzer\\\" : \\\"multi_match\\\",\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"use_dis_max\\\" : true,\\n    \\\"boost\\\" : 0.0\\n  }\\n}\" ],\n    \"type\" : \"best_fields\",\n    \"prefix_length\" : 100,\n    \"fuzzy_rewrite\" : \"\",\n    \"use_dis_max\" : true,\n    \"tie_breaker\" : 0.0,\n    \"lenient\" : false,\n    \"cutoff_frequency\" : 0.0,\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
    }

    @Test
    public void test15431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15431");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.fuzzyRewrite("hi!");
        java.lang.String str13 = multiMatchQueryBuilder10.getName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder10.rewrite("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"slop\" : -1,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder10.tieBreaker((float) '4');
        org.elasticsearch.index.query.QueryValidationException queryValidationException18 = multiMatchQueryBuilder17.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder17.boost((float) (-1L));
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder17.tieBreaker((float) 0L);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder22.tieBreaker((float) (short) 100);
        org.elasticsearch.index.query.QueryShardContext queryShardContext25 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.lucene.search.Query query26 = multiMatchQueryBuilder24.toFilter(queryShardContext25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "multi_match" + "'", str13, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNull(queryValidationException18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
    }

    @Test
    public void test15432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15432");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder8.queryName("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.Operator operator13 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder12.operator(operator13);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder14.lenient(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder16.maxExpansions((int) (short) 1);
        java.lang.String[] strArray26 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray26);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) multiMatchQueryBuilder16, strArray26);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder30 = multiMatchQueryBuilder16.field("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder32 = multiMatchQueryBuilder16.field("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"analyzer\" : \"multi_match\",\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery33 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder34 = multiMatchQueryBuilder16.zeroTermsQuery(zeroTermsQuery33);
        java.lang.String[] strArray42 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder43 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray42);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder45 = multiMatchQueryBuilder43.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder47 = multiMatchQueryBuilder43.queryName("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.Operator operator48 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder49 = multiMatchQueryBuilder47.operator(operator48);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder51 = multiMatchQueryBuilder49.lenient(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder53 = multiMatchQueryBuilder51.maxExpansions((int) (short) 1);
        java.lang.String[] strArray61 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder62 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray61);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder63 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) multiMatchQueryBuilder51, strArray61);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder65 = multiMatchQueryBuilder51.queryName("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder67 = multiMatchQueryBuilder51.useDisMax(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder69 = multiMatchQueryBuilder67.rewrite("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"slop\" : -1,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.QueryValidationException queryValidationException70 = multiMatchQueryBuilder67.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type71 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS;
        float float72 = type71.tieBreaker();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder73 = multiMatchQueryBuilder67.type(type71);
        org.elasticsearch.index.search.MatchQuery.Type type74 = type71.matchQueryType();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder75 = multiMatchQueryBuilder34.fuzziness((java.lang.Object) type71);
        float float76 = type71.tieBreaker();
        org.elasticsearch.index.search.MatchQuery.Type type77 = type71.matchQueryType();
        float float78 = type71.tieBreaker();
        float float79 = type71.tieBreaker();
        java.lang.Class<?> wildcardClass80 = type71.getClass();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder30);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder32);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder34);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder45);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder47);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder49);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder51);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder53);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder65);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder67);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder69);
        org.junit.Assert.assertNull(queryValidationException70);
        org.junit.Assert.assertTrue("'" + type71 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS + "'", type71.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS));
        org.junit.Assert.assertTrue("'" + float72 + "' != '" + 0.0f + "'", float72 == 0.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder73);
        org.junit.Assert.assertTrue("'" + type74 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type74.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder75);
        org.junit.Assert.assertTrue("'" + float76 + "' != '" + 0.0f + "'", float76 == 0.0f);
        org.junit.Assert.assertTrue("'" + type77 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type77.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertTrue("'" + float78 + "' != '" + 0.0f + "'", float78 == 0.0f);
        org.junit.Assert.assertTrue("'" + float79 + "' != '" + 0.0f + "'", float79 == 0.0f);
        org.junit.Assert.assertNotNull(wildcardClass80);
    }

    @Test
    public void test15433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15433");
        java.lang.String[] strArray8 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder9 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray8);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder9.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder11.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery14 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder13.zeroTermsQuery(zeroTermsQuery14);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder15.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder17.queryName("hi!");
        java.lang.String str20 = multiMatchQueryBuilder17.queryName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder17.rewrite("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"max_expansions\" : 1,\n    \"fuzzy_rewrite\" : \"\",\n    \"lenient\" : true,\n    \"boost\" : 1.0,\n    \"_name\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\"\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder22.slop((int) ' ');
        java.lang.String[] strArray32 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder33 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray32);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder35 = multiMatchQueryBuilder33.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder37 = multiMatchQueryBuilder33.cutoffFrequency((float) 100);
        java.lang.String[] strArray40 = new java.lang.String[] { "{\n  \"multiMatch\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzyRewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder41 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (short) 100, strArray40);
        java.lang.String[] strArray49 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder50 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray49);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder51 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) multiMatchQueryBuilder41, strArray49);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder52 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) multiMatchQueryBuilder37, strArray49);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder53 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) ' ', strArray49);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder54 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\", \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"analyzer\\\" : \\\"multi_match\\\",\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}^10.0\", \"{\\n  \\\"multiMatch\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"fuzzyRewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}^0.0\" ],\n    \"slop\" : 10,\n    \"fuzzy_rewrite\" : \"\",\n    \"lenient\" : true,\n    \"boost\" : 1.0,\n    \"_name\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\"\n  }\n}", strArray49);
        org.elasticsearch.common.xcontent.XContentType xContentType55 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.bytes.BytesReference bytesReference56 = multiMatchQueryBuilder54.buildAsBytes(xContentType55);
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchException; message: Failed to build ToXContent");
        } catch (org.elasticsearch.ElasticsearchException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "hi!" + "'", str20, "hi!");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder35);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder37);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(strArray49);
    }

    @Test
    public void test15434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15434");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.tieBreaker(0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder10.cutoffFrequency((float) 0L);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder14.analyzer("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder16.field("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"slop\" : -1,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder18.queryName("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"slop\" : -1,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String str21 = multiMatchQueryBuilder18.getName();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "multi_match" + "'", str21, "multi_match");
    }

    @Test
    public void test15435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15435");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.tieBreaker(0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder10.cutoffFrequency((float) 0L);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder14.analyzer("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder14.tieBreaker((float) '4');
        float float19 = multiMatchQueryBuilder14.boost();
        java.lang.String str20 = null; // flaky: multiMatchQueryBuilder14.toString();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder14.maxExpansions((int) (byte) -1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder22.boost((float) 100);
        java.lang.String str25 = multiMatchQueryBuilder24.getWriteableName();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertTrue("'" + float19 + "' != '" + 1.0f + "'", float19 == 1.0f);
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"analyzer\" : \"\",\n    \"fuzzy_rewrite\" : \"\",\n    \"tie_breaker\" : 52.0,\n    \"cutoff_frequency\" : 0.0,\n    \"boost\" : 1.0\n  }\n}" + "'", str20, "{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"analyzer\" : \"\",\n    \"fuzzy_rewrite\" : \"\",\n    \"tie_breaker\" : 52.0,\n    \"cutoff_frequency\" : 0.0,\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "multi_match" + "'", str25, "multi_match");
    }

    @Test
    public void test15436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15436");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.fuzzyRewrite("hi!");
        java.lang.String str13 = multiMatchQueryBuilder10.getName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder10.analyzer("multi_match");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder10.slop((int) (short) -1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder17.minimumShouldMatch("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"slop\\\" : -1,\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"lenient\\\" : true,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"boost\" : 1.0,\n    \"_name\" : \"hi!\"\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder19.minimumShouldMatch("{\n  \"multiMatch\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzyRewrite\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder19.minimumShouldMatch("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder23.useDisMax(false);
        java.lang.String str26 = null; // flaky: multiMatchQueryBuilder23.toString();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "multi_match" + "'", str13, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
// flaky:         org.junit.Assert.assertEquals("'" + str26 + "' != '" + "{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"analyzer\" : \"multi_match\",\n    \"slop\" : -1,\n    \"minimum_should_match\" : \"\",\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"use_dis_max\" : false,\n    \"boost\" : 1.0\n  }\n}" + "'", str26, "{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"analyzer\" : \"multi_match\",\n    \"slop\" : -1,\n    \"minimum_should_match\" : \"\",\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"use_dis_max\" : false,\n    \"boost\" : 1.0\n  }\n}");
    }

    @Test
    public void test15437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15437");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.fuzzyRewrite("hi!");
        java.lang.String str13 = multiMatchQueryBuilder10.getName();
        float float14 = multiMatchQueryBuilder10.boost();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder10.lenient(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder10.slop((int) (short) -1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type19 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX;
        org.elasticsearch.index.search.MatchQuery.Type type20 = type19.matchQueryType();
        org.elasticsearch.index.search.MatchQuery.Type type21 = type19.matchQueryType();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder10.type(type19);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder10.queryName("multi_match");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder24.minimumShouldMatch("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = multiMatchQueryBuilder24.lenient(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder30 = multiMatchQueryBuilder24.queryName("{\n  \"multiMatch\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzyRewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder32 = multiMatchQueryBuilder30.boost((float) (-1L));
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder34 = multiMatchQueryBuilder30.lenient(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder36 = multiMatchQueryBuilder34.cutoffFrequency((float) 1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder38 = multiMatchQueryBuilder34.minimumShouldMatch("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"analyzer\" : \"multi_match\",\n    \"slop\" : -1,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0,\n    \"_name\" : \"hi!\"\n  }\n}");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery39 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder40 = multiMatchQueryBuilder38.zeroTermsQuery(zeroTermsQuery39);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder43 = multiMatchQueryBuilder40.field("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"analyzer\" : \"{\\n  \\\"multiMatch\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"fuzzyRewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"rewrite\" : \"multi_match\",\n    \"fuzzy_rewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}", (float) 'a');
        org.elasticsearch.index.query.Operator operator44 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder45 = multiMatchQueryBuilder43.operator(operator44);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "multi_match" + "'", str13, "multi_match");
        org.junit.Assert.assertTrue("'" + float14 + "' != '" + 1.0f + "'", float14 == 1.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertTrue("'" + type19 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX + "'", type19.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX));
        org.junit.Assert.assertTrue("'" + type20 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX + "'", type20.equals(org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX));
        org.junit.Assert.assertTrue("'" + type21 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX + "'", type21.equals(org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder28);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder30);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder32);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder34);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder36);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder38);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder40);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder43);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder45);
    }

    @Test
    public void test15438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15438");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery13 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder12.zeroTermsQuery(zeroTermsQuery13);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder14.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery17 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder14.zeroTermsQuery(zeroTermsQuery17);
        java.lang.String[] strArray26 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray26);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = multiMatchQueryBuilder27.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = multiMatchQueryBuilder29.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery32 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder33 = multiMatchQueryBuilder31.zeroTermsQuery(zeroTermsQuery32);
        java.lang.String str34 = multiMatchQueryBuilder33.getName();
        boolean boolean35 = multiMatchQueryBuilder18.equals((java.lang.Object) multiMatchQueryBuilder33);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder37 = multiMatchQueryBuilder33.queryName("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder39 = multiMatchQueryBuilder33.prefixLength(100);
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder49 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray48);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder51 = multiMatchQueryBuilder49.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder53 = multiMatchQueryBuilder49.queryName("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.Operator operator54 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder55 = multiMatchQueryBuilder53.operator(operator54);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder57 = multiMatchQueryBuilder55.lenient(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder59 = multiMatchQueryBuilder57.maxExpansions((int) (short) 1);
        java.lang.String[] strArray67 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder68 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray67);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder69 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) multiMatchQueryBuilder57, strArray67);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder70 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (byte) 1, strArray67);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder71 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) multiMatchQueryBuilder33, strArray67);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder73 = multiMatchQueryBuilder33.minimumShouldMatch("");
        java.lang.String[] strArray82 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder83 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray82);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder84 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 10.0f, strArray82);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder85 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) multiMatchQueryBuilder33, strArray82);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder87 = multiMatchQueryBuilder33.slop((int) (short) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder89 = multiMatchQueryBuilder87.useDisMax(false);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder29);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder31);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "multi_match" + "'", str34, "multi_match");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder37);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder39);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder51);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder53);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder55);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder57);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder59);
        org.junit.Assert.assertNotNull(strArray67);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder73);
        org.junit.Assert.assertNotNull(strArray82);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder87);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder89);
    }

    @Test
    public void test15439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15439");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder8.queryName("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.Operator operator13 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder12.operator(operator13);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery15 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder12.zeroTermsQuery(zeroTermsQuery15);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder16.cutoffFrequency((float) (byte) -1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder18.lenient(false);
        java.lang.String str21 = null; // flaky: multiMatchQueryBuilder20.toString();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
// flaky:         org.junit.Assert.assertEquals("'" + str21 + "' != '" + "{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"\",\n    \"lenient\" : false,\n    \"cutoff_frequency\" : -1.0,\n    \"boost\" : 1.0,\n    \"_name\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\"\n  }\n}" + "'", str21, "{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"\",\n    \"lenient\" : false,\n    \"cutoff_frequency\" : -1.0,\n    \"boost\" : 1.0,\n    \"_name\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\"\n  }\n}");
    }

    @Test
    public void test15440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15440");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder8.queryName("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.Operator operator13 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder12.operator(operator13);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder14.lenient(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder16.maxExpansions((int) (short) 1);
        java.lang.String[] strArray26 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray26);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) multiMatchQueryBuilder16, strArray26);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder30 = multiMatchQueryBuilder16.field("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder32 = multiMatchQueryBuilder30.maxExpansions((int) (short) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder34 = multiMatchQueryBuilder30.queryName("multi_match");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder36 = multiMatchQueryBuilder30.fuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"analyzer\" : \"multi_match\",\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder38 = multiMatchQueryBuilder30.maxExpansions(10);
        java.lang.String[] strArray46 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder47 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray46);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder49 = multiMatchQueryBuilder47.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder51 = multiMatchQueryBuilder47.queryName("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder53 = multiMatchQueryBuilder51.tieBreaker((float) (short) 1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder55 = multiMatchQueryBuilder53.tieBreaker(0.0f);
        java.lang.Class<?> wildcardClass56 = multiMatchQueryBuilder55.getClass();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder57 = null; // flaky: multiMatchQueryBuilder38.fuzziness((java.lang.Object) multiMatchQueryBuilder55);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder59 = multiMatchQueryBuilder55.tieBreaker((float) 10L);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder61 = multiMatchQueryBuilder59.rewrite("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\", \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"slop\\\" : -1,\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"lenient\\\" : true,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\" ],\n    \"analyzer\" : \"\",\n    \"fuzzy_rewrite\" : \"\",\n    \"tie_breaker\" : 0.0,\n    \"cutoff_frequency\" : 0.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.Operator operator62 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder63 = multiMatchQueryBuilder61.operator(operator62);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder65 = multiMatchQueryBuilder61.rewrite("{\n  \"multiMatch\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"rewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"slop\\\" : -1,\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"lenient\\\" : true,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"fuzzyRewrite\" : \"hi!\",\n    \"tieBreaker\" : 52.0,\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder30);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder32);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder34);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder36);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder38);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder49);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder51);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder53);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder55);
        org.junit.Assert.assertNotNull(wildcardClass56);
// flaky:         org.junit.Assert.assertNotNull(multiMatchQueryBuilder57);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder59);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder61);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder63);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder65);
    }

    @Test
    public void test15441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15441");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.fuzzyRewrite("hi!");
        java.lang.String str13 = multiMatchQueryBuilder10.getName();
        float float14 = multiMatchQueryBuilder10.boost();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder10.lenient(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder10.slop((int) (short) -1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type19 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX;
        org.elasticsearch.index.search.MatchQuery.Type type20 = type19.matchQueryType();
        org.elasticsearch.index.search.MatchQuery.Type type21 = type19.matchQueryType();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder10.type(type19);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder10.queryName("multi_match");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder24.minimumShouldMatch("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = multiMatchQueryBuilder24.lenient(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder30 = multiMatchQueryBuilder24.queryName("{\n  \"multiMatch\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzyRewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder32 = multiMatchQueryBuilder24.cutoffFrequency((float) 'a');
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder34 = multiMatchQueryBuilder32.boost((float) (short) -1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder36 = multiMatchQueryBuilder32.analyzer("multi_match");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder38 = multiMatchQueryBuilder36.field("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"analyzer\" : \"multi_match\",\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        java.lang.Class<?> wildcardClass39 = multiMatchQueryBuilder38.getClass();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "multi_match" + "'", str13, "multi_match");
        org.junit.Assert.assertTrue("'" + float14 + "' != '" + 1.0f + "'", float14 == 1.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertTrue("'" + type19 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX + "'", type19.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX));
        org.junit.Assert.assertTrue("'" + type20 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX + "'", type20.equals(org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX));
        org.junit.Assert.assertTrue("'" + type21 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX + "'", type21.equals(org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder28);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder30);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder32);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder34);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder36);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder38);
        org.junit.Assert.assertNotNull(wildcardClass39);
    }

    @Test
    public void test15442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15442");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery13 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder12.zeroTermsQuery(zeroTermsQuery13);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder14.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder16.queryName("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder16.fuzzyRewrite("hi!");
        java.lang.String[] strArray28 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray28);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = multiMatchQueryBuilder29.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder33 = multiMatchQueryBuilder31.tieBreaker(0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type34 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX;
        float float35 = type34.tieBreaker();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder36 = multiMatchQueryBuilder31.type(type34);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder38 = multiMatchQueryBuilder31.cutoffFrequency((float) 0L);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder40 = multiMatchQueryBuilder31.queryName("multi_match");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder43 = multiMatchQueryBuilder40.field("", (float) 1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder44 = multiMatchQueryBuilder20.fuzziness((java.lang.Object) "");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder46 = multiMatchQueryBuilder20.maxExpansions((int) (byte) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder48 = multiMatchQueryBuilder46.fuzzyRewrite("{\n  \"multiMatch\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzyRewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder50 = multiMatchQueryBuilder48.field("{\n  \"multi_match\" : {\n    \"query\" : 100,\n    \"fields\" : [ \"{\\n  \\\"multiMatch\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"fuzzyRewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\" ],\n    \"fuzzy_rewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"analyzer\\\" : \\\"multi_match\\\",\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"tie_breaker\" : 32.0,\n    \"cutoff_frequency\" : 0.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder53 = multiMatchQueryBuilder50.field("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"type\" : \"phrase_prefix\",\n    \"max_expansions\" : -1,\n    \"fuzzy_rewrite\" : \"\",\n    \"tie_breaker\" : 0.0,\n    \"lenient\" : false,\n    \"cutoff_frequency\" : 0.0,\n    \"boost\" : 10.0\n  }\n}", (float) 1L);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder31);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder33);
        org.junit.Assert.assertTrue("'" + type34 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX + "'", type34.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX));
        org.junit.Assert.assertTrue("'" + float35 + "' != '" + 0.0f + "'", float35 == 0.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder36);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder38);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder40);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder43);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder44);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder46);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder48);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder50);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder53);
    }

    @Test
    public void test15443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15443");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.fuzzyRewrite("hi!");
        java.lang.String str13 = multiMatchQueryBuilder10.getName();
        float float14 = multiMatchQueryBuilder10.boost();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder10.lenient(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder10.slop((int) (short) -1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type19 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX;
        org.elasticsearch.index.search.MatchQuery.Type type20 = type19.matchQueryType();
        org.elasticsearch.index.search.MatchQuery.Type type21 = type19.matchQueryType();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder10.type(type19);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder22.fuzzyRewrite("{\n  \"multiMatch\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzyRewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder24.fuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"slop\" : -1,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        float float27 = multiMatchQueryBuilder26.boost();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = multiMatchQueryBuilder26.rewrite("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"analyzer\" : \"multi_match\",\n    \"slop\" : -1,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0,\n    \"_name\" : \"hi!\"\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = multiMatchQueryBuilder29.lenient(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder33 = multiMatchQueryBuilder29.slop((int) (short) 1);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "multi_match" + "'", str13, "multi_match");
        org.junit.Assert.assertTrue("'" + float14 + "' != '" + 1.0f + "'", float14 == 1.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertTrue("'" + type19 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX + "'", type19.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX));
        org.junit.Assert.assertTrue("'" + type20 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX + "'", type20.equals(org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX));
        org.junit.Assert.assertTrue("'" + type21 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX + "'", type21.equals(org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertTrue("'" + float27 + "' != '" + 1.0f + "'", float27 == 1.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder29);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder31);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder33);
    }

    @Test
    public void test15444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15444");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.tieBreaker(0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type13 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX;
        float float14 = type13.tieBreaker();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder10.type(type13);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder10.cutoffFrequency((float) 0L);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder10.fuzzyRewrite("{\n  \"multiMatch\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"type\" : \"phrase_prefix\",\n    \"maxExpansions\" : 10,\n    \"fuzzyRewrite\" : \"\",\n    \"tieBreaker\" : 0.0,\n    \"cutoffFrequency\" : 0.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder10.minimumShouldMatch("{\n  \"multiMatch\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"rewrite\" : \"multi_match\",\n    \"fuzzyRewrite\" : \"hi!\",\n    \"lenient\" : false,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder21.field("{\n  \"multiMatch\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzyRewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}", (float) (byte) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder21.field("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"minimum_should_match\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"slop\\\" : -1,\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"lenient\\\" : true,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"boost\" : 1.0\n  }\n}", (float) (short) 10);
        java.lang.String str28 = multiMatchQueryBuilder27.getWriteableName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder30 = multiMatchQueryBuilder27.maxExpansions((int) (byte) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder32 = multiMatchQueryBuilder30.cutoffFrequency((float) 'a');
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertTrue("'" + type13 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX + "'", type13.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX));
        org.junit.Assert.assertTrue("'" + float14 + "' != '" + 0.0f + "'", float14 == 0.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "multi_match" + "'", str28, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder30);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder32);
    }

    @Test
    public void test15445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15445");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder12.lenient(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder12.prefixLength((int) (byte) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder16.boost((float) 1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder16.rewrite("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"analyzer\" : \"multi_match\",\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder16.maxExpansions((int) (short) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder16.useDisMax(true);
        java.lang.String str25 = multiMatchQueryBuilder24.getWriteableName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder24.maxExpansions((int) 'a');
        java.lang.String str28 = multiMatchQueryBuilder24.getWriteableName();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "multi_match" + "'", str25, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "multi_match" + "'", str28, "multi_match");
    }

    @Test
    public void test15446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15446");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery13 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder12.zeroTermsQuery(zeroTermsQuery13);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder12.maxExpansions((int) (byte) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder12.field("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"slop\" : -1,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder18.useDisMax(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder18.lenient(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder22.minimumShouldMatch("{\n  \"multiMatch\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"type\" : \"phrase_prefix\",\n    \"analyzer\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"analyzer\\\" : \\\"multi_match\\\",\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"maxExpansions\" : 10,\n    \"fuzzyRewrite\" : \"\",\n    \"tieBreaker\" : 0.0,\n    \"lenient\" : false,\n    \"cutoffFrequency\" : 0.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder22.analyzer("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"minimum_should_match\" : \"\",\n    \"rewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"slop\\\" : -1,\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"lenient\\\" : true,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 52.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = multiMatchQueryBuilder22.useDisMax(true);
        org.elasticsearch.index.query.QueryValidationException queryValidationException29 = multiMatchQueryBuilder22.validate();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder28);
        org.junit.Assert.assertNull(queryValidationException29);
    }

    @Test
    public void test15447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15447");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.tieBreaker(0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder10.cutoffFrequency((float) 0L);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder14.analyzer("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder16.field("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"slop\" : -1,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder18.queryName("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"slop\" : -1,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder20.slop((int) (byte) 10);
        java.lang.String[] strArray30 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray30);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder33 = multiMatchQueryBuilder31.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder35 = multiMatchQueryBuilder33.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery36 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder37 = multiMatchQueryBuilder35.zeroTermsQuery(zeroTermsQuery36);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder39 = multiMatchQueryBuilder37.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder41 = multiMatchQueryBuilder39.queryName("hi!");
        java.lang.String str42 = multiMatchQueryBuilder39.queryName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder44 = multiMatchQueryBuilder39.analyzer("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"slop\" : -1,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String[] strArray53 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder54 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray53);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder55 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 10.0f, strArray53);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder56 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) multiMatchQueryBuilder44, strArray53);
        boolean boolean57 = multiMatchQueryBuilder22.equals((java.lang.Object) multiMatchQueryBuilder44);
        java.lang.String str58 = multiMatchQueryBuilder44.queryName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder60 = multiMatchQueryBuilder44.maxExpansions((int) (byte) 10);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder33);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder35);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder37);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder39);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "hi!" + "'", str42, "hi!");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder44);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "hi!" + "'", str58, "hi!");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder60);
    }

    @Test
    public void test15448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15448");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.fuzzyRewrite("hi!");
        java.lang.String str13 = multiMatchQueryBuilder10.getName();
        float float14 = multiMatchQueryBuilder10.boost();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder10.lenient(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder10.slop((int) (short) -1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type19 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX;
        org.elasticsearch.index.search.MatchQuery.Type type20 = type19.matchQueryType();
        org.elasticsearch.index.search.MatchQuery.Type type21 = type19.matchQueryType();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder10.type(type19);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder22.fuzzyRewrite("{\n  \"multiMatch\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzyRewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder24.fuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"slop\" : -1,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = multiMatchQueryBuilder24.fuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"slop\\\" : -1,\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"lenient\\\" : true,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"boost\" : 1.0,\n    \"_name\" : \"hi!\"\n  }\n}");
        float float29 = multiMatchQueryBuilder24.boost();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = multiMatchQueryBuilder24.slop((int) (short) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder33 = multiMatchQueryBuilder24.queryName("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"max_expansions\" : 1,\n    \"minimum_should_match\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"fuzzy_rewrite\" : \"\",\n    \"lenient\" : true,\n    \"boost\" : 1.0,\n    \"_name\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\"\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder35 = multiMatchQueryBuilder24.maxExpansions((int) (short) 1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder38 = multiMatchQueryBuilder24.field("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\", \"\" ],\n    \"type\" : \"cross_fields\",\n    \"analyzer\" : \"multi_match\",\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"use_dis_max\" : true,\n    \"tie_breaker\" : 1.0,\n    \"boost\" : 0.0\n  }\n}", 32.0f);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder39 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params40 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder41 = multiMatchQueryBuilder38.toXContent(xContentBuilder39, params40);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "multi_match" + "'", str13, "multi_match");
        org.junit.Assert.assertTrue("'" + float14 + "' != '" + 1.0f + "'", float14 == 1.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertTrue("'" + type19 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX + "'", type19.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX));
        org.junit.Assert.assertTrue("'" + type20 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX + "'", type20.equals(org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX));
        org.junit.Assert.assertTrue("'" + type21 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX + "'", type21.equals(org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder28);
        org.junit.Assert.assertTrue("'" + float29 + "' != '" + 1.0f + "'", float29 == 1.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder31);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder33);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder35);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder38);
        org.junit.Assert.assertNotNull(params40);
    }

    @Test
    public void test15449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15449");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder12.lenient(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder14.rewrite("multi_match");
        java.lang.String str17 = multiMatchQueryBuilder16.getWriteableName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder16.analyzer("{\n  \"multiMatch\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzyRewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder19.lenient(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder19.maxExpansions((int) (short) 1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder19.prefixLength((int) (byte) 10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder19.maxExpansions((int) 'a');
        org.elasticsearch.index.query.QueryShardContext queryShardContext28 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.lucene.search.Query query29 = multiMatchQueryBuilder19.toQuery(queryShardContext28);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "multi_match" + "'", str17, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
    }

    @Test
    public void test15450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15450");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery13 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder12.zeroTermsQuery(zeroTermsQuery13);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder14.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder16.queryName("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder16.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder16.analyzer("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder16.tieBreaker((float) 0);
        java.lang.String[] strArray27 = new java.lang.String[] { "{\n  \"multiMatch\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzyRewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (short) 100, strArray27);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0, strArray27);
        float float30 = multiMatchQueryBuilder29.boost();
        java.lang.String[] strArray38 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder39 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray38);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder41 = multiMatchQueryBuilder39.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder43 = multiMatchQueryBuilder41.tieBreaker(0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type44 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX;
        float float45 = type44.tieBreaker();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder46 = multiMatchQueryBuilder41.type(type44);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder48 = multiMatchQueryBuilder41.cutoffFrequency((float) 0L);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder50 = multiMatchQueryBuilder41.lenient(false);
        java.lang.String str51 = multiMatchQueryBuilder50.queryName();
        java.lang.String[] strArray59 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder60 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray59);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder62 = multiMatchQueryBuilder60.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder64 = multiMatchQueryBuilder62.fuzzyRewrite("hi!");
        java.lang.String str65 = multiMatchQueryBuilder62.getName();
        float float66 = multiMatchQueryBuilder62.boost();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder68 = multiMatchQueryBuilder62.lenient(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder70 = multiMatchQueryBuilder62.slop((int) (short) -1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type71 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX;
        org.elasticsearch.index.search.MatchQuery.Type type72 = type71.matchQueryType();
        org.elasticsearch.index.search.MatchQuery.Type type73 = type71.matchQueryType();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder74 = multiMatchQueryBuilder62.type(type71);
        org.elasticsearch.common.ParseField parseField75 = type71.parseField();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder76 = multiMatchQueryBuilder50.fuzziness((java.lang.Object) parseField75);
        boolean boolean77 = multiMatchQueryBuilder29.equals((java.lang.Object) multiMatchQueryBuilder76);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder79 = multiMatchQueryBuilder76.fuzzyRewrite("{\n  \"multiMatch\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzyRewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder81 = multiMatchQueryBuilder76.tieBreaker((float) 'a');
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder83 = multiMatchQueryBuilder81.fuzzyRewrite("{\n  \"multiMatch\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"analyzer\" : \"{\\n  \\\"multiMatch\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"fuzzyRewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"slop\" : 100,\n    \"rewrite\" : \"multi_match\",\n    \"fuzzyRewrite\" : \"hi!\",\n    \"lenient\" : false,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder85 = multiMatchQueryBuilder81.prefixLength(1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder87 = multiMatchQueryBuilder81.minimumShouldMatch("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"analyzer\" : \"\",\n    \"fuzzy_rewrite\" : \"\",\n    \"tie_breaker\" : 52.0,\n    \"cutoff_frequency\" : 0.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder89 = multiMatchQueryBuilder87.queryName("{\n  \"multiMatch\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"analyzer\" : \"{\\n  \\\"multiMatch\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"fuzzyRewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"maxExpansions\" : 10,\n    \"rewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"slop\\\" : -1,\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"lenient\\\" : true,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"fuzzyRewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertTrue("'" + float30 + "' != '" + 1.0f + "'", float30 == 1.0f);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder41);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder43);
        org.junit.Assert.assertTrue("'" + type44 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX + "'", type44.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX));
        org.junit.Assert.assertTrue("'" + float45 + "' != '" + 0.0f + "'", float45 == 0.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder46);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder48);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder50);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder62);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "multi_match" + "'", str65, "multi_match");
        org.junit.Assert.assertTrue("'" + float66 + "' != '" + 1.0f + "'", float66 == 1.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder68);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder70);
        org.junit.Assert.assertTrue("'" + type71 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX + "'", type71.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX));
        org.junit.Assert.assertTrue("'" + type72 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX + "'", type72.equals(org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX));
        org.junit.Assert.assertTrue("'" + type73 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX + "'", type73.equals(org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder74);
        org.junit.Assert.assertNotNull(parseField75);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder79);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder81);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder83);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder85);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder87);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder89);
    }

    @Test
    public void test15451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15451");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery13 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder12.zeroTermsQuery(zeroTermsQuery13);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder14.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder16.queryName("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder16.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.QueryValidationException queryValidationException21 = multiMatchQueryBuilder20.validate();
        float float22 = multiMatchQueryBuilder20.boost();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder20.field("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"analyzer\" : \"multi_match\",\n    \"fuzziness\" : \"{\\n  \\\"MULTI_MATCH\\\" : {\\n    \\\"QUERY\\\" : 0.0,\\n    \\\"FIELDS\\\" : [ \\\"HI!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"ANALYZER\\\" : \\\"MULTI_MATCH\\\",\\n    \\\"MAX_EXPANSIONS\\\" : 1,\\n    \\\"FUZZY_REWRITE\\\" : \\\"HI!\\\",\\n    \\\"CUTOFF_FREQUENCY\\\" : 0.0,\\n    \\\"BOOST\\\" : 0.0\\n  }\\n}\",\n    \"prefix_length\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0,\n    \"_name\" : \"hi!\"\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder24.analyzer("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"rewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"fuzzy_rewrite\" : \"multi_match\",\n    \"lenient\" : false,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = multiMatchQueryBuilder24.queryName("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"prefix_length\" : 100,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0,\n    \"_name\" : \"\"\n  }\n}");
        org.elasticsearch.index.query.QueryShardContext queryShardContext29 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.lucene.search.Query query30 = multiMatchQueryBuilder28.toQuery(queryShardContext29);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNull(queryValidationException21);
        org.junit.Assert.assertTrue("'" + float22 + "' != '" + 1.0f + "'", float22 == 1.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder28);
    }

    @Test
    public void test15452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15452");
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type2 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.parse("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\", \"{\\n  \\\"multiMatch\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"type\\\" : \\\"phrase_prefix\\\",\\n    \\\"maxExpansions\\\" : 10,\\n    \\\"fuzzyRewrite\\\" : \\\"\\\",\\n    \\\"tieBreaker\\\" : 0.0,\\n    \\\"cutoffFrequency\\\" : 0.0,\\n    \\\"boost\\\" : 1.0\\n  }\\n}^1.0\" ],\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"cutoff_frequency\" : 10.0,\n    \"boost\" : 1.0\n  }\n}", parseFieldMatcher1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test15453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15453");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.tieBreaker(0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type13 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX;
        float float14 = type13.tieBreaker();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder10.type(type13);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder10.cutoffFrequency((float) 0L);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder10.maxExpansions(10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder10.analyzer("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"slop\" : -1,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder10.analyzer("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"analyzer\" : \"multi_match\",\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder10.lenient(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder10.slop(100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = multiMatchQueryBuilder10.rewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = multiMatchQueryBuilder29.lenient(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder33 = multiMatchQueryBuilder31.queryName("{\n  \"multiMatch\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"rewrite\" : \"\",\n    \"fuzzyRewrite\" : \"hi!\",\n    \"tieBreaker\" : 10.0,\n    \"lenient\" : false,\n    \"boost\" : 0.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder35 = multiMatchQueryBuilder33.minimumShouldMatch("{\n  \"multiMatch\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"rewrite\" : \"multi_match\",\n    \"fuzzyRewrite\" : \"hi!\",\n    \"lenient\" : false,\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertTrue("'" + type13 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX + "'", type13.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX));
        org.junit.Assert.assertTrue("'" + float14 + "' != '" + 0.0f + "'", float14 == 0.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder29);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder31);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder33);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder35);
    }

    @Test
    public void test15454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15454");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.fuzzyRewrite("hi!");
        java.lang.String str13 = multiMatchQueryBuilder10.getName();
        float float14 = multiMatchQueryBuilder10.boost();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder10.lenient(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder10.slop((int) (short) -1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type19 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX;
        org.elasticsearch.index.search.MatchQuery.Type type20 = type19.matchQueryType();
        org.elasticsearch.index.search.MatchQuery.Type type21 = type19.matchQueryType();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder10.type(type19);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder10.queryName("multi_match");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder24.minimumShouldMatch("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = multiMatchQueryBuilder24.lenient(true);
        org.elasticsearch.index.query.Operator operator29 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder30 = multiMatchQueryBuilder24.operator(operator29);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder32 = multiMatchQueryBuilder30.analyzer("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder35 = multiMatchQueryBuilder32.field("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"analyzer\" : \"{\\n  \\\"multiMatch\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"fuzzyRewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"slop\" : 100,\n    \"rewrite\" : \"multi_match\",\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"lenient\" : false,\n    \"boost\" : 1.0\n  }\n}", 1.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder37 = multiMatchQueryBuilder35.fuzzyRewrite("{\n  \"multiMatch\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"analyzer\" : \"multi_match\",\n    \"fuzzyRewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.QueryShardContext queryShardContext38 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.lucene.search.Query query39 = multiMatchQueryBuilder35.toQuery(queryShardContext38);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "multi_match" + "'", str13, "multi_match");
        org.junit.Assert.assertTrue("'" + float14 + "' != '" + 1.0f + "'", float14 == 1.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertTrue("'" + type19 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX + "'", type19.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX));
        org.junit.Assert.assertTrue("'" + type20 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX + "'", type20.equals(org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX));
        org.junit.Assert.assertTrue("'" + type21 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX + "'", type21.equals(org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder28);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder30);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder32);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder35);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder37);
    }

    @Test
    public void test15455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15455");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder8.queryName("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.Operator operator13 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder12.operator(operator13);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder12.field("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"analyzer\" : \"multi_match\",\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}", 10.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder12.field("{\n  \"multiMatch\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzyRewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}", 0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder20.prefixLength((int) ' ');
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder20.slop(0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder20.field("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"minimum_should_match\" : \"\",\n    \"rewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"slop\\\" : -1,\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"lenient\\\" : true,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 52.0,\n    \"boost\" : 1.0\n  }\n}", (float) (-1L));
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = multiMatchQueryBuilder20.analyzer("multi_match");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery30 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = multiMatchQueryBuilder29.zeroTermsQuery(zeroTermsQuery30);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder29);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder31);
    }

    @Test
    public void test15456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15456");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder8.queryName("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.Operator operator13 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder12.operator(operator13);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder12.field("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"analyzer\" : \"multi_match\",\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}", 10.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder17.field("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery20 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder17.zeroTermsQuery(zeroTermsQuery20);
        org.elasticsearch.index.query.Operator operator22 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder21.operator(operator22);
        java.lang.String str24 = multiMatchQueryBuilder23.getWriteableName();
        org.elasticsearch.index.query.Operator operator25 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder23.operator(operator25);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = multiMatchQueryBuilder23.maxExpansions(10);
        java.lang.String str29 = null; // flaky: multiMatchQueryBuilder28.toString();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = multiMatchQueryBuilder28.analyzer("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"slop\" : 0,\n    \"prefix_length\" : 0,\n    \"rewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"analyzer\\\" : \\\"multi_match\\\",\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"lenient\" : false,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder33 = multiMatchQueryBuilder28.maxExpansions(100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder35 = multiMatchQueryBuilder28.queryName("{\n  \"multiMatch\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzyRewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder37 = multiMatchQueryBuilder28.tieBreaker((float) (short) 100);
        org.elasticsearch.index.query.QueryShardContext queryShardContext38 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.lucene.search.Query query39 = multiMatchQueryBuilder28.toFilter(queryShardContext38);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "multi_match" + "'", str24, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder28);
// flaky:         org.junit.Assert.assertEquals("'" + str29 + "' != '" + "{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\", \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"analyzer\\\" : \\\"multi_match\\\",\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}^10.0\", \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\" ],\n    \"max_expansions\" : 10,\n    \"fuzzy_rewrite\" : \"\",\n    \"boost\" : 1.0,\n    \"_name\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\"\n  }\n}" + "'", str29, "{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\", \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"analyzer\\\" : \\\"multi_match\\\",\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}^10.0\", \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\" ],\n    \"max_expansions\" : 10,\n    \"fuzzy_rewrite\" : \"\",\n    \"boost\" : 1.0,\n    \"_name\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\"\n  }\n}");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder31);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder33);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder35);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder37);
    }

    @Test
    public void test15457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15457");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery13 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder12.zeroTermsQuery(zeroTermsQuery13);
        java.lang.String str15 = null; // flaky: multiMatchQueryBuilder12.toString();
        java.lang.String str16 = multiMatchQueryBuilder12.queryName();
        java.lang.String str17 = multiMatchQueryBuilder12.getName();
        org.elasticsearch.common.io.stream.StreamInput streamInput18 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder12.readFrom(streamInput18);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}" + "'", str15, "{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "multi_match" + "'", str17, "multi_match");
    }

    @Test
    public void test15458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15458");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder10.field("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder10.boost(0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder10.prefixLength((int) (short) 10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder18.boost((float) 10L);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder20.analyzer("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\", \"\" ],\n    \"analyzer\" : \"multi_match\",\n    \"max_expansions\" : -1,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"use_dis_max\" : true,\n    \"boost\" : 0.0\n  }\n}");
        java.lang.String[] strArray30 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray30);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder33 = multiMatchQueryBuilder31.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder35 = multiMatchQueryBuilder33.fuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder37 = multiMatchQueryBuilder33.minimumShouldMatch("multi_match");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder39 = multiMatchQueryBuilder33.slop((int) (short) -1);
        boolean boolean40 = multiMatchQueryBuilder22.equals((java.lang.Object) multiMatchQueryBuilder33);
        java.lang.String str41 = multiMatchQueryBuilder33.getName();
        org.elasticsearch.index.query.QueryValidationException queryValidationException42 = multiMatchQueryBuilder33.validate();
        org.elasticsearch.index.query.Operator operator43 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder44 = multiMatchQueryBuilder33.operator(operator43);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder33);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder35);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder37);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "multi_match" + "'", str41, "multi_match");
        org.junit.Assert.assertNull(queryValidationException42);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder44);
    }

    @Test
    public void test15459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15459");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery13 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder12.zeroTermsQuery(zeroTermsQuery13);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder14.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder16.queryName("hi!");
        java.lang.String str19 = multiMatchQueryBuilder16.queryName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder16.analyzer("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"slop\" : -1,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder16.field("hi!", (float) (short) -1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder24.queryName("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"slop\" : 0,\n    \"prefix_length\" : 0,\n    \"rewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"analyzer\\\" : \\\"multi_match\\\",\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"lenient\" : false,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String str27 = multiMatchQueryBuilder26.getName();
        org.elasticsearch.index.query.QueryShardContext queryShardContext28 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.lucene.search.Query query29 = multiMatchQueryBuilder26.toQuery(queryShardContext28);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "multi_match" + "'", str27, "multi_match");
    }

    @Test
    public void test15460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15460");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder8.queryName("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.Operator operator13 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder12.operator(operator13);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder14.lenient(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder16.maxExpansions((int) (short) 1);
        java.lang.String[] strArray26 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray26);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) multiMatchQueryBuilder16, strArray26);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder30 = multiMatchQueryBuilder16.queryName("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder32 = multiMatchQueryBuilder30.minimumShouldMatch("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"analyzer\" : \"multi_match\",\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String[] strArray40 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder41 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray40);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder43 = multiMatchQueryBuilder41.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder45 = multiMatchQueryBuilder43.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder47 = multiMatchQueryBuilder43.field("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder49 = multiMatchQueryBuilder43.boost(0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder51 = multiMatchQueryBuilder49.analyzer("multi_match");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder53 = multiMatchQueryBuilder51.maxExpansions(1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder55 = multiMatchQueryBuilder53.rewrite("{\n  \"multiMatch\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\", \"\" ],\n    \"analyzer\" : \"multi_match\",\n    \"maxExpansions\" : -1,\n    \"fuzzyRewrite\" : \"hi!\",\n    \"useDisMax\" : true,\n    \"boost\" : 0.0\n  }\n}");
        org.elasticsearch.index.query.Operator operator56 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder57 = multiMatchQueryBuilder55.operator(operator56);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder59 = multiMatchQueryBuilder57.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder62 = multiMatchQueryBuilder57.field("{\n  \"multiMatch\" : {\n    \"query\" : \"PHRASE_PREFIX\",\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzziness\" : \"10\",\n    \"boost\" : 1.0\n  }\n}", (float) (-1L));
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder63 = null; // flaky: multiMatchQueryBuilder30.fuzziness((java.lang.Object) multiMatchQueryBuilder62);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder65 = null; // flaky: multiMatchQueryBuilder63.rewrite("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"max_expansions\" : 1,\n    \"minimum_should_match\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"fuzzy_rewrite\" : \"\",\n    \"use_dis_max\" : false,\n    \"lenient\" : true,\n    \"boost\" : 1.0,\n    \"_name\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"type\\\" : \\\"best_fields\\\",\\n    \\\"fuzzy_rewrite\\\" : \\\"\\\",\\n    \\\"use_dis_max\\\" : false,\\n    \\\"tie_breaker\\\" : 0.0,\\n    \\\"lenient\\\" : false,\\n    \\\"cutoff_frequency\\\" : 0.0,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\"\n  }\n}");
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder30);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder32);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder43);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder45);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder47);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder49);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder51);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder53);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder55);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder57);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder59);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder62);
// flaky:         org.junit.Assert.assertNotNull(multiMatchQueryBuilder63);
// flaky:         org.junit.Assert.assertNotNull(multiMatchQueryBuilder65);
    }

    @Test
    public void test15461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15461");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder12.tieBreaker((float) '#');
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder14.boost((float) 10L);
        java.lang.String[] strArray24 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray24);
        java.lang.Object obj26 = null;
        java.lang.String[] strArray35 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder36 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray35);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder37 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 10.0f, strArray35);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder38 = new org.elasticsearch.index.query.MultiMatchQueryBuilder(obj26, strArray35);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder39 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray35);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder40 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) multiMatchQueryBuilder14, strArray35);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder42 = multiMatchQueryBuilder40.tieBreaker((float) (short) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder44 = multiMatchQueryBuilder42.cutoffFrequency((float) (short) 1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder46 = multiMatchQueryBuilder42.analyzer("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"analyzer\" : \"hi!\",\n    \"max_expansions\" : 52,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0,\n    \"_name\" : \"{\\n  \\\"multiMatch\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"fuzzyRewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\"\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder48 = multiMatchQueryBuilder42.minimumShouldMatch("{\n  \"multiMatch\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\", \"\" ],\n    \"type\" : \"cross_fields\",\n    \"analyzer\" : \"multi_match\",\n    \"fuzzyRewrite\" : \"hi!\",\n    \"useDisMax\" : true,\n    \"boost\" : 0.0\n  }\n}");
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder42);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder44);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder46);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder48);
    }

    @Test
    public void test15462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15462");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.tieBreaker(0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type13 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX;
        float float14 = type13.tieBreaker();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder10.type(type13);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder15.field("multi_match", 0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder18.prefixLength((int) 'a');
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder20.prefixLength(10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder20.tieBreaker(35.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder20.slop((-1));
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = multiMatchQueryBuilder20.prefixLength((int) (byte) 10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder30 = multiMatchQueryBuilder20.minimumShouldMatch("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\", \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"analyzer\\\" : \\\"multi_match\\\",\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}^10.0\", \"{\\n  \\\"multiMatch\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"fuzzyRewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}^0.0\" ],\n    \"prefix_length\" : 32,\n    \"fuzzy_rewrite\" : \"\",\n    \"boost\" : 1.0,\n    \"_name\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\"\n  }\n}");
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertTrue("'" + type13 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX + "'", type13.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX));
        org.junit.Assert.assertTrue("'" + float14 + "' != '" + 0.0f + "'", float14 == 0.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder28);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder30);
    }

    @Test
    public void test15463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15463");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.fuzzyRewrite("hi!");
        java.lang.String str13 = multiMatchQueryBuilder10.getName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder10.rewrite("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"slop\" : -1,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder10.tieBreaker((float) '4');
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder10.minimumShouldMatch("");
        org.elasticsearch.index.query.Operator operator20 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder19.operator(operator20);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder19.queryName("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 1.0,\n    \"boost\" : 10.0\n  }\n}");
        org.elasticsearch.index.query.Operator operator24 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder23.operator(operator24);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery26 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder25.zeroTermsQuery(zeroTermsQuery26);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "multi_match" + "'", str13, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
    }

    @Test
    public void test15464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15464");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder8.prefixLength(1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder12.maxExpansions(10);
        float float15 = multiMatchQueryBuilder14.boost();
        java.lang.String[] strArray23 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray23);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder24.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = multiMatchQueryBuilder26.fuzzyRewrite("hi!");
        java.lang.String str29 = multiMatchQueryBuilder26.getName();
        float float30 = multiMatchQueryBuilder26.boost();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder32 = multiMatchQueryBuilder26.lenient(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder34 = multiMatchQueryBuilder26.queryName("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder36 = multiMatchQueryBuilder26.cutoffFrequency((float) (-1L));
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder38 = multiMatchQueryBuilder26.useDisMax(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder40 = multiMatchQueryBuilder26.cutoffFrequency((float) (short) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder42 = multiMatchQueryBuilder40.maxExpansions((int) (short) 1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder44 = multiMatchQueryBuilder42.maxExpansions((-1));
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder46 = multiMatchQueryBuilder44.tieBreaker((float) (short) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder48 = multiMatchQueryBuilder46.field("{\n  \"multiMatch\" : {\n    \"query\" : 100,\n    \"fields\" : [ \"{\\n  \\\"multiMatch\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"fuzzyRewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\" ],\n    \"cutoffFrequency\" : 0.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder50 = multiMatchQueryBuilder46.field("{\n  \"multi_match\" : {\n    \"query\" : 100,\n    \"fields\" : [ \"{\\n  \\\"multiMatch\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"fuzzyRewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\" ],\n    \"fuzzy_rewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"analyzer\\\" : \\\"multi_match\\\",\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"tie_breaker\" : 32.0,\n    \"cutoff_frequency\" : 0.0,\n    \"boost\" : 1.0\n  }\n}");
        boolean boolean51 = multiMatchQueryBuilder14.equals((java.lang.Object) "{\n  \"multi_match\" : {\n    \"query\" : 100,\n    \"fields\" : [ \"{\\n  \\\"multiMatch\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"fuzzyRewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\" ],\n    \"fuzzy_rewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"analyzer\\\" : \\\"multi_match\\\",\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"tie_breaker\" : 32.0,\n    \"cutoff_frequency\" : 0.0,\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertTrue("'" + float15 + "' != '" + 1.0f + "'", float15 == 1.0f);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "multi_match" + "'", str29, "multi_match");
        org.junit.Assert.assertTrue("'" + float30 + "' != '" + 1.0f + "'", float30 == 1.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder32);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder34);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder36);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder38);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder40);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder42);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder44);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder46);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder48);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
    }

    @Test
    public void test15465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15465");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery13 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder12.zeroTermsQuery(zeroTermsQuery13);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder14.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder16.queryName("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder18.analyzer("multi_match");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder18.field("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"slop\" : -1,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}", 0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder18.queryName("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder18.tieBreaker((float) (-1L));
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = multiMatchQueryBuilder27.tieBreaker((float) (short) -1);
        org.elasticsearch.index.query.Operator operator30 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = multiMatchQueryBuilder29.operator(operator30);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder33 = multiMatchQueryBuilder29.field("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\", \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"lenient\\\" : true,\\n    \\\"boost\\\" : 1.0\\n  }\\n}^-1.0\" ],\n    \"type\" : \"phrase_prefix\",\n    \"analyzer\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"analyzer\\\" : \\\"multi_match\\\",\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"slop\" : -1,\n    \"fuzziness\" : \"-1\",\n    \"prefix_length\" : 35,\n    \"minimum_should_match\" : \"hi!\",\n    \"rewrite\" : \"\",\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0,\n    \"_name\" : \"multi_match\"\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder36 = multiMatchQueryBuilder33.field("{\n  \"multiMatch\" : {\n    \"query\" : 100,\n    \"fields\" : [ \"{\\n  \\\"multiMatch\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"fuzzyRewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\" ],\n    \"cutoffFrequency\" : 0.0,\n    \"boost\" : 1.0\n  }\n}", (float) 10);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder29);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder31);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder33);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder36);
    }

    @Test
    public void test15466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15466");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery13 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder12.zeroTermsQuery(zeroTermsQuery13);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder14.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder16.queryName("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder16.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder16.analyzer("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder16.tieBreaker((float) 0);
        org.elasticsearch.index.query.Operator operator25 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder24.operator(operator25);
        java.lang.String str27 = null; // flaky: multiMatchQueryBuilder26.toString();
        java.lang.String str28 = multiMatchQueryBuilder26.queryName();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
// flaky:         org.junit.Assert.assertEquals("'" + str27 + "' != '" + "{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"analyzer\" : \"hi!\",\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 0.0,\n    \"boost\" : 1.0,\n    \"_name\" : \"hi!\"\n  }\n}" + "'", str27, "{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"analyzer\" : \"hi!\",\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 0.0,\n    \"boost\" : 1.0,\n    \"_name\" : \"hi!\"\n  }\n}");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "hi!" + "'", str28, "hi!");
    }

    @Test
    public void test15467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15467");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder10.field("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder10.boost(0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder16.analyzer("multi_match");
        float float19 = multiMatchQueryBuilder18.boost();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder18.cutoffFrequency((float) (byte) -1);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertTrue("'" + float19 + "' != '" + 0.0f + "'", float19 == 0.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
    }

    @Test
    public void test15468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15468");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder8.queryName("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String str13 = multiMatchQueryBuilder12.queryName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder12.useDisMax(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder15.lenient(true);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}" + "'", str13, "{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
    }

    @Test
    public void test15469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15469");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery13 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder12.zeroTermsQuery(zeroTermsQuery13);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder14.analyzer("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"minimum_should_match\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"slop\\\" : -1,\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"lenient\\\" : true,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.Operator operator17 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder16.operator(operator17);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder16.analyzer("{\n  \"multiMatch\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzyRewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder16.minimumShouldMatch("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"analyzer\" : \"hi!\",\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0,\n    \"_name\" : \"hi!\"\n  }\n}");
        org.elasticsearch.common.io.stream.StreamOutput streamOutput23 = null;
        // The following exception was thrown during execution in test generation
        try {
            multiMatchQueryBuilder16.writeTo(streamOutput23);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
    }

    @Test
    public void test15470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15470");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery13 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder12.zeroTermsQuery(zeroTermsQuery13);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder14.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder16.queryName("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder18.useDisMax(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type21 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS;
        org.elasticsearch.index.search.MatchQuery.Type type22 = type21.matchQueryType();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder20.type(type21);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type24 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder20.type(type24);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder25.cutoffFrequency((float) (short) 1);
        java.lang.String[] strArray35 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder36 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray35);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder38 = multiMatchQueryBuilder36.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder40 = multiMatchQueryBuilder38.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder42 = multiMatchQueryBuilder40.tieBreaker((float) '#');
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder44 = multiMatchQueryBuilder42.boost((float) 10L);
        java.lang.String[] strArray52 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder53 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray52);
        java.lang.Object obj54 = null;
        java.lang.String[] strArray63 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder64 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray63);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder65 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 10.0f, strArray63);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder66 = new org.elasticsearch.index.query.MultiMatchQueryBuilder(obj54, strArray63);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder67 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray63);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder68 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) multiMatchQueryBuilder42, strArray63);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder69 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) multiMatchQueryBuilder25, strArray63);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder71 = multiMatchQueryBuilder25.minimumShouldMatch("{\n  \"multiMatch\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"prefixLength\" : 0,\n    \"maxExpansions\" : 1,\n    \"fuzzyRewrite\" : \"\",\n    \"lenient\" : true,\n    \"boost\" : 1.0,\n    \"Name\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\"\n  }\n}");
        java.lang.String[] strArray79 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder80 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray79);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder82 = multiMatchQueryBuilder80.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder84 = multiMatchQueryBuilder82.tieBreaker(0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder86 = multiMatchQueryBuilder82.cutoffFrequency((float) 0L);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder88 = multiMatchQueryBuilder82.minimumShouldMatch("{\n  \"multiMatch\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzyRewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder90 = multiMatchQueryBuilder82.maxExpansions(0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder92 = multiMatchQueryBuilder90.minimumShouldMatch("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"slop\" : 0,\n    \"prefix_length\" : 0,\n    \"rewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"analyzer\\\" : \\\"multi_match\\\",\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"lenient\" : false,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String str93 = multiMatchQueryBuilder92.getWriteableName();
        org.elasticsearch.index.query.QueryValidationException queryValidationException94 = multiMatchQueryBuilder92.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder95 = multiMatchQueryBuilder71.type((java.lang.Object) queryValidationException94);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertTrue("'" + type21 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS + "'", type21.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS));
        org.junit.Assert.assertTrue("'" + type22 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type22.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertTrue("'" + type24 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type24.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder38);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder40);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder42);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder44);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder71);
        org.junit.Assert.assertNotNull(strArray79);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder82);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder84);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder86);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder88);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder90);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder92);
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "multi_match" + "'", str93, "multi_match");
        org.junit.Assert.assertNull(queryValidationException94);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder95);
    }

    @Test
    public void test15471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15471");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.fuzzyRewrite("hi!");
        java.lang.String str13 = multiMatchQueryBuilder10.getName();
        float float14 = multiMatchQueryBuilder10.boost();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder10.lenient(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder10.slop((int) (short) -1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder10.tieBreaker((float) 10L);
        java.lang.String str21 = null; // flaky: multiMatchQueryBuilder20.toString();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder20.queryName("{\n  \"multiMatch\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"analyzer\" : \"multi_match\",\n    \"fuzzyRewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String[] strArray31 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder32 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray31);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder34 = multiMatchQueryBuilder32.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder36 = multiMatchQueryBuilder34.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder38 = multiMatchQueryBuilder36.lenient(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder40 = multiMatchQueryBuilder36.prefixLength((int) (byte) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder42 = multiMatchQueryBuilder40.boost((float) 1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder45 = multiMatchQueryBuilder42.field("{\n  \"multiMatch\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"rewrite\" : \"multi_match\",\n    \"fuzzyRewrite\" : \"hi!\",\n    \"lenient\" : false,\n    \"boost\" : 1.0\n  }\n}", (-1.0f));
        java.lang.String str46 = multiMatchQueryBuilder45.queryName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder48 = multiMatchQueryBuilder45.boost((float) 'a');
        boolean boolean49 = multiMatchQueryBuilder20.equals((java.lang.Object) 'a');
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder51 = multiMatchQueryBuilder20.field("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\", \"hi!\" ],\n    \"minimum_should_match\" : \"{\\n  \\\"multiMatch\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"fuzzyRewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"fuzzy_rewrite\" : \"\",\n    \"tie_breaker\" : 0.0,\n    \"cutoff_frequency\" : 0.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder53 = multiMatchQueryBuilder20.fuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"prefix_length\" : -1,\n    \"max_expansions\" : 52,\n    \"rewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"multi_match^0.0\\\" ],\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"lenient\\\" : true,\\n    \\\"boost\\\" : 0.0\\n  }\\n}\",\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"lenient\" : false,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery54 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder55 = multiMatchQueryBuilder53.zeroTermsQuery(zeroTermsQuery54);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "multi_match" + "'", str13, "multi_match");
        org.junit.Assert.assertTrue("'" + float14 + "' != '" + 1.0f + "'", float14 == 1.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
// flaky:         org.junit.Assert.assertEquals("'" + str21 + "' != '" + "{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"slop\" : -1,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 10.0,\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}" + "'", str21, "{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"slop\" : -1,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 10.0,\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder34);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder36);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder38);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder40);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder42);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder45);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder51);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder53);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder55);
    }

    @Test
    public void test15472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15472");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder8.queryName("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.Operator operator13 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder12.operator(operator13);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder14.field("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder14.queryName("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"analyzer\" : \"multi_match\",\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder14.useDisMax(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder20.queryName("{\n  \"multiMatch\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\", \"\" ],\n    \"type\" : \"best_fields\",\n    \"analyzer\" : \"multi_match\",\n    \"maxExpansions\" : 1,\n    \"rewrite\" : \"{\\n  \\\"multiMatch\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"analyzer\\\" : \\\"multi_match\\\",\\n    \\\"maxExpansions\\\" : -1,\\n    \\\"fuzzyRewrite\\\" : \\\"hi!\\\",\\n    \\\"useDisMax\\\" : true,\\n    \\\"boost\\\" : 0.0\\n  }\\n}\",\n    \"fuzzyRewrite\" : \"hi!\",\n    \"boost\" : 0.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder20.slop((int) '#');
        java.lang.String str25 = multiMatchQueryBuilder24.getWriteableName();
        org.elasticsearch.common.xcontent.XContentType xContentType26 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.bytes.BytesReference bytesReference27 = multiMatchQueryBuilder24.buildAsBytes(xContentType26);
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchException; message: Failed to build ToXContent");
        } catch (org.elasticsearch.ElasticsearchException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "multi_match" + "'", str25, "multi_match");
    }

    @Test
    public void test15473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15473");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder12.tieBreaker((float) '#');
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder12.maxExpansions(10);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery17 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder16.zeroTermsQuery(zeroTermsQuery17);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder16.boost(32.0f);
        org.elasticsearch.common.io.stream.StreamInput streamInput21 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder16.readFrom(streamInput21);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
    }

    @Test
    public void test15474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15474");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery13 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder12.zeroTermsQuery(zeroTermsQuery13);
        java.lang.String str15 = null; // flaky: multiMatchQueryBuilder12.toString();
        java.lang.String str16 = multiMatchQueryBuilder12.queryName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder12.queryName("");
        java.lang.String str19 = multiMatchQueryBuilder12.getName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder12.field("", (float) ' ');
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder22.useDisMax(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder24.useDisMax(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = multiMatchQueryBuilder26.rewrite("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"analyzer\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"fuzzy_rewrite\\\" : \\\"\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"fuzzy_rewrite\" : \"\",\n    \"use_dis_max\" : false,\n    \"boost\" : 1.0,\n    \"_name\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\"\n  }\n}");
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}" + "'", str15, "{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "multi_match" + "'", str19, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder28);
    }

    @Test
    public void test15475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15475");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder12.tieBreaker((float) '#');
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder14.useDisMax(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder16.boost((float) 100L);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder18.fuzzyRewrite("");
        java.lang.String str21 = multiMatchQueryBuilder20.queryName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder20.maxExpansions((int) (byte) 10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder23.lenient(true);
        java.lang.String[] strArray33 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder34 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray33);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder36 = multiMatchQueryBuilder34.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder38 = multiMatchQueryBuilder36.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery39 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder40 = multiMatchQueryBuilder38.zeroTermsQuery(zeroTermsQuery39);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder42 = multiMatchQueryBuilder40.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder44 = multiMatchQueryBuilder42.queryName("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder46 = multiMatchQueryBuilder42.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder48 = multiMatchQueryBuilder42.analyzer("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder50 = multiMatchQueryBuilder42.tieBreaker((float) 0);
        java.lang.String[] strArray53 = new java.lang.String[] { "{\n  \"multiMatch\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzyRewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder54 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (short) 100, strArray53);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder55 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0, strArray53);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder57 = multiMatchQueryBuilder55.queryName("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String[] strArray65 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder66 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray65);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder68 = multiMatchQueryBuilder66.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder70 = multiMatchQueryBuilder66.queryName("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.Operator operator71 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder72 = multiMatchQueryBuilder70.operator(operator71);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder74 = multiMatchQueryBuilder72.lenient(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder76 = multiMatchQueryBuilder74.maxExpansions((int) (short) 1);
        java.lang.String[] strArray84 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder85 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray84);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder86 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) multiMatchQueryBuilder74, strArray84);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder87 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}", strArray84);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder88 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) true, strArray84);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder36);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder38);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder40);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder42);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder44);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder46);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder48);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder50);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder57);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder68);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder70);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder72);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder74);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder76);
        org.junit.Assert.assertNotNull(strArray84);
    }

    @Test
    public void test15476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15476");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder8.queryName("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.Operator operator13 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder12.operator(operator13);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder12.field("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"analyzer\" : \"multi_match\",\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}", 10.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder17.field("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery20 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder17.zeroTermsQuery(zeroTermsQuery20);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder17.rewrite("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"type\" : \"best_fields\",\n    \"fuzzy_rewrite\" : \"\",\n    \"use_dis_max\" : false,\n    \"tie_breaker\" : 0.0,\n    \"lenient\" : false,\n    \"cutoff_frequency\" : 0.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder23.boost((float) (short) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder25.minimumShouldMatch("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"analyzer\" : \"{\\n  \\\"multiMatch\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"fuzzyRewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"slop\" : 100,\n    \"rewrite\" : \"multi_match\",\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"lenient\" : false,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = multiMatchQueryBuilder25.lenient(true);
        org.elasticsearch.index.query.QueryShardContext queryShardContext30 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.lucene.search.Query query31 = multiMatchQueryBuilder29.toFilter(queryShardContext30);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder29);
    }

    @Test
    public void test15477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15477");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder12.tieBreaker((float) '#');
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery15 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder12.zeroTermsQuery(zeroTermsQuery15);
        org.elasticsearch.index.query.Operator operator17 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder16.operator(operator17);
        org.elasticsearch.index.query.QueryValidationException queryValidationException19 = multiMatchQueryBuilder18.validate();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNull(queryValidationException19);
    }

    @Test
    public void test15478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15478");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.fuzzyRewrite("hi!");
        java.lang.String str13 = multiMatchQueryBuilder10.getName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder10.rewrite("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"slop\" : -1,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder10.prefixLength((int) (short) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder17.analyzer("{\n  \"multiMatch\" : {\n    \"query\" : 100,\n    \"fields\" : [ \"{\\n  \\\"multiMatch\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"fuzzyRewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\" ],\n    \"cutoffFrequency\" : 0.0,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.Object obj20 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type21 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX;
        float float22 = type21.tieBreaker();
        float float23 = type21.tieBreaker();
        org.elasticsearch.index.search.MatchQuery.Type type24 = type21.matchQueryType();
        java.lang.String[] strArray32 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder33 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray32);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder35 = multiMatchQueryBuilder33.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder37 = multiMatchQueryBuilder33.queryName("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.Operator operator38 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder39 = multiMatchQueryBuilder37.operator(operator38);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder41 = multiMatchQueryBuilder39.lenient(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder43 = multiMatchQueryBuilder41.maxExpansions((int) (short) 1);
        java.lang.String[] strArray51 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder52 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray51);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder53 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) multiMatchQueryBuilder41, strArray51);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder54 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) type21, strArray51);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder55 = new org.elasticsearch.index.query.MultiMatchQueryBuilder(obj20, strArray51);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder56 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) multiMatchQueryBuilder19, strArray51);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder58 = multiMatchQueryBuilder19.slop((int) '#');
        java.lang.String str59 = multiMatchQueryBuilder58.getName();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "multi_match" + "'", str13, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertTrue("'" + type21 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX + "'", type21.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX));
        org.junit.Assert.assertTrue("'" + float22 + "' != '" + 0.0f + "'", float22 == 0.0f);
        org.junit.Assert.assertTrue("'" + float23 + "' != '" + 0.0f + "'", float23 == 0.0f);
        org.junit.Assert.assertTrue("'" + type24 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX + "'", type24.equals(org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX));
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder35);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder37);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder39);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder41);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder43);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "multi_match" + "'", str59, "multi_match");
    }

    @Test
    public void test15479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15479");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.fuzzyRewrite("hi!");
        java.lang.String str13 = multiMatchQueryBuilder10.getName();
        float float14 = multiMatchQueryBuilder10.boost();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder10.lenient(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder10.slop((int) (short) -1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type19 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX;
        org.elasticsearch.index.search.MatchQuery.Type type20 = type19.matchQueryType();
        org.elasticsearch.index.search.MatchQuery.Type type21 = type19.matchQueryType();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder10.type(type19);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder10.queryName("multi_match");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder24.minimumShouldMatch("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = multiMatchQueryBuilder24.lenient(true);
        org.elasticsearch.index.query.Operator operator29 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder30 = multiMatchQueryBuilder24.operator(operator29);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery31 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder32 = multiMatchQueryBuilder30.zeroTermsQuery(zeroTermsQuery31);
        java.lang.String[] strArray40 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder41 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray40);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder43 = multiMatchQueryBuilder41.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder45 = multiMatchQueryBuilder43.tieBreaker(0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder47 = multiMatchQueryBuilder43.cutoffFrequency((float) 0L);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder49 = multiMatchQueryBuilder47.analyzer("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException50 = multiMatchQueryBuilder49.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type51 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder52 = multiMatchQueryBuilder49.type((java.lang.Object) type51);
        float float53 = type51.tieBreaker();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder54 = multiMatchQueryBuilder32.type(type51);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder56 = multiMatchQueryBuilder54.prefixLength((int) '#');
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder58 = multiMatchQueryBuilder54.slop((int) (byte) 1);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "multi_match" + "'", str13, "multi_match");
        org.junit.Assert.assertTrue("'" + float14 + "' != '" + 1.0f + "'", float14 == 1.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertTrue("'" + type19 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX + "'", type19.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX));
        org.junit.Assert.assertTrue("'" + type20 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX + "'", type20.equals(org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX));
        org.junit.Assert.assertTrue("'" + type21 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX + "'", type21.equals(org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder28);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder30);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder32);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder43);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder45);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder47);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder49);
        org.junit.Assert.assertNull(queryValidationException50);
        org.junit.Assert.assertTrue("'" + type51 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS + "'", type51.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder52);
        org.junit.Assert.assertTrue("'" + float53 + "' != '" + 1.0f + "'", float53 == 1.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder54);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder56);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder58);
    }

    @Test
    public void test15480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15480");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder12.lenient(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder12.prefixLength((int) (byte) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder12.rewrite("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"slop\" : -1,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder18.slop(0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder20.slop(0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder22.queryName("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"^1.0\", \"^1.0\", \"^1.0\", \"^1.0\", \"^1.0\", \"^1.0\" ],\n    \"type\" : \"phrase_prefix\",\n    \"minimum_should_match\" : \"{\\n  \\\"multiMatch\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"fuzzyRewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"fuzzy_rewrite\" : \"\",\n    \"tie_breaker\" : 0.0,\n    \"cutoff_frequency\" : 0.0,\n    \"boost\" : 1.0,\n    \"_name\" : \"multi_match\"\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder24.cutoffFrequency((float) (byte) -1);
        org.elasticsearch.index.query.QueryShardContext queryShardContext27 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.lucene.search.Query query28 = multiMatchQueryBuilder24.toQuery(queryShardContext27);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
    }

    @Test
    public void test15481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15481");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.fuzzyRewrite("hi!");
        java.lang.String str13 = multiMatchQueryBuilder10.getName();
        float float14 = multiMatchQueryBuilder10.boost();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder10.lenient(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder10.slop((int) (short) -1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder10.useDisMax(true);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery21 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder20.zeroTermsQuery(zeroTermsQuery21);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder20.fuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"analyzer\" : \"hi!\",\n    \"minimum_should_match\" : \"{\\n  \\\"multiMatch\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"type\\\" : \\\"phrase_prefix\\\",\\n    \\\"maxExpansions\\\" : 10,\\n    \\\"fuzzyRewrite\\\" : \\\"\\\",\\n    \\\"tieBreaker\\\" : 0.0,\\n    \\\"cutoffFrequency\\\" : 0.0,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"lenient\" : false,\n    \"cutoff_frequency\" : -1.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.QueryValidationException queryValidationException25 = multiMatchQueryBuilder20.validate();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "multi_match" + "'", str13, "multi_match");
        org.junit.Assert.assertTrue("'" + float14 + "' != '" + 1.0f + "'", float14 == 1.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertNull(queryValidationException25);
    }

    @Test
    public void test15482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15482");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.tieBreaker(0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type13 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX;
        float float14 = type13.tieBreaker();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder10.type(type13);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder10.cutoffFrequency((float) 0L);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder10.lenient(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder10.queryName("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"analyzer\" : \"multi_match\",\n    \"slop\" : -1,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0,\n    \"_name\" : \"hi!\"\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder10.analyzer("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"type\" : \"cross_fields\",\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 32.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder10.field("{\n  \"multiMatch\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"maxExpansions\" : 1,\n    \"fuzzyRewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type26 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX;
        float float27 = type26.tieBreaker();
        float float28 = type26.tieBreaker();
        org.elasticsearch.index.search.MatchQuery.Type type29 = type26.matchQueryType();
        org.elasticsearch.index.search.MatchQuery.Type type30 = type26.matchQueryType();
        org.elasticsearch.common.ParseField parseField31 = type26.parseField();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder32 = multiMatchQueryBuilder25.type(type26);
        org.elasticsearch.common.ParseField parseField33 = type26.parseField();
        org.elasticsearch.index.search.MatchQuery.Type type34 = type26.matchQueryType();
        org.elasticsearch.index.search.MatchQuery.Type type35 = type26.matchQueryType();
        java.lang.Class<?> wildcardClass36 = type35.getClass();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertTrue("'" + type13 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX + "'", type13.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX));
        org.junit.Assert.assertTrue("'" + float14 + "' != '" + 0.0f + "'", float14 == 0.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
        org.junit.Assert.assertTrue("'" + type26 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX + "'", type26.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX));
        org.junit.Assert.assertTrue("'" + float27 + "' != '" + 0.0f + "'", float27 == 0.0f);
        org.junit.Assert.assertTrue("'" + float28 + "' != '" + 0.0f + "'", float28 == 0.0f);
        org.junit.Assert.assertTrue("'" + type29 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX + "'", type29.equals(org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX));
        org.junit.Assert.assertTrue("'" + type30 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX + "'", type30.equals(org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX));
        org.junit.Assert.assertNotNull(parseField31);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder32);
        org.junit.Assert.assertNotNull(parseField33);
        org.junit.Assert.assertTrue("'" + type34 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX + "'", type34.equals(org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX));
        org.junit.Assert.assertTrue("'" + type35 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX + "'", type35.equals(org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX));
        org.junit.Assert.assertNotNull(wildcardClass36);
    }

    @Test
    public void test15483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15483");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder8.queryName("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.Operator operator13 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder12.operator(operator13);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder14.lenient(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder16.maxExpansions((int) (short) 1);
        java.lang.String[] strArray26 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray26);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) multiMatchQueryBuilder16, strArray26);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder30 = multiMatchQueryBuilder16.queryName("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder32 = multiMatchQueryBuilder16.useDisMax(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder34 = multiMatchQueryBuilder32.rewrite("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"slop\" : -1,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery35 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder36 = multiMatchQueryBuilder34.zeroTermsQuery(zeroTermsQuery35);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder38 = multiMatchQueryBuilder36.maxExpansions((int) (byte) 1);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder30);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder32);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder34);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder36);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder38);
    }

    @Test
    public void test15484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15484");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder12.tieBreaker((float) '#');
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder14.useDisMax(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder16.cutoffFrequency((float) 1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder18.field("{\n  \"multiMatch\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\", \"\" ],\n    \"analyzer\" : \"multi_match\",\n    \"maxExpansions\" : -1,\n    \"fuzzyRewrite\" : \"hi!\",\n    \"useDisMax\" : true,\n    \"boost\" : 0.0\n  }\n}");
        java.lang.String[] strArray28 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray28);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = multiMatchQueryBuilder29.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder33 = multiMatchQueryBuilder31.tieBreaker(0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder35 = multiMatchQueryBuilder31.cutoffFrequency((float) 0L);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder37 = multiMatchQueryBuilder35.analyzer("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder39 = multiMatchQueryBuilder37.field("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"slop\" : -1,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder41 = multiMatchQueryBuilder39.queryName("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"slop\" : -1,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder43 = multiMatchQueryBuilder39.field("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"analyzer\" : \"multi_match\",\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder45 = multiMatchQueryBuilder39.slop((int) (short) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder47 = multiMatchQueryBuilder39.field("{\n  \"multiMatch\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\", \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"analyzer\\\" : \\\"multi_match\\\",\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}^10.0\" ],\n    \"fuzzyRewrite\" : \"\",\n    \"boost\" : 1.0,\n    \"Name\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\"\n  }\n}");
        boolean boolean48 = multiMatchQueryBuilder20.equals((java.lang.Object) multiMatchQueryBuilder47);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder50 = multiMatchQueryBuilder20.field("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"slop\" : 0,\n    \"prefix_length\" : 0,\n    \"rewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"analyzer\\\" : \\\"multi_match\\\",\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"lenient\" : false,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder52 = multiMatchQueryBuilder50.analyzer("");
        org.elasticsearch.index.query.QueryShardContext queryShardContext53 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.lucene.search.Query query54 = multiMatchQueryBuilder50.toFilter(queryShardContext53);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder31);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder33);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder35);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder37);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder39);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder41);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder43);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder45);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder50);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder52);
    }

    @Test
    public void test15485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15485");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.tieBreaker(0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type13 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX;
        float float14 = type13.tieBreaker();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder10.type(type13);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder10.cutoffFrequency((float) 0L);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder10.maxExpansions(10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder10.analyzer("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"slop\" : -1,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder10.analyzer("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"analyzer\" : \"multi_match\",\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder23.rewrite("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String[] strArray33 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder34 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray33);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder36 = multiMatchQueryBuilder34.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder38 = multiMatchQueryBuilder36.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder40 = multiMatchQueryBuilder38.tieBreaker((float) '#');
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder42 = multiMatchQueryBuilder40.useDisMax(true);
        java.lang.Class<?> wildcardClass43 = multiMatchQueryBuilder40.getClass();
        boolean boolean44 = multiMatchQueryBuilder23.equals((java.lang.Object) multiMatchQueryBuilder40);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder46 = multiMatchQueryBuilder23.minimumShouldMatch("{\n  \"multiMatch\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"rewrite\" : \"multi_match\",\n    \"fuzzyRewrite\" : \"hi!\",\n    \"lenient\" : false,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery47 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder48 = multiMatchQueryBuilder46.zeroTermsQuery(zeroTermsQuery47);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertTrue("'" + type13 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX + "'", type13.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX));
        org.junit.Assert.assertTrue("'" + float14 + "' != '" + 0.0f + "'", float14 == 0.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder36);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder38);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder40);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder42);
        org.junit.Assert.assertNotNull(wildcardClass43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder46);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder48);
    }

    @Test
    public void test15486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15486");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.fuzzyRewrite("hi!");
        java.lang.String str13 = multiMatchQueryBuilder10.getName();
        float float14 = multiMatchQueryBuilder10.boost();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder10.lenient(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder10.slop((int) (short) -1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type19 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX;
        org.elasticsearch.index.search.MatchQuery.Type type20 = type19.matchQueryType();
        org.elasticsearch.index.search.MatchQuery.Type type21 = type19.matchQueryType();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder10.type(type19);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder22.fuzzyRewrite("{\n  \"multiMatch\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzyRewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder24.fuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"slop\" : -1,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = multiMatchQueryBuilder24.fuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"slop\\\" : -1,\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"lenient\\\" : true,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"boost\" : 1.0,\n    \"_name\" : \"hi!\"\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder30 = multiMatchQueryBuilder28.fuzzyRewrite("{\n  \"multiMatch\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\", \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"analyzer\\\" : \\\"multi_match\\\",\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}^10.0\" ],\n    \"fuzzyRewrite\" : \"\",\n    \"boost\" : 1.0,\n    \"Name\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\"\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder32 = multiMatchQueryBuilder30.rewrite("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"max_expansions\" : 1,\n    \"fuzzy_rewrite\" : \"\",\n    \"lenient\" : true,\n    \"boost\" : 1.0,\n    \"_name\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\"\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder34 = multiMatchQueryBuilder30.prefixLength((int) (short) 1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder36 = multiMatchQueryBuilder30.useDisMax(false);
        java.lang.String[] strArray44 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder45 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray44);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder47 = multiMatchQueryBuilder45.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder49 = multiMatchQueryBuilder45.cutoffFrequency((float) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder51 = multiMatchQueryBuilder49.boost((float) (byte) -1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder53 = multiMatchQueryBuilder49.slop((int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder54 = null; // flaky: multiMatchQueryBuilder36.type((java.lang.Object) multiMatchQueryBuilder53);
// flaky:             org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchParseException; message: failed to parse [multi_match] query type [{?  \"multi_match\" : {?    \"query\" : 0.0,?    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],?    \"slop\" : 0,?    \"fuzzy_rewrite\" : \"\",?    \"cutoff_frequency\" : 100.0,?    \"boost\" : -1.0?  }?}]. unknown type.");
        } catch (org.elasticsearch.ElasticsearchParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "multi_match" + "'", str13, "multi_match");
        org.junit.Assert.assertTrue("'" + float14 + "' != '" + 1.0f + "'", float14 == 1.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertTrue("'" + type19 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX + "'", type19.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX));
        org.junit.Assert.assertTrue("'" + type20 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX + "'", type20.equals(org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX));
        org.junit.Assert.assertTrue("'" + type21 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX + "'", type21.equals(org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder28);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder30);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder32);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder34);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder36);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder47);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder49);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder51);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder53);
    }

    @Test
    public void test15487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15487");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder12.lenient(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder14.rewrite("multi_match");
        java.lang.String str17 = multiMatchQueryBuilder16.getWriteableName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder16.analyzer("{\n  \"multiMatch\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzyRewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder19.lenient(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder19.maxExpansions((int) (short) 1);
        java.lang.String[] strArray31 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder32 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray31);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder34 = multiMatchQueryBuilder32.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder36 = multiMatchQueryBuilder34.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery37 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder38 = multiMatchQueryBuilder36.zeroTermsQuery(zeroTermsQuery37);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder40 = multiMatchQueryBuilder38.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery41 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder42 = multiMatchQueryBuilder38.zeroTermsQuery(zeroTermsQuery41);
        java.lang.String str43 = multiMatchQueryBuilder38.getWriteableName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder44 = multiMatchQueryBuilder19.fuzziness((java.lang.Object) str43);
        org.elasticsearch.index.query.Operator operator45 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder46 = multiMatchQueryBuilder44.operator(operator45);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery47 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder48 = multiMatchQueryBuilder44.zeroTermsQuery(zeroTermsQuery47);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder50 = multiMatchQueryBuilder48.cutoffFrequency((float) (short) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder52 = multiMatchQueryBuilder48.field("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"^1.0\", \"^1.0\", \"^1.0\", \"^1.0\", \"^1.0\", \"^1.0\" ],\n    \"type\" : \"phrase_prefix\",\n    \"prefix_length\" : 52,\n    \"fuzzy_rewrite\" : \"\",\n    \"tie_breaker\" : 0.0,\n    \"cutoff_frequency\" : 0.0,\n    \"boost\" : 1.0,\n    \"_name\" : \"multi_match\"\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder54 = multiMatchQueryBuilder52.field("{\n  \"multiMatch\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"type\" : \"best_fields\",\n    \"fuzzyRewrite\" : \"hi!\",\n    \"lenient\" : false,\n    \"cutoffFrequency\" : -1.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery55 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder56 = multiMatchQueryBuilder54.zeroTermsQuery(zeroTermsQuery55);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "multi_match" + "'", str17, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder34);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder36);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder38);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder40);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "multi_match" + "'", str43, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder44);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder46);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder48);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder50);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder52);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder54);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder56);
    }

    @Test
    public void test15488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15488");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.fuzzyRewrite("hi!");
        java.lang.String str13 = multiMatchQueryBuilder10.getName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder10.prefixLength(1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder10.prefixLength((int) ' ');
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder10.minimumShouldMatch("{\n  \"multiMatch\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\", \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"slop\\\" : -1,\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"lenient\\\" : true,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\" ],\n    \"maxExpansions\" : 0,\n    \"fuzzyRewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder19.prefixLength((int) (byte) 10);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery22 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder21.zeroTermsQuery(zeroTermsQuery22);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "multi_match" + "'", str13, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
    }

    @Test
    public void test15489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15489");
        org.elasticsearch.common.xcontent.XContent xContent0 = null;
        java.io.OutputStream outputStream1 = null;
        java.lang.String[] strArray9 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray9);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder12.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder14.lenient(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder14.queryName("{\n  \"multiMatch\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzyRewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String str19 = multiMatchQueryBuilder18.getName();
        java.lang.String[] strArray22 = new java.lang.String[] { "{\n  \"multiMatch\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzyRewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (short) 100, strArray22);
        java.lang.String[] strArray31 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder32 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray31);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder33 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) multiMatchQueryBuilder23, strArray31);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder34 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) str19, strArray31);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder36 = multiMatchQueryBuilder34.tieBreaker((float) (byte) 100);
        java.lang.String[] strArray44 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder45 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray44);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder47 = multiMatchQueryBuilder45.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder49 = multiMatchQueryBuilder47.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder51 = multiMatchQueryBuilder47.cutoffFrequency((float) 100L);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder53 = multiMatchQueryBuilder47.fuzzyRewrite("{\n  \"multiMatch\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzyRewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        java.lang.Object obj54 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type55 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX;
        float float56 = type55.tieBreaker();
        float float57 = type55.tieBreaker();
        org.elasticsearch.index.search.MatchQuery.Type type58 = type55.matchQueryType();
        java.lang.String[] strArray66 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder67 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray66);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder69 = multiMatchQueryBuilder67.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder71 = multiMatchQueryBuilder67.queryName("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.Operator operator72 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder73 = multiMatchQueryBuilder71.operator(operator72);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder75 = multiMatchQueryBuilder73.lenient(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder77 = multiMatchQueryBuilder75.maxExpansions((int) (short) 1);
        java.lang.String[] strArray85 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder86 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray85);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder87 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) multiMatchQueryBuilder75, strArray85);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder88 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) type55, strArray85);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder89 = new org.elasticsearch.index.query.MultiMatchQueryBuilder(obj54, strArray85);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder90 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) multiMatchQueryBuilder47, strArray85);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder91 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) multiMatchQueryBuilder36, strArray85);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder92 = new org.elasticsearch.common.xcontent.XContentBuilder(xContent0, outputStream1, strArray85);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "multi_match" + "'", str19, "multi_match");
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder36);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder47);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder49);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder51);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder53);
        org.junit.Assert.assertTrue("'" + type55 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX + "'", type55.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX));
        org.junit.Assert.assertTrue("'" + float56 + "' != '" + 0.0f + "'", float56 == 0.0f);
        org.junit.Assert.assertTrue("'" + float57 + "' != '" + 0.0f + "'", float57 == 0.0f);
        org.junit.Assert.assertTrue("'" + type58 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX + "'", type58.equals(org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX));
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder69);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder71);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder73);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder75);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder77);
        org.junit.Assert.assertNotNull(strArray85);
    }

    @Test
    public void test15490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15490");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.fuzzyRewrite("hi!");
        java.lang.String str13 = multiMatchQueryBuilder10.getName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder10.analyzer("multi_match");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder15.cutoffFrequency((float) (short) 1);
        java.lang.String str18 = multiMatchQueryBuilder15.getWriteableName();
        java.lang.String[] strArray26 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray26);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = multiMatchQueryBuilder27.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = multiMatchQueryBuilder29.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.QueryValidationException queryValidationException32 = multiMatchQueryBuilder29.validate();
        java.lang.String[] strArray40 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder41 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray40);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder43 = multiMatchQueryBuilder41.fuzzyRewrite("");
        java.lang.String[] strArray51 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder52 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray51);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder54 = multiMatchQueryBuilder52.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder56 = multiMatchQueryBuilder54.tieBreaker(0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type57 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX;
        float float58 = type57.tieBreaker();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder59 = multiMatchQueryBuilder54.type(type57);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder61 = multiMatchQueryBuilder54.cutoffFrequency((float) 0L);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder63 = multiMatchQueryBuilder54.lenient(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type64 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        org.elasticsearch.index.search.MatchQuery.Type type65 = type64.matchQueryType();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder66 = multiMatchQueryBuilder54.type(type64);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder67 = multiMatchQueryBuilder41.fuzziness((java.lang.Object) type64);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder68 = multiMatchQueryBuilder29.type(type64);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder69 = multiMatchQueryBuilder15.type(type64);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder71 = multiMatchQueryBuilder69.prefixLength((int) 'a');
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder73 = multiMatchQueryBuilder69.fuzziness((java.lang.Object) "{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"\",\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 52.0\n  }\n}");
        java.lang.String str74 = multiMatchQueryBuilder73.getWriteableName();
        org.elasticsearch.common.io.stream.StreamInput streamInput75 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder76 = multiMatchQueryBuilder73.readFrom(streamInput75);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "multi_match" + "'", str13, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "multi_match" + "'", str18, "multi_match");
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder29);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder31);
        org.junit.Assert.assertNull(queryValidationException32);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder43);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder54);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder56);
        org.junit.Assert.assertTrue("'" + type57 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX + "'", type57.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX));
        org.junit.Assert.assertTrue("'" + float58 + "' != '" + 0.0f + "'", float58 == 0.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder59);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder61);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder63);
        org.junit.Assert.assertTrue("'" + type64 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type64.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertTrue("'" + type65 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type65.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder66);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder67);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder68);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder69);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder71);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder73);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "multi_match" + "'", str74, "multi_match");
    }

    @Test
    public void test15491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15491");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.fuzzyRewrite("hi!");
        java.lang.String str13 = multiMatchQueryBuilder10.getName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder10.analyzer("multi_match");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder15.cutoffFrequency((float) (short) 1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder17.minimumShouldMatch("{\n  \"multiMatch\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzyRewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String[] strArray27 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray27);
        java.lang.Object obj29 = null;
        java.lang.String[] strArray38 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder39 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray38);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder40 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 10.0f, strArray38);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder41 = new org.elasticsearch.index.query.MultiMatchQueryBuilder(obj29, strArray38);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder42 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray38);
        org.elasticsearch.index.query.Operator operator43 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder44 = multiMatchQueryBuilder42.operator(operator43);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder46 = multiMatchQueryBuilder44.cutoffFrequency((float) (-1L));
        boolean boolean47 = multiMatchQueryBuilder19.equals((java.lang.Object) multiMatchQueryBuilder44);
        java.lang.String str48 = multiMatchQueryBuilder44.getWriteableName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder50 = multiMatchQueryBuilder44.maxExpansions((int) '4');
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder52 = multiMatchQueryBuilder50.prefixLength((int) (short) 1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder55 = multiMatchQueryBuilder50.field("{\n  \"multiMatch\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\", \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"slop\\\" : -1,\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"lenient\\\" : true,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\", \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"max_expansions\\\" : 1,\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\" ],\n    \"analyzer\" : \"\",\n    \"fuzzyRewrite\" : \"\",\n    \"tieBreaker\" : 0.0,\n    \"cutoffFrequency\" : 0.0,\n    \"boost\" : 1.0\n  }\n}", 10.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder57 = multiMatchQueryBuilder50.fuzzyRewrite("{\n  \"multiMatch\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"analyzer\" : \"{\\n  \\\"multiMatch\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"fuzzyRewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"rewrite\" : \"multi_match\",\n    \"fuzzyRewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String[] strArray65 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder66 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray65);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder68 = multiMatchQueryBuilder66.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder70 = multiMatchQueryBuilder68.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder72 = multiMatchQueryBuilder68.field("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder74 = multiMatchQueryBuilder68.boost(0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder76 = multiMatchQueryBuilder74.analyzer("multi_match");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder78 = multiMatchQueryBuilder76.useDisMax(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder80 = multiMatchQueryBuilder76.useDisMax(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder82 = multiMatchQueryBuilder76.rewrite("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"analyzer\" : \"hi!\",\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0,\n    \"_name\" : \"hi!\"\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder84 = multiMatchQueryBuilder76.cutoffFrequency((float) 1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder86 = multiMatchQueryBuilder76.queryName("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 1.0,\n    \"boost\" : 10.0\n  }\n}");
        boolean boolean87 = multiMatchQueryBuilder50.equals((java.lang.Object) multiMatchQueryBuilder76);
        org.elasticsearch.index.query.Operator operator88 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder89 = multiMatchQueryBuilder76.operator(operator88);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "multi_match" + "'", str13, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder44);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "multi_match" + "'", str48, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder50);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder52);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder55);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder57);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder68);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder70);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder72);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder74);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder76);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder78);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder80);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder82);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder84);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder89);
    }

    @Test
    public void test15492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15492");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.tieBreaker(0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder10.cutoffFrequency((float) 0L);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder14.analyzer("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder16.field("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"slop\" : -1,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder18.queryName("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"slop\" : -1,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder18.field("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"analyzer\" : \"multi_match\",\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder18.rewrite("{\n  \"multiMatch\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzyRewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"slop\\\" : -1,\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"lenient\\\" : true,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"boost\" : 1.0,\n    \"Name\" : \"hi!\"\n  }\n}");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery25 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder24.zeroTermsQuery(zeroTermsQuery25);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
    }

    @Test
    public void test15493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15493");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder12.lenient(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder14.rewrite("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder16.boost((float) (-1L));
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder16.prefixLength((int) (short) 1);
        java.lang.String str21 = multiMatchQueryBuilder20.getWriteableName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder20.queryName("{\n  \"multiMatch\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"analyzer\" : \"multi_match\",\n    \"slop\" : -1,\n    \"fuzzyRewrite\" : \"hi!\",\n    \"useDisMax\" : true,\n    \"cutoffFrequency\" : 10.0,\n    \"boost\" : 1.0,\n    \"Name\" : \"hi!\"\n  }\n}");
        java.lang.String[] strArray31 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder32 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray31);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder34 = multiMatchQueryBuilder32.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder36 = multiMatchQueryBuilder34.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery37 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder38 = multiMatchQueryBuilder36.zeroTermsQuery(zeroTermsQuery37);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder40 = multiMatchQueryBuilder38.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder42 = multiMatchQueryBuilder40.queryName("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder44 = multiMatchQueryBuilder40.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder46 = multiMatchQueryBuilder40.fuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"slop\" : -1,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String str47 = null; // flaky: multiMatchQueryBuilder40.toString();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder49 = multiMatchQueryBuilder40.maxExpansions((int) (short) 0);
        java.lang.String[] strArray57 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder58 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray57);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder60 = multiMatchQueryBuilder58.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder62 = multiMatchQueryBuilder60.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery63 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder64 = multiMatchQueryBuilder62.zeroTermsQuery(zeroTermsQuery63);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder66 = multiMatchQueryBuilder64.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery67 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder68 = multiMatchQueryBuilder64.zeroTermsQuery(zeroTermsQuery67);
        java.lang.String str69 = multiMatchQueryBuilder64.getWriteableName();
        java.lang.String str70 = null; // flaky: multiMatchQueryBuilder64.toString();
        java.lang.String str71 = multiMatchQueryBuilder64.queryName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder73 = multiMatchQueryBuilder64.tieBreaker((float) 10);
        java.lang.String[] strArray78 = new java.lang.String[] { "{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"type\" : \"best_fields\",\n    \"analyzer\" : \"\",\n    \"minimum_should_match\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"fuzzy_rewrite\" : \"\",\n    \"tie_breaker\" : 0.0,\n    \"cutoff_frequency\" : 0.0,\n    \"boost\" : 35.0\n  }\n}", "{\n  \"multiMatch\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"analyzer\" : \"multi_match\",\n    \"fuzzyRewrite\" : \"hi!\",\n    \"boost\" : 1.0,\n    \"Name\" : \"hi!\"\n  }\n}", "{\n  \"multiMatch\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"^32.0\", \"^32.0\", \"^32.0\", \"^32.0\", \"^32.0\", \"^32.0\" ],\n    \"minimumShouldMatch\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"lenient\\\" : true,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"fuzzyRewrite\" : \"hi!\",\n    \"boost\" : 1.0,\n    \"Name\" : \"\"\n  }\n}", "{\n  \"multiMatch\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"analyzer\" : \"multi_match\",\n    \"fuzziness\" : \"{\\n  \\\"MULTIMATCH\\\" : {\\n    \\\"QUERY\\\" : 0.0,\\n    \\\"FIELDS\\\" : [ \\\"HI!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"ANALYZER\\\" : \\\"MULTI_MATCH\\\",\\n    \\\"MAXEXPANSIONS\\\" : 1,\\n    \\\"FUZZYREWRITE\\\" : \\\"HI!\\\",\\n    \\\"CUTOFFFREQUENCY\\\" : 0.0,\\n    \\\"BOOST\\\" : 0.0\\n  }\\n}\",\n    \"prefixLength\" : 0,\n    \"fuzzyRewrite\" : \"hi!\",\n    \"boost\" : 1.0,\n    \"Name\" : \"hi!\"\n  }\n}" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder79 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) multiMatchQueryBuilder64, strArray78);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder80 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (short) 0, strArray78);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder81 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) multiMatchQueryBuilder23, strArray78);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "multi_match" + "'", str21, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder34);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder36);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder38);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder40);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder42);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder44);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder46);
// flaky:         org.junit.Assert.assertEquals("'" + str47 + "' != '" + "{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"slop\\\" : -1,\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"lenient\\\" : true,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"boost\" : 1.0,\n    \"_name\" : \"hi!\"\n  }\n}" + "'", str47, "{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"slop\\\" : -1,\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"lenient\\\" : true,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"boost\" : 1.0,\n    \"_name\" : \"hi!\"\n  }\n}");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder49);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder60);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder62);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder64);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder66);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "multi_match" + "'", str69, "multi_match");
// flaky:         org.junit.Assert.assertEquals("'" + str70 + "' != '" + "{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}" + "'", str70, "{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNull(str71);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder73);
        org.junit.Assert.assertNotNull(strArray78);
    }

    @Test
    public void test15494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15494");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery13 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder12.zeroTermsQuery(zeroTermsQuery13);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder14.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery17 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder14.zeroTermsQuery(zeroTermsQuery17);
        java.lang.String[] strArray26 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray26);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = multiMatchQueryBuilder27.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = multiMatchQueryBuilder29.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery32 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder33 = multiMatchQueryBuilder31.zeroTermsQuery(zeroTermsQuery32);
        java.lang.String str34 = multiMatchQueryBuilder33.getName();
        boolean boolean35 = multiMatchQueryBuilder18.equals((java.lang.Object) multiMatchQueryBuilder33);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder37 = multiMatchQueryBuilder33.queryName("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder39 = multiMatchQueryBuilder33.analyzer("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder41 = multiMatchQueryBuilder39.rewrite("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"rewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"slop\\\" : -1,\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"lenient\\\" : true,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 52.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder43 = multiMatchQueryBuilder41.rewrite("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"analyzer\" : \"hi!\",\n    \"minimum_should_match\" : \"{\\n  \\\"multiMatch\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"type\\\" : \\\"phrase_prefix\\\",\\n    \\\"maxExpansions\\\" : 10,\\n    \\\"fuzzyRewrite\\\" : \\\"\\\",\\n    \\\"tieBreaker\\\" : 0.0,\\n    \\\"cutoffFrequency\\\" : 0.0,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"lenient\" : false,\n    \"cutoff_frequency\" : -1.0,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String[] strArray51 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder52 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray51);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder54 = multiMatchQueryBuilder52.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder56 = multiMatchQueryBuilder54.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery57 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder58 = multiMatchQueryBuilder56.zeroTermsQuery(zeroTermsQuery57);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder60 = multiMatchQueryBuilder56.maxExpansions((int) (byte) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder62 = multiMatchQueryBuilder56.field("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"slop\" : -1,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String[] strArray70 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder71 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray70);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder73 = multiMatchQueryBuilder71.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder75 = multiMatchQueryBuilder73.tieBreaker(0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type76 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX;
        float float77 = type76.tieBreaker();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder78 = multiMatchQueryBuilder73.type(type76);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder80 = multiMatchQueryBuilder73.cutoffFrequency((float) 0L);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder82 = multiMatchQueryBuilder73.lenient(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type83 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX;
        float float84 = type83.tieBreaker();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder85 = multiMatchQueryBuilder82.type(type83);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder86 = multiMatchQueryBuilder62.type(type83);
        org.elasticsearch.common.ParseField parseField87 = type83.parseField();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder88 = multiMatchQueryBuilder43.type(type83);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder90 = multiMatchQueryBuilder88.prefixLength((int) (byte) 1);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder29);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder31);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "multi_match" + "'", str34, "multi_match");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder37);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder39);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder41);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder43);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder54);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder56);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder58);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder60);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder62);
        org.junit.Assert.assertNotNull(strArray70);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder73);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder75);
        org.junit.Assert.assertTrue("'" + type76 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX + "'", type76.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX));
        org.junit.Assert.assertTrue("'" + float77 + "' != '" + 0.0f + "'", float77 == 0.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder78);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder80);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder82);
        org.junit.Assert.assertTrue("'" + type83 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX + "'", type83.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX));
        org.junit.Assert.assertTrue("'" + float84 + "' != '" + 0.0f + "'", float84 == 0.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder85);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder86);
        org.junit.Assert.assertNotNull(parseField87);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder88);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder90);
    }

    @Test
    public void test15495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15495");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.tieBreaker(0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type13 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX;
        float float14 = type13.tieBreaker();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder10.type(type13);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder10.cutoffFrequency((float) 0L);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder10.queryName("multi_match");
        java.lang.String str20 = multiMatchQueryBuilder10.queryName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder10.boost((float) 0L);
        org.elasticsearch.index.query.QueryValidationException queryValidationException23 = multiMatchQueryBuilder22.validate();
        java.lang.String[] strArray31 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder32 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray31);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder34 = multiMatchQueryBuilder32.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder36 = multiMatchQueryBuilder34.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder38 = multiMatchQueryBuilder36.lenient(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder40 = multiMatchQueryBuilder38.rewrite("multi_match");
        java.lang.String str41 = multiMatchQueryBuilder40.getWriteableName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder43 = multiMatchQueryBuilder40.analyzer("{\n  \"multiMatch\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzyRewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder45 = multiMatchQueryBuilder43.lenient(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder47 = multiMatchQueryBuilder45.lenient(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder49 = multiMatchQueryBuilder45.tieBreaker((float) (byte) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder51 = multiMatchQueryBuilder49.prefixLength((int) 'a');
        java.lang.String[] strArray59 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder60 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray59);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder62 = multiMatchQueryBuilder60.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder64 = multiMatchQueryBuilder62.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery65 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder66 = multiMatchQueryBuilder64.zeroTermsQuery(zeroTermsQuery65);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder68 = multiMatchQueryBuilder66.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder70 = multiMatchQueryBuilder68.queryName("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder72 = multiMatchQueryBuilder68.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder74 = multiMatchQueryBuilder72.lenient(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type75 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE;
        org.elasticsearch.index.search.MatchQuery.Type type76 = type75.matchQueryType();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder77 = multiMatchQueryBuilder72.type(type75);
        float float78 = type75.tieBreaker();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder79 = multiMatchQueryBuilder49.type(type75);
        org.elasticsearch.common.ParseField parseField80 = type75.parseField();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder81 = multiMatchQueryBuilder22.type(type75);
        org.elasticsearch.common.ParseField parseField82 = type75.parseField();
        float float83 = type75.tieBreaker();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertTrue("'" + type13 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX + "'", type13.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX));
        org.junit.Assert.assertTrue("'" + float14 + "' != '" + 0.0f + "'", float14 == 0.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "multi_match" + "'", str20, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNull(queryValidationException23);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder34);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder36);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder38);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "multi_match" + "'", str41, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder43);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder45);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder47);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder49);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder51);
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder62);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder64);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder66);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder68);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder70);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder72);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder74);
        org.junit.Assert.assertTrue("'" + type75 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE + "'", type75.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE));
        org.junit.Assert.assertTrue("'" + type76 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.PHRASE + "'", type76.equals(org.elasticsearch.index.search.MatchQuery.Type.PHRASE));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder77);
        org.junit.Assert.assertTrue("'" + float78 + "' != '" + 0.0f + "'", float78 == 0.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder79);
        org.junit.Assert.assertNotNull(parseField80);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder81);
        org.junit.Assert.assertNotNull(parseField82);
        org.junit.Assert.assertTrue("'" + float83 + "' != '" + 0.0f + "'", float83 == 0.0f);
    }

    @Test
    public void test15496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15496");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder12.lenient(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder14.rewrite("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery17 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder16.zeroTermsQuery(zeroTermsQuery17);
        java.lang.Object obj19 = null;
        boolean boolean20 = multiMatchQueryBuilder18.equals(obj19);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder18.lenient(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder22.analyzer("{\n  \"multiMatch\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"type\" : \"phrase_prefix\",\n    \"maxExpansions\" : 10,\n    \"fuzzyRewrite\" : \"\",\n    \"tieBreaker\" : 0.0,\n    \"cutoffFrequency\" : 0.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder22.lenient(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = multiMatchQueryBuilder26.lenient(true);
        java.lang.String[] strArray36 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder37 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray36);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder39 = multiMatchQueryBuilder37.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder41 = multiMatchQueryBuilder39.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery42 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder43 = multiMatchQueryBuilder41.zeroTermsQuery(zeroTermsQuery42);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder45 = multiMatchQueryBuilder43.fuzzyRewrite("hi!");
        java.lang.String str46 = null; // flaky: multiMatchQueryBuilder45.toString();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder48 = multiMatchQueryBuilder45.analyzer("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"rewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"slop\\\" : -1,\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"lenient\\\" : true,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 52.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder50 = multiMatchQueryBuilder45.rewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder52 = multiMatchQueryBuilder45.cutoffFrequency((float) 'a');
        java.lang.String[] strArray60 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder61 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray60);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder63 = multiMatchQueryBuilder61.fuzzyRewrite("");
        java.lang.String[] strArray71 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder72 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray71);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder74 = multiMatchQueryBuilder72.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder76 = multiMatchQueryBuilder74.tieBreaker(0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type77 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX;
        float float78 = type77.tieBreaker();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder79 = multiMatchQueryBuilder74.type(type77);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder81 = multiMatchQueryBuilder74.cutoffFrequency((float) 0L);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder83 = multiMatchQueryBuilder74.lenient(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type84 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        org.elasticsearch.index.search.MatchQuery.Type type85 = type84.matchQueryType();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder86 = multiMatchQueryBuilder74.type(type84);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder87 = multiMatchQueryBuilder61.fuzziness((java.lang.Object) type84);
        float float88 = type84.tieBreaker();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder89 = multiMatchQueryBuilder45.type(type84);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder90 = multiMatchQueryBuilder28.type(type84);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder92 = multiMatchQueryBuilder28.cutoffFrequency((-1.0f));
        java.lang.Class<?> wildcardClass93 = multiMatchQueryBuilder28.getClass();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder28);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder39);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder41);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder43);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder45);
// flaky:         org.junit.Assert.assertEquals("'" + str46 + "' != '" + "{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}" + "'", str46, "{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder48);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder50);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder52);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder63);
        org.junit.Assert.assertNotNull(strArray71);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder74);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder76);
        org.junit.Assert.assertTrue("'" + type77 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX + "'", type77.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX));
        org.junit.Assert.assertTrue("'" + float78 + "' != '" + 0.0f + "'", float78 == 0.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder79);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder81);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder83);
        org.junit.Assert.assertTrue("'" + type84 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type84.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertTrue("'" + type85 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type85.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder86);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder87);
        org.junit.Assert.assertTrue("'" + float88 + "' != '" + 0.0f + "'", float88 == 0.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder89);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder90);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder92);
        org.junit.Assert.assertNotNull(wildcardClass93);
    }

    @Test
    public void test15497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15497");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder8.queryName("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.Operator operator13 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder12.operator(operator13);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder14.lenient(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder16.maxExpansions((int) (short) 1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder16.minimumShouldMatch("{\n  \"multiMatch\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"rewrite\" : \"multi_match\",\n    \"fuzzyRewrite\" : \"hi!\",\n    \"lenient\" : false,\n    \"boost\" : 1.0\n  }\n}");
        float float21 = multiMatchQueryBuilder20.boost();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder20.queryName("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"analyzer\" : \"{\\n  \\\"multiMatch\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"rewrite\\\" : \\\"multi_match\\\",\\n    \\\"fuzzyRewrite\\\" : \\\"hi!\\\",\\n    \\\"lenient\\\" : false,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder23.useDisMax(true);
        java.lang.String[] strArray33 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder34 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray33);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder36 = multiMatchQueryBuilder34.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder38 = multiMatchQueryBuilder34.queryName("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder40 = multiMatchQueryBuilder38.tieBreaker((float) (short) 1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder42 = multiMatchQueryBuilder40.tieBreaker(0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder44 = multiMatchQueryBuilder42.prefixLength((int) (short) 1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder46 = multiMatchQueryBuilder42.lenient(false);
        java.lang.String[] strArray54 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder55 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray54);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder57 = multiMatchQueryBuilder55.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder59 = multiMatchQueryBuilder57.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder61 = multiMatchQueryBuilder57.field("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder63 = multiMatchQueryBuilder57.boost(0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder65 = multiMatchQueryBuilder63.analyzer("multi_match");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder67 = multiMatchQueryBuilder65.maxExpansions(1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type68 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS;
        org.elasticsearch.index.search.MatchQuery.Type type69 = type68.matchQueryType();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder70 = multiMatchQueryBuilder65.type(type68);
        org.elasticsearch.index.search.MatchQuery.Type type71 = type68.matchQueryType();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder72 = multiMatchQueryBuilder42.type(type68);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder73 = multiMatchQueryBuilder25.type(type68);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertTrue("'" + float21 + "' != '" + 1.0f + "'", float21 == 1.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder36);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder38);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder40);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder42);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder44);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder46);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder57);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder59);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder61);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder63);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder65);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder67);
        org.junit.Assert.assertTrue("'" + type68 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS + "'", type68.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS));
        org.junit.Assert.assertTrue("'" + type69 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type69.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder70);
        org.junit.Assert.assertTrue("'" + type71 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type71.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder72);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder73);
    }

    @Test
    public void test15498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15498");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder12.lenient(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder14.rewrite("multi_match");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery17 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder16.zeroTermsQuery(zeroTermsQuery17);
        org.elasticsearch.index.query.QueryValidationException queryValidationException19 = multiMatchQueryBuilder18.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder18.slop((int) (short) 10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder21.fuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : \"class org.elasticsearch.index.query.MultiMatchQueryBuilder$Type\",\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"rewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"lenient\\\" : true,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"use_dis_max\" : false,\n    \"boost\" : 1.0,\n    \"_name\" : \"{\\n  \\\"multiMatch\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"fuzzyRewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\"\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder23.analyzer("{\n  \"multiMatch\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"type\" : \"best_fields\",\n    \"analyzer\" : \"multi_match\",\n    \"fuzziness\" : \"{\\n  \\\"MULTI_MATCH\\\" : {\\n    \\\"QUERY\\\" : 0.0,\\n    \\\"FIELDS\\\" : [ \\\"HI!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"FUZZY_REWRITE\\\" : \\\"\\\",\\n    \\\"CUTOFF_FREQUENCY\\\" : 100.0,\\n    \\\"BOOST\\\" : 52.0\\n  }\\n}\",\n    \"prefixLength\" : 97,\n    \"fuzzyRewrite\" : \"hi!\",\n    \"cutoffFrequency\" : 1.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder23.useDisMax(true);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder28 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params29 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        // The following exception was thrown during execution in test generation
        try {
            multiMatchQueryBuilder23.doXContent(xContentBuilder28, params29);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNull(queryValidationException19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
        org.junit.Assert.assertNotNull(params29);
    }

    @Test
    public void test15499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15499");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.tieBreaker(0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type13 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX;
        float float14 = type13.tieBreaker();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder10.type(type13);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder10.cutoffFrequency((float) 0L);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder10.queryName("multi_match");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder19.field("", (float) 1);
        java.lang.String[] strArray30 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray30);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder33 = multiMatchQueryBuilder31.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder35 = multiMatchQueryBuilder33.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder37 = multiMatchQueryBuilder35.tieBreaker((float) '#');
        java.lang.String str38 = multiMatchQueryBuilder35.queryName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder40 = multiMatchQueryBuilder35.tieBreaker((float) 'a');
        boolean boolean41 = multiMatchQueryBuilder19.equals((java.lang.Object) 'a');
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder43 = multiMatchQueryBuilder19.queryName("{\n  \"multiMatch\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\", \"\" ],\n    \"analyzer\" : \"multi_match\",\n    \"maxExpansions\" : 1,\n    \"fuzzyRewrite\" : \"hi!\",\n    \"tieBreaker\" : 0.0,\n    \"boost\" : 0.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder45 = multiMatchQueryBuilder19.lenient(false);
        float float46 = multiMatchQueryBuilder19.boost();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder48 = multiMatchQueryBuilder19.rewrite("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"rewrite\" : \"multi_match\",\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"lenient\" : false,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder49 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params50 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder51 = multiMatchQueryBuilder48.toXContent(xContentBuilder49, params50);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertTrue("'" + type13 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX + "'", type13.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX));
        org.junit.Assert.assertTrue("'" + float14 + "' != '" + 0.0f + "'", float14 == 0.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder33);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder35);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder37);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder43);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder45);
        org.junit.Assert.assertTrue("'" + float46 + "' != '" + 1.0f + "'", float46 == 1.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder48);
        org.junit.Assert.assertNotNull(params50);
    }

    @Test
    public void test15500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15500");
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type0 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX;
        float float1 = type0.tieBreaker();
        java.lang.Class<?> wildcardClass2 = type0.getClass();
        java.lang.String[] strArray10 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray10);
        java.lang.Object obj12 = null;
        java.lang.String[] strArray21 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray21);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 10.0f, strArray21);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = new org.elasticsearch.index.query.MultiMatchQueryBuilder(obj12, strArray21);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray21);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) wildcardClass2, strArray21);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = multiMatchQueryBuilder26.queryName("{\n  \"multiMatch\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"fuzzyRewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String str29 = null; // flaky: multiMatchQueryBuilder28.toString();
        java.lang.String[] strArray37 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder38 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray37);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder40 = multiMatchQueryBuilder38.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder42 = multiMatchQueryBuilder40.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.QueryValidationException queryValidationException43 = multiMatchQueryBuilder40.validate();
        java.lang.String[] strArray51 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder52 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray51);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder54 = multiMatchQueryBuilder52.fuzzyRewrite("");
        java.lang.String[] strArray62 = new java.lang.String[] { "hi!", "", "", "", "", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder63 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray62);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder65 = multiMatchQueryBuilder63.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder67 = multiMatchQueryBuilder65.tieBreaker(0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type68 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX;
        float float69 = type68.tieBreaker();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder70 = multiMatchQueryBuilder65.type(type68);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder72 = multiMatchQueryBuilder65.cutoffFrequency((float) 0L);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder74 = multiMatchQueryBuilder65.lenient(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type75 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        org.elasticsearch.index.search.MatchQuery.Type type76 = type75.matchQueryType();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder77 = multiMatchQueryBuilder65.type(type75);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder78 = multiMatchQueryBuilder52.fuzziness((java.lang.Object) type75);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder79 = multiMatchQueryBuilder40.type(type75);
        org.elasticsearch.index.search.MatchQuery.Type type80 = type75.matchQueryType();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder81 = multiMatchQueryBuilder28.type(type75);
        org.elasticsearch.index.search.MatchQuery.Type type82 = type75.matchQueryType();
        float float83 = type75.tieBreaker();
        float float84 = type75.tieBreaker();
        org.junit.Assert.assertTrue("'" + type0 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX + "'", type0.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX));
        org.junit.Assert.assertTrue("'" + float1 + "' != '" + 0.0f + "'", float1 == 0.0f);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder28);
// flaky:         org.junit.Assert.assertEquals("'" + str29 + "' != '" + "{\n  \"multi_match\" : {\n    \"query\" : \"class org.elasticsearch.index.query.MultiMatchQueryBuilder$Type\",\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"boost\" : 1.0,\n    \"_name\" : \"{\\n  \\\"multiMatch\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"fuzzyRewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\"\n  }\n}" + "'", str29, "{\n  \"multi_match\" : {\n    \"query\" : \"class org.elasticsearch.index.query.MultiMatchQueryBuilder$Type\",\n    \"fields\" : [ \"hi!\", \"\", \"\", \"\", \"\", \"\" ],\n    \"boost\" : 1.0,\n    \"_name\" : \"{\\n  \\\"multiMatch\\\" : {\\n    \\\"query\\\" : 0.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"fuzzyRewrite\\\" : \\\"hi!\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\"\n  }\n}");
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder40);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder42);
        org.junit.Assert.assertNull(queryValidationException43);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder54);
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder65);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder67);
        org.junit.Assert.assertTrue("'" + type68 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX + "'", type68.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX));
        org.junit.Assert.assertTrue("'" + float69 + "' != '" + 0.0f + "'", float69 == 0.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder70);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder72);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder74);
        org.junit.Assert.assertTrue("'" + type75 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type75.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertTrue("'" + type76 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type76.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder77);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder78);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder79);
        org.junit.Assert.assertTrue("'" + type80 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type80.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder81);
        org.junit.Assert.assertTrue("'" + type82 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type82.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertTrue("'" + float83 + "' != '" + 0.0f + "'", float83 == 0.0f);
        org.junit.Assert.assertTrue("'" + float84 + "' != '" + 0.0f + "'", float84 == 0.0f);
    }
}
