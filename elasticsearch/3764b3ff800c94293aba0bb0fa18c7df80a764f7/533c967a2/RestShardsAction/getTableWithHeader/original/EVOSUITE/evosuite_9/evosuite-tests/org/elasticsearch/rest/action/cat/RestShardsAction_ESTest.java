/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 08 18:12:49 GMT 2021
 */

package org.elasticsearch.rest.action.cat;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.channels.SocketChannel;
import java.util.Map;
import java.util.concurrent.ForkJoinPool;
import java.util.concurrent.ForkJoinTask;
import org.apache.log4j.helpers.LogLog;
import org.elasticsearch.action.GenericAction;
import org.elasticsearch.action.support.TransportAction;
import org.elasticsearch.cache.recycler.PageCacheRecycler;
import org.elasticsearch.client.Client;
import org.elasticsearch.client.node.NodeClient;
import org.elasticsearch.cluster.ClusterState;
import org.elasticsearch.cluster.metadata.IndexMetaData;
import org.elasticsearch.cluster.metadata.MetaData;
import org.elasticsearch.cluster.routing.RoutingNodes;
import org.elasticsearch.common.Table;
import org.elasticsearch.common.component.Lifecycle;
import org.elasticsearch.common.io.stream.StreamInput;
import org.elasticsearch.common.network.NetworkService;
import org.elasticsearch.common.settings.Settings;
import org.elasticsearch.common.util.BigArrays;
import org.elasticsearch.http.netty.NettyHttpChannel;
import org.elasticsearch.http.netty.NettyHttpRequest;
import org.elasticsearch.http.netty.NettyHttpServerTransport;
import org.elasticsearch.http.netty.pipelining.OrderedUpstreamMessageEvent;
import org.elasticsearch.index.fielddata.IndexFieldDataService;
import org.elasticsearch.index.mapper.MapperService;
import org.elasticsearch.indices.breaker.CircuitBreakerService;
import org.elasticsearch.indices.breaker.NoneCircuitBreakerService;
import org.elasticsearch.rest.RestChannel;
import org.elasticsearch.rest.RestController;
import org.elasticsearch.rest.RestRequest;
import org.elasticsearch.rest.action.cat.RestShardsAction;
import org.elasticsearch.search.lookup.SearchLookup;
import org.elasticsearch.search.lookup.SourceLookup;
import org.elasticsearch.threadpool.ThreadPool;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.jboss.netty.channel.Channel;
import org.jboss.netty.channel.ChannelSink;
import org.jboss.netty.channel.DefaultChannelPipeline;
import org.jboss.netty.channel.local.DefaultLocalClientChannelFactory;
import org.jboss.netty.channel.local.DefaultLocalServerChannelFactory;
import org.jboss.netty.channel.local.LocalServerChannel;
import org.jboss.netty.channel.socket.nio.NioSocketChannel;
import org.jboss.netty.channel.socket.nio.NioWorker;
import org.jboss.netty.handler.codec.http.DefaultHttpRequest;
import org.jboss.netty.handler.codec.http.HttpMethod;
import org.jboss.netty.handler.codec.http.HttpRequest;
import org.jboss.netty.handler.codec.http.HttpVersion;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class RestShardsAction_ESTest extends RestShardsAction_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test00()  throws Throwable  {
      Settings settings0 = Settings.Builder.EMPTY_SETTINGS;
      assertNotNull(settings0);
      
      RestController restController0 = new RestController(settings0);
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertNotNull(restController0);
      
      Client client0 = null;
      RestShardsAction restShardsAction0 = new RestShardsAction(settings0, restController0, client0);
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertNotNull(restShardsAction0);
      
      StringBuilder stringBuilder0 = new StringBuilder();
      assertEquals("", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      restShardsAction0.documentation(stringBuilder0);
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertEquals("/_cat/shards\n/_cat/shards/{index}\n", stringBuilder0.toString());
  }

  @Test(timeout = 11000)
  public void test01()  throws Throwable  {
      Settings settings0 = Settings.EMPTY;
      assertNotNull(settings0);
      
      RestController restController0 = new RestController(settings0);
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertNotNull(restController0);
      
      HttpVersion httpVersion0 = HttpVersion.HTTP_1_0;
      assertEquals(1, httpVersion0.getMajorVersion());
      assertEquals("HTTP/1.0", httpVersion0.toString());
      assertEquals(0, httpVersion0.getMinorVersion());
      assertEquals("HTTP", httpVersion0.getProtocolName());
      assertFalse(httpVersion0.isKeepAliveDefault());
      assertEquals("HTTP/1.0", httpVersion0.getText());
      assertNotNull(httpVersion0);
      
      RestChannel restChannel0 = null;
      MetaData metaData0 = MetaData.PROTO;
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals("_na_", metaData0.clusterUUID());
      assertNotNull(metaData0);
      
      ThreadPool threadPool0 = new ThreadPool(settings0);
      assertNotNull(threadPool0);
      
      MapperService mapperService0 = null;
      IndexFieldDataService indexFieldDataService0 = null;
      String[] stringArray0 = new String[0];
      SearchLookup searchLookup0 = new SearchLookup(mapperService0, indexFieldDataService0, stringArray0);
      assertNotNull(searchLookup0);
      assertEquals(0, stringArray0.length);
      
      SourceLookup sourceLookup0 = searchLookup0.source();
      assertNull(sourceLookup0.sourceContentType());
      assertNotNull(sourceLookup0);
      assertEquals(0, stringArray0.length);
      
      NodeClient nodeClient0 = new NodeClient(settings0, threadPool0, sourceLookup0);
      assertNull(sourceLookup0.sourceContentType());
      assertNotNull(nodeClient0);
      assertEquals(0, stringArray0.length);
      
      RestShardsAction restShardsAction0 = new RestShardsAction(settings0, restController0, nodeClient0);
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertNull(sourceLookup0.sourceContentType());
      assertNotNull(restShardsAction0);
      assertEquals(0, stringArray0.length);
      
      HttpMethod httpMethod0 = HttpMethod.PATCH;
      assertEquals("PATCH", httpMethod0.getName());
      assertEquals("PATCH", httpMethod0.toString());
      assertNotNull(httpMethod0);
      
      DefaultHttpRequest defaultHttpRequest0 = new DefaultHttpRequest(httpVersion0, httpMethod0, metaData0.ALL);
      assertEquals(1, httpVersion0.getMajorVersion());
      assertEquals("HTTP/1.0", httpVersion0.toString());
      assertEquals(0, httpVersion0.getMinorVersion());
      assertEquals("HTTP", httpVersion0.getProtocolName());
      assertFalse(httpVersion0.isKeepAliveDefault());
      assertEquals("HTTP/1.0", httpVersion0.getText());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals("PATCH", httpMethod0.getName());
      assertEquals("PATCH", httpMethod0.toString());
      assertEquals("_all", defaultHttpRequest0.getUri());
      assertNotNull(defaultHttpRequest0);
      
      DefaultChannelPipeline defaultChannelPipeline0 = new DefaultChannelPipeline();
      assertFalse(defaultChannelPipeline0.isAttached());
      assertNotNull(defaultChannelPipeline0);
      
      Channel channel0 = defaultChannelPipeline0.getChannel();
      assertFalse(defaultChannelPipeline0.isAttached());
      assertNull(channel0);
      
      HttpMethod httpMethod1 = HttpMethod.valueOf(metaData0.CONTEXT_MODE_SNAPSHOT);
      assertEquals("SNAPSHOT", httpMethod1.getName());
      assertEquals("SNAPSHOT", httpMethod1.toString());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals("_na_", metaData0.clusterUUID());
      assertNotNull(httpMethod1);
      assertFalse(httpMethod1.equals((Object)httpMethod0));
      assertNotSame(httpMethod1, httpMethod0);
      
      NettyHttpRequest nettyHttpRequest0 = new NettyHttpRequest(defaultHttpRequest0, channel0);
      assertEquals("_all", nettyHttpRequest0.uri());
      assertEquals("_all", nettyHttpRequest0.rawPath());
      assertFalse(nettyHttpRequest0.hasContent());
      assertEquals(RestRequest.Method.GET, nettyHttpRequest0.method());
      assertEquals(1, httpVersion0.getMajorVersion());
      assertEquals("HTTP/1.0", httpVersion0.toString());
      assertEquals(0, httpVersion0.getMinorVersion());
      assertEquals("HTTP", httpVersion0.getProtocolName());
      assertFalse(httpVersion0.isKeepAliveDefault());
      assertEquals("HTTP/1.0", httpVersion0.getText());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals("PATCH", httpMethod0.getName());
      assertEquals("PATCH", httpMethod0.toString());
      assertEquals("_all", defaultHttpRequest0.getUri());
      assertFalse(defaultChannelPipeline0.isAttached());
      assertNotNull(nettyHttpRequest0);
      assertFalse(httpMethod0.equals((Object)httpMethod1));
      
      Table table0 = restShardsAction0.getTableWithHeader(nettyHttpRequest0);
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertEquals(1, httpVersion0.getMajorVersion());
      assertEquals("HTTP/1.0", httpVersion0.toString());
      assertEquals(0, httpVersion0.getMinorVersion());
      assertEquals("HTTP", httpVersion0.getProtocolName());
      assertFalse(httpVersion0.isKeepAliveDefault());
      assertEquals("HTTP/1.0", httpVersion0.getText());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals("_na_", metaData0.clusterUUID());
      assertNull(sourceLookup0.sourceContentType());
      assertEquals("PATCH", httpMethod0.getName());
      assertEquals("PATCH", httpMethod0.toString());
      assertEquals("_all", defaultHttpRequest0.getUri());
      assertFalse(defaultChannelPipeline0.isAttached());
      assertEquals("_all", nettyHttpRequest0.uri());
      assertEquals("_all", nettyHttpRequest0.rawPath());
      assertFalse(nettyHttpRequest0.hasContent());
      assertEquals(RestRequest.Method.GET, nettyHttpRequest0.method());
      assertNotNull(table0);
      assertFalse(httpMethod0.equals((Object)httpMethod1));
      assertNotSame(httpMethod0, httpMethod1);
      assertEquals(0, stringArray0.length);
      
      // Undeclared exception!
      try { 
        restShardsAction0.doRequest(nettyHttpRequest0, restChannel0, nodeClient0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // failed to parse / load source
         //
         verifyException("org.elasticsearch.search.lookup.SourceLookup", e);
      }
  }

  @Test(timeout = 11000)
  public void test02()  throws Throwable  {
      Settings settings0 = Settings.EMPTY;
      assertNotNull(settings0);
      
      RestController restController0 = new RestController(settings0);
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertNotNull(restController0);
      
      Client client0 = null;
      RestShardsAction restShardsAction0 = new RestShardsAction(settings0, restController0, client0);
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertNotNull(restShardsAction0);
      
      String string0 = "q'frhHoP2_%li\"";
      StringBuilder stringBuilder0 = new StringBuilder(string0);
      assertEquals("q'frhHoP2_%li\"", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      restShardsAction0.documentation(stringBuilder0);
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertEquals("q'frhHoP2_%li\"/_cat/shards\n/_cat/shards/{index}\n", stringBuilder0.toString());
      
      NetworkService networkService0 = new NetworkService(settings0);
      assertNotNull(networkService0);
      
      BigArrays bigArrays0 = null;
      ThreadPool threadPool0 = new ThreadPool(networkService0.DEFAULT_NETWORK_HOST);
      assertNotNull(threadPool0);
      
      NettyHttpServerTransport nettyHttpServerTransport0 = new NettyHttpServerTransport(settings0, networkService0, bigArrays0, threadPool0);
      assertEquals(Lifecycle.State.INITIALIZED, nettyHttpServerTransport0.lifecycleState());
      assertNotNull(nettyHttpServerTransport0);
      
      ThreadPool.THREAD_POOL_TYPES = threadPool0.THREAD_POOL_TYPES;
      assertEquals(16, ThreadPool.THREAD_POOL_TYPES.size());
      assertFalse(ThreadPool.THREAD_POOL_TYPES.isEmpty());
      
      HttpRequest httpRequest0 = null;
      Channel channel0 = null;
      NettyHttpRequest nettyHttpRequest0 = null;
      try {
        nettyHttpRequest0 = new NettyHttpRequest(httpRequest0, channel0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.http.netty.NettyHttpRequest", e);
      }
  }

  @Test(timeout = 11000)
  public void test03()  throws Throwable  {
      Settings settings0 = null;
      RestController restController0 = null;
      Client client0 = null;
      RestShardsAction restShardsAction0 = null;
      try {
        restShardsAction0 = new RestShardsAction(settings0, restController0, client0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.common.logging.Loggers", e);
      }
  }

  @Test(timeout = 11000)
  public void test04()  throws Throwable  {
      StreamInput streamInput0 = null;
      Settings settings0 = Settings.EMPTY;
      assertNotNull(settings0);
      
      RestController restController0 = new RestController(settings0);
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertNotNull(restController0);
      
      Client client0 = null;
      RestShardsAction restShardsAction0 = new RestShardsAction(settings0, restController0, client0);
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertNotNull(restShardsAction0);
      
      StringBuilder stringBuilder0 = null;
      // Undeclared exception!
      try { 
        restShardsAction0.documentation(stringBuilder0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.rest.action.cat.RestShardsAction", e);
      }
  }

  @Test(timeout = 11000)
  public void test05()  throws Throwable  {
      MetaData metaData0 = MetaData.EMPTY_META_DATA;
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertNotNull(metaData0);
      
      Settings settings0 = metaData0.transientSettings();
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertNotNull(settings0);
      
      RestController restController0 = new RestController(settings0);
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertNotNull(restController0);
      
      Client client0 = null;
      RestShardsAction restShardsAction0 = new RestShardsAction(settings0, restController0, client0);
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertNotNull(restShardsAction0);
      
      HttpVersion httpVersion0 = HttpVersion.HTTP_1_0;
      assertFalse(httpVersion0.isKeepAliveDefault());
      assertEquals("HTTP/1.0", httpVersion0.getText());
      assertEquals(0, httpVersion0.getMinorVersion());
      assertEquals("HTTP/1.0", httpVersion0.toString());
      assertEquals("HTTP", httpVersion0.getProtocolName());
      assertEquals(1, httpVersion0.getMajorVersion());
      assertNotNull(httpVersion0);
      
      HttpMethod httpMethod0 = HttpMethod.OPTIONS;
      assertEquals("OPTIONS", httpMethod0.getName());
      assertEquals("OPTIONS", httpMethod0.toString());
      assertNotNull(httpMethod0);
      
      String string0 = "";
      DefaultHttpRequest defaultHttpRequest0 = new DefaultHttpRequest(httpVersion0, httpMethod0, string0);
      assertFalse(httpVersion0.isKeepAliveDefault());
      assertEquals("HTTP/1.0", httpVersion0.getText());
      assertEquals(0, httpVersion0.getMinorVersion());
      assertEquals("HTTP/1.0", httpVersion0.toString());
      assertEquals("HTTP", httpVersion0.getProtocolName());
      assertEquals(1, httpVersion0.getMajorVersion());
      assertEquals("OPTIONS", httpMethod0.getName());
      assertEquals("OPTIONS", httpMethod0.toString());
      assertEquals("", defaultHttpRequest0.getUri());
      assertNotNull(defaultHttpRequest0);
      
      DefaultLocalServerChannelFactory defaultLocalServerChannelFactory0 = new DefaultLocalServerChannelFactory();
      assertNotNull(defaultLocalServerChannelFactory0);
      
      DefaultChannelPipeline defaultChannelPipeline0 = new DefaultChannelPipeline();
      assertFalse(defaultChannelPipeline0.isAttached());
      assertNotNull(defaultChannelPipeline0);
      
      LocalServerChannel localServerChannel0 = defaultLocalServerChannelFactory0.newChannel(defaultChannelPipeline0);
      assertTrue(defaultChannelPipeline0.isAttached());
      assertEquals(0, (int)localServerChannel0.getId());
      assertTrue(localServerChannel0.isReadable());
      assertNotNull(localServerChannel0);
      
      NettyHttpRequest nettyHttpRequest0 = new NettyHttpRequest(defaultHttpRequest0, localServerChannel0);
      assertFalse(httpVersion0.isKeepAliveDefault());
      assertEquals("HTTP/1.0", httpVersion0.getText());
      assertEquals(0, httpVersion0.getMinorVersion());
      assertEquals("HTTP/1.0", httpVersion0.toString());
      assertEquals("HTTP", httpVersion0.getProtocolName());
      assertEquals(1, httpVersion0.getMajorVersion());
      assertEquals("OPTIONS", httpMethod0.getName());
      assertEquals("OPTIONS", httpMethod0.toString());
      assertEquals("", defaultHttpRequest0.getUri());
      assertTrue(defaultChannelPipeline0.isAttached());
      assertEquals(0, (int)localServerChannel0.getId());
      assertTrue(localServerChannel0.isReadable());
      assertEquals("", nettyHttpRequest0.rawPath());
      assertEquals("", nettyHttpRequest0.uri());
      assertEquals(RestRequest.Method.OPTIONS, nettyHttpRequest0.method());
      assertFalse(nettyHttpRequest0.hasContent());
      assertNotNull(nettyHttpRequest0);
      
      RestChannel restChannel0 = null;
      // Undeclared exception!
      try { 
        restShardsAction0.doRequest(nettyHttpRequest0, restChannel0, client0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.rest.action.cat.RestShardsAction", e);
      }
  }

  @Test(timeout = 11000)
  public void test06()  throws Throwable  {
      Settings settings0 = Settings.EMPTY;
      assertNotNull(settings0);
      
      RestController restController0 = new RestController(settings0);
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertNotNull(restController0);
      
      Client client0 = null;
      RestShardsAction restShardsAction0 = new RestShardsAction(settings0, restController0, client0);
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertNotNull(restShardsAction0);
      
      String string0 = "ADW`ipqwPh:Mq'y";
      int int0 = 0;
      boolean boolean0 = false;
      HttpVersion httpVersion0 = new HttpVersion(string0, int0, int0, boolean0);
      assertEquals(0, httpVersion0.getMajorVersion());
      assertFalse(httpVersion0.isKeepAliveDefault());
      assertEquals("ADW`IPQWPH:MQ'Y/0.0", httpVersion0.getText());
      assertEquals("ADW`IPQWPH:MQ'Y/0.0", httpVersion0.toString());
      assertEquals("ADW`IPQWPH:MQ'Y", httpVersion0.getProtocolName());
      assertEquals(0, httpVersion0.getMinorVersion());
      assertNotNull(httpVersion0);
      
      HttpMethod httpMethod0 = HttpMethod.OPTIONS;
      assertEquals("OPTIONS", httpMethod0.toString());
      assertEquals("OPTIONS", httpMethod0.getName());
      assertNotNull(httpMethod0);
      
      DefaultHttpRequest defaultHttpRequest0 = new DefaultHttpRequest(httpVersion0, httpMethod0, string0);
      assertEquals(0, httpVersion0.getMajorVersion());
      assertFalse(httpVersion0.isKeepAliveDefault());
      assertEquals("ADW`IPQWPH:MQ'Y/0.0", httpVersion0.getText());
      assertEquals("ADW`IPQWPH:MQ'Y/0.0", httpVersion0.toString());
      assertEquals("ADW`IPQWPH:MQ'Y", httpVersion0.getProtocolName());
      assertEquals(0, httpVersion0.getMinorVersion());
      assertEquals("OPTIONS", httpMethod0.toString());
      assertEquals("OPTIONS", httpMethod0.getName());
      assertEquals("ADW`ipqwPh:Mq'y", defaultHttpRequest0.getUri());
      assertNotNull(defaultHttpRequest0);
      
      DefaultChannelPipeline defaultChannelPipeline0 = new DefaultChannelPipeline();
      assertFalse(defaultChannelPipeline0.isAttached());
      assertNotNull(defaultChannelPipeline0);
      
      Channel channel0 = defaultChannelPipeline0.getChannel();
      assertFalse(defaultChannelPipeline0.isAttached());
      assertNull(channel0);
      
      NettyHttpRequest nettyHttpRequest0 = new NettyHttpRequest(defaultHttpRequest0, channel0);
      assertEquals(0, httpVersion0.getMajorVersion());
      assertFalse(httpVersion0.isKeepAliveDefault());
      assertEquals("ADW`IPQWPH:MQ'Y/0.0", httpVersion0.getText());
      assertEquals("ADW`IPQWPH:MQ'Y/0.0", httpVersion0.toString());
      assertEquals("ADW`IPQWPH:MQ'Y", httpVersion0.getProtocolName());
      assertEquals(0, httpVersion0.getMinorVersion());
      assertEquals("OPTIONS", httpMethod0.toString());
      assertEquals("OPTIONS", httpMethod0.getName());
      assertEquals("ADW`ipqwPh:Mq'y", defaultHttpRequest0.getUri());
      assertFalse(defaultChannelPipeline0.isAttached());
      assertEquals("ADW`ipqwPh:Mq'y", nettyHttpRequest0.rawPath());
      assertEquals(RestRequest.Method.OPTIONS, nettyHttpRequest0.method());
      assertFalse(nettyHttpRequest0.hasContent());
      assertEquals("ADW`ipqwPh:Mq'y", nettyHttpRequest0.uri());
      assertNotNull(nettyHttpRequest0);
      
      NetworkService networkService0 = new NetworkService(settings0);
      assertNotNull(networkService0);
      
      BigArrays bigArrays0 = BigArrays.NON_RECYCLING_INSTANCE;
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertNotNull(bigArrays0);
      
      ThreadPool threadPool0 = new ThreadPool(settings0);
      assertNotNull(threadPool0);
      
      NettyHttpServerTransport nettyHttpServerTransport0 = new NettyHttpServerTransport(settings0, networkService0, bigArrays0, threadPool0);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(Lifecycle.State.INITIALIZED, nettyHttpServerTransport0.lifecycleState());
      assertNotNull(nettyHttpServerTransport0);
      
      NettyHttpChannel nettyHttpChannel0 = new NettyHttpChannel(nettyHttpServerTransport0, nettyHttpRequest0, boolean0);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(Lifecycle.State.INITIALIZED, nettyHttpServerTransport0.lifecycleState());
      assertFalse(nettyHttpChannel0.detailedErrorsEnabled());
      assertEquals(0, httpVersion0.getMajorVersion());
      assertFalse(httpVersion0.isKeepAliveDefault());
      assertEquals("ADW`IPQWPH:MQ'Y/0.0", httpVersion0.getText());
      assertEquals("ADW`IPQWPH:MQ'Y/0.0", httpVersion0.toString());
      assertEquals("ADW`IPQWPH:MQ'Y", httpVersion0.getProtocolName());
      assertEquals(0, httpVersion0.getMinorVersion());
      assertEquals("OPTIONS", httpMethod0.toString());
      assertEquals("OPTIONS", httpMethod0.getName());
      assertEquals("ADW`ipqwPh:Mq'y", defaultHttpRequest0.getUri());
      assertFalse(defaultChannelPipeline0.isAttached());
      assertEquals("ADW`ipqwPh:Mq'y", nettyHttpRequest0.rawPath());
      assertEquals(RestRequest.Method.OPTIONS, nettyHttpRequest0.method());
      assertFalse(nettyHttpRequest0.hasContent());
      assertEquals("ADW`ipqwPh:Mq'y", nettyHttpRequest0.uri());
      assertNotNull(nettyHttpChannel0);
      
      // Undeclared exception!
      try { 
        restShardsAction0.doRequest(nettyHttpRequest0, nettyHttpChannel0, client0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.rest.action.cat.RestShardsAction", e);
      }
  }

  @Test(timeout = 11000)
  public void test07()  throws Throwable  {
      ClusterState clusterState0 = ClusterState.PROTO;
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState0.status());
      assertEquals("AAAAAAEAQACCAAAAAwAAAA", clusterState0.stateUUID());
      assertEquals(0L, clusterState0.version());
      assertFalse(clusterState0.wasReadFromDiff());
      assertEquals(0L, clusterState0.getVersion());
      assertNotNull(clusterState0);
      
      RoutingNodes routingNodes0 = new RoutingNodes(clusterState0);
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState0.status());
      assertEquals("AAAAAAEAQACCAAAAAwAAAA", clusterState0.stateUUID());
      assertEquals(0L, clusterState0.version());
      assertFalse(clusterState0.wasReadFromDiff());
      assertEquals(0L, clusterState0.getVersion());
      assertFalse(routingNodes0.hasUnassignedPrimaries());
      assertFalse(routingNodes0.hasUnassignedShards());
      assertEquals(0, routingNodes0.getRelocatingShardCount());
      assertFalse(routingNodes0.hasInactivePrimaries());
      assertEquals(0, routingNodes0.size());
      assertFalse(routingNodes0.hasInactiveShards());
      assertNotNull(routingNodes0);
      
      MetaData metaData0 = routingNodes0.getMetaData();
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState0.status());
      assertEquals("AAAAAAEAQACCAAAAAwAAAA", clusterState0.stateUUID());
      assertEquals(0L, clusterState0.version());
      assertFalse(clusterState0.wasReadFromDiff());
      assertEquals(0L, clusterState0.getVersion());
      assertFalse(routingNodes0.hasUnassignedPrimaries());
      assertFalse(routingNodes0.hasUnassignedShards());
      assertEquals(0, routingNodes0.getRelocatingShardCount());
      assertFalse(routingNodes0.hasInactivePrimaries());
      assertEquals(0, routingNodes0.size());
      assertFalse(routingNodes0.hasInactiveShards());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertNotNull(metaData0);
      
      Settings settings0 = metaData0.transientSettings();
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState0.status());
      assertEquals("AAAAAAEAQACCAAAAAwAAAA", clusterState0.stateUUID());
      assertEquals(0L, clusterState0.version());
      assertFalse(clusterState0.wasReadFromDiff());
      assertEquals(0L, clusterState0.getVersion());
      assertFalse(routingNodes0.hasUnassignedPrimaries());
      assertFalse(routingNodes0.hasUnassignedShards());
      assertEquals(0, routingNodes0.getRelocatingShardCount());
      assertFalse(routingNodes0.hasInactivePrimaries());
      assertEquals(0, routingNodes0.size());
      assertFalse(routingNodes0.hasInactiveShards());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertNotNull(settings0);
      
      RestController restController0 = new RestController(settings0);
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState0.status());
      assertEquals("AAAAAAEAQACCAAAAAwAAAA", clusterState0.stateUUID());
      assertEquals(0L, clusterState0.version());
      assertFalse(clusterState0.wasReadFromDiff());
      assertEquals(0L, clusterState0.getVersion());
      assertFalse(routingNodes0.hasUnassignedPrimaries());
      assertFalse(routingNodes0.hasUnassignedShards());
      assertEquals(0, routingNodes0.getRelocatingShardCount());
      assertFalse(routingNodes0.hasInactivePrimaries());
      assertEquals(0, routingNodes0.size());
      assertFalse(routingNodes0.hasInactiveShards());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertNotNull(restController0);
      
      Client client0 = null;
      RestShardsAction restShardsAction0 = new RestShardsAction(settings0, restController0, client0);
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState0.status());
      assertEquals("AAAAAAEAQACCAAAAAwAAAA", clusterState0.stateUUID());
      assertEquals(0L, clusterState0.version());
      assertFalse(clusterState0.wasReadFromDiff());
      assertEquals(0L, clusterState0.getVersion());
      assertFalse(routingNodes0.hasUnassignedPrimaries());
      assertFalse(routingNodes0.hasUnassignedShards());
      assertEquals(0, routingNodes0.getRelocatingShardCount());
      assertFalse(routingNodes0.hasInactivePrimaries());
      assertEquals(0, routingNodes0.size());
      assertFalse(routingNodes0.hasInactiveShards());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertNotNull(restShardsAction0);
      
      boolean boolean0 = true;
      LogLog.setInternalDebugging(boolean0);
      RestRequest restRequest0 = null;
      Table table0 = restShardsAction0.getTableWithHeader(restRequest0);
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState0.status());
      assertEquals("AAAAAAEAQACCAAAAAwAAAA", clusterState0.stateUUID());
      assertEquals(0L, clusterState0.version());
      assertFalse(clusterState0.wasReadFromDiff());
      assertEquals(0L, clusterState0.getVersion());
      assertFalse(routingNodes0.hasUnassignedPrimaries());
      assertFalse(routingNodes0.hasUnassignedShards());
      assertEquals(0, routingNodes0.getRelocatingShardCount());
      assertFalse(routingNodes0.hasInactivePrimaries());
      assertEquals(0, routingNodes0.size());
      assertFalse(routingNodes0.hasInactiveShards());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertNotNull(table0);
      
      NettyHttpServerTransport nettyHttpServerTransport0 = null;
      HttpVersion httpVersion0 = HttpVersion.HTTP_1_0;
      assertEquals(1, httpVersion0.getMajorVersion());
      assertEquals("HTTP", httpVersion0.getProtocolName());
      assertEquals("HTTP/1.0", httpVersion0.toString());
      assertEquals(0, httpVersion0.getMinorVersion());
      assertEquals("HTTP/1.0", httpVersion0.getText());
      assertFalse(httpVersion0.isKeepAliveDefault());
      assertNotNull(httpVersion0);
      
      HttpMethod httpMethod0 = HttpMethod.PATCH;
      assertEquals("PATCH", httpMethod0.getName());
      assertEquals("PATCH", httpMethod0.toString());
      assertNotNull(httpMethod0);
      
      DefaultHttpRequest defaultHttpRequest0 = new DefaultHttpRequest(httpVersion0, httpMethod0, metaData0.GLOBAL_STATE_FILE_PREFIX);
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState0.status());
      assertEquals("AAAAAAEAQACCAAAAAwAAAA", clusterState0.stateUUID());
      assertEquals(0L, clusterState0.version());
      assertFalse(clusterState0.wasReadFromDiff());
      assertEquals(0L, clusterState0.getVersion());
      assertFalse(routingNodes0.hasUnassignedPrimaries());
      assertFalse(routingNodes0.hasUnassignedShards());
      assertEquals(0, routingNodes0.getRelocatingShardCount());
      assertFalse(routingNodes0.hasInactivePrimaries());
      assertEquals(0, routingNodes0.size());
      assertFalse(routingNodes0.hasInactiveShards());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(1, httpVersion0.getMajorVersion());
      assertEquals("HTTP", httpVersion0.getProtocolName());
      assertEquals("HTTP/1.0", httpVersion0.toString());
      assertEquals(0, httpVersion0.getMinorVersion());
      assertEquals("HTTP/1.0", httpVersion0.getText());
      assertFalse(httpVersion0.isKeepAliveDefault());
      assertEquals("PATCH", httpMethod0.getName());
      assertEquals("PATCH", httpMethod0.toString());
      assertEquals("global-", defaultHttpRequest0.getUri());
      assertNotNull(defaultHttpRequest0);
      
      DefaultChannelPipeline defaultChannelPipeline0 = new DefaultChannelPipeline();
      assertFalse(defaultChannelPipeline0.isAttached());
      assertNotNull(defaultChannelPipeline0);
      
      Channel channel0 = defaultChannelPipeline0.getChannel();
      assertFalse(defaultChannelPipeline0.isAttached());
      assertNull(channel0);
      
      DefaultLocalClientChannelFactory defaultLocalClientChannelFactory0 = new DefaultLocalClientChannelFactory();
      assertNotNull(defaultLocalClientChannelFactory0);
      
      ChannelSink channelSink0 = defaultChannelPipeline0.getSink();
      assertFalse(defaultChannelPipeline0.isAttached());
      assertNotNull(channelSink0);
      
      SocketChannel socketChannel0 = SocketChannel.open();
      assertFalse(socketChannel0.isRegistered());
      assertTrue(socketChannel0.isBlocking());
      assertFalse(socketChannel0.isConnectionPending());
      assertTrue(socketChannel0.isOpen());
      assertEquals(13, socketChannel0.validOps());
      assertFalse(socketChannel0.isConnected());
      assertNotNull(socketChannel0);
      
      NioWorker nioWorker0 = null;
      NioSocketChannel nioSocketChannel0 = new NioSocketChannel(channel0, defaultLocalClientChannelFactory0, defaultChannelPipeline0, channelSink0, socketChannel0, nioWorker0);
      assertFalse(socketChannel0.isRegistered());
      assertTrue(socketChannel0.isBlocking());
      assertFalse(socketChannel0.isConnectionPending());
      assertTrue(socketChannel0.isOpen());
      assertEquals(13, socketChannel0.validOps());
      assertFalse(socketChannel0.isConnected());
      assertEquals(4, (int)nioSocketChannel0.getId());
      assertTrue(nioSocketChannel0.isReadable());
      assertFalse(nioSocketChannel0.isConnected());
      assertTrue(nioSocketChannel0.isOpen());
      assertFalse(nioSocketChannel0.isBound());
      assertTrue(defaultChannelPipeline0.isAttached());
      assertNotNull(nioSocketChannel0);
      
      NettyHttpRequest nettyHttpRequest0 = new NettyHttpRequest(defaultHttpRequest0, nioSocketChannel0);
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState0.status());
      assertEquals("AAAAAAEAQACCAAAAAwAAAA", clusterState0.stateUUID());
      assertEquals(0L, clusterState0.version());
      assertFalse(clusterState0.wasReadFromDiff());
      assertEquals(0L, clusterState0.getVersion());
      assertFalse(routingNodes0.hasUnassignedPrimaries());
      assertFalse(routingNodes0.hasUnassignedShards());
      assertEquals(0, routingNodes0.getRelocatingShardCount());
      assertFalse(routingNodes0.hasInactivePrimaries());
      assertEquals(0, routingNodes0.size());
      assertFalse(routingNodes0.hasInactiveShards());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(1, httpVersion0.getMajorVersion());
      assertEquals("HTTP", httpVersion0.getProtocolName());
      assertEquals("HTTP/1.0", httpVersion0.toString());
      assertEquals(0, httpVersion0.getMinorVersion());
      assertEquals("HTTP/1.0", httpVersion0.getText());
      assertFalse(httpVersion0.isKeepAliveDefault());
      assertEquals("PATCH", httpMethod0.getName());
      assertEquals("PATCH", httpMethod0.toString());
      assertEquals("global-", defaultHttpRequest0.getUri());
      assertTrue(defaultChannelPipeline0.isAttached());
      assertFalse(socketChannel0.isRegistered());
      assertTrue(socketChannel0.isBlocking());
      assertFalse(socketChannel0.isConnectionPending());
      assertTrue(socketChannel0.isOpen());
      assertEquals(13, socketChannel0.validOps());
      assertFalse(socketChannel0.isConnected());
      assertEquals(4, (int)nioSocketChannel0.getId());
      assertTrue(nioSocketChannel0.isReadable());
      assertFalse(nioSocketChannel0.isConnected());
      assertTrue(nioSocketChannel0.isOpen());
      assertFalse(nioSocketChannel0.isBound());
      assertEquals("global-", nettyHttpRequest0.rawPath());
      assertFalse(nettyHttpRequest0.hasContent());
      assertEquals(RestRequest.Method.GET, nettyHttpRequest0.method());
      assertEquals("global-", nettyHttpRequest0.uri());
      assertNotNull(nettyHttpRequest0);
      
      NettyHttpChannel nettyHttpChannel0 = new NettyHttpChannel(nettyHttpServerTransport0, nettyHttpRequest0, boolean0);
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState0.status());
      assertEquals("AAAAAAEAQACCAAAAAwAAAA", clusterState0.stateUUID());
      assertEquals(0L, clusterState0.version());
      assertFalse(clusterState0.wasReadFromDiff());
      assertEquals(0L, clusterState0.getVersion());
      assertFalse(routingNodes0.hasUnassignedPrimaries());
      assertFalse(routingNodes0.hasUnassignedShards());
      assertEquals(0, routingNodes0.getRelocatingShardCount());
      assertFalse(routingNodes0.hasInactivePrimaries());
      assertEquals(0, routingNodes0.size());
      assertFalse(routingNodes0.hasInactiveShards());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(1, httpVersion0.getMajorVersion());
      assertEquals("HTTP", httpVersion0.getProtocolName());
      assertEquals("HTTP/1.0", httpVersion0.toString());
      assertEquals(0, httpVersion0.getMinorVersion());
      assertEquals("HTTP/1.0", httpVersion0.getText());
      assertFalse(httpVersion0.isKeepAliveDefault());
      assertEquals("PATCH", httpMethod0.getName());
      assertEquals("PATCH", httpMethod0.toString());
      assertEquals("global-", defaultHttpRequest0.getUri());
      assertTrue(defaultChannelPipeline0.isAttached());
      assertFalse(socketChannel0.isRegistered());
      assertTrue(socketChannel0.isBlocking());
      assertFalse(socketChannel0.isConnectionPending());
      assertTrue(socketChannel0.isOpen());
      assertEquals(13, socketChannel0.validOps());
      assertFalse(socketChannel0.isConnected());
      assertEquals(4, (int)nioSocketChannel0.getId());
      assertTrue(nioSocketChannel0.isReadable());
      assertFalse(nioSocketChannel0.isConnected());
      assertTrue(nioSocketChannel0.isOpen());
      assertFalse(nioSocketChannel0.isBound());
      assertEquals("global-", nettyHttpRequest0.rawPath());
      assertFalse(nettyHttpRequest0.hasContent());
      assertEquals(RestRequest.Method.GET, nettyHttpRequest0.method());
      assertEquals("global-", nettyHttpRequest0.uri());
      assertTrue(nettyHttpChannel0.detailedErrorsEnabled());
      assertNotNull(nettyHttpChannel0);
      
      // Undeclared exception!
      try { 
        restShardsAction0.doRequest(restRequest0, nettyHttpChannel0, client0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.rest.action.cat.RestShardsAction", e);
      }
  }

  @Test(timeout = 11000)
  public void test08()  throws Throwable  {
      ClusterState clusterState0 = ClusterState.PROTO;
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertEquals("AAAAAAEAQACCAAAAAwAAAA", clusterState0.stateUUID());
      assertFalse(clusterState0.wasReadFromDiff());
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState0.status());
      assertEquals(0L, clusterState0.getVersion());
      assertEquals(0L, clusterState0.version());
      assertNotNull(clusterState0);
      
      RoutingNodes routingNodes0 = clusterState0.getRoutingNodes();
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertEquals("AAAAAAEAQACCAAAAAwAAAA", clusterState0.stateUUID());
      assertFalse(clusterState0.wasReadFromDiff());
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState0.status());
      assertEquals(0L, clusterState0.getVersion());
      assertEquals(0L, clusterState0.version());
      assertFalse(routingNodes0.hasInactiveShards());
      assertFalse(routingNodes0.hasUnassignedPrimaries());
      assertFalse(routingNodes0.hasInactivePrimaries());
      assertEquals(0, routingNodes0.getRelocatingShardCount());
      assertFalse(routingNodes0.hasUnassignedShards());
      assertEquals(0, routingNodes0.size());
      assertNotNull(routingNodes0);
      
      MetaData metaData0 = routingNodes0.getMetaData();
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertEquals("AAAAAAEAQACCAAAAAwAAAA", clusterState0.stateUUID());
      assertFalse(clusterState0.wasReadFromDiff());
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState0.status());
      assertEquals(0L, clusterState0.getVersion());
      assertEquals(0L, clusterState0.version());
      assertFalse(routingNodes0.hasInactiveShards());
      assertFalse(routingNodes0.hasUnassignedPrimaries());
      assertFalse(routingNodes0.hasInactivePrimaries());
      assertEquals(0, routingNodes0.getRelocatingShardCount());
      assertFalse(routingNodes0.hasUnassignedShards());
      assertEquals(0, routingNodes0.size());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertNotNull(metaData0);
      
      Settings settings0 = metaData0.transientSettings();
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertEquals("AAAAAAEAQACCAAAAAwAAAA", clusterState0.stateUUID());
      assertFalse(clusterState0.wasReadFromDiff());
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState0.status());
      assertEquals(0L, clusterState0.getVersion());
      assertEquals(0L, clusterState0.version());
      assertFalse(routingNodes0.hasInactiveShards());
      assertFalse(routingNodes0.hasUnassignedPrimaries());
      assertFalse(routingNodes0.hasInactivePrimaries());
      assertEquals(0, routingNodes0.getRelocatingShardCount());
      assertFalse(routingNodes0.hasUnassignedShards());
      assertEquals(0, routingNodes0.size());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertNotNull(settings0);
      
      IndexMetaData indexMetaData0 = IndexMetaData.PROTO;
      assertEquals(IndexMetaData.State.OPEN, indexMetaData0.getState());
      assertEquals(0, indexMetaData0.getNumberOfReplicas());
      assertEquals("_na_", indexMetaData0.getIndexUUID());
      assertEquals(1, indexMetaData0.getNumberOfShards());
      assertEquals(1L, indexMetaData0.getVersion());
      assertEquals(1, indexMetaData0.getTotalNumberOfShards());
      assertNotNull(indexMetaData0);
      
      Settings settings1 = indexMetaData0.getSettings();
      assertEquals(IndexMetaData.State.OPEN, indexMetaData0.getState());
      assertEquals(0, indexMetaData0.getNumberOfReplicas());
      assertEquals("_na_", indexMetaData0.getIndexUUID());
      assertEquals(1, indexMetaData0.getNumberOfShards());
      assertEquals(1L, indexMetaData0.getVersion());
      assertEquals(1, indexMetaData0.getTotalNumberOfShards());
      assertNotNull(settings1);
      assertFalse(settings1.equals((Object)settings0));
      assertNotSame(settings1, settings0);
      
      RestController restController0 = new RestController(settings1);
      assertEquals(IndexMetaData.State.OPEN, indexMetaData0.getState());
      assertEquals(0, indexMetaData0.getNumberOfReplicas());
      assertEquals("_na_", indexMetaData0.getIndexUUID());
      assertEquals(1, indexMetaData0.getNumberOfShards());
      assertEquals(1L, indexMetaData0.getVersion());
      assertEquals(1, indexMetaData0.getTotalNumberOfShards());
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertNotNull(restController0);
      assertFalse(settings1.equals((Object)settings0));
      
      Client client0 = null;
      RestShardsAction restShardsAction0 = new RestShardsAction(settings0, restController0, client0);
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertEquals("AAAAAAEAQACCAAAAAwAAAA", clusterState0.stateUUID());
      assertFalse(clusterState0.wasReadFromDiff());
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState0.status());
      assertEquals(0L, clusterState0.getVersion());
      assertEquals(0L, clusterState0.version());
      assertFalse(routingNodes0.hasInactiveShards());
      assertFalse(routingNodes0.hasUnassignedPrimaries());
      assertFalse(routingNodes0.hasInactivePrimaries());
      assertEquals(0, routingNodes0.getRelocatingShardCount());
      assertFalse(routingNodes0.hasUnassignedShards());
      assertEquals(0, routingNodes0.size());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(IndexMetaData.State.OPEN, indexMetaData0.getState());
      assertEquals(0, indexMetaData0.getNumberOfReplicas());
      assertEquals("_na_", indexMetaData0.getIndexUUID());
      assertEquals(1, indexMetaData0.getNumberOfShards());
      assertEquals(1L, indexMetaData0.getVersion());
      assertEquals(1, indexMetaData0.getTotalNumberOfShards());
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertNotNull(restShardsAction0);
      assertFalse(settings0.equals((Object)settings1));
      assertFalse(settings1.equals((Object)settings0));
      
      StringBuilder stringBuilder0 = null;
      // Undeclared exception!
      try { 
        restShardsAction0.documentation(stringBuilder0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.rest.action.cat.RestShardsAction", e);
      }
  }

  @Test(timeout = 11000)
  public void test09()  throws Throwable  {
      long long0 = 1813L;
      System.setCurrentTimeMillis(long0);
      ClusterState clusterState0 = ClusterState.PROTO;
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState0.status());
      assertFalse(clusterState0.wasReadFromDiff());
      assertEquals(0L, clusterState0.version());
      assertEquals("AAAAAAEAQACCAAAAAwAAAA", clusterState0.stateUUID());
      assertEquals(0L, clusterState0.getVersion());
      assertNotNull(clusterState0);
      
      boolean boolean0 = true;
      RoutingNodes routingNodes0 = new RoutingNodes(clusterState0, boolean0);
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState0.status());
      assertFalse(clusterState0.wasReadFromDiff());
      assertEquals(0L, clusterState0.version());
      assertEquals("AAAAAAEAQACCAAAAAwAAAA", clusterState0.stateUUID());
      assertEquals(0L, clusterState0.getVersion());
      assertEquals(0, routingNodes0.getRelocatingShardCount());
      assertFalse(routingNodes0.hasUnassignedPrimaries());
      assertFalse(routingNodes0.hasInactivePrimaries());
      assertFalse(routingNodes0.hasInactiveShards());
      assertFalse(routingNodes0.hasUnassignedShards());
      assertEquals(0, routingNodes0.size());
      assertNotNull(routingNodes0);
      
      MetaData metaData0 = routingNodes0.getMetaData();
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState0.status());
      assertFalse(clusterState0.wasReadFromDiff());
      assertEquals(0L, clusterState0.version());
      assertEquals("AAAAAAEAQACCAAAAAwAAAA", clusterState0.stateUUID());
      assertEquals(0L, clusterState0.getVersion());
      assertEquals(0, routingNodes0.getRelocatingShardCount());
      assertFalse(routingNodes0.hasUnassignedPrimaries());
      assertFalse(routingNodes0.hasInactivePrimaries());
      assertFalse(routingNodes0.hasInactiveShards());
      assertFalse(routingNodes0.hasUnassignedShards());
      assertEquals(0, routingNodes0.size());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals("_na_", metaData0.clusterUUID());
      assertNotNull(metaData0);
      
      Settings settings0 = metaData0.settings();
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState0.status());
      assertFalse(clusterState0.wasReadFromDiff());
      assertEquals(0L, clusterState0.version());
      assertEquals("AAAAAAEAQACCAAAAAwAAAA", clusterState0.stateUUID());
      assertEquals(0L, clusterState0.getVersion());
      assertEquals(0, routingNodes0.getRelocatingShardCount());
      assertFalse(routingNodes0.hasUnassignedPrimaries());
      assertFalse(routingNodes0.hasInactivePrimaries());
      assertFalse(routingNodes0.hasInactiveShards());
      assertFalse(routingNodes0.hasUnassignedShards());
      assertEquals(0, routingNodes0.size());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals("_na_", metaData0.clusterUUID());
      assertNotNull(settings0);
      
      RestController restController0 = new RestController(settings0);
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState0.status());
      assertFalse(clusterState0.wasReadFromDiff());
      assertEquals(0L, clusterState0.version());
      assertEquals("AAAAAAEAQACCAAAAAwAAAA", clusterState0.stateUUID());
      assertEquals(0L, clusterState0.getVersion());
      assertEquals(0, routingNodes0.getRelocatingShardCount());
      assertFalse(routingNodes0.hasUnassignedPrimaries());
      assertFalse(routingNodes0.hasInactivePrimaries());
      assertFalse(routingNodes0.hasInactiveShards());
      assertFalse(routingNodes0.hasUnassignedShards());
      assertEquals(0, routingNodes0.size());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertNotNull(restController0);
      
      Client client0 = null;
      RestShardsAction restShardsAction0 = new RestShardsAction(settings0, restController0, client0);
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState0.status());
      assertFalse(clusterState0.wasReadFromDiff());
      assertEquals(0L, clusterState0.version());
      assertEquals("AAAAAAEAQACCAAAAAwAAAA", clusterState0.stateUUID());
      assertEquals(0L, clusterState0.getVersion());
      assertEquals(0, routingNodes0.getRelocatingShardCount());
      assertFalse(routingNodes0.hasUnassignedPrimaries());
      assertFalse(routingNodes0.hasInactivePrimaries());
      assertFalse(routingNodes0.hasInactiveShards());
      assertFalse(routingNodes0.hasUnassignedShards());
      assertEquals(0, routingNodes0.size());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertNotNull(restShardsAction0);
      
      HttpVersion httpVersion0 = HttpVersion.HTTP_1_0;
      assertEquals("HTTP/1.0", httpVersion0.toString());
      assertEquals(0, httpVersion0.getMinorVersion());
      assertEquals(1, httpVersion0.getMajorVersion());
      assertEquals("HTTP", httpVersion0.getProtocolName());
      assertEquals("HTTP/1.0", httpVersion0.getText());
      assertFalse(httpVersion0.isKeepAliveDefault());
      assertNotNull(httpVersion0);
      
      HttpMethod httpMethod0 = HttpMethod.PATCH;
      assertEquals("PATCH", httpMethod0.toString());
      assertEquals("PATCH", httpMethod0.getName());
      assertNotNull(httpMethod0);
      
      DefaultHttpRequest defaultHttpRequest0 = new DefaultHttpRequest(httpVersion0, httpMethod0, clusterState0.UNKNOWN_UUID);
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState0.status());
      assertFalse(clusterState0.wasReadFromDiff());
      assertEquals(0L, clusterState0.version());
      assertEquals("AAAAAAEAQACCAAAAAwAAAA", clusterState0.stateUUID());
      assertEquals(0L, clusterState0.getVersion());
      assertEquals("HTTP/1.0", httpVersion0.toString());
      assertEquals(0, httpVersion0.getMinorVersion());
      assertEquals(1, httpVersion0.getMajorVersion());
      assertEquals("HTTP", httpVersion0.getProtocolName());
      assertEquals("HTTP/1.0", httpVersion0.getText());
      assertFalse(httpVersion0.isKeepAliveDefault());
      assertEquals("PATCH", httpMethod0.toString());
      assertEquals("PATCH", httpMethod0.getName());
      assertEquals("_na_", defaultHttpRequest0.getUri());
      assertNotNull(defaultHttpRequest0);
      
      ClusterState.Builder clusterState_Builder0 = ClusterState.builder(clusterState0);
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState0.status());
      assertFalse(clusterState0.wasReadFromDiff());
      assertEquals(0L, clusterState0.version());
      assertEquals("AAAAAAEAQACCAAAAAwAAAA", clusterState0.stateUUID());
      assertEquals(0L, clusterState0.getVersion());
      assertNotNull(clusterState_Builder0);
      
      DefaultLocalServerChannelFactory defaultLocalServerChannelFactory0 = new DefaultLocalServerChannelFactory();
      assertNotNull(defaultLocalServerChannelFactory0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      DefaultChannelPipeline defaultChannelPipeline0 = new DefaultChannelPipeline();
      assertFalse(defaultChannelPipeline0.isAttached());
      assertNotNull(defaultChannelPipeline0);
      
      LocalServerChannel localServerChannel0 = defaultLocalServerChannelFactory0.newChannel(defaultChannelPipeline0);
      assertTrue(defaultChannelPipeline0.isAttached());
      assertEquals(0, (int)localServerChannel0.getId());
      assertTrue(localServerChannel0.isReadable());
      assertNotNull(localServerChannel0);
      
      NettyHttpRequest nettyHttpRequest0 = new NettyHttpRequest(defaultHttpRequest0, localServerChannel0);
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertTrue(defaultChannelPipeline0.isAttached());
      assertEquals(0, (int)localServerChannel0.getId());
      assertTrue(localServerChannel0.isReadable());
      assertFalse(nettyHttpRequest0.hasContent());
      assertEquals("_na_", nettyHttpRequest0.rawPath());
      assertEquals("_na_", nettyHttpRequest0.uri());
      assertEquals(RestRequest.Method.GET, nettyHttpRequest0.method());
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState0.status());
      assertFalse(clusterState0.wasReadFromDiff());
      assertEquals(0L, clusterState0.version());
      assertEquals("AAAAAAEAQACCAAAAAwAAAA", clusterState0.stateUUID());
      assertEquals(0L, clusterState0.getVersion());
      assertEquals("HTTP/1.0", httpVersion0.toString());
      assertEquals(0, httpVersion0.getMinorVersion());
      assertEquals(1, httpVersion0.getMajorVersion());
      assertEquals("HTTP", httpVersion0.getProtocolName());
      assertEquals("HTTP/1.0", httpVersion0.getText());
      assertFalse(httpVersion0.isKeepAliveDefault());
      assertEquals("PATCH", httpMethod0.toString());
      assertEquals("PATCH", httpMethod0.getName());
      assertEquals("_na_", defaultHttpRequest0.getUri());
      assertNotNull(nettyHttpRequest0);
      
      Table table0 = restShardsAction0.getTableWithHeader(nettyHttpRequest0);
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState0.status());
      assertFalse(clusterState0.wasReadFromDiff());
      assertEquals(0L, clusterState0.version());
      assertEquals("AAAAAAEAQACCAAAAAwAAAA", clusterState0.stateUUID());
      assertEquals(0L, clusterState0.getVersion());
      assertEquals(0, routingNodes0.getRelocatingShardCount());
      assertFalse(routingNodes0.hasUnassignedPrimaries());
      assertFalse(routingNodes0.hasInactivePrimaries());
      assertFalse(routingNodes0.hasInactiveShards());
      assertFalse(routingNodes0.hasUnassignedShards());
      assertEquals(0, routingNodes0.size());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertEquals("HTTP/1.0", httpVersion0.toString());
      assertEquals(0, httpVersion0.getMinorVersion());
      assertEquals(1, httpVersion0.getMajorVersion());
      assertEquals("HTTP", httpVersion0.getProtocolName());
      assertEquals("HTTP/1.0", httpVersion0.getText());
      assertFalse(httpVersion0.isKeepAliveDefault());
      assertEquals("PATCH", httpMethod0.toString());
      assertEquals("PATCH", httpMethod0.getName());
      assertEquals("_na_", defaultHttpRequest0.getUri());
      assertTrue(defaultChannelPipeline0.isAttached());
      assertEquals(0, (int)localServerChannel0.getId());
      assertTrue(localServerChannel0.isReadable());
      assertFalse(nettyHttpRequest0.hasContent());
      assertEquals("_na_", nettyHttpRequest0.rawPath());
      assertEquals("_na_", nettyHttpRequest0.uri());
      assertEquals(RestRequest.Method.GET, nettyHttpRequest0.method());
      assertNotNull(table0);
      
      // Undeclared exception!
      restShardsAction0.getTableWithHeader(nettyHttpRequest0);
  }

  @Test(timeout = 11000)
  public void test10()  throws Throwable  {
      Settings settings0 = Settings.EMPTY;
      assertNotNull(settings0);
      
      RestController restController0 = new RestController(settings0);
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertNotNull(restController0);
      
      Channel channel0 = null;
      boolean boolean0 = false;
      HttpVersion httpVersion0 = HttpVersion.HTTP_1_0;
      assertEquals("HTTP", httpVersion0.getProtocolName());
      assertEquals(1, httpVersion0.getMajorVersion());
      assertEquals("HTTP/1.0", httpVersion0.toString());
      assertEquals(0, httpVersion0.getMinorVersion());
      assertEquals("HTTP/1.0", httpVersion0.getText());
      assertFalse(httpVersion0.isKeepAliveDefault());
      assertNotNull(httpVersion0);
      
      RestChannel restChannel0 = null;
      MetaData metaData0 = MetaData.EMPTY_META_DATA;
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getNumberOfShards());
      assertNotNull(metaData0);
      
      Settings settings1 = metaData0.transientSettings();
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getNumberOfShards());
      assertNotNull(settings1);
      assertTrue(settings1.equals((Object)settings0));
      assertNotSame(settings1, settings0);
      
      String string0 = "h&Q";
      ThreadPool threadPool0 = new ThreadPool(string0);
      assertNotNull(threadPool0);
      
      MapperService mapperService0 = null;
      IndexFieldDataService indexFieldDataService0 = null;
      String[] stringArray0 = new String[0];
      SearchLookup searchLookup0 = new SearchLookup(mapperService0, indexFieldDataService0, stringArray0);
      assertNotNull(searchLookup0);
      assertEquals(0, stringArray0.length);
      
      SourceLookup sourceLookup0 = searchLookup0.source();
      assertNull(sourceLookup0.sourceContentType());
      assertNotNull(sourceLookup0);
      assertEquals(0, stringArray0.length);
      
      NodeClient nodeClient0 = new NodeClient(settings1, threadPool0, sourceLookup0);
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getNumberOfShards());
      assertNull(sourceLookup0.sourceContentType());
      assertNotNull(nodeClient0);
      assertTrue(settings1.equals((Object)settings0));
      assertEquals(0, stringArray0.length);
      
      Client client0 = nodeClient0.filterWithHeader(sourceLookup0);
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getNumberOfShards());
      assertNull(sourceLookup0.sourceContentType());
      assertNotNull(client0);
      assertTrue(settings1.equals((Object)settings0));
      assertNotSame(settings1, settings0);
      assertEquals(0, stringArray0.length);
      
      RestShardsAction restShardsAction0 = new RestShardsAction(settings1, restController0, client0);
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getNumberOfShards());
      assertNull(sourceLookup0.sourceContentType());
      assertNotNull(restShardsAction0);
      assertTrue(settings0.equals((Object)settings1));
      assertTrue(settings1.equals((Object)settings0));
      assertEquals(0, stringArray0.length);
      
      HttpMethod httpMethod0 = HttpMethod.CONNECT;
      assertEquals("CONNECT", httpMethod0.getName());
      assertEquals("CONNECT", httpMethod0.toString());
      assertNotNull(httpMethod0);
      
      DefaultHttpRequest defaultHttpRequest0 = new DefaultHttpRequest(httpVersion0, httpMethod0, metaData0.ALL);
      assertEquals("CONNECT", httpMethod0.getName());
      assertEquals("CONNECT", httpMethod0.toString());
      assertEquals("_all", defaultHttpRequest0.getUri());
      assertEquals("HTTP", httpVersion0.getProtocolName());
      assertEquals(1, httpVersion0.getMajorVersion());
      assertEquals("HTTP/1.0", httpVersion0.toString());
      assertEquals(0, httpVersion0.getMinorVersion());
      assertEquals("HTTP/1.0", httpVersion0.getText());
      assertFalse(httpVersion0.isKeepAliveDefault());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getNumberOfShards());
      assertNotNull(defaultHttpRequest0);
      
      DefaultChannelPipeline defaultChannelPipeline0 = new DefaultChannelPipeline();
      assertFalse(defaultChannelPipeline0.isAttached());
      assertNotNull(defaultChannelPipeline0);
      
      Channel channel1 = defaultChannelPipeline0.getChannel();
      assertFalse(defaultChannelPipeline0.isAttached());
      assertNull(channel1);
      
      NettyHttpRequest nettyHttpRequest0 = new NettyHttpRequest(defaultHttpRequest0, channel1);
      assertEquals("CONNECT", httpMethod0.getName());
      assertEquals("CONNECT", httpMethod0.toString());
      assertEquals("_all", defaultHttpRequest0.getUri());
      assertFalse(defaultChannelPipeline0.isAttached());
      assertEquals("HTTP", httpVersion0.getProtocolName());
      assertEquals(1, httpVersion0.getMajorVersion());
      assertEquals("HTTP/1.0", httpVersion0.toString());
      assertEquals(0, httpVersion0.getMinorVersion());
      assertEquals("HTTP/1.0", httpVersion0.getText());
      assertFalse(httpVersion0.isKeepAliveDefault());
      assertEquals(RestRequest.Method.GET, nettyHttpRequest0.method());
      assertEquals("_all", nettyHttpRequest0.uri());
      assertFalse(nettyHttpRequest0.hasContent());
      assertEquals("_all", nettyHttpRequest0.rawPath());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getNumberOfShards());
      assertNotNull(nettyHttpRequest0);
      
      // Undeclared exception!
      try { 
        restShardsAction0.doRequest(nettyHttpRequest0, restChannel0, nodeClient0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // failed to parse / load source
         //
         verifyException("org.elasticsearch.search.lookup.SourceLookup", e);
      }
  }
}
