/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 08 18:29:28 GMT 2021
 */

package org.elasticsearch.rest.action.cat;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.net.InetAddress;
import java.net.InetSocketAddress;
import java.nio.channels.SocketChannel;
import java.util.List;
import java.util.concurrent.ForkJoinPool;
import org.apache.lucene.index.Term;
import org.apache.lucene.search.FuzzyQuery;
import org.apache.lucene.util.BytesRef;
import org.elasticsearch.action.admin.cluster.state.ClusterStateResponse;
import org.elasticsearch.action.admin.indices.stats.IndicesStatsResponse;
import org.elasticsearch.cache.recycler.PageCacheRecycler;
import org.elasticsearch.client.Client;
import org.elasticsearch.client.node.NodeClient;
import org.elasticsearch.cluster.ClusterName;
import org.elasticsearch.cluster.ClusterState;
import org.elasticsearch.cluster.metadata.MetaData;
import org.elasticsearch.common.Table;
import org.elasticsearch.common.component.Lifecycle;
import org.elasticsearch.common.component.LifecycleListener;
import org.elasticsearch.common.netty.NettyUtils;
import org.elasticsearch.common.network.NetworkService;
import org.elasticsearch.common.settings.Settings;
import org.elasticsearch.common.settings.SettingsFilter;
import org.elasticsearch.common.util.BigArrays;
import org.elasticsearch.common.xcontent.ToXContent;
import org.elasticsearch.http.netty.NettyHttpChannel;
import org.elasticsearch.http.netty.NettyHttpRequest;
import org.elasticsearch.http.netty.NettyHttpServerTransport;
import org.elasticsearch.http.netty.pipelining.OrderedUpstreamMessageEvent;
import org.elasticsearch.index.fielddata.IndexFieldDataService;
import org.elasticsearch.index.mapper.MapperService;
import org.elasticsearch.indices.breaker.NoneCircuitBreakerService;
import org.elasticsearch.rest.RestChannel;
import org.elasticsearch.rest.RestController;
import org.elasticsearch.rest.RestFilter;
import org.elasticsearch.rest.RestFilterChain;
import org.elasticsearch.rest.RestRequest;
import org.elasticsearch.rest.action.cat.RestShardsAction;
import org.elasticsearch.search.lookup.SearchLookup;
import org.elasticsearch.search.lookup.SourceLookup;
import org.elasticsearch.threadpool.ThreadPool;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.net.MockInetAddress;
import org.evosuite.runtime.mock.java.net.MockInetSocketAddress;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.jboss.netty.channel.Channel;
import org.jboss.netty.channel.ChannelSink;
import org.jboss.netty.channel.DefaultChannelPipeline;
import org.jboss.netty.channel.local.DefaultLocalClientChannelFactory;
import org.jboss.netty.channel.local.DefaultLocalServerChannelFactory;
import org.jboss.netty.channel.local.LocalChannel;
import org.jboss.netty.channel.local.LocalServerChannel;
import org.jboss.netty.channel.socket.nio.NioSocketChannel;
import org.jboss.netty.channel.socket.nio.NioWorker;
import org.jboss.netty.handler.codec.http.DefaultHttpRequest;
import org.jboss.netty.handler.codec.http.HttpMethod;
import org.jboss.netty.handler.codec.http.HttpVersion;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class RestShardsAction_ESTest extends RestShardsAction_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test00()  throws Throwable  {
      Settings settings0 = Settings.EMPTY;
      assertNotNull(settings0);
      
      RestController restController0 = new RestController(settings0);
      assertNotNull(restController0);
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      
      Client client0 = null;
      RestShardsAction restShardsAction0 = new RestShardsAction(settings0, restController0, client0);
      assertNotNull(restShardsAction0);
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      
      int int0 = 12;
      boolean boolean0 = false;
      String string0 = " rP";
      HttpVersion httpVersion0 = new HttpVersion(string0, int0, int0, boolean0);
      assertNotNull(httpVersion0);
      assertEquals(12, httpVersion0.getMinorVersion());
      assertEquals(12, httpVersion0.getMajorVersion());
      assertFalse(httpVersion0.isKeepAliveDefault());
      assertEquals("RP", httpVersion0.getProtocolName());
      assertEquals("RP/12.12", httpVersion0.getText());
      assertEquals("RP/12.12", httpVersion0.toString());
      
      HttpMethod httpMethod0 = HttpMethod.CONNECT;
      assertNotNull(httpMethod0);
      assertEquals("CONNECT", httpMethod0.getName());
      assertEquals("CONNECT", httpMethod0.toString());
      
      DefaultHttpRequest defaultHttpRequest0 = new DefaultHttpRequest(httpVersion0, httpMethod0, string0);
      assertNotNull(defaultHttpRequest0);
      assertEquals(12, httpVersion0.getMinorVersion());
      assertEquals(12, httpVersion0.getMajorVersion());
      assertFalse(httpVersion0.isKeepAliveDefault());
      assertEquals("RP", httpVersion0.getProtocolName());
      assertEquals("RP/12.12", httpVersion0.getText());
      assertEquals("RP/12.12", httpVersion0.toString());
      assertEquals("CONNECT", httpMethod0.getName());
      assertEquals("CONNECT", httpMethod0.toString());
      assertEquals(" rP", defaultHttpRequest0.getUri());
      
      Channel channel0 = null;
      NettyHttpRequest nettyHttpRequest0 = new NettyHttpRequest(defaultHttpRequest0, channel0);
      assertNotNull(nettyHttpRequest0);
      assertEquals(12, httpVersion0.getMinorVersion());
      assertEquals(12, httpVersion0.getMajorVersion());
      assertFalse(httpVersion0.isKeepAliveDefault());
      assertEquals("RP", httpVersion0.getProtocolName());
      assertEquals("RP/12.12", httpVersion0.getText());
      assertEquals("RP/12.12", httpVersion0.toString());
      assertEquals("CONNECT", httpMethod0.getName());
      assertEquals("CONNECT", httpMethod0.toString());
      assertEquals(" rP", defaultHttpRequest0.getUri());
      assertEquals(" rP", nettyHttpRequest0.rawPath());
      assertFalse(nettyHttpRequest0.hasContent());
      assertEquals(" rP", nettyHttpRequest0.uri());
      assertEquals(RestRequest.Method.GET, nettyHttpRequest0.method());
      
      ClusterName clusterName0 = ClusterName.DEFAULT;
      assertNotNull(clusterName0);
      assertEquals("elasticsearch", clusterName0.value());
      
      ClusterState clusterState0 = ClusterState.PROTO;
      assertNotNull(clusterState0);
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertFalse(clusterState0.wasReadFromDiff());
      assertEquals(0L, clusterState0.getVersion());
      assertEquals("AwAAAAQAQACFAAAABgAAAA", clusterState0.stateUUID());
      assertEquals(0L, clusterState0.version());
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState0.status());
      
      ClusterStateResponse clusterStateResponse0 = new ClusterStateResponse(clusterName0, clusterState0);
      assertNotNull(clusterStateResponse0);
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertEquals("elasticsearch", clusterName0.value());
      assertFalse(clusterState0.wasReadFromDiff());
      assertEquals(0L, clusterState0.getVersion());
      assertEquals("AwAAAAQAQACFAAAABgAAAA", clusterState0.stateUUID());
      assertEquals(0L, clusterState0.version());
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState0.status());
      
      IndicesStatsResponse indicesStatsResponse0 = mock(IndicesStatsResponse.class, new ViolatedAssumptionAnswer());
      Table table0 = restShardsAction0.buildTable(nettyHttpRequest0, clusterStateResponse0, indicesStatsResponse0);
      assertNotNull(table0);
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertEquals(12, httpVersion0.getMinorVersion());
      assertEquals(12, httpVersion0.getMajorVersion());
      assertFalse(httpVersion0.isKeepAliveDefault());
      assertEquals("RP", httpVersion0.getProtocolName());
      assertEquals("RP/12.12", httpVersion0.getText());
      assertEquals("RP/12.12", httpVersion0.toString());
      assertEquals("CONNECT", httpMethod0.getName());
      assertEquals("CONNECT", httpMethod0.toString());
      assertEquals(" rP", defaultHttpRequest0.getUri());
      assertEquals(" rP", nettyHttpRequest0.rawPath());
      assertFalse(nettyHttpRequest0.hasContent());
      assertEquals(" rP", nettyHttpRequest0.uri());
      assertEquals(RestRequest.Method.GET, nettyHttpRequest0.method());
      assertEquals("elasticsearch", clusterName0.value());
      assertFalse(clusterState0.wasReadFromDiff());
      assertEquals(0L, clusterState0.getVersion());
      assertEquals("AwAAAAQAQACFAAAABgAAAA", clusterState0.stateUUID());
      assertEquals(0L, clusterState0.version());
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState0.status());
      
      RestChannel restChannel0 = null;
  }

  @Test(timeout = 11000)
  public void test01()  throws Throwable  {
      Settings settings0 = Settings.EMPTY;
      assertNotNull(settings0);
      
      RestController restController0 = new RestController(settings0);
      assertNotNull(restController0);
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      
      Client client0 = null;
      RestShardsAction restShardsAction0 = new RestShardsAction(settings0, restController0, client0);
      assertNotNull(restShardsAction0);
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      
      String string0 = "x{";
      StringBuilder stringBuilder0 = new StringBuilder();
      assertNotNull(stringBuilder0);
      assertEquals("", stringBuilder0.toString());
      
      int int0 = 0;
      restShardsAction0.documentation(stringBuilder0);
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertEquals("/_cat/shards\n/_cat/shards/{index}\n", stringBuilder0.toString());
      
      boolean boolean0 = false;
      HttpVersion httpVersion0 = new HttpVersion(string0, int0, int0, boolean0);
      assertNotNull(httpVersion0);
      assertEquals("X{/0.0", httpVersion0.getText());
      assertEquals(0, httpVersion0.getMinorVersion());
      assertEquals(0, httpVersion0.getMajorVersion());
      assertEquals("X{/0.0", httpVersion0.toString());
      assertEquals("X{", httpVersion0.getProtocolName());
      assertFalse(httpVersion0.isKeepAliveDefault());
      
      HttpMethod httpMethod0 = HttpMethod.CONNECT;
      assertNotNull(httpMethod0);
      assertEquals("CONNECT", httpMethod0.toString());
      assertEquals("CONNECT", httpMethod0.getName());
      
      DefaultHttpRequest defaultHttpRequest0 = new DefaultHttpRequest(httpVersion0, httpMethod0, string0);
      assertNotNull(defaultHttpRequest0);
      assertEquals("X{/0.0", httpVersion0.getText());
      assertEquals(0, httpVersion0.getMinorVersion());
      assertEquals(0, httpVersion0.getMajorVersion());
      assertEquals("X{/0.0", httpVersion0.toString());
      assertEquals("X{", httpVersion0.getProtocolName());
      assertFalse(httpVersion0.isKeepAliveDefault());
      assertEquals("CONNECT", httpMethod0.toString());
      assertEquals("CONNECT", httpMethod0.getName());
      assertEquals("x{", defaultHttpRequest0.getUri());
      
      Channel channel0 = null;
      NettyHttpRequest nettyHttpRequest0 = new NettyHttpRequest(defaultHttpRequest0, channel0);
      assertNotNull(nettyHttpRequest0);
      assertEquals("X{/0.0", httpVersion0.getText());
      assertEquals(0, httpVersion0.getMinorVersion());
      assertEquals(0, httpVersion0.getMajorVersion());
      assertEquals("X{/0.0", httpVersion0.toString());
      assertEquals("X{", httpVersion0.getProtocolName());
      assertFalse(httpVersion0.isKeepAliveDefault());
      assertEquals("CONNECT", httpMethod0.toString());
      assertEquals("CONNECT", httpMethod0.getName());
      assertEquals("x{", defaultHttpRequest0.getUri());
      assertEquals("x{", nettyHttpRequest0.rawPath());
      assertEquals("x{", nettyHttpRequest0.uri());
      assertFalse(nettyHttpRequest0.hasContent());
      assertEquals(RestRequest.Method.GET, nettyHttpRequest0.method());
      
      ClusterName clusterName0 = new ClusterName(string0);
      assertNotNull(clusterName0);
      assertEquals("x{", clusterName0.value());
      
      ClusterState clusterState0 = ClusterState.PROTO;
      assertNotNull(clusterState0);
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState0.status());
      assertFalse(clusterState0.wasReadFromDiff());
      assertEquals("AwAAAAQAQACFAAAABgAAAA", clusterState0.stateUUID());
      assertEquals(0L, clusterState0.version());
      assertEquals(0L, clusterState0.getVersion());
      
      ClusterStateResponse clusterStateResponse0 = new ClusterStateResponse(clusterName0, clusterState0);
      assertNotNull(clusterStateResponse0);
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertEquals("x{", clusterName0.value());
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState0.status());
      assertFalse(clusterState0.wasReadFromDiff());
      assertEquals("AwAAAAQAQACFAAAABgAAAA", clusterState0.stateUUID());
      assertEquals(0L, clusterState0.version());
      assertEquals(0L, clusterState0.getVersion());
      
      IndicesStatsResponse indicesStatsResponse0 = mock(IndicesStatsResponse.class, new ViolatedAssumptionAnswer());
      Table table0 = restShardsAction0.buildTable(nettyHttpRequest0, clusterStateResponse0, indicesStatsResponse0);
      assertNotNull(table0);
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertEquals("X{/0.0", httpVersion0.getText());
      assertEquals(0, httpVersion0.getMinorVersion());
      assertEquals(0, httpVersion0.getMajorVersion());
      assertEquals("X{/0.0", httpVersion0.toString());
      assertEquals("X{", httpVersion0.getProtocolName());
      assertFalse(httpVersion0.isKeepAliveDefault());
      assertEquals("CONNECT", httpMethod0.toString());
      assertEquals("CONNECT", httpMethod0.getName());
      assertEquals("x{", defaultHttpRequest0.getUri());
      assertEquals("x{", nettyHttpRequest0.rawPath());
      assertEquals("x{", nettyHttpRequest0.uri());
      assertFalse(nettyHttpRequest0.hasContent());
      assertEquals(RestRequest.Method.GET, nettyHttpRequest0.method());
      assertEquals("x{", clusterName0.value());
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState0.status());
      assertFalse(clusterState0.wasReadFromDiff());
      assertEquals("AwAAAAQAQACFAAAABgAAAA", clusterState0.stateUUID());
      assertEquals(0L, clusterState0.version());
      assertEquals(0L, clusterState0.getVersion());
  }

  @Test(timeout = 11000)
  public void test02()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
      assertFalse(boolean0);
      
      long long0 = 10080L;
      System.setCurrentTimeMillis(long0);
      Settings settings0 = Settings.Builder.EMPTY_SETTINGS;
      assertNotNull(settings0);
      
      RestController restController0 = new RestController(settings0);
      assertNotNull(restController0);
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      
      ThreadPool threadPool0 = new ThreadPool(settings0);
      assertNotNull(threadPool0);
      
      MapperService mapperService0 = null;
      IndexFieldDataService indexFieldDataService0 = null;
      String[] stringArray0 = new String[7];
      String string0 = "?O|~zkLYL!<W'E";
      String string1 = "";
      stringArray0[1] = string1;
      stringArray0[2] = stringArray0[1];
      stringArray0[3] = string1;
      String string2 = "get.current";
      stringArray0[4] = string2;
      SearchLookup searchLookup0 = new SearchLookup(mapperService0, indexFieldDataService0, stringArray0);
      assertNotNull(searchLookup0);
      assertEquals(7, stringArray0.length);
      
      SourceLookup sourceLookup0 = searchLookup0.source();
      assertNotNull(sourceLookup0);
      assertNull(sourceLookup0.sourceContentType());
      assertEquals(7, stringArray0.length);
      
      NodeClient nodeClient0 = new NodeClient(settings0, threadPool0, sourceLookup0);
      assertNotNull(nodeClient0);
      assertNull(sourceLookup0.sourceContentType());
      assertEquals(7, stringArray0.length);
      
      RestShardsAction restShardsAction0 = new RestShardsAction(settings0, restController0, nodeClient0);
      assertNotNull(restShardsAction0);
      assertNull(sourceLookup0.sourceContentType());
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertEquals(7, stringArray0.length);
      
      HttpVersion httpVersion0 = HttpVersion.HTTP_1_1;
      assertNotNull(httpVersion0);
      assertEquals(1, httpVersion0.getMinorVersion());
      assertTrue(httpVersion0.isKeepAliveDefault());
      assertEquals(1, httpVersion0.getMajorVersion());
      assertEquals("HTTP/1.1", httpVersion0.getText());
      assertEquals("HTTP", httpVersion0.getProtocolName());
      assertEquals("HTTP/1.1", httpVersion0.toString());
      
      HttpMethod httpMethod0 = HttpMethod.TRACE;
      assertNotNull(httpMethod0);
      assertEquals("TRACE", httpMethod0.getName());
      assertEquals("TRACE", httpMethod0.toString());
      
      DefaultHttpRequest defaultHttpRequest0 = new DefaultHttpRequest(httpVersion0, httpMethod0, stringArray0[2]);
      assertNotNull(defaultHttpRequest0);
      assertEquals(1, httpVersion0.getMinorVersion());
      assertTrue(httpVersion0.isKeepAliveDefault());
      assertEquals(1, httpVersion0.getMajorVersion());
      assertEquals("HTTP/1.1", httpVersion0.getText());
      assertEquals("HTTP", httpVersion0.getProtocolName());
      assertEquals("HTTP/1.1", httpVersion0.toString());
      assertEquals("TRACE", httpMethod0.getName());
      assertEquals("TRACE", httpMethod0.toString());
      assertEquals("", defaultHttpRequest0.getUri());
      assertEquals(7, stringArray0.length);
      
      DefaultChannelPipeline defaultChannelPipeline0 = new DefaultChannelPipeline();
      assertNotNull(defaultChannelPipeline0);
      assertFalse(defaultChannelPipeline0.isAttached());
      
      Channel channel0 = defaultChannelPipeline0.getChannel();
      assertNull(channel0);
      assertFalse(defaultChannelPipeline0.isAttached());
      
      DefaultLocalServerChannelFactory defaultLocalServerChannelFactory0 = new DefaultLocalServerChannelFactory();
      assertNotNull(defaultLocalServerChannelFactory0);
      
      ChannelSink channelSink0 = defaultChannelPipeline0.getSink();
      assertNotNull(channelSink0);
      assertFalse(defaultChannelPipeline0.isAttached());
      
      SocketChannel socketChannel0 = SocketChannel.open();
      assertNotNull(socketChannel0);
      assertFalse(socketChannel0.isConnected());
      assertTrue(socketChannel0.isOpen());
      assertTrue(socketChannel0.isBlocking());
      assertEquals(13, socketChannel0.validOps());
      assertFalse(socketChannel0.isConnectionPending());
      assertFalse(socketChannel0.isRegistered());
      
      ForkJoinPool forkJoinPool0 = ForkJoinPool.commonPool();
      assertNotNull(forkJoinPool0);
      
      NettyUtils.EsThreadNameDeterminer nettyUtils_EsThreadNameDeterminer0 = new NettyUtils.EsThreadNameDeterminer();
      assertNotNull(nettyUtils_EsThreadNameDeterminer0);
      
      NioWorker nioWorker0 = new NioWorker(forkJoinPool0, nettyUtils_EsThreadNameDeterminer0);
      assertNotNull(nioWorker0);
      
      NioSocketChannel nioSocketChannel0 = new NioSocketChannel(channel0, defaultLocalServerChannelFactory0, defaultChannelPipeline0, channelSink0, socketChannel0, nioWorker0);
      assertNotNull(nioSocketChannel0);
      assertFalse(nioSocketChannel0.isConnected());
      assertTrue(nioSocketChannel0.isOpen());
      assertTrue(nioSocketChannel0.isReadable());
      assertEquals(0, (int)nioSocketChannel0.getId());
      assertFalse(nioSocketChannel0.isBound());
      assertTrue(defaultChannelPipeline0.isAttached());
      assertFalse(socketChannel0.isConnected());
      assertTrue(socketChannel0.isOpen());
      assertTrue(socketChannel0.isBlocking());
      assertEquals(13, socketChannel0.validOps());
      assertFalse(socketChannel0.isConnectionPending());
      assertFalse(socketChannel0.isRegistered());
      
      NettyHttpRequest nettyHttpRequest0 = new NettyHttpRequest(defaultHttpRequest0, nioSocketChannel0);
      assertNotNull(nettyHttpRequest0);
      assertFalse(nioSocketChannel0.isConnected());
      assertTrue(nioSocketChannel0.isOpen());
      assertTrue(nioSocketChannel0.isReadable());
      assertEquals(0, (int)nioSocketChannel0.getId());
      assertFalse(nioSocketChannel0.isBound());
      assertEquals("", nettyHttpRequest0.rawPath());
      assertEquals(RestRequest.Method.GET, nettyHttpRequest0.method());
      assertFalse(nettyHttpRequest0.hasContent());
      assertEquals("", nettyHttpRequest0.uri());
      assertEquals(1, httpVersion0.getMinorVersion());
      assertTrue(httpVersion0.isKeepAliveDefault());
      assertEquals(1, httpVersion0.getMajorVersion());
      assertEquals("HTTP/1.1", httpVersion0.getText());
      assertEquals("HTTP", httpVersion0.getProtocolName());
      assertEquals("HTTP/1.1", httpVersion0.toString());
      assertEquals("TRACE", httpMethod0.getName());
      assertEquals("TRACE", httpMethod0.toString());
      assertEquals("", defaultHttpRequest0.getUri());
      assertTrue(defaultChannelPipeline0.isAttached());
      assertFalse(socketChannel0.isConnected());
      assertTrue(socketChannel0.isOpen());
      assertTrue(socketChannel0.isBlocking());
      assertEquals(13, socketChannel0.validOps());
      assertFalse(socketChannel0.isConnectionPending());
      assertFalse(socketChannel0.isRegistered());
      assertEquals(7, stringArray0.length);
      
      NettyHttpServerTransport nettyHttpServerTransport0 = null;
      NettyHttpChannel nettyHttpChannel0 = new NettyHttpChannel(nettyHttpServerTransport0, nettyHttpRequest0, boolean0);
      assertNotNull(nettyHttpChannel0);
      assertFalse(nioSocketChannel0.isConnected());
      assertTrue(nioSocketChannel0.isOpen());
      assertTrue(nioSocketChannel0.isReadable());
      assertEquals(0, (int)nioSocketChannel0.getId());
      assertFalse(nioSocketChannel0.isBound());
      assertEquals("", nettyHttpRequest0.rawPath());
      assertEquals(RestRequest.Method.GET, nettyHttpRequest0.method());
      assertFalse(nettyHttpRequest0.hasContent());
      assertEquals("", nettyHttpRequest0.uri());
      assertFalse(nettyHttpChannel0.detailedErrorsEnabled());
      assertEquals(1, httpVersion0.getMinorVersion());
      assertTrue(httpVersion0.isKeepAliveDefault());
      assertEquals(1, httpVersion0.getMajorVersion());
      assertEquals("HTTP/1.1", httpVersion0.getText());
      assertEquals("HTTP", httpVersion0.getProtocolName());
      assertEquals("HTTP/1.1", httpVersion0.toString());
      assertEquals("TRACE", httpMethod0.getName());
      assertEquals("TRACE", httpMethod0.toString());
      assertEquals("", defaultHttpRequest0.getUri());
      assertTrue(defaultChannelPipeline0.isAttached());
      assertFalse(socketChannel0.isConnected());
      assertTrue(socketChannel0.isOpen());
      assertTrue(socketChannel0.isBlocking());
      assertEquals(13, socketChannel0.validOps());
      assertFalse(socketChannel0.isConnectionPending());
      assertFalse(socketChannel0.isRegistered());
      assertEquals(7, stringArray0.length);
      
      Client client0 = nodeClient0.filterWithHeader(sourceLookup0);
      assertNotNull(client0);
      assertNull(sourceLookup0.sourceContentType());
      assertEquals(7, stringArray0.length);
      
      // Undeclared exception!
      try { 
        restShardsAction0.doRequest(nettyHttpRequest0, nettyHttpChannel0, client0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // failed to parse / load source
         //
         verifyException("org.elasticsearch.search.lookup.SourceLookup", e);
      }
  }

  @Test(timeout = 11000)
  public void test03()  throws Throwable  {
      Settings settings0 = Settings.Builder.EMPTY_SETTINGS;
      assertNotNull(settings0);
      
      RestController restController0 = new RestController(settings0);
      assertNotNull(restController0);
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      
      Client client0 = null;
      RestShardsAction restShardsAction0 = new RestShardsAction(settings0, restController0, client0);
      assertNotNull(restShardsAction0);
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
  }

  @Test(timeout = 11000)
  public void test04()  throws Throwable  {
      MetaData metaData0 = MetaData.EMPTY_META_DATA;
      assertNotNull(metaData0);
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      
      Settings settings0 = metaData0.settings();
      assertNotNull(settings0);
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      
      RestController restController0 = null;
      Client client0 = null;
      RestShardsAction restShardsAction0 = null;
      try {
        restShardsAction0 = new RestShardsAction(settings0, restController0, client0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.rest.action.cat.RestShardsAction", e);
      }
  }

  @Test(timeout = 11000)
  public void test05()  throws Throwable  {
      Settings settings0 = Settings.EMPTY;
      assertNotNull(settings0);
      
      RestController restController0 = new RestController(settings0);
      assertNotNull(restController0);
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      
      Client client0 = null;
      RestShardsAction restShardsAction0 = new RestShardsAction(settings0, restController0, client0);
      assertNotNull(restShardsAction0);
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      
      HttpVersion httpVersion0 = HttpVersion.HTTP_1_0;
      assertNotNull(httpVersion0);
      assertFalse(httpVersion0.isKeepAliveDefault());
      assertEquals(1, httpVersion0.getMajorVersion());
      assertEquals("HTTP/1.0", httpVersion0.getText());
      assertEquals(0, httpVersion0.getMinorVersion());
      assertEquals("HTTP/1.0", httpVersion0.toString());
      assertEquals("HTTP", httpVersion0.getProtocolName());
      
      HttpMethod httpMethod0 = HttpMethod.POST;
      assertNotNull(httpMethod0);
      assertEquals("POST", httpMethod0.getName());
      assertEquals("POST", httpMethod0.toString());
      
      String string0 = "6";
      DefaultHttpRequest defaultHttpRequest0 = new DefaultHttpRequest(httpVersion0, httpMethod0, string0);
      assertNotNull(defaultHttpRequest0);
      assertFalse(httpVersion0.isKeepAliveDefault());
      assertEquals(1, httpVersion0.getMajorVersion());
      assertEquals("HTTP/1.0", httpVersion0.getText());
      assertEquals(0, httpVersion0.getMinorVersion());
      assertEquals("HTTP/1.0", httpVersion0.toString());
      assertEquals("HTTP", httpVersion0.getProtocolName());
      assertEquals("POST", httpMethod0.getName());
      assertEquals("POST", httpMethod0.toString());
      assertEquals("6", defaultHttpRequest0.getUri());
      
      DefaultLocalServerChannelFactory defaultLocalServerChannelFactory0 = new DefaultLocalServerChannelFactory();
      assertNotNull(defaultLocalServerChannelFactory0);
      
      DefaultChannelPipeline defaultChannelPipeline0 = new DefaultChannelPipeline();
      assertNotNull(defaultChannelPipeline0);
      assertFalse(defaultChannelPipeline0.isAttached());
      
      LocalServerChannel localServerChannel0 = defaultLocalServerChannelFactory0.newChannel(defaultChannelPipeline0);
      assertNotNull(localServerChannel0);
      assertTrue(defaultChannelPipeline0.isAttached());
      assertEquals(1, (int)localServerChannel0.getId());
      assertTrue(localServerChannel0.isReadable());
      assertEquals(0, (int)localServerChannel0.getId());
      
      NettyHttpRequest nettyHttpRequest0 = new NettyHttpRequest(defaultHttpRequest0, localServerChannel0);
      assertNotNull(nettyHttpRequest0);
      assertFalse(httpVersion0.isKeepAliveDefault());
      assertEquals(1, httpVersion0.getMajorVersion());
      assertEquals("HTTP/1.0", httpVersion0.getText());
      assertEquals(0, httpVersion0.getMinorVersion());
      assertEquals("HTTP/1.0", httpVersion0.toString());
      assertEquals("HTTP", httpVersion0.getProtocolName());
      assertEquals("POST", httpMethod0.getName());
      assertEquals("POST", httpMethod0.toString());
      assertEquals("6", defaultHttpRequest0.getUri());
      assertTrue(defaultChannelPipeline0.isAttached());
      assertEquals(1, (int)localServerChannel0.getId());
      assertTrue(localServerChannel0.isReadable());
      assertEquals("6", nettyHttpRequest0.rawPath());
      assertEquals("6", nettyHttpRequest0.uri());
      assertEquals(RestRequest.Method.POST, nettyHttpRequest0.method());
      assertFalse(nettyHttpRequest0.hasContent());
      assertEquals(0, (int)localServerChannel0.getId());
      
      Table table0 = restShardsAction0.getTableWithHeader(nettyHttpRequest0);
      assertNotNull(table0);
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertFalse(httpVersion0.isKeepAliveDefault());
      assertEquals(1, httpVersion0.getMajorVersion());
      assertEquals("HTTP/1.0", httpVersion0.getText());
      assertEquals(0, httpVersion0.getMinorVersion());
      assertEquals("HTTP/1.0", httpVersion0.toString());
      assertEquals("HTTP", httpVersion0.getProtocolName());
      assertEquals("POST", httpMethod0.getName());
      assertEquals("POST", httpMethod0.toString());
      assertEquals("6", defaultHttpRequest0.getUri());
      assertTrue(defaultChannelPipeline0.isAttached());
      assertEquals(1, (int)localServerChannel0.getId());
      assertTrue(localServerChannel0.isReadable());
      assertEquals("6", nettyHttpRequest0.rawPath());
      assertEquals("6", nettyHttpRequest0.uri());
      assertEquals(RestRequest.Method.POST, nettyHttpRequest0.method());
      assertFalse(nettyHttpRequest0.hasContent());
      assertEquals(0, (int)localServerChannel0.getId());
      
      // Undeclared exception!
      restShardsAction0.getTableWithHeader(nettyHttpRequest0);
  }

  @Test(timeout = 11000)
  public void test06()  throws Throwable  {
      Settings settings0 = Settings.EMPTY;
      assertNotNull(settings0);
      
      RestController restController0 = new RestController(settings0);
      assertNotNull(restController0);
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      
      String string0 = restController0.nodeName();
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      
      RestController restController1 = restController0.stop();
      assertNotNull(restController1);
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertEquals(Lifecycle.State.INITIALIZED, restController1.lifecycleState());
      assertSame(restController0, restController1);
      assertSame(restController1, restController0);
      
      Client client0 = null;
      RestShardsAction restShardsAction0 = new RestShardsAction(settings0, restController0, client0);
      assertNotNull(restShardsAction0);
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      
      HttpVersion httpVersion0 = HttpVersion.HTTP_1_0;
      assertNotNull(httpVersion0);
      assertEquals("HTTP/1.0", httpVersion0.toString());
      assertEquals(1, httpVersion0.getMajorVersion());
      assertEquals(0, httpVersion0.getMinorVersion());
      assertEquals("HTTP/1.0", httpVersion0.getText());
      assertFalse(httpVersion0.isKeepAliveDefault());
      assertEquals("HTTP", httpVersion0.getProtocolName());
      
      HttpMethod httpMethod0 = HttpMethod.PATCH;
      assertNotNull(httpMethod0);
      assertEquals("PATCH", httpMethod0.toString());
      assertEquals("PATCH", httpMethod0.getName());
      
      DefaultHttpRequest defaultHttpRequest0 = new DefaultHttpRequest(httpVersion0, httpMethod0, string0);
      assertNotNull(defaultHttpRequest0);
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertEquals("HTTP/1.0", httpVersion0.toString());
      assertEquals(1, httpVersion0.getMajorVersion());
      assertEquals(0, httpVersion0.getMinorVersion());
      assertEquals("HTTP/1.0", httpVersion0.getText());
      assertFalse(httpVersion0.isKeepAliveDefault());
      assertEquals("HTTP", httpVersion0.getProtocolName());
      assertEquals("PATCH", httpMethod0.toString());
      assertEquals("PATCH", httpMethod0.getName());
      assertEquals("", defaultHttpRequest0.getUri());
      
      DefaultChannelPipeline defaultChannelPipeline0 = new DefaultChannelPipeline();
      assertNotNull(defaultChannelPipeline0);
      assertFalse(defaultChannelPipeline0.isAttached());
      
      Channel channel0 = defaultChannelPipeline0.getChannel();
      assertNull(channel0);
      assertFalse(defaultChannelPipeline0.isAttached());
      
      DefaultLocalClientChannelFactory defaultLocalClientChannelFactory0 = new DefaultLocalClientChannelFactory();
      assertNotNull(defaultLocalClientChannelFactory0);
      
      ChannelSink channelSink0 = defaultChannelPipeline0.getSink();
      assertNotNull(channelSink0);
      assertFalse(defaultChannelPipeline0.isAttached());
      
      SocketChannel socketChannel0 = SocketChannel.open();
      assertNotNull(socketChannel0);
      assertFalse(socketChannel0.isConnected());
      assertTrue(socketChannel0.isOpen());
      assertTrue(socketChannel0.isBlocking());
      assertEquals(13, socketChannel0.validOps());
      assertFalse(socketChannel0.isConnectionPending());
      assertFalse(socketChannel0.isRegistered());
      
      NioWorker nioWorker0 = null;
      NioSocketChannel nioSocketChannel0 = new NioSocketChannel(channel0, defaultLocalClientChannelFactory0, defaultChannelPipeline0, channelSink0, socketChannel0, nioWorker0);
      assertNotNull(nioSocketChannel0);
      assertTrue(defaultChannelPipeline0.isAttached());
      assertFalse(socketChannel0.isConnected());
      assertTrue(socketChannel0.isOpen());
      assertTrue(socketChannel0.isBlocking());
      assertEquals(13, socketChannel0.validOps());
      assertFalse(socketChannel0.isConnectionPending());
      assertFalse(socketChannel0.isRegistered());
      assertFalse(nioSocketChannel0.isConnected());
      assertTrue(nioSocketChannel0.isReadable());
      assertTrue(nioSocketChannel0.isOpen());
      assertFalse(nioSocketChannel0.isBound());
      assertEquals(0, (int)nioSocketChannel0.getId());
      
      NettyHttpRequest nettyHttpRequest0 = new NettyHttpRequest(defaultHttpRequest0, nioSocketChannel0);
      assertNotNull(nettyHttpRequest0);
      assertEquals("", nettyHttpRequest0.rawPath());
      assertEquals("", nettyHttpRequest0.uri());
      assertEquals(RestRequest.Method.GET, nettyHttpRequest0.method());
      assertFalse(nettyHttpRequest0.hasContent());
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertEquals("HTTP/1.0", httpVersion0.toString());
      assertEquals(1, httpVersion0.getMajorVersion());
      assertEquals(0, httpVersion0.getMinorVersion());
      assertEquals("HTTP/1.0", httpVersion0.getText());
      assertFalse(httpVersion0.isKeepAliveDefault());
      assertEquals("HTTP", httpVersion0.getProtocolName());
      assertEquals("PATCH", httpMethod0.toString());
      assertEquals("PATCH", httpMethod0.getName());
      assertEquals("", defaultHttpRequest0.getUri());
      assertTrue(defaultChannelPipeline0.isAttached());
      assertFalse(socketChannel0.isConnected());
      assertTrue(socketChannel0.isOpen());
      assertTrue(socketChannel0.isBlocking());
      assertEquals(13, socketChannel0.validOps());
      assertFalse(socketChannel0.isConnectionPending());
      assertFalse(socketChannel0.isRegistered());
      assertFalse(nioSocketChannel0.isConnected());
      assertTrue(nioSocketChannel0.isReadable());
      assertTrue(nioSocketChannel0.isOpen());
      assertFalse(nioSocketChannel0.isBound());
      assertEquals(0, (int)nioSocketChannel0.getId());
      
      NetworkService networkService0 = new NetworkService(settings0);
      assertNotNull(networkService0);
      
      ThreadPool threadPool0 = new ThreadPool(settings0);
      assertNotNull(threadPool0);
      
      PageCacheRecycler pageCacheRecycler0 = new PageCacheRecycler(settings0, threadPool0);
      assertNotNull(pageCacheRecycler0);
      
      NoneCircuitBreakerService noneCircuitBreakerService0 = new NoneCircuitBreakerService();
      assertNotNull(noneCircuitBreakerService0);
      assertEquals(Lifecycle.State.INITIALIZED, noneCircuitBreakerService0.lifecycleState());
      
      BigArrays bigArrays0 = new BigArrays(pageCacheRecycler0, noneCircuitBreakerService0);
      assertNotNull(bigArrays0);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(Lifecycle.State.INITIALIZED, noneCircuitBreakerService0.lifecycleState());
      
      NettyHttpServerTransport nettyHttpServerTransport0 = new NettyHttpServerTransport(settings0, networkService0, bigArrays0, threadPool0);
      assertNotNull(nettyHttpServerTransport0);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(Lifecycle.State.INITIALIZED, noneCircuitBreakerService0.lifecycleState());
      assertEquals(Lifecycle.State.INITIALIZED, nettyHttpServerTransport0.lifecycleState());
      
      boolean boolean0 = false;
      NettyHttpChannel nettyHttpChannel0 = new NettyHttpChannel(nettyHttpServerTransport0, nettyHttpRequest0, boolean0);
      assertNotNull(nettyHttpChannel0);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertEquals("HTTP/1.0", httpVersion0.toString());
      assertEquals(1, httpVersion0.getMajorVersion());
      assertEquals(0, httpVersion0.getMinorVersion());
      assertEquals("HTTP/1.0", httpVersion0.getText());
      assertFalse(httpVersion0.isKeepAliveDefault());
      assertEquals("HTTP", httpVersion0.getProtocolName());
      assertEquals("PATCH", httpMethod0.toString());
      assertEquals("PATCH", httpMethod0.getName());
      assertEquals("", defaultHttpRequest0.getUri());
      assertTrue(defaultChannelPipeline0.isAttached());
      assertFalse(socketChannel0.isConnected());
      assertTrue(socketChannel0.isOpen());
      assertTrue(socketChannel0.isBlocking());
      assertEquals(13, socketChannel0.validOps());
      assertFalse(socketChannel0.isConnectionPending());
      assertFalse(socketChannel0.isRegistered());
      assertFalse(nioSocketChannel0.isConnected());
      assertTrue(nioSocketChannel0.isReadable());
      assertTrue(nioSocketChannel0.isOpen());
      assertFalse(nioSocketChannel0.isBound());
      assertEquals(0, (int)nioSocketChannel0.getId());
      assertEquals("", nettyHttpRequest0.rawPath());
      assertEquals("", nettyHttpRequest0.uri());
      assertEquals(RestRequest.Method.GET, nettyHttpRequest0.method());
      assertFalse(nettyHttpRequest0.hasContent());
      assertEquals(Lifecycle.State.INITIALIZED, noneCircuitBreakerService0.lifecycleState());
      assertEquals(Lifecycle.State.INITIALIZED, nettyHttpServerTransport0.lifecycleState());
      assertFalse(nettyHttpChannel0.detailedErrorsEnabled());
      
      // Undeclared exception!
      try { 
        restShardsAction0.doRequest(nettyHttpRequest0, nettyHttpChannel0, client0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.rest.action.cat.RestShardsAction", e);
      }
  }

  @Test(timeout = 11000)
  public void test07()  throws Throwable  {
      ToXContent.Params toXContent_Params0 = ToXContent.EMPTY_PARAMS;
      assertNotNull(toXContent_Params0);
      
      Settings settings0 = Settings.EMPTY;
      assertNotNull(settings0);
      
      Settings settings1 = SettingsFilter.filterSettings(toXContent_Params0, settings0);
      assertNotNull(settings1);
      assertSame(settings0, settings1);
      assertSame(settings1, settings0);
      
      RestController restController0 = new RestController(settings1);
      assertNotNull(restController0);
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      
      Client client0 = null;
      RestShardsAction restShardsAction0 = new RestShardsAction(settings1, restController0, client0);
      assertNotNull(restShardsAction0);
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      
      String string0 = "";
      restController0.close();
      assertEquals(Lifecycle.State.CLOSED, restController0.lifecycleState());
      assertSame(settings0, settings1);
      assertSame(settings1, settings0);
      
      StringBuilder stringBuilder0 = new StringBuilder(string0);
      assertNotNull(stringBuilder0);
      assertEquals("", stringBuilder0.toString());
      
      int int0 = 0;
      StringBuilder stringBuilder1 = stringBuilder0.insert(int0, (CharSequence) string0);
      assertNotNull(stringBuilder1);
      assertEquals("", stringBuilder0.toString());
      assertEquals("", stringBuilder1.toString());
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      
      float float0 = (-2675.6694F);
      StringBuilder stringBuilder2 = stringBuilder0.append(float0);
      assertNotNull(stringBuilder2);
      assertEquals("-2675.6694", stringBuilder0.toString());
      assertEquals("-2675.6694", stringBuilder2.toString());
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder2, stringBuilder1);
      assertSame(stringBuilder2, stringBuilder0);
      
      restShardsAction0.documentation(stringBuilder2);
      assertEquals(Lifecycle.State.CLOSED, restController0.lifecycleState());
      assertEquals("-2675.6694/_cat/shards\n/_cat/shards/{index}\n", stringBuilder0.toString());
      assertEquals("-2675.6694/_cat/shards\n/_cat/shards/{index}\n", stringBuilder2.toString());
      assertSame(settings0, settings1);
      assertSame(settings1, settings0);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder2, stringBuilder1);
      assertSame(stringBuilder2, stringBuilder0);
      
      int int1 = 2614;
      boolean boolean0 = false;
      HttpVersion httpVersion0 = null;
      try {
        httpVersion0 = new HttpVersion(string0, int1, int1, boolean0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // empty protocolName
         //
         verifyException("org.jboss.netty.handler.codec.http.HttpVersion", e);
      }
  }

  @Test(timeout = 11000)
  public void test08()  throws Throwable  {
      Settings settings0 = Settings.Builder.EMPTY_SETTINGS;
      assertNotNull(settings0);
      
      RestController restController0 = new RestController(settings0);
      assertNotNull(restController0);
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      
      RestFilter restFilter0 = mock(RestFilter.class, new ViolatedAssumptionAnswer());
      RestFilterChain restFilterChain0 = restController0.filterChain(restFilter0);
      assertNotNull(restFilterChain0);
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      
      Client client0 = null;
      RestShardsAction restShardsAction0 = new RestShardsAction(settings0, restController0, client0);
      assertNotNull(restShardsAction0);
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      
      StringBuilder stringBuilder0 = null;
      // Undeclared exception!
      try { 
        restShardsAction0.documentation(stringBuilder0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.rest.action.cat.RestShardsAction", e);
      }
  }

  @Test(timeout = 11000)
  public void test09()  throws Throwable  {
      Settings settings0 = Settings.EMPTY;
      assertNotNull(settings0);
      
      RestController restController0 = new RestController(settings0);
      assertNotNull(restController0);
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      
      Client client0 = null;
      RestShardsAction restShardsAction0 = new RestShardsAction(settings0, restController0, client0);
      assertNotNull(restShardsAction0);
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      
      HttpVersion httpVersion0 = HttpVersion.HTTP_1_0;
      assertNotNull(httpVersion0);
      assertEquals(1, httpVersion0.getMajorVersion());
      assertEquals("HTTP", httpVersion0.getProtocolName());
      assertEquals("HTTP/1.0", httpVersion0.toString());
      assertEquals(0, httpVersion0.getMinorVersion());
      assertEquals("HTTP/1.0", httpVersion0.getText());
      assertFalse(httpVersion0.isKeepAliveDefault());
      
      HttpMethod httpMethod0 = HttpMethod.POST;
      assertNotNull(httpMethod0);
      assertEquals("POST", httpMethod0.getName());
      assertEquals("POST", httpMethod0.toString());
      
      String string0 = "6";
      DefaultHttpRequest defaultHttpRequest0 = new DefaultHttpRequest(httpVersion0, httpMethod0, string0);
      assertNotNull(defaultHttpRequest0);
      assertEquals(1, httpVersion0.getMajorVersion());
      assertEquals("HTTP", httpVersion0.getProtocolName());
      assertEquals("HTTP/1.0", httpVersion0.toString());
      assertEquals(0, httpVersion0.getMinorVersion());
      assertEquals("HTTP/1.0", httpVersion0.getText());
      assertFalse(httpVersion0.isKeepAliveDefault());
      assertEquals("POST", httpMethod0.getName());
      assertEquals("POST", httpMethod0.toString());
      assertEquals("6", defaultHttpRequest0.getUri());
      
      DefaultLocalServerChannelFactory defaultLocalServerChannelFactory0 = new DefaultLocalServerChannelFactory();
      assertNotNull(defaultLocalServerChannelFactory0);
      
      DefaultChannelPipeline defaultChannelPipeline0 = new DefaultChannelPipeline();
      assertNotNull(defaultChannelPipeline0);
      assertFalse(defaultChannelPipeline0.isAttached());
      
      LocalServerChannel localServerChannel0 = defaultLocalServerChannelFactory0.newChannel(defaultChannelPipeline0);
      assertNotNull(localServerChannel0);
      assertTrue(defaultChannelPipeline0.isAttached());
      assertEquals(2, (int)localServerChannel0.getId());
      assertTrue(localServerChannel0.isReadable());
      
      NettyHttpRequest nettyHttpRequest0 = new NettyHttpRequest(defaultHttpRequest0, localServerChannel0);
      assertNotNull(nettyHttpRequest0);
      assertEquals(1, httpVersion0.getMajorVersion());
      assertEquals("HTTP", httpVersion0.getProtocolName());
      assertEquals("HTTP/1.0", httpVersion0.toString());
      assertEquals(0, httpVersion0.getMinorVersion());
      assertEquals("HTTP/1.0", httpVersion0.getText());
      assertFalse(httpVersion0.isKeepAliveDefault());
      assertEquals("POST", httpMethod0.getName());
      assertEquals("POST", httpMethod0.toString());
      assertEquals("6", defaultHttpRequest0.getUri());
      assertTrue(defaultChannelPipeline0.isAttached());
      assertEquals(2, (int)localServerChannel0.getId());
      assertTrue(localServerChannel0.isReadable());
      assertFalse(nettyHttpRequest0.hasContent());
      assertEquals(RestRequest.Method.POST, nettyHttpRequest0.method());
      assertEquals("6", nettyHttpRequest0.uri());
      assertEquals("6", nettyHttpRequest0.rawPath());
      
      Table table0 = restShardsAction0.getTableWithHeader(nettyHttpRequest0);
      assertNotNull(table0);
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertEquals(1, httpVersion0.getMajorVersion());
      assertEquals("HTTP", httpVersion0.getProtocolName());
      assertEquals("HTTP/1.0", httpVersion0.toString());
      assertEquals(0, httpVersion0.getMinorVersion());
      assertEquals("HTTP/1.0", httpVersion0.getText());
      assertFalse(httpVersion0.isKeepAliveDefault());
      assertEquals("POST", httpMethod0.getName());
      assertEquals("POST", httpMethod0.toString());
      assertEquals("6", defaultHttpRequest0.getUri());
      assertTrue(defaultChannelPipeline0.isAttached());
      assertEquals(2, (int)localServerChannel0.getId());
      assertTrue(localServerChannel0.isReadable());
      assertFalse(nettyHttpRequest0.hasContent());
      assertEquals(RestRequest.Method.POST, nettyHttpRequest0.method());
      assertEquals("6", nettyHttpRequest0.uri());
      assertEquals("6", nettyHttpRequest0.rawPath());
      
      ClusterStateResponse clusterStateResponse0 = null;
      List<String> list0 = defaultChannelPipeline0.getNames();
      assertFalse(list0.contains(string0));
      assertNotNull(list0);
      assertTrue(defaultChannelPipeline0.isAttached());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      IndicesStatsResponse indicesStatsResponse0 = mock(IndicesStatsResponse.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      restShardsAction0.buildTable(nettyHttpRequest0, clusterStateResponse0, indicesStatsResponse0);
  }

  @Test(timeout = 11000)
  public void test10()  throws Throwable  {
      Settings settings0 = Settings.EMPTY;
      assertNotNull(settings0);
      
      RestController restController0 = new RestController(settings0);
      assertNotNull(restController0);
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      
      String string0 = restController0.nodeName();
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      
      RestController restController1 = restController0.stop();
      assertNotNull(restController1);
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertEquals(Lifecycle.State.INITIALIZED, restController1.lifecycleState());
      assertSame(restController0, restController1);
      assertSame(restController1, restController0);
      
      Client client0 = null;
      RestShardsAction restShardsAction0 = new RestShardsAction(settings0, restController0, client0);
      assertNotNull(restShardsAction0);
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      
      HttpVersion httpVersion0 = HttpVersion.HTTP_1_0;
      assertNotNull(httpVersion0);
      assertEquals(1, httpVersion0.getMajorVersion());
      assertEquals("HTTP", httpVersion0.getProtocolName());
      assertEquals("HTTP/1.0", httpVersion0.toString());
      assertEquals("HTTP/1.0", httpVersion0.getText());
      assertFalse(httpVersion0.isKeepAliveDefault());
      assertEquals(0, httpVersion0.getMinorVersion());
      
      HttpMethod httpMethod0 = HttpMethod.PATCH;
      assertNotNull(httpMethod0);
      assertEquals("PATCH", httpMethod0.toString());
      assertEquals("PATCH", httpMethod0.getName());
      
      DefaultHttpRequest defaultHttpRequest0 = new DefaultHttpRequest(httpVersion0, httpMethod0, string0);
      assertNotNull(defaultHttpRequest0);
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertEquals(1, httpVersion0.getMajorVersion());
      assertEquals("HTTP", httpVersion0.getProtocolName());
      assertEquals("HTTP/1.0", httpVersion0.toString());
      assertEquals("HTTP/1.0", httpVersion0.getText());
      assertFalse(httpVersion0.isKeepAliveDefault());
      assertEquals(0, httpVersion0.getMinorVersion());
      assertEquals("PATCH", httpMethod0.toString());
      assertEquals("PATCH", httpMethod0.getName());
      assertEquals("", defaultHttpRequest0.getUri());
      
      DefaultChannelPipeline defaultChannelPipeline0 = new DefaultChannelPipeline();
      assertNotNull(defaultChannelPipeline0);
      assertFalse(defaultChannelPipeline0.isAttached());
      
      Channel channel0 = defaultChannelPipeline0.getChannel();
      assertNull(channel0);
      assertFalse(defaultChannelPipeline0.isAttached());
      
      DefaultLocalClientChannelFactory defaultLocalClientChannelFactory0 = new DefaultLocalClientChannelFactory();
      assertNotNull(defaultLocalClientChannelFactory0);
      
      ChannelSink channelSink0 = defaultChannelPipeline0.getSink();
      assertNotNull(channelSink0);
      assertFalse(defaultChannelPipeline0.isAttached());
      
      SocketChannel socketChannel0 = SocketChannel.open();
      assertNotNull(socketChannel0);
      assertTrue(socketChannel0.isBlocking());
      assertFalse(socketChannel0.isConnected());
      assertFalse(socketChannel0.isRegistered());
      assertEquals(13, socketChannel0.validOps());
      assertTrue(socketChannel0.isOpen());
      assertFalse(socketChannel0.isConnectionPending());
      
      NioWorker nioWorker0 = null;
      NioSocketChannel nioSocketChannel0 = new NioSocketChannel(channel0, defaultLocalClientChannelFactory0, defaultChannelPipeline0, channelSink0, socketChannel0, nioWorker0);
      assertNotNull(nioSocketChannel0);
      assertTrue(defaultChannelPipeline0.isAttached());
      assertTrue(socketChannel0.isBlocking());
      assertFalse(socketChannel0.isConnected());
      assertFalse(socketChannel0.isRegistered());
      assertEquals(13, socketChannel0.validOps());
      assertTrue(socketChannel0.isOpen());
      assertFalse(socketChannel0.isConnectionPending());
      assertFalse(nioSocketChannel0.isConnected());
      assertTrue(nioSocketChannel0.isOpen());
      assertTrue(nioSocketChannel0.isReadable());
      assertFalse(nioSocketChannel0.isBound());
      assertEquals(0, (int)nioSocketChannel0.getId());
      
      NettyHttpRequest nettyHttpRequest0 = new NettyHttpRequest(defaultHttpRequest0, nioSocketChannel0);
      assertNotNull(nettyHttpRequest0);
      assertEquals("", nettyHttpRequest0.rawPath());
      assertEquals(RestRequest.Method.GET, nettyHttpRequest0.method());
      assertFalse(nettyHttpRequest0.hasContent());
      assertEquals("", nettyHttpRequest0.uri());
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertEquals(1, httpVersion0.getMajorVersion());
      assertEquals("HTTP", httpVersion0.getProtocolName());
      assertEquals("HTTP/1.0", httpVersion0.toString());
      assertEquals("HTTP/1.0", httpVersion0.getText());
      assertFalse(httpVersion0.isKeepAliveDefault());
      assertEquals(0, httpVersion0.getMinorVersion());
      assertEquals("PATCH", httpMethod0.toString());
      assertEquals("PATCH", httpMethod0.getName());
      assertEquals("", defaultHttpRequest0.getUri());
      assertTrue(defaultChannelPipeline0.isAttached());
      assertTrue(socketChannel0.isBlocking());
      assertFalse(socketChannel0.isConnected());
      assertFalse(socketChannel0.isRegistered());
      assertEquals(13, socketChannel0.validOps());
      assertTrue(socketChannel0.isOpen());
      assertFalse(socketChannel0.isConnectionPending());
      assertFalse(nioSocketChannel0.isConnected());
      assertTrue(nioSocketChannel0.isOpen());
      assertTrue(nioSocketChannel0.isReadable());
      assertFalse(nioSocketChannel0.isBound());
      assertEquals(0, (int)nioSocketChannel0.getId());
      
      NetworkService networkService0 = new NetworkService(settings0);
      assertNotNull(networkService0);
      
      ThreadPool threadPool0 = new ThreadPool(settings0);
      assertNotNull(threadPool0);
      
      PageCacheRecycler pageCacheRecycler0 = new PageCacheRecycler(settings0, threadPool0);
      assertNotNull(pageCacheRecycler0);
      
      NoneCircuitBreakerService noneCircuitBreakerService0 = new NoneCircuitBreakerService();
      assertNotNull(noneCircuitBreakerService0);
      assertEquals(Lifecycle.State.INITIALIZED, noneCircuitBreakerService0.lifecycleState());
      
      BigArrays bigArrays0 = new BigArrays(pageCacheRecycler0, noneCircuitBreakerService0);
      assertNotNull(bigArrays0);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(Lifecycle.State.INITIALIZED, noneCircuitBreakerService0.lifecycleState());
      
      NettyHttpServerTransport nettyHttpServerTransport0 = new NettyHttpServerTransport(settings0, networkService0, bigArrays0, threadPool0);
      assertNotNull(nettyHttpServerTransport0);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(Lifecycle.State.INITIALIZED, noneCircuitBreakerService0.lifecycleState());
      assertEquals(Lifecycle.State.INITIALIZED, nettyHttpServerTransport0.lifecycleState());
      
      ClusterStateResponse clusterStateResponse0 = null;
      IndicesStatsResponse indicesStatsResponse0 = mock(IndicesStatsResponse.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        restShardsAction0.buildTable(nettyHttpRequest0, clusterStateResponse0, indicesStatsResponse0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.rest.action.cat.RestShardsAction", e);
      }
  }

  @Test(timeout = 11000)
  public void test11()  throws Throwable  {
      ToXContent.Params toXContent_Params0 = ToXContent.EMPTY_PARAMS;
      assertNotNull(toXContent_Params0);
      
      Settings settings0 = Settings.EMPTY;
      assertNotNull(settings0);
      
      Settings settings1 = SettingsFilter.filterSettings(toXContent_Params0, settings0);
      assertNotNull(settings1);
      assertSame(settings0, settings1);
      assertSame(settings1, settings0);
      
      RestController restController0 = new RestController(settings1);
      assertNotNull(restController0);
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      
      Client client0 = null;
      RestShardsAction restShardsAction0 = new RestShardsAction(settings1, restController0, client0);
      assertNotNull(restShardsAction0);
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      
      String string0 = "x{";
      restController0.close();
      assertEquals(Lifecycle.State.CLOSED, restController0.lifecycleState());
      assertSame(settings0, settings1);
      assertSame(settings1, settings0);
      
      StringBuilder stringBuilder0 = new StringBuilder(string0);
      assertNotNull(stringBuilder0);
      assertEquals("x{", stringBuilder0.toString());
      
      int int0 = 0;
      StringBuilder stringBuilder1 = stringBuilder0.insert(int0, (CharSequence) string0);
      assertNotNull(stringBuilder1);
      assertEquals("x{x{", stringBuilder0.toString());
      assertEquals("x{x{", stringBuilder1.toString());
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      
      StringBuilder stringBuilder2 = stringBuilder0.append((float) int0);
      assertNotNull(stringBuilder2);
      assertEquals("x{x{0.0", stringBuilder0.toString());
      assertEquals("x{x{0.0", stringBuilder2.toString());
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder2, stringBuilder0);
      assertSame(stringBuilder2, stringBuilder1);
      
      restShardsAction0.documentation(stringBuilder2);
      assertEquals(Lifecycle.State.CLOSED, restController0.lifecycleState());
      assertEquals("x{x{0.0/_cat/shards\n/_cat/shards/{index}\n", stringBuilder0.toString());
      assertEquals("x{x{0.0/_cat/shards\n/_cat/shards/{index}\n", stringBuilder2.toString());
      assertSame(settings0, settings1);
      assertSame(settings1, settings0);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder2, stringBuilder0);
      assertSame(stringBuilder2, stringBuilder1);
      
      int int1 = 2614;
      boolean boolean0 = false;
      HttpVersion httpVersion0 = new HttpVersion(string0, int1, int1, boolean0);
      assertNotNull(httpVersion0);
      assertEquals(2614, httpVersion0.getMinorVersion());
      assertEquals("X{/2614.2614", httpVersion0.getText());
      assertEquals(2614, httpVersion0.getMajorVersion());
      assertEquals("X{/2614.2614", httpVersion0.toString());
      assertFalse(httpVersion0.isKeepAliveDefault());
      assertEquals("X{", httpVersion0.getProtocolName());
      assertFalse(int1 == int0);
      
      String string1 = " rP";
      int int2 = 437;
      HttpVersion httpVersion1 = new HttpVersion(string1, int0, int2, boolean0);
      assertNotNull(httpVersion1);
      assertEquals("RP/0.437", httpVersion1.toString());
      assertEquals(437, httpVersion1.getMinorVersion());
      assertFalse(httpVersion1.isKeepAliveDefault());
      assertEquals("RP", httpVersion1.getProtocolName());
      assertEquals(0, httpVersion1.getMajorVersion());
      assertEquals("RP/0.437", httpVersion1.getText());
      assertFalse(string1.equals((Object)string0));
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(httpVersion1.equals((Object)httpVersion0));
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      
      HttpMethod httpMethod0 = HttpMethod.CONNECT;
      assertNotNull(httpMethod0);
      assertEquals("CONNECT", httpMethod0.toString());
      assertEquals("CONNECT", httpMethod0.getName());
      
      DefaultHttpRequest defaultHttpRequest0 = new DefaultHttpRequest(httpVersion1, httpMethod0, string1);
      assertNotNull(defaultHttpRequest0);
      assertEquals("RP/0.437", httpVersion1.toString());
      assertEquals(437, httpVersion1.getMinorVersion());
      assertFalse(httpVersion1.isKeepAliveDefault());
      assertEquals("RP", httpVersion1.getProtocolName());
      assertEquals(0, httpVersion1.getMajorVersion());
      assertEquals("RP/0.437", httpVersion1.getText());
      assertEquals("CONNECT", httpMethod0.toString());
      assertEquals("CONNECT", httpMethod0.getName());
      assertEquals(" rP", defaultHttpRequest0.getUri());
      assertFalse(string1.equals((Object)string0));
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(httpVersion1.equals((Object)httpVersion0));
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      
      Channel channel0 = null;
      NettyHttpRequest nettyHttpRequest0 = new NettyHttpRequest(defaultHttpRequest0, channel0);
      assertNotNull(nettyHttpRequest0);
      assertEquals("RP/0.437", httpVersion1.toString());
      assertEquals(437, httpVersion1.getMinorVersion());
      assertFalse(httpVersion1.isKeepAliveDefault());
      assertEquals("RP", httpVersion1.getProtocolName());
      assertEquals(0, httpVersion1.getMajorVersion());
      assertEquals("RP/0.437", httpVersion1.getText());
      assertEquals("CONNECT", httpMethod0.toString());
      assertEquals("CONNECT", httpMethod0.getName());
      assertEquals(" rP", defaultHttpRequest0.getUri());
      assertEquals(" rP", nettyHttpRequest0.uri());
      assertEquals(" rP", nettyHttpRequest0.rawPath());
      assertEquals(RestRequest.Method.GET, nettyHttpRequest0.method());
      assertFalse(nettyHttpRequest0.hasContent());
      assertFalse(string1.equals((Object)string0));
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(httpVersion1.equals((Object)httpVersion0));
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      
      ClusterName clusterName0 = new ClusterName(string1);
      assertNotNull(clusterName0);
      assertEquals(" rP", clusterName0.value());
      assertFalse(string1.equals((Object)string0));
      
      ClusterState clusterState0 = ClusterState.PROTO;
      assertNotNull(clusterState0);
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertEquals(0L, clusterState0.getVersion());
      assertFalse(clusterState0.wasReadFromDiff());
      assertEquals("AwAAAAQAQACFAAAABgAAAA", clusterState0.stateUUID());
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState0.status());
      assertEquals(0L, clusterState0.version());
      
      ClusterStateResponse clusterStateResponse0 = new ClusterStateResponse(clusterName0, clusterState0);
      assertNotNull(clusterStateResponse0);
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertEquals(" rP", clusterName0.value());
      assertEquals(0L, clusterState0.getVersion());
      assertFalse(clusterState0.wasReadFromDiff());
      assertEquals("AwAAAAQAQACFAAAABgAAAA", clusterState0.stateUUID());
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState0.status());
      assertEquals(0L, clusterState0.version());
      assertFalse(string1.equals((Object)string0));
      
      IndicesStatsResponse indicesStatsResponse0 = mock(IndicesStatsResponse.class, new ViolatedAssumptionAnswer());
      Table table0 = restShardsAction0.buildTable(nettyHttpRequest0, clusterStateResponse0, indicesStatsResponse0);
      assertNotNull(table0);
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertEquals(Lifecycle.State.CLOSED, restController0.lifecycleState());
      assertEquals("RP/0.437", httpVersion1.toString());
      assertEquals(437, httpVersion1.getMinorVersion());
      assertFalse(httpVersion1.isKeepAliveDefault());
      assertEquals("RP", httpVersion1.getProtocolName());
      assertEquals(0, httpVersion1.getMajorVersion());
      assertEquals("RP/0.437", httpVersion1.getText());
      assertEquals("CONNECT", httpMethod0.toString());
      assertEquals("CONNECT", httpMethod0.getName());
      assertEquals(" rP", defaultHttpRequest0.getUri());
      assertEquals(" rP", nettyHttpRequest0.uri());
      assertEquals(" rP", nettyHttpRequest0.rawPath());
      assertEquals(RestRequest.Method.GET, nettyHttpRequest0.method());
      assertFalse(nettyHttpRequest0.hasContent());
      assertEquals(" rP", clusterName0.value());
      assertEquals(0L, clusterState0.getVersion());
      assertFalse(clusterState0.wasReadFromDiff());
      assertEquals("AwAAAAQAQACFAAAABgAAAA", clusterState0.stateUUID());
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState0.status());
      assertEquals(0L, clusterState0.version());
      assertSame(settings0, settings1);
      assertSame(settings1, settings0);
      assertNotSame(string1, string0);
      assertNotSame(httpVersion1, httpVersion0);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(string1.equals((Object)string0));
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(httpVersion1.equals((Object)httpVersion0));
  }

  @Test(timeout = 11000)
  public void test12()  throws Throwable  {
      Settings settings0 = Settings.EMPTY;
      assertNotNull(settings0);
      
      RestController restController0 = new RestController(settings0);
      assertNotNull(restController0);
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      
      Client client0 = null;
      RestShardsAction restShardsAction0 = new RestShardsAction(settings0, restController0, client0);
      assertNotNull(restShardsAction0);
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      
      int int0 = 0;
      boolean boolean0 = false;
      String string0 = " rP";
      HttpVersion httpVersion0 = new HttpVersion(string0, int0, int0, boolean0);
      assertNotNull(httpVersion0);
      assertEquals(0, httpVersion0.getMajorVersion());
      assertEquals("RP/0.0", httpVersion0.getText());
      assertEquals("RP/0.0", httpVersion0.toString());
      assertFalse(httpVersion0.isKeepAliveDefault());
      assertEquals("RP", httpVersion0.getProtocolName());
      assertEquals(0, httpVersion0.getMinorVersion());
      
      HttpMethod httpMethod0 = HttpMethod.CONNECT;
      assertNotNull(httpMethod0);
      assertEquals("CONNECT", httpMethod0.getName());
      assertEquals("CONNECT", httpMethod0.toString());
      
      DefaultHttpRequest defaultHttpRequest0 = new DefaultHttpRequest(httpVersion0, httpMethod0, string0);
      assertNotNull(defaultHttpRequest0);
      assertEquals(0, httpVersion0.getMajorVersion());
      assertEquals("RP/0.0", httpVersion0.getText());
      assertEquals("RP/0.0", httpVersion0.toString());
      assertFalse(httpVersion0.isKeepAliveDefault());
      assertEquals("RP", httpVersion0.getProtocolName());
      assertEquals(0, httpVersion0.getMinorVersion());
      assertEquals("CONNECT", httpMethod0.getName());
      assertEquals("CONNECT", httpMethod0.toString());
      assertEquals(" rP", defaultHttpRequest0.getUri());
      
      Channel channel0 = null;
      NettyHttpRequest nettyHttpRequest0 = new NettyHttpRequest(defaultHttpRequest0, channel0);
      assertNotNull(nettyHttpRequest0);
      assertEquals(0, httpVersion0.getMajorVersion());
      assertEquals("RP/0.0", httpVersion0.getText());
      assertEquals("RP/0.0", httpVersion0.toString());
      assertFalse(httpVersion0.isKeepAliveDefault());
      assertEquals("RP", httpVersion0.getProtocolName());
      assertEquals(0, httpVersion0.getMinorVersion());
      assertEquals("CONNECT", httpMethod0.getName());
      assertEquals("CONNECT", httpMethod0.toString());
      assertEquals(" rP", defaultHttpRequest0.getUri());
      assertEquals(" rP", nettyHttpRequest0.rawPath());
      assertFalse(nettyHttpRequest0.hasContent());
      assertEquals(RestRequest.Method.GET, nettyHttpRequest0.method());
      assertEquals(" rP", nettyHttpRequest0.uri());
      
      ClusterName clusterName0 = new ClusterName(string0);
      assertNotNull(clusterName0);
      assertEquals(" rP", clusterName0.value());
      
      ClusterState clusterState0 = ClusterState.PROTO;
      assertNotNull(clusterState0);
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState0.status());
      assertEquals(0L, clusterState0.version());
      assertEquals("AwAAAAQAQACFAAAABgAAAA", clusterState0.stateUUID());
      assertFalse(clusterState0.wasReadFromDiff());
      assertEquals(0L, clusterState0.getVersion());
      
      ClusterStateResponse clusterStateResponse0 = new ClusterStateResponse(clusterName0, clusterState0);
      assertNotNull(clusterStateResponse0);
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertEquals(" rP", clusterName0.value());
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState0.status());
      assertEquals(0L, clusterState0.version());
      assertEquals("AwAAAAQAQACFAAAABgAAAA", clusterState0.stateUUID());
      assertFalse(clusterState0.wasReadFromDiff());
      assertEquals(0L, clusterState0.getVersion());
      
      IndicesStatsResponse indicesStatsResponse0 = mock(IndicesStatsResponse.class, new ViolatedAssumptionAnswer());
      Table table0 = restShardsAction0.buildTable(nettyHttpRequest0, clusterStateResponse0, indicesStatsResponse0);
      assertNotNull(table0);
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertEquals(0, httpVersion0.getMajorVersion());
      assertEquals("RP/0.0", httpVersion0.getText());
      assertEquals("RP/0.0", httpVersion0.toString());
      assertFalse(httpVersion0.isKeepAliveDefault());
      assertEquals("RP", httpVersion0.getProtocolName());
      assertEquals(0, httpVersion0.getMinorVersion());
      assertEquals("CONNECT", httpMethod0.getName());
      assertEquals("CONNECT", httpMethod0.toString());
      assertEquals(" rP", defaultHttpRequest0.getUri());
      assertEquals(" rP", nettyHttpRequest0.rawPath());
      assertFalse(nettyHttpRequest0.hasContent());
      assertEquals(RestRequest.Method.GET, nettyHttpRequest0.method());
      assertEquals(" rP", nettyHttpRequest0.uri());
      assertEquals(" rP", clusterName0.value());
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState0.status());
      assertEquals(0L, clusterState0.version());
      assertEquals("AwAAAAQAQACFAAAABgAAAA", clusterState0.stateUUID());
      assertFalse(clusterState0.wasReadFromDiff());
      assertEquals(0L, clusterState0.getVersion());
  }

  @Test(timeout = 11000)
  public void test13()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
      assertFalse(boolean0);
      
      long long0 = 10080L;
      System.setCurrentTimeMillis(long0);
      int int0 = 3310;
      boolean boolean1 = FileSystemHandling.createFolder(evoSuiteFile0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Random.setNextRandom(int0);
      System.setCurrentTimeMillis(int0);
      Random.setNextRandom(int0);
      System.setCurrentTimeMillis(long0);
      Settings settings0 = Settings.Builder.EMPTY_SETTINGS;
      assertNotNull(settings0);
      
      RestController restController0 = new RestController(settings0);
      assertNotNull(restController0);
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      
      ThreadPool threadPool0 = new ThreadPool(settings0);
      assertNotNull(threadPool0);
      
      MapperService mapperService0 = null;
      IndexFieldDataService indexFieldDataService0 = null;
      String[] stringArray0 = new String[7];
      String string0 = "?O|~zkLYL!<W'E";
      stringArray0[0] = string0;
      String string1 = "";
      stringArray0[1] = string1;
      String string2 = "";
      stringArray0[2] = string2;
      String string3 = "";
      stringArray0[3] = string3;
      String string4 = "get.current";
      stringArray0[4] = string4;
      String string5 = "VvYM";
      stringArray0[5] = string5;
      String string6 = "H<f-]}[g(v";
      stringArray0[6] = string6;
      SearchLookup searchLookup0 = new SearchLookup(mapperService0, indexFieldDataService0, stringArray0);
      assertNotNull(searchLookup0);
      assertEquals(7, stringArray0.length);
      
      SourceLookup sourceLookup0 = searchLookup0.source();
      assertNotNull(sourceLookup0);
      assertNull(sourceLookup0.sourceContentType());
      assertEquals(7, stringArray0.length);
      
      NodeClient nodeClient0 = new NodeClient(settings0, threadPool0, sourceLookup0);
      assertNotNull(nodeClient0);
      assertNull(sourceLookup0.sourceContentType());
      assertEquals(7, stringArray0.length);
      
      Client client0 = nodeClient0.filterWithHeader(sourceLookup0);
      assertNotNull(client0);
      assertNull(sourceLookup0.sourceContentType());
      assertEquals(7, stringArray0.length);
      
      RestShardsAction restShardsAction0 = new RestShardsAction(settings0, restController0, client0);
      assertNotNull(restShardsAction0);
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertNull(sourceLookup0.sourceContentType());
      assertEquals(7, stringArray0.length);
      
      HttpVersion httpVersion0 = HttpVersion.HTTP_1_1;
      assertNotNull(httpVersion0);
      assertEquals("HTTP/1.1", httpVersion0.getText());
      assertEquals(1, httpVersion0.getMajorVersion());
      assertEquals("HTTP", httpVersion0.getProtocolName());
      assertEquals(1, httpVersion0.getMinorVersion());
      assertTrue(httpVersion0.isKeepAliveDefault());
      assertEquals("HTTP/1.1", httpVersion0.toString());
      
      HttpMethod httpMethod0 = HttpMethod.TRACE;
      assertNotNull(httpMethod0);
      assertEquals("TRACE", httpMethod0.toString());
      assertEquals("TRACE", httpMethod0.getName());
      
      DefaultHttpRequest defaultHttpRequest0 = new DefaultHttpRequest(httpVersion0, httpMethod0, stringArray0[2]);
      assertNotNull(defaultHttpRequest0);
      assertEquals("HTTP/1.1", httpVersion0.getText());
      assertEquals(1, httpVersion0.getMajorVersion());
      assertEquals("HTTP", httpVersion0.getProtocolName());
      assertEquals(1, httpVersion0.getMinorVersion());
      assertTrue(httpVersion0.isKeepAliveDefault());
      assertEquals("HTTP/1.1", httpVersion0.toString());
      assertEquals("TRACE", httpMethod0.toString());
      assertEquals("TRACE", httpMethod0.getName());
      assertEquals("", defaultHttpRequest0.getUri());
      assertEquals(7, stringArray0.length);
      
      DefaultChannelPipeline defaultChannelPipeline0 = new DefaultChannelPipeline();
      assertNotNull(defaultChannelPipeline0);
      assertFalse(defaultChannelPipeline0.isAttached());
      
      Channel channel0 = defaultChannelPipeline0.getChannel();
      assertNull(channel0);
      assertFalse(defaultChannelPipeline0.isAttached());
      
      DefaultLocalServerChannelFactory defaultLocalServerChannelFactory0 = new DefaultLocalServerChannelFactory();
      assertNotNull(defaultLocalServerChannelFactory0);
      
      ChannelSink channelSink0 = defaultChannelPipeline0.getSink();
      assertNotNull(channelSink0);
      assertFalse(defaultChannelPipeline0.isAttached());
      
      SocketChannel socketChannel0 = SocketChannel.open();
      assertNotNull(socketChannel0);
      assertFalse(socketChannel0.isConnectionPending());
      assertEquals(13, socketChannel0.validOps());
      assertFalse(socketChannel0.isRegistered());
      assertTrue(socketChannel0.isBlocking());
      assertTrue(socketChannel0.isOpen());
      assertFalse(socketChannel0.isConnected());
      
      ForkJoinPool forkJoinPool0 = ForkJoinPool.commonPool();
      assertNotNull(forkJoinPool0);
      
      NettyUtils.EsThreadNameDeterminer nettyUtils_EsThreadNameDeterminer0 = new NettyUtils.EsThreadNameDeterminer();
      assertNotNull(nettyUtils_EsThreadNameDeterminer0);
      
      NioWorker nioWorker0 = new NioWorker(forkJoinPool0, nettyUtils_EsThreadNameDeterminer0);
      assertNotNull(nioWorker0);
      
      NioSocketChannel nioSocketChannel0 = new NioSocketChannel(channel0, defaultLocalServerChannelFactory0, defaultChannelPipeline0, channelSink0, socketChannel0, nioWorker0);
      assertNotNull(nioSocketChannel0);
      assertTrue(defaultChannelPipeline0.isAttached());
      assertFalse(socketChannel0.isConnectionPending());
      assertEquals(13, socketChannel0.validOps());
      assertFalse(socketChannel0.isRegistered());
      assertTrue(socketChannel0.isBlocking());
      assertTrue(socketChannel0.isOpen());
      assertFalse(socketChannel0.isConnected());
      assertEquals(3310, (int)nioSocketChannel0.getId());
      assertFalse(nioSocketChannel0.isBound());
      assertTrue(nioSocketChannel0.isOpen());
      assertFalse(nioSocketChannel0.isConnected());
      assertTrue(nioSocketChannel0.isReadable());
      
      NettyHttpRequest nettyHttpRequest0 = new NettyHttpRequest(defaultHttpRequest0, nioSocketChannel0);
      assertNotNull(nettyHttpRequest0);
      assertEquals("HTTP/1.1", httpVersion0.getText());
      assertEquals(1, httpVersion0.getMajorVersion());
      assertEquals("HTTP", httpVersion0.getProtocolName());
      assertEquals(1, httpVersion0.getMinorVersion());
      assertTrue(httpVersion0.isKeepAliveDefault());
      assertEquals("HTTP/1.1", httpVersion0.toString());
      assertEquals("TRACE", httpMethod0.toString());
      assertEquals("TRACE", httpMethod0.getName());
      assertEquals("", defaultHttpRequest0.getUri());
      assertTrue(defaultChannelPipeline0.isAttached());
      assertFalse(socketChannel0.isConnectionPending());
      assertEquals(13, socketChannel0.validOps());
      assertFalse(socketChannel0.isRegistered());
      assertTrue(socketChannel0.isBlocking());
      assertTrue(socketChannel0.isOpen());
      assertFalse(socketChannel0.isConnected());
      assertEquals(3310, (int)nioSocketChannel0.getId());
      assertFalse(nioSocketChannel0.isBound());
      assertTrue(nioSocketChannel0.isOpen());
      assertFalse(nioSocketChannel0.isConnected());
      assertTrue(nioSocketChannel0.isReadable());
      assertEquals("", nettyHttpRequest0.rawPath());
      assertEquals("", nettyHttpRequest0.uri());
      assertFalse(nettyHttpRequest0.hasContent());
      assertEquals(RestRequest.Method.GET, nettyHttpRequest0.method());
      assertEquals(7, stringArray0.length);
      
      NettyHttpServerTransport nettyHttpServerTransport0 = null;
      NettyHttpChannel nettyHttpChannel0 = new NettyHttpChannel(nettyHttpServerTransport0, nettyHttpRequest0, boolean0);
      assertNotNull(nettyHttpChannel0);
      assertEquals("HTTP/1.1", httpVersion0.getText());
      assertEquals(1, httpVersion0.getMajorVersion());
      assertEquals("HTTP", httpVersion0.getProtocolName());
      assertEquals(1, httpVersion0.getMinorVersion());
      assertTrue(httpVersion0.isKeepAliveDefault());
      assertEquals("HTTP/1.1", httpVersion0.toString());
      assertEquals("TRACE", httpMethod0.toString());
      assertEquals("TRACE", httpMethod0.getName());
      assertEquals("", defaultHttpRequest0.getUri());
      assertTrue(defaultChannelPipeline0.isAttached());
      assertFalse(socketChannel0.isConnectionPending());
      assertEquals(13, socketChannel0.validOps());
      assertFalse(socketChannel0.isRegistered());
      assertTrue(socketChannel0.isBlocking());
      assertTrue(socketChannel0.isOpen());
      assertFalse(socketChannel0.isConnected());
      assertEquals(3310, (int)nioSocketChannel0.getId());
      assertFalse(nioSocketChannel0.isBound());
      assertTrue(nioSocketChannel0.isOpen());
      assertFalse(nioSocketChannel0.isConnected());
      assertTrue(nioSocketChannel0.isReadable());
      assertEquals("", nettyHttpRequest0.rawPath());
      assertEquals("", nettyHttpRequest0.uri());
      assertFalse(nettyHttpRequest0.hasContent());
      assertEquals(RestRequest.Method.GET, nettyHttpRequest0.method());
      assertFalse(nettyHttpChannel0.detailedErrorsEnabled());
      assertEquals(7, stringArray0.length);
      assertTrue(boolean0 == boolean1);
      
      Client client1 = nodeClient0.filterWithHeader(sourceLookup0);
      assertNotNull(client1);
      assertNull(sourceLookup0.sourceContentType());
      assertNotSame(client1, client0);
      assertEquals(7, stringArray0.length);
      assertFalse(client1.equals((Object)client0));
      
      // Undeclared exception!
      try { 
        restShardsAction0.doRequest(nettyHttpRequest0, nettyHttpChannel0, client1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // failed to parse / load source
         //
         verifyException("org.elasticsearch.search.lookup.SourceLookup", e);
      }
  }
}
