/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 08 17:41:26 GMT 2021
 */

package org.elasticsearch.rest.action.cat;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.CharBuffer;
import org.elasticsearch.action.support.IndicesOptions;
import org.elasticsearch.client.Client;
import org.elasticsearch.cluster.ClusterState;
import org.elasticsearch.cluster.metadata.IndexMetaData;
import org.elasticsearch.cluster.metadata.IndexNameExpressionResolver;
import org.elasticsearch.common.component.Lifecycle;
import org.elasticsearch.common.network.NetworkService;
import org.elasticsearch.common.settings.Settings;
import org.elasticsearch.common.util.BigArrays;
import org.elasticsearch.http.netty.NettyHttpChannel;
import org.elasticsearch.http.netty.NettyHttpRequest;
import org.elasticsearch.http.netty.NettyHttpServerTransport;
import org.elasticsearch.rest.RestController;
import org.elasticsearch.rest.RestRequest;
import org.elasticsearch.rest.action.cat.RestIndicesAction;
import org.elasticsearch.threadpool.ThreadPool;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.jboss.netty.channel.Channel;
import org.jboss.netty.channel.DefaultChannelPipeline;
import org.jboss.netty.channel.local.DefaultLocalClientChannelFactory;
import org.jboss.netty.channel.local.DefaultLocalServerChannelFactory;
import org.jboss.netty.channel.local.LocalChannel;
import org.jboss.netty.channel.local.LocalServerChannel;
import org.jboss.netty.handler.codec.http.DefaultHttpRequest;
import org.jboss.netty.handler.codec.http.HttpMethod;
import org.jboss.netty.handler.codec.http.HttpVersion;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class RestIndicesAction_ESTest extends RestIndicesAction_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test0()  throws Throwable  {
      Settings settings0 = Settings.Builder.EMPTY_SETTINGS;
      assertNotNull(settings0);
      
      RestController restController0 = new RestController(settings0);
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertNotNull(restController0);
      
      Client client0 = null;
      IndexNameExpressionResolver indexNameExpressionResolver0 = new IndexNameExpressionResolver(settings0);
      assertNotNull(indexNameExpressionResolver0);
      
      RestIndicesAction restIndicesAction0 = new RestIndicesAction(settings0, restController0, client0, indexNameExpressionResolver0);
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertNotNull(restIndicesAction0);
      
      String string0 = "FD6IA_";
      int int0 = 328;
      boolean boolean0 = true;
      HttpVersion httpVersion0 = new HttpVersion(string0, int0, int0, boolean0);
      assertEquals(328, httpVersion0.getMajorVersion());
      assertTrue(httpVersion0.isKeepAliveDefault());
      assertEquals("FD6IA_", httpVersion0.getProtocolName());
      assertEquals("FD6IA_/328.328", httpVersion0.toString());
      assertEquals(328, httpVersion0.getMinorVersion());
      assertEquals("FD6IA_/328.328", httpVersion0.getText());
      assertNotNull(httpVersion0);
      
      HttpMethod httpMethod0 = HttpMethod.PATCH;
      assertEquals("PATCH", httpMethod0.toString());
      assertEquals("PATCH", httpMethod0.getName());
      assertNotNull(httpMethod0);
      
      DefaultHttpRequest defaultHttpRequest0 = new DefaultHttpRequest(httpVersion0, httpMethod0, string0);
      assertEquals(328, httpVersion0.getMajorVersion());
      assertTrue(httpVersion0.isKeepAliveDefault());
      assertEquals("FD6IA_", httpVersion0.getProtocolName());
      assertEquals("FD6IA_/328.328", httpVersion0.toString());
      assertEquals(328, httpVersion0.getMinorVersion());
      assertEquals("FD6IA_/328.328", httpVersion0.getText());
      assertEquals("PATCH", httpMethod0.toString());
      assertEquals("PATCH", httpMethod0.getName());
      assertEquals("FD6IA_", defaultHttpRequest0.getUri());
      assertNotNull(defaultHttpRequest0);
      
      DefaultLocalServerChannelFactory defaultLocalServerChannelFactory0 = new DefaultLocalServerChannelFactory();
      assertNotNull(defaultLocalServerChannelFactory0);
      
      DefaultChannelPipeline defaultChannelPipeline0 = new DefaultChannelPipeline();
      assertFalse(defaultChannelPipeline0.isAttached());
      assertNotNull(defaultChannelPipeline0);
      
      LocalServerChannel localServerChannel0 = defaultLocalServerChannelFactory0.newChannel(defaultChannelPipeline0);
      assertTrue(defaultChannelPipeline0.isAttached());
      assertEquals(3, (int)localServerChannel0.getId());
      assertTrue(localServerChannel0.isReadable());
      assertNotNull(localServerChannel0);
      
      NettyHttpRequest nettyHttpRequest0 = new NettyHttpRequest(defaultHttpRequest0, localServerChannel0);
      assertEquals(328, httpVersion0.getMajorVersion());
      assertTrue(httpVersion0.isKeepAliveDefault());
      assertEquals("FD6IA_", httpVersion0.getProtocolName());
      assertEquals("FD6IA_/328.328", httpVersion0.toString());
      assertEquals(328, httpVersion0.getMinorVersion());
      assertEquals("FD6IA_/328.328", httpVersion0.getText());
      assertEquals("PATCH", httpMethod0.toString());
      assertEquals("PATCH", httpMethod0.getName());
      assertEquals("FD6IA_", defaultHttpRequest0.getUri());
      assertTrue(defaultChannelPipeline0.isAttached());
      assertEquals(3, (int)localServerChannel0.getId());
      assertTrue(localServerChannel0.isReadable());
      assertEquals("FD6IA_", nettyHttpRequest0.rawPath());
      assertEquals("FD6IA_", nettyHttpRequest0.uri());
      assertFalse(nettyHttpRequest0.hasContent());
      assertEquals(RestRequest.Method.GET, nettyHttpRequest0.method());
      assertNotNull(nettyHttpRequest0);
      
      NetworkService networkService0 = null;
      BigArrays bigArrays0 = BigArrays.NON_RECYCLING_INSTANCE;
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertNotNull(bigArrays0);
      
      ThreadPool threadPool0 = new ThreadPool(string0);
      assertNotNull(threadPool0);
      
      NettyHttpServerTransport nettyHttpServerTransport0 = new NettyHttpServerTransport(settings0, networkService0, bigArrays0, threadPool0);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(Lifecycle.State.INITIALIZED, nettyHttpServerTransport0.lifecycleState());
      assertNotNull(nettyHttpServerTransport0);
      
      NettyHttpChannel nettyHttpChannel0 = new NettyHttpChannel(nettyHttpServerTransport0, nettyHttpRequest0, boolean0);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(Lifecycle.State.INITIALIZED, nettyHttpServerTransport0.lifecycleState());
      assertTrue(nettyHttpChannel0.detailedErrorsEnabled());
      assertEquals(328, httpVersion0.getMajorVersion());
      assertTrue(httpVersion0.isKeepAliveDefault());
      assertEquals("FD6IA_", httpVersion0.getProtocolName());
      assertEquals("FD6IA_/328.328", httpVersion0.toString());
      assertEquals(328, httpVersion0.getMinorVersion());
      assertEquals("FD6IA_/328.328", httpVersion0.getText());
      assertEquals("PATCH", httpMethod0.toString());
      assertEquals("PATCH", httpMethod0.getName());
      assertEquals("FD6IA_", defaultHttpRequest0.getUri());
      assertTrue(defaultChannelPipeline0.isAttached());
      assertEquals(3, (int)localServerChannel0.getId());
      assertTrue(localServerChannel0.isReadable());
      assertEquals("FD6IA_", nettyHttpRequest0.rawPath());
      assertEquals("FD6IA_", nettyHttpRequest0.uri());
      assertFalse(nettyHttpRequest0.hasContent());
      assertEquals(RestRequest.Method.GET, nettyHttpRequest0.method());
      assertNotNull(nettyHttpChannel0);
      
      // Undeclared exception!
      try { 
        restIndicesAction0.doRequest(nettyHttpRequest0, nettyHttpChannel0, client0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.rest.action.cat.RestIndicesAction", e);
      }
  }

  @Test(timeout = 11000)
  public void test1()  throws Throwable  {
      Settings settings0 = Settings.EMPTY;
      assertNotNull(settings0);
      
      RestController restController0 = new RestController(settings0);
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertNotNull(restController0);
      
      Client client0 = null;
      IndexNameExpressionResolver indexNameExpressionResolver0 = new IndexNameExpressionResolver(settings0);
      assertNotNull(indexNameExpressionResolver0);
      
      RestIndicesAction restIndicesAction0 = new RestIndicesAction(settings0, restController0, client0, indexNameExpressionResolver0);
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertNotNull(restIndicesAction0);
      
      StringBuilder stringBuilder0 = new StringBuilder();
      assertEquals("", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      restIndicesAction0.documentation(stringBuilder0);
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertEquals("/_cat/indices\n/_cat/indices/{index}\n", stringBuilder0.toString());
      
      RestRequest restRequest0 = null;
      // Undeclared exception!
      restIndicesAction0.getTableWithHeader(restRequest0);
  }

  @Test(timeout = 11000)
  public void test2()  throws Throwable  {
      Settings settings0 = Settings.Builder.EMPTY_SETTINGS;
      assertNotNull(settings0);
      
      RestController restController0 = new RestController(settings0);
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertNotNull(restController0);
      
      Client client0 = null;
      IndexNameExpressionResolver indexNameExpressionResolver0 = new IndexNameExpressionResolver(settings0);
      assertNotNull(indexNameExpressionResolver0);
      
      RestIndicesAction restIndicesAction0 = new RestIndicesAction(settings0, restController0, client0, indexNameExpressionResolver0);
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertNotNull(restIndicesAction0);
      
      String string0 = "?Y7mE8_\"VAu}%";
      StringBuffer stringBuffer0 = new StringBuffer(string0);
      assertEquals(13, stringBuffer0.length());
      assertEquals("?Y7mE8_\"VAu}%", stringBuffer0.toString());
      assertNotNull(stringBuffer0);
      
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) stringBuffer0);
      assertEquals(13, stringBuffer0.length());
      assertEquals("?Y7mE8_\"VAu}%", stringBuffer0.toString());
      assertEquals(13, charBuffer0.remaining());
      assertEquals(13, charBuffer0.capacity());
      assertFalse(charBuffer0.hasArray());
      assertEquals("?Y7mE8_\"VAu}%", charBuffer0.toString());
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(13, charBuffer0.length());
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isDirect());
      assertEquals(13, charBuffer0.limit());
      assertNotNull(charBuffer0);
      
      StringBuilder stringBuilder0 = new StringBuilder(charBuffer0);
      assertEquals(13, stringBuffer0.length());
      assertEquals("?Y7mE8_\"VAu}%", stringBuffer0.toString());
      assertEquals(13, charBuffer0.remaining());
      assertEquals(13, charBuffer0.capacity());
      assertFalse(charBuffer0.hasArray());
      assertEquals("?Y7mE8_\"VAu}%", charBuffer0.toString());
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(13, charBuffer0.length());
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isDirect());
      assertEquals(13, charBuffer0.limit());
      assertEquals("?Y7mE8_\"VAu}%", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      int int0 = 0;
      StringBuilder stringBuilder1 = stringBuilder0.insert(int0, (float) int0);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      assertEquals(13, stringBuffer0.length());
      assertEquals("?Y7mE8_\"VAu}%", stringBuffer0.toString());
      assertEquals(13, charBuffer0.remaining());
      assertEquals(13, charBuffer0.capacity());
      assertFalse(charBuffer0.hasArray());
      assertEquals("?Y7mE8_\"VAu}%", charBuffer0.toString());
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(13, charBuffer0.length());
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isDirect());
      assertEquals(13, charBuffer0.limit());
      assertEquals("0.0?Y7mE8_\"VAu}%", stringBuilder0.toString());
      assertEquals("0.0?Y7mE8_\"VAu}%", stringBuilder1.toString());
      assertNotNull(stringBuilder1);
      
      String string1 = "?!uN}H]F";
      StringBuilder stringBuilder2 = stringBuilder1.append(string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder1, stringBuilder2);
      assertNotSame(string1, string0);
      assertSame(stringBuilder2, stringBuilder1);
      assertSame(stringBuilder2, stringBuilder0);
      assertEquals(13, stringBuffer0.length());
      assertEquals("?Y7mE8_\"VAu}%", stringBuffer0.toString());
      assertEquals(13, charBuffer0.remaining());
      assertEquals(13, charBuffer0.capacity());
      assertFalse(charBuffer0.hasArray());
      assertEquals("?Y7mE8_\"VAu}%", charBuffer0.toString());
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(13, charBuffer0.length());
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isDirect());
      assertEquals(13, charBuffer0.limit());
      assertEquals("0.0?Y7mE8_\"VAu}%?!uN}H]F", stringBuilder0.toString());
      assertEquals("0.0?Y7mE8_\"VAu}%?!uN}H]F", stringBuilder1.toString());
      assertEquals("0.0?Y7mE8_\"VAu}%?!uN}H]F", stringBuilder2.toString());
      assertNotNull(stringBuilder2);
      
      char[] charArray0 = new char[5];
      char char0 = 'm';
      charArray0[0] = char0;
      char char1 = '3';
      charArray0[1] = char1;
      char char2 = '&';
      charArray0[2] = char2;
      char char3 = 'u';
      charArray0[3] = char3;
      char char4 = '`';
      charArray0[4] = char4;
      StringBuilder stringBuilder3 = stringBuilder2.insert(int0, charArray0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals(5, charArray0.length);
      assertNotSame(string0, string1);
      assertSame(stringBuilder3, stringBuilder0);
      assertSame(stringBuilder3, stringBuilder1);
      assertSame(stringBuilder3, stringBuilder2);
      assertSame(stringBuilder0, stringBuilder3);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder1, stringBuilder2);
      assertSame(stringBuilder1, stringBuilder3);
      assertNotSame(string1, string0);
      assertSame(stringBuilder2, stringBuilder1);
      assertSame(stringBuilder2, stringBuilder3);
      assertSame(stringBuilder2, stringBuilder0);
      assertEquals(13, stringBuffer0.length());
      assertEquals("?Y7mE8_\"VAu}%", stringBuffer0.toString());
      assertEquals(13, charBuffer0.remaining());
      assertEquals(13, charBuffer0.capacity());
      assertFalse(charBuffer0.hasArray());
      assertEquals("?Y7mE8_\"VAu}%", charBuffer0.toString());
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(13, charBuffer0.length());
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isDirect());
      assertEquals(13, charBuffer0.limit());
      assertEquals("m3&u`0.0?Y7mE8_\"VAu}%?!uN}H]F", stringBuilder3.toString());
      assertEquals("m3&u`0.0?Y7mE8_\"VAu}%?!uN}H]F", stringBuilder0.toString());
      assertEquals("m3&u`0.0?Y7mE8_\"VAu}%?!uN}H]F", stringBuilder1.toString());
      assertEquals("m3&u`0.0?Y7mE8_\"VAu}%?!uN}H]F", stringBuilder2.toString());
      assertArrayEquals(new char[] {'m', '3', '&', 'u', '`'}, charArray0);
      assertNotNull(stringBuilder3);
      
      StringBuilder stringBuilder4 = stringBuilder2.replace(int0, int0, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertSame(stringBuilder0, stringBuilder4);
      assertSame(stringBuilder0, stringBuilder3);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder4, stringBuilder3);
      assertSame(stringBuilder4, stringBuilder0);
      assertSame(stringBuilder4, stringBuilder1);
      assertSame(stringBuilder4, stringBuilder2);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder1, stringBuilder4);
      assertSame(stringBuilder1, stringBuilder2);
      assertSame(stringBuilder1, stringBuilder3);
      assertNotSame(string1, string0);
      assertSame(stringBuilder2, stringBuilder1);
      assertSame(stringBuilder2, stringBuilder3);
      assertSame(stringBuilder2, stringBuilder0);
      assertSame(stringBuilder2, stringBuilder4);
      assertEquals(13, stringBuffer0.length());
      assertEquals("?Y7mE8_\"VAu}%", stringBuffer0.toString());
      assertEquals(13, charBuffer0.remaining());
      assertEquals(13, charBuffer0.capacity());
      assertFalse(charBuffer0.hasArray());
      assertEquals("?Y7mE8_\"VAu}%", charBuffer0.toString());
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(13, charBuffer0.length());
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isDirect());
      assertEquals(13, charBuffer0.limit());
      assertEquals("?Y7mE8_\"VAu}%m3&u`0.0?Y7mE8_\"VAu}%?!uN}H]F", stringBuilder0.toString());
      assertEquals("?Y7mE8_\"VAu}%m3&u`0.0?Y7mE8_\"VAu}%?!uN}H]F", stringBuilder4.toString());
      assertEquals("?Y7mE8_\"VAu}%m3&u`0.0?Y7mE8_\"VAu}%?!uN}H]F", stringBuilder1.toString());
      assertEquals("?Y7mE8_\"VAu}%m3&u`0.0?Y7mE8_\"VAu}%?!uN}H]F", stringBuilder2.toString());
      assertNotNull(stringBuilder4);
      
      StringBuilder stringBuilder5 = stringBuilder4.append(int0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertSame(stringBuilder0, stringBuilder4);
      assertSame(stringBuilder0, stringBuilder3);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder0, stringBuilder5);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder4, stringBuilder3);
      assertSame(stringBuilder4, stringBuilder0);
      assertSame(stringBuilder4, stringBuilder1);
      assertSame(stringBuilder4, stringBuilder5);
      assertSame(stringBuilder4, stringBuilder2);
      assertSame(stringBuilder5, stringBuilder4);
      assertSame(stringBuilder5, stringBuilder3);
      assertSame(stringBuilder5, stringBuilder0);
      assertSame(stringBuilder5, stringBuilder2);
      assertSame(stringBuilder5, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder1, stringBuilder4);
      assertSame(stringBuilder1, stringBuilder2);
      assertSame(stringBuilder1, stringBuilder3);
      assertSame(stringBuilder1, stringBuilder5);
      assertNotSame(string1, string0);
      assertSame(stringBuilder2, stringBuilder1);
      assertSame(stringBuilder2, stringBuilder3);
      assertSame(stringBuilder2, stringBuilder5);
      assertSame(stringBuilder2, stringBuilder0);
      assertSame(stringBuilder2, stringBuilder4);
      assertEquals(13, stringBuffer0.length());
      assertEquals("?Y7mE8_\"VAu}%", stringBuffer0.toString());
      assertEquals(13, charBuffer0.remaining());
      assertEquals(13, charBuffer0.capacity());
      assertFalse(charBuffer0.hasArray());
      assertEquals("?Y7mE8_\"VAu}%", charBuffer0.toString());
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(13, charBuffer0.length());
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isDirect());
      assertEquals(13, charBuffer0.limit());
      assertEquals("?Y7mE8_\"VAu}%m3&u`0.0?Y7mE8_\"VAu}%?!uN}H]F0", stringBuilder0.toString());
      assertEquals("?Y7mE8_\"VAu}%m3&u`0.0?Y7mE8_\"VAu}%?!uN}H]F0", stringBuilder4.toString());
      assertEquals("?Y7mE8_\"VAu}%m3&u`0.0?Y7mE8_\"VAu}%?!uN}H]F0", stringBuilder5.toString());
      assertEquals("?Y7mE8_\"VAu}%m3&u`0.0?Y7mE8_\"VAu}%?!uN}H]F0", stringBuilder1.toString());
      assertEquals("?Y7mE8_\"VAu}%m3&u`0.0?Y7mE8_\"VAu}%?!uN}H]F0", stringBuilder2.toString());
      assertNotNull(stringBuilder5);
      
      restIndicesAction0.documentation(stringBuilder5);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertSame(stringBuilder0, stringBuilder4);
      assertSame(stringBuilder0, stringBuilder3);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder0, stringBuilder5);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder1, stringBuilder4);
      assertSame(stringBuilder1, stringBuilder2);
      assertSame(stringBuilder1, stringBuilder3);
      assertSame(stringBuilder1, stringBuilder5);
      assertNotSame(string1, string0);
      assertSame(stringBuilder2, stringBuilder1);
      assertSame(stringBuilder2, stringBuilder3);
      assertSame(stringBuilder2, stringBuilder5);
      assertSame(stringBuilder2, stringBuilder0);
      assertSame(stringBuilder2, stringBuilder4);
      assertSame(stringBuilder4, stringBuilder3);
      assertSame(stringBuilder4, stringBuilder0);
      assertSame(stringBuilder4, stringBuilder1);
      assertSame(stringBuilder4, stringBuilder5);
      assertSame(stringBuilder4, stringBuilder2);
      assertSame(stringBuilder5, stringBuilder4);
      assertSame(stringBuilder5, stringBuilder3);
      assertSame(stringBuilder5, stringBuilder0);
      assertSame(stringBuilder5, stringBuilder2);
      assertSame(stringBuilder5, stringBuilder1);
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertEquals(13, stringBuffer0.length());
      assertEquals("?Y7mE8_\"VAu}%", stringBuffer0.toString());
      assertEquals(13, charBuffer0.remaining());
      assertEquals(13, charBuffer0.capacity());
      assertFalse(charBuffer0.hasArray());
      assertEquals("?Y7mE8_\"VAu}%", charBuffer0.toString());
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(13, charBuffer0.length());
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isDirect());
      assertEquals(13, charBuffer0.limit());
      assertEquals("?Y7mE8_\"VAu}%m3&u`0.0?Y7mE8_\"VAu}%?!uN}H]F0/_cat/indices\n/_cat/indices/{index}\n", stringBuilder0.toString());
      assertEquals("?Y7mE8_\"VAu}%m3&u`0.0?Y7mE8_\"VAu}%?!uN}H]F0/_cat/indices\n/_cat/indices/{index}\n", stringBuilder4.toString());
      assertEquals("?Y7mE8_\"VAu}%m3&u`0.0?Y7mE8_\"VAu}%?!uN}H]F0/_cat/indices\n/_cat/indices/{index}\n", stringBuilder5.toString());
      assertEquals("?Y7mE8_\"VAu}%m3&u`0.0?Y7mE8_\"VAu}%?!uN}H]F0/_cat/indices\n/_cat/indices/{index}\n", stringBuilder1.toString());
      assertEquals("?Y7mE8_\"VAu}%m3&u`0.0?Y7mE8_\"VAu}%?!uN}H]F0/_cat/indices\n/_cat/indices/{index}\n", stringBuilder2.toString());
  }

  @Test(timeout = 11000)
  public void test3()  throws Throwable  {
      Settings settings0 = Settings.Builder.EMPTY_SETTINGS;
      assertNotNull(settings0);
      
      RestController restController0 = new RestController(settings0);
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertNotNull(restController0);
      
      Client client0 = null;
      IndexNameExpressionResolver indexNameExpressionResolver0 = new IndexNameExpressionResolver(settings0);
      assertNotNull(indexNameExpressionResolver0);
      
      RestIndicesAction restIndicesAction0 = new RestIndicesAction(settings0, restController0, client0, indexNameExpressionResolver0);
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertNotNull(restIndicesAction0);
      
      HttpVersion httpVersion0 = HttpVersion.HTTP_1_0;
      assertFalse(httpVersion0.isKeepAliveDefault());
      assertEquals("HTTP", httpVersion0.getProtocolName());
      assertEquals("HTTP/1.0", httpVersion0.toString());
      assertEquals("HTTP/1.0", httpVersion0.getText());
      assertEquals(0, httpVersion0.getMinorVersion());
      assertEquals(1, httpVersion0.getMajorVersion());
      assertNotNull(httpVersion0);
      
      HttpMethod httpMethod0 = HttpMethod.GET;
      assertEquals("GET", httpMethod0.getName());
      assertEquals("GET", httpMethod0.toString());
      assertNotNull(httpMethod0);
      
      String string0 = "M 5U1";
      DefaultHttpRequest defaultHttpRequest0 = new DefaultHttpRequest(httpVersion0, httpMethod0, string0);
      assertFalse(httpVersion0.isKeepAliveDefault());
      assertEquals("HTTP", httpVersion0.getProtocolName());
      assertEquals("HTTP/1.0", httpVersion0.toString());
      assertEquals("HTTP/1.0", httpVersion0.getText());
      assertEquals(0, httpVersion0.getMinorVersion());
      assertEquals(1, httpVersion0.getMajorVersion());
      assertEquals("GET", httpMethod0.getName());
      assertEquals("GET", httpMethod0.toString());
      assertEquals("M 5U1", defaultHttpRequest0.getUri());
      assertNotNull(defaultHttpRequest0);
      
      DefaultChannelPipeline defaultChannelPipeline0 = new DefaultChannelPipeline();
      assertFalse(defaultChannelPipeline0.isAttached());
      assertNotNull(defaultChannelPipeline0);
      
      Channel channel0 = defaultChannelPipeline0.getChannel();
      assertFalse(defaultChannelPipeline0.isAttached());
      assertNull(channel0);
      
      NettyHttpRequest nettyHttpRequest0 = new NettyHttpRequest(defaultHttpRequest0, channel0);
      assertFalse(httpVersion0.isKeepAliveDefault());
      assertEquals("HTTP", httpVersion0.getProtocolName());
      assertEquals("HTTP/1.0", httpVersion0.toString());
      assertEquals("HTTP/1.0", httpVersion0.getText());
      assertEquals(0, httpVersion0.getMinorVersion());
      assertEquals(1, httpVersion0.getMajorVersion());
      assertEquals("GET", httpMethod0.getName());
      assertEquals("GET", httpMethod0.toString());
      assertEquals("M 5U1", defaultHttpRequest0.getUri());
      assertFalse(defaultChannelPipeline0.isAttached());
      assertFalse(nettyHttpRequest0.hasContent());
      assertEquals(RestRequest.Method.GET, nettyHttpRequest0.method());
      assertEquals("M 5U1", nettyHttpRequest0.uri());
      assertEquals("M 5U1", nettyHttpRequest0.rawPath());
      assertNotNull(nettyHttpRequest0);
      
      NetworkService networkService0 = new NetworkService(settings0);
      assertNotNull(networkService0);
      
      BigArrays bigArrays0 = BigArrays.NON_RECYCLING_INSTANCE;
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertNotNull(bigArrays0);
      
      ThreadPool threadPool0 = new ThreadPool(string0);
      assertNotNull(threadPool0);
      
      NettyHttpServerTransport nettyHttpServerTransport0 = new NettyHttpServerTransport(settings0, networkService0, bigArrays0, threadPool0);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(Lifecycle.State.INITIALIZED, nettyHttpServerTransport0.lifecycleState());
      assertNotNull(nettyHttpServerTransport0);
      
      boolean boolean0 = false;
      NettyHttpChannel nettyHttpChannel0 = new NettyHttpChannel(nettyHttpServerTransport0, nettyHttpRequest0, boolean0);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertFalse(nettyHttpChannel0.detailedErrorsEnabled());
      assertFalse(httpVersion0.isKeepAliveDefault());
      assertEquals("HTTP", httpVersion0.getProtocolName());
      assertEquals("HTTP/1.0", httpVersion0.toString());
      assertEquals("HTTP/1.0", httpVersion0.getText());
      assertEquals(0, httpVersion0.getMinorVersion());
      assertEquals(1, httpVersion0.getMajorVersion());
      assertEquals("GET", httpMethod0.getName());
      assertEquals("GET", httpMethod0.toString());
      assertEquals("M 5U1", defaultHttpRequest0.getUri());
      assertFalse(defaultChannelPipeline0.isAttached());
      assertFalse(nettyHttpRequest0.hasContent());
      assertEquals(RestRequest.Method.GET, nettyHttpRequest0.method());
      assertEquals("M 5U1", nettyHttpRequest0.uri());
      assertEquals("M 5U1", nettyHttpRequest0.rawPath());
      assertEquals(Lifecycle.State.INITIALIZED, nettyHttpServerTransport0.lifecycleState());
      assertNotNull(nettyHttpChannel0);
      
      // Undeclared exception!
      try { 
        restIndicesAction0.doRequest(nettyHttpRequest0, nettyHttpChannel0, client0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.rest.action.cat.RestIndicesAction", e);
      }
  }

  @Test(timeout = 11000)
  public void test4()  throws Throwable  {
      Settings settings0 = Settings.Builder.EMPTY_SETTINGS;
      assertNotNull(settings0);
      
      RestController restController0 = new RestController(settings0);
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertNotNull(restController0);
      
      Client client0 = null;
      IndexNameExpressionResolver indexNameExpressionResolver0 = new IndexNameExpressionResolver(settings0);
      assertNotNull(indexNameExpressionResolver0);
      
      RestIndicesAction restIndicesAction0 = new RestIndicesAction(settings0, restController0, client0, indexNameExpressionResolver0);
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertNotNull(restIndicesAction0);
      
      String string0 = "FD6IA_";
      int int0 = 328;
      int int1 = 33;
      boolean boolean0 = true;
      HttpVersion httpVersion0 = new HttpVersion(string0, int0, int1, boolean0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(328, httpVersion0.getMajorVersion());
      assertEquals("FD6IA_/328.33", httpVersion0.toString());
      assertEquals("FD6IA_/328.33", httpVersion0.getText());
      assertEquals("FD6IA_", httpVersion0.getProtocolName());
      assertTrue(httpVersion0.isKeepAliveDefault());
      assertEquals(33, httpVersion0.getMinorVersion());
      assertNotNull(httpVersion0);
      
      HttpMethod httpMethod0 = HttpMethod.PATCH;
      assertEquals("PATCH", httpMethod0.getName());
      assertEquals("PATCH", httpMethod0.toString());
      assertNotNull(httpMethod0);
      
      DefaultHttpRequest defaultHttpRequest0 = new DefaultHttpRequest(httpVersion0, httpMethod0, string0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(328, httpVersion0.getMajorVersion());
      assertEquals("FD6IA_/328.33", httpVersion0.toString());
      assertEquals("FD6IA_/328.33", httpVersion0.getText());
      assertEquals("FD6IA_", httpVersion0.getProtocolName());
      assertTrue(httpVersion0.isKeepAliveDefault());
      assertEquals(33, httpVersion0.getMinorVersion());
      assertEquals("PATCH", httpMethod0.getName());
      assertEquals("PATCH", httpMethod0.toString());
      assertEquals("FD6IA_", defaultHttpRequest0.getUri());
      assertNotNull(defaultHttpRequest0);
      
      DefaultLocalServerChannelFactory defaultLocalServerChannelFactory0 = new DefaultLocalServerChannelFactory();
      assertNotNull(defaultLocalServerChannelFactory0);
      
      DefaultChannelPipeline defaultChannelPipeline0 = new DefaultChannelPipeline();
      assertFalse(defaultChannelPipeline0.isAttached());
      assertNotNull(defaultChannelPipeline0);
      
      LocalServerChannel localServerChannel0 = defaultLocalServerChannelFactory0.newChannel(defaultChannelPipeline0);
      assertTrue(defaultChannelPipeline0.isAttached());
      assertEquals(0, (int)localServerChannel0.getId());
      assertTrue(localServerChannel0.isReadable());
      assertNotNull(localServerChannel0);
      
      NettyHttpRequest nettyHttpRequest0 = new NettyHttpRequest(defaultHttpRequest0, localServerChannel0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(328, httpVersion0.getMajorVersion());
      assertEquals("FD6IA_/328.33", httpVersion0.toString());
      assertEquals("FD6IA_/328.33", httpVersion0.getText());
      assertEquals("FD6IA_", httpVersion0.getProtocolName());
      assertTrue(httpVersion0.isKeepAliveDefault());
      assertEquals(33, httpVersion0.getMinorVersion());
      assertEquals("PATCH", httpMethod0.getName());
      assertEquals("PATCH", httpMethod0.toString());
      assertEquals("FD6IA_", defaultHttpRequest0.getUri());
      assertTrue(defaultChannelPipeline0.isAttached());
      assertEquals(0, (int)localServerChannel0.getId());
      assertTrue(localServerChannel0.isReadable());
      assertEquals(RestRequest.Method.GET, nettyHttpRequest0.method());
      assertEquals("FD6IA_", nettyHttpRequest0.rawPath());
      assertEquals("FD6IA_", nettyHttpRequest0.uri());
      assertFalse(nettyHttpRequest0.hasContent());
      assertNotNull(nettyHttpRequest0);
      
      NetworkService networkService0 = null;
      BigArrays bigArrays0 = BigArrays.NON_RECYCLING_INSTANCE;
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertNotNull(bigArrays0);
      
      ThreadPool threadPool0 = new ThreadPool(settings0);
      assertNotNull(threadPool0);
      
      NettyHttpServerTransport nettyHttpServerTransport0 = new NettyHttpServerTransport(settings0, networkService0, bigArrays0, threadPool0);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(Lifecycle.State.INITIALIZED, nettyHttpServerTransport0.lifecycleState());
      assertNotNull(nettyHttpServerTransport0);
      
      boolean boolean1 = false;
      NettyHttpChannel nettyHttpChannel0 = new NettyHttpChannel(nettyHttpServerTransport0, nettyHttpRequest0, boolean1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(Lifecycle.State.INITIALIZED, nettyHttpServerTransport0.lifecycleState());
      assertFalse(nettyHttpChannel0.detailedErrorsEnabled());
      assertEquals(328, httpVersion0.getMajorVersion());
      assertEquals("FD6IA_/328.33", httpVersion0.toString());
      assertEquals("FD6IA_/328.33", httpVersion0.getText());
      assertEquals("FD6IA_", httpVersion0.getProtocolName());
      assertTrue(httpVersion0.isKeepAliveDefault());
      assertEquals(33, httpVersion0.getMinorVersion());
      assertEquals("PATCH", httpMethod0.getName());
      assertEquals("PATCH", httpMethod0.toString());
      assertEquals("FD6IA_", defaultHttpRequest0.getUri());
      assertTrue(defaultChannelPipeline0.isAttached());
      assertEquals(0, (int)localServerChannel0.getId());
      assertTrue(localServerChannel0.isReadable());
      assertEquals(RestRequest.Method.GET, nettyHttpRequest0.method());
      assertEquals("FD6IA_", nettyHttpRequest0.rawPath());
      assertEquals("FD6IA_", nettyHttpRequest0.uri());
      assertFalse(nettyHttpRequest0.hasContent());
      assertNotNull(nettyHttpChannel0);
      
      // Undeclared exception!
      try { 
        restIndicesAction0.doRequest(nettyHttpRequest0, nettyHttpChannel0, client0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.rest.action.cat.RestIndicesAction", e);
      }
  }

  @Test(timeout = 11000)
  public void test5()  throws Throwable  {
      Settings settings0 = Settings.EMPTY;
      assertNotNull(settings0);
      
      RestController restController0 = null;
      Client client0 = null;
      IndexNameExpressionResolver indexNameExpressionResolver0 = new IndexNameExpressionResolver(settings0);
      assertNotNull(indexNameExpressionResolver0);
      
      RestIndicesAction restIndicesAction0 = null;
      try {
        restIndicesAction0 = new RestIndicesAction(settings0, restController0, client0, indexNameExpressionResolver0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.rest.action.cat.RestIndicesAction", e);
      }
  }

  @Test(timeout = 11000)
  public void test6()  throws Throwable  {
      IndexMetaData indexMetaData0 = IndexMetaData.PROTO;
      assertEquals(1, indexMetaData0.getTotalNumberOfShards());
      assertEquals(1L, indexMetaData0.getVersion());
      assertEquals("_na_", indexMetaData0.getIndexUUID());
      assertEquals(1, indexMetaData0.getNumberOfShards());
      assertEquals(0, indexMetaData0.getNumberOfReplicas());
      assertEquals(IndexMetaData.State.OPEN, indexMetaData0.getState());
      assertNotNull(indexMetaData0);
      
      Settings settings0 = indexMetaData0.getSettings();
      assertEquals(1, indexMetaData0.getTotalNumberOfShards());
      assertEquals(1L, indexMetaData0.getVersion());
      assertEquals("_na_", indexMetaData0.getIndexUUID());
      assertEquals(1, indexMetaData0.getNumberOfShards());
      assertEquals(0, indexMetaData0.getNumberOfReplicas());
      assertEquals(IndexMetaData.State.OPEN, indexMetaData0.getState());
      assertNotNull(settings0);
      
      Settings settings1 = IndexMetaData.addHumanReadableSettings(settings0);
      assertFalse(settings1.equals((Object)settings0));
      assertNotSame(settings0, settings1);
      assertNotSame(settings1, settings0);
      assertEquals(1, indexMetaData0.getTotalNumberOfShards());
      assertEquals(1L, indexMetaData0.getVersion());
      assertEquals("_na_", indexMetaData0.getIndexUUID());
      assertEquals(1, indexMetaData0.getNumberOfShards());
      assertEquals(0, indexMetaData0.getNumberOfReplicas());
      assertEquals(IndexMetaData.State.OPEN, indexMetaData0.getState());
      assertNotNull(settings1);
      
      RestController restController0 = new RestController(settings1);
      assertFalse(settings0.equals((Object)settings1));
      assertFalse(settings1.equals((Object)settings0));
      assertEquals(1, indexMetaData0.getTotalNumberOfShards());
      assertEquals(1L, indexMetaData0.getVersion());
      assertEquals("_na_", indexMetaData0.getIndexUUID());
      assertEquals(1, indexMetaData0.getNumberOfShards());
      assertEquals(0, indexMetaData0.getNumberOfReplicas());
      assertEquals(IndexMetaData.State.OPEN, indexMetaData0.getState());
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertNotNull(restController0);
      
      Client client0 = null;
      IndexNameExpressionResolver indexNameExpressionResolver0 = new IndexNameExpressionResolver(settings1);
      assertFalse(settings0.equals((Object)settings1));
      assertFalse(settings1.equals((Object)settings0));
      assertEquals(1, indexMetaData0.getTotalNumberOfShards());
      assertEquals(1L, indexMetaData0.getVersion());
      assertEquals("_na_", indexMetaData0.getIndexUUID());
      assertEquals(1, indexMetaData0.getNumberOfShards());
      assertEquals(0, indexMetaData0.getNumberOfReplicas());
      assertEquals(IndexMetaData.State.OPEN, indexMetaData0.getState());
      assertNotNull(indexNameExpressionResolver0);
      
      RestIndicesAction restIndicesAction0 = new RestIndicesAction(settings1, restController0, client0, indexNameExpressionResolver0);
      assertFalse(settings0.equals((Object)settings1));
      assertFalse(settings1.equals((Object)settings0));
      assertEquals(1, indexMetaData0.getTotalNumberOfShards());
      assertEquals(1L, indexMetaData0.getVersion());
      assertEquals("_na_", indexMetaData0.getIndexUUID());
      assertEquals(1, indexMetaData0.getNumberOfShards());
      assertEquals(0, indexMetaData0.getNumberOfReplicas());
      assertEquals(IndexMetaData.State.OPEN, indexMetaData0.getState());
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertNotNull(restIndicesAction0);
      
      HttpVersion httpVersion0 = HttpVersion.HTTP_1_1;
      assertEquals("HTTP", httpVersion0.getProtocolName());
      assertTrue(httpVersion0.isKeepAliveDefault());
      assertEquals(1, httpVersion0.getMinorVersion());
      assertEquals("HTTP/1.1", httpVersion0.toString());
      assertEquals("HTTP/1.1", httpVersion0.getText());
      assertEquals(1, httpVersion0.getMajorVersion());
      assertNotNull(httpVersion0);
      
      HttpMethod httpMethod0 = HttpMethod.DELETE;
      assertEquals("DELETE", httpMethod0.getName());
      assertEquals("DELETE", httpMethod0.toString());
      assertNotNull(httpMethod0);
      
      DefaultHttpRequest defaultHttpRequest0 = new DefaultHttpRequest(httpVersion0, httpMethod0, indexMetaData0.INDEX_UUID_NA_VALUE);
      assertEquals(1, indexMetaData0.getTotalNumberOfShards());
      assertEquals(1L, indexMetaData0.getVersion());
      assertEquals("_na_", indexMetaData0.getIndexUUID());
      assertEquals(1, indexMetaData0.getNumberOfShards());
      assertEquals(0, indexMetaData0.getNumberOfReplicas());
      assertEquals(IndexMetaData.State.OPEN, indexMetaData0.getState());
      assertEquals("HTTP", httpVersion0.getProtocolName());
      assertTrue(httpVersion0.isKeepAliveDefault());
      assertEquals(1, httpVersion0.getMinorVersion());
      assertEquals("HTTP/1.1", httpVersion0.toString());
      assertEquals("HTTP/1.1", httpVersion0.getText());
      assertEquals(1, httpVersion0.getMajorVersion());
      assertEquals("DELETE", httpMethod0.getName());
      assertEquals("DELETE", httpMethod0.toString());
      assertEquals("_na_", defaultHttpRequest0.getUri());
      assertNotNull(defaultHttpRequest0);
      
      DefaultLocalClientChannelFactory defaultLocalClientChannelFactory0 = new DefaultLocalClientChannelFactory();
      assertNotNull(defaultLocalClientChannelFactory0);
      
      DefaultChannelPipeline defaultChannelPipeline0 = new DefaultChannelPipeline();
      assertFalse(defaultChannelPipeline0.isAttached());
      assertNotNull(defaultChannelPipeline0);
      
      LocalChannel localChannel0 = defaultLocalClientChannelFactory0.newChannel(defaultChannelPipeline0);
      assertTrue(defaultChannelPipeline0.isAttached());
      assertEquals(0, (int)localChannel0.getId());
      assertTrue(localChannel0.isReadable());
      assertNotNull(localChannel0);
      
      NettyHttpRequest nettyHttpRequest0 = new NettyHttpRequest(defaultHttpRequest0, localChannel0);
      assertEquals(1, indexMetaData0.getTotalNumberOfShards());
      assertEquals(1L, indexMetaData0.getVersion());
      assertEquals("_na_", indexMetaData0.getIndexUUID());
      assertEquals(1, indexMetaData0.getNumberOfShards());
      assertEquals(0, indexMetaData0.getNumberOfReplicas());
      assertEquals(IndexMetaData.State.OPEN, indexMetaData0.getState());
      assertEquals("HTTP", httpVersion0.getProtocolName());
      assertTrue(httpVersion0.isKeepAliveDefault());
      assertEquals(1, httpVersion0.getMinorVersion());
      assertEquals("HTTP/1.1", httpVersion0.toString());
      assertEquals("HTTP/1.1", httpVersion0.getText());
      assertEquals(1, httpVersion0.getMajorVersion());
      assertEquals("DELETE", httpMethod0.getName());
      assertEquals("DELETE", httpMethod0.toString());
      assertEquals("_na_", defaultHttpRequest0.getUri());
      assertTrue(defaultChannelPipeline0.isAttached());
      assertEquals(0, (int)localChannel0.getId());
      assertTrue(localChannel0.isReadable());
      assertEquals("_na_", nettyHttpRequest0.rawPath());
      assertEquals("_na_", nettyHttpRequest0.uri());
      assertEquals(RestRequest.Method.DELETE, nettyHttpRequest0.method());
      assertFalse(nettyHttpRequest0.hasContent());
      assertNotNull(nettyHttpRequest0);
      
      // Undeclared exception!
      restIndicesAction0.getTableWithHeader(nettyHttpRequest0);
  }

  @Test(timeout = 11000)
  public void test7()  throws Throwable  {
      Settings settings0 = Settings.EMPTY;
      assertNotNull(settings0);
      
      RestController restController0 = new RestController(settings0);
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertNotNull(restController0);
      
      String string0 = restController0.nodeName();
      assertEquals("", string0);
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertNotNull(string0);
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = string0;
      stringArray0[1] = string0;
      stringArray0[2] = string0;
      stringArray0[3] = string0;
      stringArray0[4] = string0;
      String string1 = "";
      stringArray0[5] = string1;
      stringArray0[6] = string0;
      String string2 = settings0.get(stringArray0, stringArray0[6]);
      assertEquals(7, stringArray0.length);
      assertSame(string2, string1);
      assertSame(string2, string0);
      assertEquals("", string2);
      assertNotNull(string2);
      
      Client client0 = null;
      IndexNameExpressionResolver indexNameExpressionResolver0 = new IndexNameExpressionResolver(settings0);
      assertNotNull(indexNameExpressionResolver0);
      
      char char0 = 'y';
      String string3 = settings0.toDelimitedString(char0);
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertNotSame(string3, string0);
      assertNotSame(string3, string2);
      assertNotSame(string3, string1);
      assertEquals("", string3);
      assertNotNull(string3);
      
      RestIndicesAction restIndicesAction0 = new RestIndicesAction(settings0, restController0, client0, indexNameExpressionResolver0);
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertNotNull(restIndicesAction0);
      
      StringBuilder stringBuilder0 = null;
      // Undeclared exception!
      try { 
        restIndicesAction0.documentation(stringBuilder0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.rest.action.cat.RestIndicesAction", e);
      }
  }

  @Test(timeout = 11000)
  public void test8()  throws Throwable  {
      Settings settings0 = Settings.Builder.EMPTY_SETTINGS;
      assertNotNull(settings0);
      
      RestController restController0 = new RestController(settings0);
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertNotNull(restController0);
      
      Client client0 = null;
      IndexNameExpressionResolver indexNameExpressionResolver0 = new IndexNameExpressionResolver(settings0);
      assertNotNull(indexNameExpressionResolver0);
      
      RestIndicesAction restIndicesAction0 = new RestIndicesAction(settings0, restController0, client0, indexNameExpressionResolver0);
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertNotNull(restIndicesAction0);
      
      StringBuilder stringBuilder0 = new StringBuilder();
      assertEquals("", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      String string0 = "^j`}t#erm>'+RrQ&";
      StringBuilder stringBuilder1 = stringBuilder0.append(string0);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      assertEquals("^j`}t#erm>'+RrQ&", stringBuilder0.toString());
      assertEquals("^j`}t#erm>'+RrQ&", stringBuilder1.toString());
      assertNotNull(stringBuilder1);
      
      restIndicesAction0.documentation(stringBuilder0);
      assertSame(stringBuilder0, stringBuilder1);
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertEquals("^j`}t#erm>'+RrQ&/_cat/indices\n/_cat/indices/{index}\n", stringBuilder0.toString());
      
      long long0 = (-271L);
      System.setCurrentTimeMillis(long0);
      RestRequest restRequest0 = null;
      // Undeclared exception!
      restIndicesAction0.getTableWithHeader(restRequest0);
  }
}
