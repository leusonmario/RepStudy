/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 08 17:56:59 GMT 2021
 */

package org.elasticsearch.rest.action.cat;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.channels.SocketChannel;
import java.util.concurrent.SynchronousQueue;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;
import org.apache.log4j.Category;
import org.apache.log4j.Logger;
import org.elasticsearch.action.admin.cluster.health.ClusterHealthResponse;
import org.elasticsearch.action.admin.indices.stats.IndicesStatsResponse;
import org.elasticsearch.client.Client;
import org.elasticsearch.cluster.metadata.IndexNameExpressionResolver;
import org.elasticsearch.cluster.metadata.MetaData;
import org.elasticsearch.common.component.Lifecycle;
import org.elasticsearch.common.component.LifecycleListener;
import org.elasticsearch.common.logging.ESLogger;
import org.elasticsearch.common.network.NetworkService;
import org.elasticsearch.common.settings.Settings;
import org.elasticsearch.common.settings.SettingsFilter;
import org.elasticsearch.common.util.BigArrays;
import org.elasticsearch.common.xcontent.ToXContent;
import org.elasticsearch.http.netty.NettyHttpChannel;
import org.elasticsearch.http.netty.NettyHttpRequest;
import org.elasticsearch.http.netty.NettyHttpServerTransport;
import org.elasticsearch.rest.RestChannel;
import org.elasticsearch.rest.RestController;
import org.elasticsearch.rest.RestRequest;
import org.elasticsearch.rest.action.cat.RestIndicesAction;
import org.elasticsearch.threadpool.ThreadPool;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.jboss.netty.channel.Channel;
import org.jboss.netty.channel.ChannelSink;
import org.jboss.netty.channel.DefaultChannelPipeline;
import org.jboss.netty.channel.local.DefaultLocalClientChannelFactory;
import org.jboss.netty.channel.local.DefaultLocalServerChannelFactory;
import org.jboss.netty.channel.local.LocalServerChannel;
import org.jboss.netty.channel.socket.nio.NioSocketChannel;
import org.jboss.netty.channel.socket.nio.NioWorker;
import org.jboss.netty.handler.codec.http.DefaultHttpRequest;
import org.jboss.netty.handler.codec.http.HttpMethod;
import org.jboss.netty.handler.codec.http.HttpVersion;
import org.jboss.netty.util.ThreadNameDeterminer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class RestIndicesAction_ESTest extends RestIndicesAction_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test00()  throws Throwable  {
      MetaData metaData0 = MetaData.EMPTY_META_DATA;
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertNotNull(metaData0);
      
      Settings settings0 = Settings.EMPTY;
      assertNotNull(settings0);
      
      RestController restController0 = new RestController(settings0);
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertNotNull(restController0);
      
      Client client0 = null;
      IndexNameExpressionResolver indexNameExpressionResolver0 = new IndexNameExpressionResolver(settings0);
      assertNotNull(indexNameExpressionResolver0);
      
      RestIndicesAction restIndicesAction0 = new RestIndicesAction(settings0, restController0, client0, indexNameExpressionResolver0);
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertNotNull(restIndicesAction0);
      
      RestRequest restRequest0 = null;
      String[] stringArray0 = new String[5];
      ClusterHealthResponse clusterHealthResponse0 = null;
      IndicesStatsResponse indicesStatsResponse0 = mock(IndicesStatsResponse.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      restIndicesAction0.buildTable(restRequest0, stringArray0, clusterHealthResponse0, indicesStatsResponse0, metaData0);
  }

  @Test(timeout = 11000)
  public void test01()  throws Throwable  {
      Settings settings0 = Settings.EMPTY;
      assertNotNull(settings0);
      
      RestController restController0 = new RestController(settings0);
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertNotNull(restController0);
      
      Client client0 = null;
      IndexNameExpressionResolver indexNameExpressionResolver0 = new IndexNameExpressionResolver(settings0);
      assertNotNull(indexNameExpressionResolver0);
      
      RestIndicesAction restIndicesAction0 = new RestIndicesAction(settings0, restController0, client0, indexNameExpressionResolver0);
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertNotNull(restIndicesAction0);
      
      NetworkService networkService0 = new NetworkService(settings0);
      assertNotNull(networkService0);
      
      BigArrays bigArrays0 = BigArrays.NON_RECYCLING_INSTANCE;
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertNotNull(bigArrays0);
      
      ThreadPool threadPool0 = new ThreadPool(networkService0.DEFAULT_NETWORK_HOST);
      assertNotNull(threadPool0);
      
      NettyHttpServerTransport nettyHttpServerTransport0 = new NettyHttpServerTransport(settings0, networkService0, bigArrays0, threadPool0);
      assertEquals(Lifecycle.State.INITIALIZED, nettyHttpServerTransport0.lifecycleState());
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertNotNull(nettyHttpServerTransport0);
      
      HttpVersion httpVersion0 = HttpVersion.HTTP_1_0;
      assertEquals("HTTP", httpVersion0.getProtocolName());
      assertEquals("HTTP/1.0", httpVersion0.toString());
      assertFalse(httpVersion0.isKeepAliveDefault());
      assertEquals("HTTP/1.0", httpVersion0.getText());
      assertEquals(0, httpVersion0.getMinorVersion());
      assertEquals(1, httpVersion0.getMajorVersion());
      assertNotNull(httpVersion0);
      
      HttpMethod httpMethod0 = new HttpMethod(networkService0.DEFAULT_NETWORK_HOST);
      assertEquals("_local_", httpMethod0.toString());
      assertEquals("_local_", httpMethod0.getName());
      assertNotNull(httpMethod0);
      
      DefaultHttpRequest defaultHttpRequest0 = new DefaultHttpRequest(httpVersion0, httpMethod0, networkService0.DEFAULT_NETWORK_HOST);
      assertEquals("HTTP", httpVersion0.getProtocolName());
      assertEquals("HTTP/1.0", httpVersion0.toString());
      assertFalse(httpVersion0.isKeepAliveDefault());
      assertEquals("HTTP/1.0", httpVersion0.getText());
      assertEquals(0, httpVersion0.getMinorVersion());
      assertEquals(1, httpVersion0.getMajorVersion());
      assertEquals("_local_", httpMethod0.toString());
      assertEquals("_local_", httpMethod0.getName());
      assertEquals("_local_", defaultHttpRequest0.getUri());
      assertNotNull(defaultHttpRequest0);
      
      DefaultChannelPipeline defaultChannelPipeline0 = new DefaultChannelPipeline();
      assertFalse(defaultChannelPipeline0.isAttached());
      assertNotNull(defaultChannelPipeline0);
      
      Channel channel0 = defaultChannelPipeline0.getChannel();
      assertFalse(defaultChannelPipeline0.isAttached());
      assertNull(channel0);
      
      boolean boolean0 = true;
      StringBuilder stringBuilder0 = new StringBuilder(bigArrays0.PAGE_SIZE_IN_BYTES);
      assertEquals("", stringBuilder0.toString());
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertNotNull(stringBuilder0);
      
      restIndicesAction0.documentation(stringBuilder0);
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertEquals("/_cat/indices\n/_cat/indices/{index}\n", stringBuilder0.toString());
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      
      NettyHttpRequest nettyHttpRequest0 = new NettyHttpRequest(defaultHttpRequest0, channel0);
      assertEquals("_local_", nettyHttpRequest0.rawPath());
      assertEquals("_local_", nettyHttpRequest0.uri());
      assertFalse(nettyHttpRequest0.hasContent());
      assertEquals(RestRequest.Method.GET, nettyHttpRequest0.method());
      assertEquals("HTTP", httpVersion0.getProtocolName());
      assertEquals("HTTP/1.0", httpVersion0.toString());
      assertFalse(httpVersion0.isKeepAliveDefault());
      assertEquals("HTTP/1.0", httpVersion0.getText());
      assertEquals(0, httpVersion0.getMinorVersion());
      assertEquals(1, httpVersion0.getMajorVersion());
      assertEquals("_local_", httpMethod0.toString());
      assertEquals("_local_", httpMethod0.getName());
      assertEquals("_local_", defaultHttpRequest0.getUri());
      assertFalse(defaultChannelPipeline0.isAttached());
      assertNotNull(nettyHttpRequest0);
      
      NettyHttpChannel nettyHttpChannel0 = new NettyHttpChannel(nettyHttpServerTransport0, nettyHttpRequest0, boolean0);
      assertEquals("_local_", nettyHttpRequest0.rawPath());
      assertEquals("_local_", nettyHttpRequest0.uri());
      assertFalse(nettyHttpRequest0.hasContent());
      assertEquals(RestRequest.Method.GET, nettyHttpRequest0.method());
      assertTrue(nettyHttpChannel0.detailedErrorsEnabled());
      assertEquals(Lifecycle.State.INITIALIZED, nettyHttpServerTransport0.lifecycleState());
      assertEquals("HTTP", httpVersion0.getProtocolName());
      assertEquals("HTTP/1.0", httpVersion0.toString());
      assertFalse(httpVersion0.isKeepAliveDefault());
      assertEquals("HTTP/1.0", httpVersion0.getText());
      assertEquals(0, httpVersion0.getMinorVersion());
      assertEquals(1, httpVersion0.getMajorVersion());
      assertEquals("_local_", httpMethod0.toString());
      assertEquals("_local_", httpMethod0.getName());
      assertEquals("_local_", defaultHttpRequest0.getUri());
      assertFalse(defaultChannelPipeline0.isAttached());
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertNotNull(nettyHttpChannel0);
      
      // Undeclared exception!
      try { 
        restIndicesAction0.doRequest(nettyHttpRequest0, nettyHttpChannel0, client0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.rest.action.cat.RestIndicesAction", e);
      }
  }

  @Test(timeout = 11000)
  public void test02()  throws Throwable  {
      Client client0 = null;
      IndexNameExpressionResolver indexNameExpressionResolver0 = null;
      Settings settings0 = Settings.EMPTY;
      assertNotNull(settings0);
      
      RestController restController0 = new RestController(settings0);
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertNotNull(restController0);
      
      RestIndicesAction restIndicesAction0 = new RestIndicesAction(settings0, restController0, client0, indexNameExpressionResolver0);
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertNotNull(restIndicesAction0);
      
      IndexNameExpressionResolver indexNameExpressionResolver1 = restIndicesAction0.getindexNameExpressionResolver();
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertNull(indexNameExpressionResolver1);
  }

  @Test(timeout = 11000)
  public void test03()  throws Throwable  {
      Settings settings0 = Settings.EMPTY;
      assertNotNull(settings0);
      
      RestController restController0 = new RestController(settings0);
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertNotNull(restController0);
      
      Client client0 = null;
      IndexNameExpressionResolver indexNameExpressionResolver0 = null;
      RestIndicesAction restIndicesAction0 = new RestIndicesAction(settings0, restController0, client0, indexNameExpressionResolver0);
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertNotNull(restIndicesAction0);
  }

  @Test(timeout = 11000)
  public void test04()  throws Throwable  {
      ToXContent.Params toXContent_Params0 = ToXContent.EMPTY_PARAMS;
      assertNotNull(toXContent_Params0);
      
      Settings settings0 = Settings.EMPTY;
      assertNotNull(settings0);
      
      Settings settings1 = SettingsFilter.filterSettings(toXContent_Params0, settings0);
      assertSame(settings0, settings1);
      assertSame(settings1, settings0);
      assertNotNull(settings1);
      
      RestController restController0 = new RestController(settings0);
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertNotNull(restController0);
      
      Client client0 = null;
      IndexNameExpressionResolver indexNameExpressionResolver0 = new IndexNameExpressionResolver(settings0);
      assertNotNull(indexNameExpressionResolver0);
      
      RestIndicesAction restIndicesAction0 = new RestIndicesAction(settings1, restController0, client0, indexNameExpressionResolver0);
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertNotNull(restIndicesAction0);
      
      String string0 = "";
      StringBuilder stringBuilder0 = new StringBuilder(string0);
      assertEquals("", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      restIndicesAction0.documentation(stringBuilder0);
      assertSame(settings0, settings1);
      assertSame(settings1, settings0);
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertEquals("/_cat/indices\n/_cat/indices/{index}\n", stringBuilder0.toString());
  }

  @Test(timeout = 11000)
  public void test05()  throws Throwable  {
      String string0 = "dla#";
      String string1 = " `cW;aD~ef])`5kH";
      Logger logger0 = Category.exists(string1);
      assertNotSame(string1, string0);
      assertFalse(string1.equals((Object)string0));
      assertNull(logger0);
      
      ESLogger eSLogger0 = new ESLogger(string0, logger0);
      assertEquals("dla#", eSLogger0.getPrefix());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(eSLogger0);
      
      MetaData metaData0 = MetaData.PROTO;
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertNotNull(metaData0);
      
      MetaData metaData1 = MetaData.addDefaultUnitsIfNeeded(eSLogger0, metaData0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertSame(metaData0, metaData1);
      assertSame(metaData1, metaData0);
      assertEquals("dla#", eSLogger0.getPrefix());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals("_na_", metaData1.clusterUUID());
      assertEquals(0L, metaData1.version());
      assertEquals(0, metaData1.getTotalNumberOfShards());
      assertEquals(0, metaData1.getNumberOfShards());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(metaData1);
      
      Settings settings0 = metaData1.persistentSettings();
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertSame(metaData0, metaData1);
      assertSame(metaData1, metaData0);
      assertEquals("dla#", eSLogger0.getPrefix());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals("_na_", metaData1.clusterUUID());
      assertEquals(0L, metaData1.version());
      assertEquals(0, metaData1.getTotalNumberOfShards());
      assertEquals(0, metaData1.getNumberOfShards());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(settings0);
      
      RestController restController0 = new RestController(settings0);
      assertEquals("dla#", eSLogger0.getPrefix());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals("_na_", metaData1.clusterUUID());
      assertEquals(0L, metaData1.version());
      assertEquals(0, metaData1.getTotalNumberOfShards());
      assertEquals(0, metaData1.getNumberOfShards());
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(restController0);
      
      Client client0 = null;
      RestController restController1 = restController0.stop();
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertSame(metaData0, metaData1);
      assertSame(metaData1, metaData0);
      assertSame(restController0, restController1);
      assertSame(restController1, restController0);
      assertEquals("dla#", eSLogger0.getPrefix());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals("_na_", metaData1.clusterUUID());
      assertEquals(0L, metaData1.version());
      assertEquals(0, metaData1.getTotalNumberOfShards());
      assertEquals(0, metaData1.getNumberOfShards());
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertEquals(Lifecycle.State.INITIALIZED, restController1.lifecycleState());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(restController1);
      
      IndexNameExpressionResolver indexNameExpressionResolver0 = new IndexNameExpressionResolver(settings0);
      assertEquals("dla#", eSLogger0.getPrefix());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals("_na_", metaData1.clusterUUID());
      assertEquals(0L, metaData1.version());
      assertEquals(0, metaData1.getTotalNumberOfShards());
      assertEquals(0, metaData1.getNumberOfShards());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(indexNameExpressionResolver0);
      
      RestIndicesAction restIndicesAction0 = new RestIndicesAction(settings0, restController0, client0, indexNameExpressionResolver0);
      assertEquals("dla#", eSLogger0.getPrefix());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals("_na_", metaData1.clusterUUID());
      assertEquals(0L, metaData1.version());
      assertEquals(0, metaData1.getTotalNumberOfShards());
      assertEquals(0, metaData1.getNumberOfShards());
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(restIndicesAction0);
      
      StringBuilder stringBuilder0 = null;
      // Undeclared exception!
      try { 
        restIndicesAction0.documentation(stringBuilder0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.rest.action.cat.RestIndicesAction", e);
      }
  }

  @Test(timeout = 11000)
  public void test06()  throws Throwable  {
      MetaData metaData0 = MetaData.EMPTY_META_DATA;
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertNotNull(metaData0);
      
      Settings settings0 = metaData0.transientSettings();
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertNotNull(settings0);
      
      RestController restController0 = null;
      Client client0 = null;
      IndexNameExpressionResolver indexNameExpressionResolver0 = new IndexNameExpressionResolver(settings0);
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertNotNull(indexNameExpressionResolver0);
      
      RestIndicesAction restIndicesAction0 = null;
      try {
        restIndicesAction0 = new RestIndicesAction(settings0, restController0, client0, indexNameExpressionResolver0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.rest.action.cat.RestIndicesAction", e);
      }
  }

  @Test(timeout = 11000)
  public void test07()  throws Throwable  {
      Settings settings0 = Settings.Builder.EMPTY_SETTINGS;
      assertNotNull(settings0);
      
      RestController restController0 = new RestController(settings0);
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertNotNull(restController0);
      
      Client client0 = null;
      IndexNameExpressionResolver indexNameExpressionResolver0 = new IndexNameExpressionResolver(settings0);
      assertNotNull(indexNameExpressionResolver0);
      
      RestIndicesAction restIndicesAction0 = new RestIndicesAction(settings0, restController0, client0, indexNameExpressionResolver0);
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertNotNull(restIndicesAction0);
      
      IndexNameExpressionResolver indexNameExpressionResolver1 = restIndicesAction0.getindexNameExpressionResolver();
      assertSame(indexNameExpressionResolver0, indexNameExpressionResolver1);
      assertSame(indexNameExpressionResolver1, indexNameExpressionResolver0);
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertNotNull(indexNameExpressionResolver1);
  }

  @Test(timeout = 11000)
  public void test08()  throws Throwable  {
      MetaData metaData0 = MetaData.EMPTY_META_DATA;
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertNotNull(metaData0);
      
      Settings settings0 = metaData0.settings();
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertNotNull(settings0);
      
      RestController restController0 = new RestController(settings0);
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertNotNull(restController0);
      
      Client client0 = null;
      IndexNameExpressionResolver indexNameExpressionResolver0 = new IndexNameExpressionResolver(settings0);
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertNotNull(indexNameExpressionResolver0);
      
      RestIndicesAction restIndicesAction0 = new RestIndicesAction(settings0, restController0, client0, indexNameExpressionResolver0);
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertNotNull(restIndicesAction0);
      
      RestRequest restRequest0 = null;
      LifecycleListener lifecycleListener0 = mock(LifecycleListener.class, new ViolatedAssumptionAnswer());
      restController0.addLifecycleListener(lifecycleListener0);
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = metaData0.CONTEXT_MODE_GATEWAY;
      stringArray0[1] = metaData0.ALL;
      stringArray0[2] = metaData0.CONTEXT_MODE_GATEWAY;
      stringArray0[3] = metaData0.CONTEXT_MODE_SNAPSHOT;
      ClusterHealthResponse clusterHealthResponse0 = null;
      String string0 = "Na+VxT";
      boolean boolean0 = metaData0.hasAlias(string0);
      assertFalse(boolean0);
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0L, metaData0.version());
      
      IndicesStatsResponse indicesStatsResponse0 = mock(IndicesStatsResponse.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      restIndicesAction0.buildTable(restRequest0, stringArray0, clusterHealthResponse0, indicesStatsResponse0, metaData0);
  }

  @Test(timeout = 11000)
  public void test09()  throws Throwable  {
      ToXContent.Params toXContent_Params0 = ToXContent.EMPTY_PARAMS;
      assertNotNull(toXContent_Params0);
      
      Settings settings0 = Settings.EMPTY;
      assertNotNull(settings0);
      
      Settings settings1 = SettingsFilter.filterSettings(toXContent_Params0, settings0);
      assertSame(settings0, settings1);
      assertSame(settings1, settings0);
      assertNotNull(settings1);
      
      RestController restController0 = new RestController(settings0);
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertNotNull(restController0);
      
      Client client0 = null;
      IndexNameExpressionResolver indexNameExpressionResolver0 = new IndexNameExpressionResolver(settings0);
      assertNotNull(indexNameExpressionResolver0);
      
      RestIndicesAction restIndicesAction0 = new RestIndicesAction(settings1, restController0, client0, indexNameExpressionResolver0);
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertNotNull(restIndicesAction0);
      
      String string0 = "";
      NetworkService networkService0 = new NetworkService(settings1);
      assertNotNull(networkService0);
      
      BigArrays bigArrays0 = BigArrays.NON_RECYCLING_INSTANCE;
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertNotNull(bigArrays0);
      
      ThreadPool threadPool0 = new ThreadPool(settings1);
      assertNotNull(threadPool0);
      
      NettyHttpServerTransport nettyHttpServerTransport0 = new NettyHttpServerTransport(settings0, networkService0, bigArrays0, threadPool0);
      assertEquals(Lifecycle.State.INITIALIZED, nettyHttpServerTransport0.lifecycleState());
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertNotNull(nettyHttpServerTransport0);
      
      HttpVersion httpVersion0 = HttpVersion.HTTP_1_0;
      assertEquals(0, httpVersion0.getMinorVersion());
      assertEquals("HTTP/1.0", httpVersion0.toString());
      assertEquals(1, httpVersion0.getMajorVersion());
      assertEquals("HTTP/1.0", httpVersion0.getText());
      assertEquals("HTTP", httpVersion0.getProtocolName());
      assertFalse(httpVersion0.isKeepAliveDefault());
      assertNotNull(httpVersion0);
      
      String string1 = ")O?^+Pr6";
      HttpMethod httpMethod0 = new HttpMethod(string1);
      assertEquals(")O?^+Pr6", httpMethod0.toString());
      assertEquals(")O?^+Pr6", httpMethod0.getName());
      assertFalse(string1.equals((Object)string0));
      assertNotNull(httpMethod0);
      
      DefaultHttpRequest defaultHttpRequest0 = new DefaultHttpRequest(httpVersion0, httpMethod0, networkService0.DEFAULT_NETWORK_HOST);
      assertEquals(0, httpVersion0.getMinorVersion());
      assertEquals("HTTP/1.0", httpVersion0.toString());
      assertEquals(1, httpVersion0.getMajorVersion());
      assertEquals("HTTP/1.0", httpVersion0.getText());
      assertEquals("HTTP", httpVersion0.getProtocolName());
      assertFalse(httpVersion0.isKeepAliveDefault());
      assertEquals(")O?^+Pr6", httpMethod0.toString());
      assertEquals(")O?^+Pr6", httpMethod0.getName());
      assertEquals("_local_", defaultHttpRequest0.getUri());
      assertFalse(string1.equals((Object)string0));
      assertNotNull(defaultHttpRequest0);
      
      DefaultChannelPipeline defaultChannelPipeline0 = new DefaultChannelPipeline();
      assertFalse(defaultChannelPipeline0.isAttached());
      assertNotNull(defaultChannelPipeline0);
      
      Channel channel0 = defaultChannelPipeline0.getChannel();
      assertFalse(defaultChannelPipeline0.isAttached());
      assertNull(channel0);
      
      DefaultLocalClientChannelFactory defaultLocalClientChannelFactory0 = new DefaultLocalClientChannelFactory();
      assertNotNull(defaultLocalClientChannelFactory0);
      
      ChannelSink channelSink0 = defaultChannelPipeline0.getSink();
      assertFalse(defaultChannelPipeline0.isAttached());
      assertNotNull(channelSink0);
      
      SocketChannel socketChannel0 = SocketChannel.open();
      assertEquals(13, socketChannel0.validOps());
      assertFalse(socketChannel0.isConnected());
      assertTrue(socketChannel0.isBlocking());
      assertFalse(socketChannel0.isConnectionPending());
      assertTrue(socketChannel0.isOpen());
      assertFalse(socketChannel0.isRegistered());
      assertNotNull(socketChannel0);
      
      NioWorker nioWorker0 = null;
      NioSocketChannel nioSocketChannel0 = new NioSocketChannel(channel0, defaultLocalClientChannelFactory0, defaultChannelPipeline0, channelSink0, socketChannel0, nioWorker0);
      assertTrue(defaultChannelPipeline0.isAttached());
      assertEquals(13, socketChannel0.validOps());
      assertFalse(socketChannel0.isConnected());
      assertTrue(socketChannel0.isBlocking());
      assertFalse(socketChannel0.isConnectionPending());
      assertTrue(socketChannel0.isOpen());
      assertFalse(socketChannel0.isRegistered());
      assertTrue(nioSocketChannel0.isOpen());
      assertEquals(0, (int)nioSocketChannel0.getId());
      assertFalse(nioSocketChannel0.isBound());
      assertFalse(nioSocketChannel0.isConnected());
      assertTrue(nioSocketChannel0.isReadable());
      assertNotNull(nioSocketChannel0);
      
      NettyHttpRequest nettyHttpRequest0 = new NettyHttpRequest(defaultHttpRequest0, nioSocketChannel0);
      assertEquals(0, httpVersion0.getMinorVersion());
      assertEquals("HTTP/1.0", httpVersion0.toString());
      assertEquals(1, httpVersion0.getMajorVersion());
      assertEquals("HTTP/1.0", httpVersion0.getText());
      assertEquals("HTTP", httpVersion0.getProtocolName());
      assertFalse(httpVersion0.isKeepAliveDefault());
      assertEquals(")O?^+Pr6", httpMethod0.toString());
      assertEquals(")O?^+Pr6", httpMethod0.getName());
      assertEquals("_local_", defaultHttpRequest0.getUri());
      assertTrue(defaultChannelPipeline0.isAttached());
      assertEquals(13, socketChannel0.validOps());
      assertFalse(socketChannel0.isConnected());
      assertTrue(socketChannel0.isBlocking());
      assertFalse(socketChannel0.isConnectionPending());
      assertTrue(socketChannel0.isOpen());
      assertFalse(socketChannel0.isRegistered());
      assertTrue(nioSocketChannel0.isOpen());
      assertEquals(0, (int)nioSocketChannel0.getId());
      assertFalse(nioSocketChannel0.isBound());
      assertFalse(nioSocketChannel0.isConnected());
      assertTrue(nioSocketChannel0.isReadable());
      assertEquals("_local_", nettyHttpRequest0.rawPath());
      assertFalse(nettyHttpRequest0.hasContent());
      assertEquals(RestRequest.Method.GET, nettyHttpRequest0.method());
      assertEquals("_local_", nettyHttpRequest0.uri());
      assertFalse(string1.equals((Object)string0));
      assertNotNull(nettyHttpRequest0);
      
      boolean boolean0 = false;
      NettyHttpChannel nettyHttpChannel0 = new NettyHttpChannel(nettyHttpServerTransport0, nettyHttpRequest0, boolean0);
      assertEquals(Lifecycle.State.INITIALIZED, nettyHttpServerTransport0.lifecycleState());
      assertEquals(0, httpVersion0.getMinorVersion());
      assertEquals("HTTP/1.0", httpVersion0.toString());
      assertEquals(1, httpVersion0.getMajorVersion());
      assertEquals("HTTP/1.0", httpVersion0.getText());
      assertEquals("HTTP", httpVersion0.getProtocolName());
      assertFalse(httpVersion0.isKeepAliveDefault());
      assertEquals(")O?^+Pr6", httpMethod0.toString());
      assertEquals(")O?^+Pr6", httpMethod0.getName());
      assertEquals("_local_", defaultHttpRequest0.getUri());
      assertTrue(defaultChannelPipeline0.isAttached());
      assertEquals(13, socketChannel0.validOps());
      assertFalse(socketChannel0.isConnected());
      assertTrue(socketChannel0.isBlocking());
      assertFalse(socketChannel0.isConnectionPending());
      assertTrue(socketChannel0.isOpen());
      assertFalse(socketChannel0.isRegistered());
      assertTrue(nioSocketChannel0.isOpen());
      assertEquals(0, (int)nioSocketChannel0.getId());
      assertFalse(nioSocketChannel0.isBound());
      assertFalse(nioSocketChannel0.isConnected());
      assertTrue(nioSocketChannel0.isReadable());
      assertEquals("_local_", nettyHttpRequest0.rawPath());
      assertFalse(nettyHttpRequest0.hasContent());
      assertEquals(RestRequest.Method.GET, nettyHttpRequest0.method());
      assertEquals("_local_", nettyHttpRequest0.uri());
      assertFalse(nettyHttpChannel0.detailedErrorsEnabled());
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(nettyHttpChannel0);
      
      RestRequest restRequest0 = nettyHttpChannel0.request();
      assertSame(settings0, settings1);
      assertSame(settings1, settings0);
      assertNotSame(string1, string0);
      assertSame(nettyHttpRequest0, restRequest0);
      assertSame(restRequest0, nettyHttpRequest0);
      assertEquals(Lifecycle.State.INITIALIZED, nettyHttpServerTransport0.lifecycleState());
      assertEquals(0, httpVersion0.getMinorVersion());
      assertEquals("HTTP/1.0", httpVersion0.toString());
      assertEquals(1, httpVersion0.getMajorVersion());
      assertEquals("HTTP/1.0", httpVersion0.getText());
      assertEquals("HTTP", httpVersion0.getProtocolName());
      assertFalse(httpVersion0.isKeepAliveDefault());
      assertEquals(")O?^+Pr6", httpMethod0.toString());
      assertEquals(")O?^+Pr6", httpMethod0.getName());
      assertEquals("_local_", defaultHttpRequest0.getUri());
      assertTrue(defaultChannelPipeline0.isAttached());
      assertEquals(13, socketChannel0.validOps());
      assertFalse(socketChannel0.isConnected());
      assertTrue(socketChannel0.isBlocking());
      assertFalse(socketChannel0.isConnectionPending());
      assertTrue(socketChannel0.isOpen());
      assertFalse(socketChannel0.isRegistered());
      assertTrue(nioSocketChannel0.isOpen());
      assertEquals(0, (int)nioSocketChannel0.getId());
      assertFalse(nioSocketChannel0.isBound());
      assertFalse(nioSocketChannel0.isConnected());
      assertTrue(nioSocketChannel0.isReadable());
      assertEquals("_local_", nettyHttpRequest0.rawPath());
      assertFalse(nettyHttpRequest0.hasContent());
      assertEquals(RestRequest.Method.GET, nettyHttpRequest0.method());
      assertEquals("_local_", nettyHttpRequest0.uri());
      assertFalse(nettyHttpChannel0.detailedErrorsEnabled());
      assertEquals(RestRequest.Method.GET, restRequest0.method());
      assertEquals("_local_", restRequest0.uri());
      assertFalse(restRequest0.hasContent());
      assertEquals("_local_", restRequest0.rawPath());
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(restRequest0);
      
      try { 
        restIndicesAction0.handleRequest(restRequest0, (RestChannel) nettyHttpChannel0, client0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.rest.action.cat.RestIndicesAction", e);
      }
  }

  @Test(timeout = 11000)
  public void test10()  throws Throwable  {
      Client client0 = null;
      IndexNameExpressionResolver indexNameExpressionResolver0 = null;
      MetaData metaData0 = MetaData.PROTO;
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getNumberOfShards());
      assertNotNull(metaData0);
      
      Settings settings0 = metaData0.transientSettings();
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getNumberOfShards());
      assertNotNull(settings0);
      
      RestController restController0 = new RestController(settings0);
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertNotNull(restController0);
      
      RestIndicesAction restIndicesAction0 = new RestIndicesAction(settings0, restController0, client0, indexNameExpressionResolver0);
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertNotNull(restIndicesAction0);
      
      IndexNameExpressionResolver indexNameExpressionResolver1 = restIndicesAction0.getindexNameExpressionResolver();
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertNull(indexNameExpressionResolver1);
  }

  @Test(timeout = 11000)
  public void test11()  throws Throwable  {
      MetaData metaData0 = MetaData.EMPTY_META_DATA;
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals("_na_", metaData0.clusterUUID());
      assertNotNull(metaData0);
      
      Settings settings0 = metaData0.settings();
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals("_na_", metaData0.clusterUUID());
      assertNotNull(settings0);
      
      RestController restController0 = new RestController(settings0);
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertNotNull(restController0);
      
      Client client0 = null;
      IndexNameExpressionResolver indexNameExpressionResolver0 = new IndexNameExpressionResolver(settings0);
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals("_na_", metaData0.clusterUUID());
      assertNotNull(indexNameExpressionResolver0);
      
      RestIndicesAction restIndicesAction0 = new RestIndicesAction(settings0, restController0, client0, indexNameExpressionResolver0);
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertNotNull(restIndicesAction0);
      
      RestRequest restRequest0 = null;
      LifecycleListener lifecycleListener0 = mock(LifecycleListener.class, new ViolatedAssumptionAnswer());
      restController0.addLifecycleListener(lifecycleListener0);
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      
      String[] stringArray0 = new String[4];
      stringArray0[3] = metaData0.CONTEXT_MODE_GATEWAY;
      stringArray0[1] = metaData0.ALL;
      stringArray0[2] = metaData0.CONTEXT_MODE_GATEWAY;
      stringArray0[3] = metaData0.CONTEXT_MODE_SNAPSHOT;
      ClusterHealthResponse clusterHealthResponse0 = null;
      String string0 = "Na+VxT";
      boolean boolean0 = metaData0.hasAlias(string0);
      assertFalse(boolean0);
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals("_na_", metaData0.clusterUUID());
      
      IndicesStatsResponse indicesStatsResponse0 = mock(IndicesStatsResponse.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      restIndicesAction0.getTableWithHeader(restRequest0);
  }

  @Test(timeout = 11000)
  public void test12()  throws Throwable  {
      ToXContent.Params toXContent_Params0 = ToXContent.EMPTY_PARAMS;
      assertNotNull(toXContent_Params0);
      
      Settings settings0 = Settings.EMPTY;
      assertNotNull(settings0);
      
      Settings settings1 = SettingsFilter.filterSettings(toXContent_Params0, settings0);
      assertSame(settings0, settings1);
      assertSame(settings1, settings0);
      assertNotNull(settings1);
      
      RestController restController0 = new RestController(settings0);
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertNotNull(restController0);
      
      Client client0 = null;
      IndexNameExpressionResolver indexNameExpressionResolver0 = new IndexNameExpressionResolver(settings0);
      assertNotNull(indexNameExpressionResolver0);
      
      RestIndicesAction restIndicesAction0 = new RestIndicesAction(settings1, restController0, client0, indexNameExpressionResolver0);
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertNotNull(restIndicesAction0);
      
      String string0 = "";
      NetworkService networkService0 = new NetworkService(settings1);
      assertNotNull(networkService0);
      
      BigArrays bigArrays0 = BigArrays.NON_RECYCLING_INSTANCE;
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertNotNull(bigArrays0);
      
      ThreadPool threadPool0 = new ThreadPool(settings1);
      assertNotNull(threadPool0);
      
      NettyHttpServerTransport nettyHttpServerTransport0 = new NettyHttpServerTransport(settings0, networkService0, bigArrays0, threadPool0);
      assertEquals(Lifecycle.State.INITIALIZED, nettyHttpServerTransport0.lifecycleState());
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertNotNull(nettyHttpServerTransport0);
      
      HttpVersion httpVersion0 = HttpVersion.HTTP_1_0;
      assertFalse(httpVersion0.isKeepAliveDefault());
      assertEquals("HTTP/1.0", httpVersion0.toString());
      assertEquals(1, httpVersion0.getMajorVersion());
      assertEquals(0, httpVersion0.getMinorVersion());
      assertEquals("HTTP/1.0", httpVersion0.getText());
      assertEquals("HTTP", httpVersion0.getProtocolName());
      assertNotNull(httpVersion0);
      
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
      assertFalse(boolean0);
      
      String string1 = ")O?^+Pr6";
      HttpMethod httpMethod0 = new HttpMethod(string1);
      assertEquals(")O?^+Pr6", httpMethod0.getName());
      assertEquals(")O?^+Pr6", httpMethod0.toString());
      assertFalse(string1.equals((Object)string0));
      assertNotNull(httpMethod0);
      
      DefaultHttpRequest defaultHttpRequest0 = new DefaultHttpRequest(httpVersion0, httpMethod0, networkService0.DEFAULT_NETWORK_HOST);
      assertEquals(")O?^+Pr6", httpMethod0.getName());
      assertEquals(")O?^+Pr6", httpMethod0.toString());
      assertEquals("_local_", defaultHttpRequest0.getUri());
      assertFalse(httpVersion0.isKeepAliveDefault());
      assertEquals("HTTP/1.0", httpVersion0.toString());
      assertEquals(1, httpVersion0.getMajorVersion());
      assertEquals(0, httpVersion0.getMinorVersion());
      assertEquals("HTTP/1.0", httpVersion0.getText());
      assertEquals("HTTP", httpVersion0.getProtocolName());
      assertFalse(string1.equals((Object)string0));
      assertNotNull(defaultHttpRequest0);
      
      DefaultChannelPipeline defaultChannelPipeline0 = new DefaultChannelPipeline();
      assertFalse(defaultChannelPipeline0.isAttached());
      assertNotNull(defaultChannelPipeline0);
      
      Channel channel0 = defaultChannelPipeline0.getChannel();
      assertFalse(defaultChannelPipeline0.isAttached());
      assertNull(channel0);
      
      DefaultLocalClientChannelFactory defaultLocalClientChannelFactory0 = new DefaultLocalClientChannelFactory();
      assertNotNull(defaultLocalClientChannelFactory0);
      
      ChannelSink channelSink0 = defaultChannelPipeline0.getSink();
      assertFalse(defaultChannelPipeline0.isAttached());
      assertNotNull(channelSink0);
      
      SocketChannel socketChannel0 = SocketChannel.open();
      assertFalse(socketChannel0.isConnected());
      assertTrue(socketChannel0.isOpen());
      assertTrue(socketChannel0.isBlocking());
      assertEquals(13, socketChannel0.validOps());
      assertFalse(socketChannel0.isRegistered());
      assertFalse(socketChannel0.isConnectionPending());
      assertNotNull(socketChannel0);
      
      NioWorker nioWorker0 = null;
      NioSocketChannel nioSocketChannel0 = new NioSocketChannel(channel0, defaultLocalClientChannelFactory0, defaultChannelPipeline0, channelSink0, socketChannel0, nioWorker0);
      assertTrue(defaultChannelPipeline0.isAttached());
      assertFalse(socketChannel0.isConnected());
      assertTrue(socketChannel0.isOpen());
      assertTrue(socketChannel0.isBlocking());
      assertEquals(13, socketChannel0.validOps());
      assertFalse(socketChannel0.isRegistered());
      assertFalse(socketChannel0.isConnectionPending());
      assertFalse(nioSocketChannel0.isConnected());
      assertEquals(0, (int)nioSocketChannel0.getId());
      assertFalse(nioSocketChannel0.isBound());
      assertTrue(nioSocketChannel0.isOpen());
      assertTrue(nioSocketChannel0.isReadable());
      assertNotNull(nioSocketChannel0);
      
      NettyHttpRequest nettyHttpRequest0 = new NettyHttpRequest(defaultHttpRequest0, nioSocketChannel0);
      assertFalse(httpVersion0.isKeepAliveDefault());
      assertEquals("HTTP/1.0", httpVersion0.toString());
      assertEquals(1, httpVersion0.getMajorVersion());
      assertEquals(0, httpVersion0.getMinorVersion());
      assertEquals("HTTP/1.0", httpVersion0.getText());
      assertEquals("HTTP", httpVersion0.getProtocolName());
      assertEquals(")O?^+Pr6", httpMethod0.getName());
      assertEquals(")O?^+Pr6", httpMethod0.toString());
      assertEquals("_local_", defaultHttpRequest0.getUri());
      assertTrue(defaultChannelPipeline0.isAttached());
      assertFalse(socketChannel0.isConnected());
      assertTrue(socketChannel0.isOpen());
      assertTrue(socketChannel0.isBlocking());
      assertEquals(13, socketChannel0.validOps());
      assertFalse(socketChannel0.isRegistered());
      assertFalse(socketChannel0.isConnectionPending());
      assertFalse(nioSocketChannel0.isConnected());
      assertEquals(0, (int)nioSocketChannel0.getId());
      assertFalse(nioSocketChannel0.isBound());
      assertTrue(nioSocketChannel0.isOpen());
      assertTrue(nioSocketChannel0.isReadable());
      assertEquals("_local_", nettyHttpRequest0.uri());
      assertEquals(RestRequest.Method.GET, nettyHttpRequest0.method());
      assertFalse(nettyHttpRequest0.hasContent());
      assertEquals("_local_", nettyHttpRequest0.rawPath());
      assertFalse(string1.equals((Object)string0));
      assertNotNull(nettyHttpRequest0);
      
      boolean boolean1 = false;
      NettyHttpChannel nettyHttpChannel0 = new NettyHttpChannel(nettyHttpServerTransport0, nettyHttpRequest0, boolean1);
      assertEquals(Lifecycle.State.INITIALIZED, nettyHttpServerTransport0.lifecycleState());
      assertFalse(httpVersion0.isKeepAliveDefault());
      assertEquals("HTTP/1.0", httpVersion0.toString());
      assertEquals(1, httpVersion0.getMajorVersion());
      assertEquals(0, httpVersion0.getMinorVersion());
      assertEquals("HTTP/1.0", httpVersion0.getText());
      assertEquals("HTTP", httpVersion0.getProtocolName());
      assertEquals(")O?^+Pr6", httpMethod0.getName());
      assertEquals(")O?^+Pr6", httpMethod0.toString());
      assertEquals("_local_", defaultHttpRequest0.getUri());
      assertTrue(defaultChannelPipeline0.isAttached());
      assertFalse(socketChannel0.isConnected());
      assertTrue(socketChannel0.isOpen());
      assertTrue(socketChannel0.isBlocking());
      assertEquals(13, socketChannel0.validOps());
      assertFalse(socketChannel0.isRegistered());
      assertFalse(socketChannel0.isConnectionPending());
      assertFalse(nioSocketChannel0.isConnected());
      assertEquals(0, (int)nioSocketChannel0.getId());
      assertFalse(nioSocketChannel0.isBound());
      assertTrue(nioSocketChannel0.isOpen());
      assertTrue(nioSocketChannel0.isReadable());
      assertEquals("_local_", nettyHttpRequest0.uri());
      assertEquals(RestRequest.Method.GET, nettyHttpRequest0.method());
      assertFalse(nettyHttpRequest0.hasContent());
      assertEquals("_local_", nettyHttpRequest0.rawPath());
      assertFalse(nettyHttpChannel0.detailedErrorsEnabled());
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertFalse(string1.equals((Object)string0));
      assertTrue(boolean1 == boolean0);
      assertNotNull(nettyHttpChannel0);
      
      // Undeclared exception!
      try { 
        restIndicesAction0.doRequest(nettyHttpRequest0, nettyHttpChannel0, client0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.rest.action.cat.RestIndicesAction", e);
      }
  }
}
