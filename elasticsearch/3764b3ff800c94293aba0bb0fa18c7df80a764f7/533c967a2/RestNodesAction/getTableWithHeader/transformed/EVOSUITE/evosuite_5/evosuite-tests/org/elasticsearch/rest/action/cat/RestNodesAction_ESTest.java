/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 09 06:17:57 GMT 2021
 */

package org.elasticsearch.rest.action.cat;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.net.InetAddress;
import java.util.LinkedHashSet;
import java.util.Set;
import org.elasticsearch.action.admin.cluster.node.info.NodeInfo;
import org.elasticsearch.action.admin.cluster.node.info.NodesInfoResponse;
import org.elasticsearch.action.admin.cluster.node.stats.NodeStats;
import org.elasticsearch.action.admin.cluster.node.stats.NodesStatsResponse;
import org.elasticsearch.action.admin.cluster.state.ClusterStateResponse;
import org.elasticsearch.client.Client;
import org.elasticsearch.cluster.ClusterName;
import org.elasticsearch.cluster.ClusterState;
import org.elasticsearch.cluster.metadata.IndexMetaData;
import org.elasticsearch.cluster.metadata.MetaData;
import org.elasticsearch.cluster.metadata.RepositoriesMetaData;
import org.elasticsearch.cluster.routing.RoutingNodes;
import org.elasticsearch.common.Table;
import org.elasticsearch.common.bytes.BytesArray;
import org.elasticsearch.common.component.Lifecycle;
import org.elasticsearch.common.component.LifecycleListener;
import org.elasticsearch.common.io.stream.StreamInput;
import org.elasticsearch.common.logging.ESLogger;
import org.elasticsearch.common.network.NetworkService;
import org.elasticsearch.common.settings.Settings;
import org.elasticsearch.common.settings.SettingsFilter;
import org.elasticsearch.common.unit.SizeValue;
import org.elasticsearch.common.util.BigArrays;
import org.elasticsearch.common.xcontent.ToXContent;
import org.elasticsearch.http.netty.NettyHttpChannel;
import org.elasticsearch.http.netty.NettyHttpRequest;
import org.elasticsearch.http.netty.NettyHttpServerTransport;
import org.elasticsearch.http.netty.pipelining.OrderedUpstreamMessageEvent;
import org.elasticsearch.index.mapper.object.RootObjectMapper;
import org.elasticsearch.rest.RestController;
import org.elasticsearch.rest.RestRequest;
import org.elasticsearch.rest.action.cat.RestNodesAction;
import org.elasticsearch.threadpool.ThreadPool;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.net.MockInetAddress;
import org.evosuite.runtime.mock.java.net.MockInetSocketAddress;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.jboss.netty.channel.Channel;
import org.jboss.netty.channel.DefaultChannelPipeline;
import org.jboss.netty.channel.local.DefaultLocalClientChannelFactory;
import org.jboss.netty.channel.local.DefaultLocalServerChannelFactory;
import org.jboss.netty.channel.local.LocalChannel;
import org.jboss.netty.channel.local.LocalServerChannel;
import org.jboss.netty.handler.codec.http.DefaultHttpRequest;
import org.jboss.netty.handler.codec.http.HttpMethod;
import org.jboss.netty.handler.codec.http.HttpVersion;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class RestNodesAction_ESTest extends RestNodesAction_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test00()  throws Throwable  {
      Settings settings0 = Settings.Builder.EMPTY_SETTINGS;
      assertNotNull(settings0);
      
      RestController restController0 = new RestController(settings0);
      assertNotNull(restController0);
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      
      Client client0 = null;
      RestNodesAction restNodesAction0 = new RestNodesAction(settings0, restController0, client0);
      assertNotNull(restNodesAction0);
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      
      long long0 = 1812L;
      short short0 = restNodesAction0.calculatePercentage(long0, long0);
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertEquals((short)100, short0);
      
      ClusterStateResponse clusterStateResponse0 = new ClusterStateResponse();
      assertNotNull(clusterStateResponse0);
      
      NodesInfoResponse nodesInfoResponse0 = new NodesInfoResponse();
      assertNotNull(nodesInfoResponse0);
      
      ClusterName clusterName0 = ClusterName.DEFAULT;
      assertNotNull(clusterName0);
      assertEquals("elasticsearch", clusterName0.value());
  }

  @Test(timeout = 11000)
  public void test01()  throws Throwable  {
      ClusterState clusterState0 = ClusterState.PROTO;
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertNotNull(clusterState0);
      assertFalse(clusterState0.wasReadFromDiff());
      assertEquals("AAAAAAEAQACCAAAAAwAAAA", clusterState0.stateUUID());
      assertEquals(0L, clusterState0.getVersion());
      assertEquals(0L, clusterState0.version());
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState0.status());
      
      RoutingNodes routingNodes0 = clusterState0.getRoutingNodes();
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertNotNull(routingNodes0);
      assertFalse(clusterState0.wasReadFromDiff());
      assertEquals("AAAAAAEAQACCAAAAAwAAAA", clusterState0.stateUUID());
      assertEquals(0L, clusterState0.getVersion());
      assertEquals(0L, clusterState0.version());
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState0.status());
      assertFalse(routingNodes0.hasUnassignedShards());
      assertFalse(routingNodes0.hasInactiveShards());
      assertFalse(routingNodes0.hasUnassignedPrimaries());
      assertEquals(0, routingNodes0.size());
      assertFalse(routingNodes0.hasInactivePrimaries());
      assertEquals(0, routingNodes0.getRelocatingShardCount());
      
      MetaData metaData0 = routingNodes0.getMetaData();
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertNotNull(metaData0);
      assertFalse(clusterState0.wasReadFromDiff());
      assertEquals("AAAAAAEAQACCAAAAAwAAAA", clusterState0.stateUUID());
      assertEquals(0L, clusterState0.getVersion());
      assertEquals(0L, clusterState0.version());
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState0.status());
      assertFalse(routingNodes0.hasUnassignedShards());
      assertFalse(routingNodes0.hasInactiveShards());
      assertFalse(routingNodes0.hasUnassignedPrimaries());
      assertEquals(0, routingNodes0.size());
      assertFalse(routingNodes0.hasInactivePrimaries());
      assertEquals(0, routingNodes0.getRelocatingShardCount());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getNumberOfShards());
      
      Settings settings0 = metaData0.transientSettings();
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertNotNull(settings0);
      assertFalse(clusterState0.wasReadFromDiff());
      assertEquals("AAAAAAEAQACCAAAAAwAAAA", clusterState0.stateUUID());
      assertEquals(0L, clusterState0.getVersion());
      assertEquals(0L, clusterState0.version());
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState0.status());
      assertFalse(routingNodes0.hasUnassignedShards());
      assertFalse(routingNodes0.hasInactiveShards());
      assertFalse(routingNodes0.hasUnassignedPrimaries());
      assertEquals(0, routingNodes0.size());
      assertFalse(routingNodes0.hasInactivePrimaries());
      assertEquals(0, routingNodes0.getRelocatingShardCount());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getNumberOfShards());
      
      RestController restController0 = new RestController(settings0);
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertNotNull(restController0);
      assertFalse(clusterState0.wasReadFromDiff());
      assertEquals("AAAAAAEAQACCAAAAAwAAAA", clusterState0.stateUUID());
      assertEquals(0L, clusterState0.getVersion());
      assertEquals(0L, clusterState0.version());
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState0.status());
      assertFalse(routingNodes0.hasUnassignedShards());
      assertFalse(routingNodes0.hasInactiveShards());
      assertFalse(routingNodes0.hasUnassignedPrimaries());
      assertEquals(0, routingNodes0.size());
      assertFalse(routingNodes0.hasInactivePrimaries());
      assertEquals(0, routingNodes0.getRelocatingShardCount());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      
      Client client0 = null;
      RestNodesAction restNodesAction0 = new RestNodesAction(settings0, restController0, client0);
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertNotNull(restNodesAction0);
      assertFalse(clusterState0.wasReadFromDiff());
      assertEquals("AAAAAAEAQACCAAAAAwAAAA", clusterState0.stateUUID());
      assertEquals(0L, clusterState0.getVersion());
      assertEquals(0L, clusterState0.version());
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState0.status());
      assertFalse(routingNodes0.hasUnassignedShards());
      assertFalse(routingNodes0.hasInactiveShards());
      assertFalse(routingNodes0.hasUnassignedPrimaries());
      assertEquals(0, routingNodes0.size());
      assertFalse(routingNodes0.hasInactivePrimaries());
      assertEquals(0, routingNodes0.getRelocatingShardCount());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertNotNull(linkedHashSet0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      
      RepositoriesMetaData repositoriesMetaData0 = metaData0.custom(clusterState0.UNKNOWN_UUID);
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertNull(repositoriesMetaData0);
      assertFalse(clusterState0.wasReadFromDiff());
      assertEquals("AAAAAAEAQACCAAAAAwAAAA", clusterState0.stateUUID());
      assertEquals(0L, clusterState0.getVersion());
      assertEquals(0L, clusterState0.version());
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState0.status());
      assertFalse(routingNodes0.hasUnassignedShards());
      assertFalse(routingNodes0.hasInactiveShards());
      assertFalse(routingNodes0.hasUnassignedPrimaries());
      assertEquals(0, routingNodes0.size());
      assertFalse(routingNodes0.hasInactivePrimaries());
      assertEquals(0, routingNodes0.getRelocatingShardCount());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getNumberOfShards());
      
      short short0 = restNodesAction0.calculatePercentage(clusterState0.UNKNOWN_VERSION, clusterState0.UNKNOWN_VERSION);
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertFalse(clusterState0.wasReadFromDiff());
      assertEquals("AAAAAAEAQACCAAAAAwAAAA", clusterState0.stateUUID());
      assertEquals(0L, clusterState0.getVersion());
      assertEquals(0L, clusterState0.version());
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState0.status());
      assertFalse(routingNodes0.hasUnassignedShards());
      assertFalse(routingNodes0.hasInactiveShards());
      assertFalse(routingNodes0.hasUnassignedPrimaries());
      assertEquals(0, routingNodes0.size());
      assertFalse(routingNodes0.hasInactivePrimaries());
      assertEquals(0, routingNodes0.getRelocatingShardCount());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertEquals((short)0, short0);
      
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) metaData0.CONTEXT_MODE_GATEWAY);
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertNotNull(stringBuilder0);
      assertFalse(clusterState0.wasReadFromDiff());
      assertEquals("AAAAAAEAQACCAAAAAwAAAA", clusterState0.stateUUID());
      assertEquals(0L, clusterState0.getVersion());
      assertEquals(0L, clusterState0.version());
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState0.status());
      assertFalse(routingNodes0.hasUnassignedShards());
      assertFalse(routingNodes0.hasInactiveShards());
      assertFalse(routingNodes0.hasUnassignedPrimaries());
      assertEquals(0, routingNodes0.size());
      assertFalse(routingNodes0.hasInactivePrimaries());
      assertEquals(0, routingNodes0.getRelocatingShardCount());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals("GATEWAY", stringBuilder0.toString());
      
      restNodesAction0.documentation(stringBuilder0);
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertFalse(clusterState0.wasReadFromDiff());
      assertEquals("AAAAAAEAQACCAAAAAwAAAA", clusterState0.stateUUID());
      assertEquals(0L, clusterState0.getVersion());
      assertEquals(0L, clusterState0.version());
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState0.status());
      assertFalse(routingNodes0.hasUnassignedShards());
      assertFalse(routingNodes0.hasInactiveShards());
      assertFalse(routingNodes0.hasUnassignedPrimaries());
      assertEquals(0, routingNodes0.size());
      assertFalse(routingNodes0.hasInactivePrimaries());
      assertEquals(0, routingNodes0.getRelocatingShardCount());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertEquals("GATEWAY/_cat/nodes\n", stringBuilder0.toString());
      
      HttpVersion httpVersion0 = HttpVersion.HTTP_1_1;
      assertNotNull(httpVersion0);
      assertEquals("HTTP/1.1", httpVersion0.getText());
      assertEquals("HTTP/1.1", httpVersion0.toString());
      assertEquals(1, httpVersion0.getMajorVersion());
      assertEquals(1, httpVersion0.getMinorVersion());
      assertTrue(httpVersion0.isKeepAliveDefault());
      assertEquals("HTTP", httpVersion0.getProtocolName());
      
      HttpMethod httpMethod0 = HttpMethod.POST;
      assertNotNull(httpMethod0);
      assertEquals("POST", httpMethod0.getName());
      assertEquals("POST", httpMethod0.toString());
      
      DefaultHttpRequest defaultHttpRequest0 = new DefaultHttpRequest(httpVersion0, httpMethod0, metaData0.CONTEXT_MODE_SNAPSHOT);
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertNotNull(defaultHttpRequest0);
      assertFalse(clusterState0.wasReadFromDiff());
      assertEquals("AAAAAAEAQACCAAAAAwAAAA", clusterState0.stateUUID());
      assertEquals(0L, clusterState0.getVersion());
      assertEquals(0L, clusterState0.version());
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState0.status());
      assertFalse(routingNodes0.hasUnassignedShards());
      assertFalse(routingNodes0.hasInactiveShards());
      assertFalse(routingNodes0.hasUnassignedPrimaries());
      assertEquals(0, routingNodes0.size());
      assertFalse(routingNodes0.hasInactivePrimaries());
      assertEquals(0, routingNodes0.getRelocatingShardCount());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals("HTTP/1.1", httpVersion0.getText());
      assertEquals("HTTP/1.1", httpVersion0.toString());
      assertEquals(1, httpVersion0.getMajorVersion());
      assertEquals(1, httpVersion0.getMinorVersion());
      assertTrue(httpVersion0.isKeepAliveDefault());
      assertEquals("HTTP", httpVersion0.getProtocolName());
      assertEquals("POST", httpMethod0.getName());
      assertEquals("POST", httpMethod0.toString());
      assertEquals("SNAPSHOT", defaultHttpRequest0.getUri());
      
      DefaultLocalServerChannelFactory defaultLocalServerChannelFactory0 = new DefaultLocalServerChannelFactory();
      assertNotNull(defaultLocalServerChannelFactory0);
      
      DefaultChannelPipeline defaultChannelPipeline0 = new DefaultChannelPipeline();
      assertNotNull(defaultChannelPipeline0);
      assertFalse(defaultChannelPipeline0.isAttached());
      
      LocalServerChannel localServerChannel0 = defaultLocalServerChannelFactory0.newChannel(defaultChannelPipeline0);
      assertNotNull(localServerChannel0);
      assertTrue(defaultChannelPipeline0.isAttached());
      assertEquals(4, (int)localServerChannel0.getId());
      assertTrue(localServerChannel0.isReadable());
      assertEquals(0, (int)localServerChannel0.getId());
      
      NettyHttpRequest nettyHttpRequest0 = new NettyHttpRequest(defaultHttpRequest0, localServerChannel0);
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertNotNull(nettyHttpRequest0);
      assertTrue(defaultChannelPipeline0.isAttached());
      assertFalse(clusterState0.wasReadFromDiff());
      assertEquals("AAAAAAEAQACCAAAAAwAAAA", clusterState0.stateUUID());
      assertEquals(0L, clusterState0.getVersion());
      assertEquals(0L, clusterState0.version());
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState0.status());
      assertEquals(4, (int)localServerChannel0.getId());
      assertTrue(localServerChannel0.isReadable());
      assertFalse(routingNodes0.hasUnassignedShards());
      assertFalse(routingNodes0.hasInactiveShards());
      assertFalse(routingNodes0.hasUnassignedPrimaries());
      assertEquals(0, routingNodes0.size());
      assertFalse(routingNodes0.hasInactivePrimaries());
      assertEquals(0, routingNodes0.getRelocatingShardCount());
      assertEquals(RestRequest.Method.POST, nettyHttpRequest0.method());
      assertFalse(nettyHttpRequest0.hasContent());
      assertEquals("SNAPSHOT", nettyHttpRequest0.uri());
      assertEquals("SNAPSHOT", nettyHttpRequest0.rawPath());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals("HTTP/1.1", httpVersion0.getText());
      assertEquals("HTTP/1.1", httpVersion0.toString());
      assertEquals(1, httpVersion0.getMajorVersion());
      assertEquals(1, httpVersion0.getMinorVersion());
      assertTrue(httpVersion0.isKeepAliveDefault());
      assertEquals("HTTP", httpVersion0.getProtocolName());
      assertEquals("POST", httpMethod0.getName());
      assertEquals("POST", httpMethod0.toString());
      assertEquals("SNAPSHOT", defaultHttpRequest0.getUri());
      assertEquals(0, (int)localServerChannel0.getId());
      
      ClusterName clusterName0 = new ClusterName(metaData0.GLOBAL_STATE_FILE_PREFIX);
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertNotNull(clusterName0);
      assertFalse(clusterState0.wasReadFromDiff());
      assertEquals("AAAAAAEAQACCAAAAAwAAAA", clusterState0.stateUUID());
      assertEquals(0L, clusterState0.getVersion());
      assertEquals(0L, clusterState0.version());
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState0.status());
      assertFalse(routingNodes0.hasUnassignedShards());
      assertFalse(routingNodes0.hasInactiveShards());
      assertFalse(routingNodes0.hasUnassignedPrimaries());
      assertEquals(0, routingNodes0.size());
      assertFalse(routingNodes0.hasInactivePrimaries());
      assertEquals(0, routingNodes0.getRelocatingShardCount());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals("global-", clusterName0.value());
      
      ClusterStateResponse clusterStateResponse0 = new ClusterStateResponse(clusterName0, clusterState0);
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertNotNull(clusterStateResponse0);
      assertFalse(clusterState0.wasReadFromDiff());
      assertEquals("AAAAAAEAQACCAAAAAwAAAA", clusterState0.stateUUID());
      assertEquals(0L, clusterState0.getVersion());
      assertEquals(0L, clusterState0.version());
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState0.status());
      assertFalse(routingNodes0.hasUnassignedShards());
      assertFalse(routingNodes0.hasInactiveShards());
      assertFalse(routingNodes0.hasUnassignedPrimaries());
      assertEquals(0, routingNodes0.size());
      assertFalse(routingNodes0.hasInactivePrimaries());
      assertEquals(0, routingNodes0.getRelocatingShardCount());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals("global-", clusterName0.value());
      
      NodeInfo[] nodeInfoArray0 = new NodeInfo[0];
      NodesInfoResponse nodesInfoResponse0 = new NodesInfoResponse(clusterName0, nodeInfoArray0);
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertNotNull(nodesInfoResponse0);
      assertFalse(clusterState0.wasReadFromDiff());
      assertEquals("AAAAAAEAQACCAAAAAwAAAA", clusterState0.stateUUID());
      assertEquals(0L, clusterState0.getVersion());
      assertEquals(0L, clusterState0.version());
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState0.status());
      assertFalse(routingNodes0.hasUnassignedShards());
      assertFalse(routingNodes0.hasInactiveShards());
      assertFalse(routingNodes0.hasUnassignedPrimaries());
      assertEquals(0, routingNodes0.size());
      assertFalse(routingNodes0.hasInactivePrimaries());
      assertEquals(0, routingNodes0.getRelocatingShardCount());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals("global-", clusterName0.value());
      assertEquals("global-", nodesInfoResponse0.getClusterNameAsString());
      assertEquals(0, nodeInfoArray0.length);
      
      NodeStats[] nodeStatsArray0 = null;
      NodesStatsResponse nodesStatsResponse0 = new NodesStatsResponse(clusterName0, nodeStatsArray0);
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertNotNull(nodesStatsResponse0);
      assertFalse(clusterState0.wasReadFromDiff());
      assertEquals("AAAAAAEAQACCAAAAAwAAAA", clusterState0.stateUUID());
      assertEquals(0L, clusterState0.getVersion());
      assertEquals(0L, clusterState0.version());
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState0.status());
      assertFalse(routingNodes0.hasUnassignedShards());
      assertFalse(routingNodes0.hasInactiveShards());
      assertFalse(routingNodes0.hasUnassignedPrimaries());
      assertEquals(0, routingNodes0.size());
      assertFalse(routingNodes0.hasInactivePrimaries());
      assertEquals(0, routingNodes0.getRelocatingShardCount());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals("global-", clusterName0.value());
      assertEquals("global-", nodesStatsResponse0.getClusterNameAsString());
      
      Table table0 = restNodesAction0.buildTable(nettyHttpRequest0, clusterStateResponse0, nodesInfoResponse0, nodesStatsResponse0);
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertNotNull(table0);
      assertFalse(clusterState0.wasReadFromDiff());
      assertEquals("AAAAAAEAQACCAAAAAwAAAA", clusterState0.stateUUID());
      assertEquals(0L, clusterState0.getVersion());
      assertEquals(0L, clusterState0.version());
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState0.status());
      assertFalse(routingNodes0.hasUnassignedShards());
      assertFalse(routingNodes0.hasInactiveShards());
      assertFalse(routingNodes0.hasUnassignedPrimaries());
      assertEquals(0, routingNodes0.size());
      assertFalse(routingNodes0.hasInactivePrimaries());
      assertEquals(0, routingNodes0.getRelocatingShardCount());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertEquals("HTTP/1.1", httpVersion0.getText());
      assertEquals("HTTP/1.1", httpVersion0.toString());
      assertEquals(1, httpVersion0.getMajorVersion());
      assertEquals(1, httpVersion0.getMinorVersion());
      assertTrue(httpVersion0.isKeepAliveDefault());
      assertEquals("HTTP", httpVersion0.getProtocolName());
      assertEquals("POST", httpMethod0.getName());
      assertEquals("POST", httpMethod0.toString());
      assertEquals("SNAPSHOT", defaultHttpRequest0.getUri());
      assertTrue(defaultChannelPipeline0.isAttached());
      assertEquals(4, (int)localServerChannel0.getId());
      assertTrue(localServerChannel0.isReadable());
      assertEquals(RestRequest.Method.POST, nettyHttpRequest0.method());
      assertFalse(nettyHttpRequest0.hasContent());
      assertEquals("SNAPSHOT", nettyHttpRequest0.uri());
      assertEquals("SNAPSHOT", nettyHttpRequest0.rawPath());
      assertEquals("global-", clusterName0.value());
      assertEquals("global-", nodesInfoResponse0.getClusterNameAsString());
      assertEquals("global-", nodesStatsResponse0.getClusterNameAsString());
      assertEquals(0, nodeInfoArray0.length);
      assertEquals(0, (int)localServerChannel0.getId());
  }

  @Test(timeout = 11000)
  public void test02()  throws Throwable  {
      Settings settings0 = Settings.EMPTY;
      assertNotNull(settings0);
      
      RestController restController0 = new RestController(settings0);
      assertNotNull(restController0);
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      
      Client client0 = null;
      RestNodesAction restNodesAction0 = new RestNodesAction(settings0, restController0, client0);
      assertNotNull(restNodesAction0);
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      
      String string0 = "X>MvlaTQ1nN$sZe";
      int int0 = 248;
      boolean boolean0 = false;
      HttpVersion httpVersion0 = new HttpVersion(string0, int0, int0, boolean0);
      assertNotNull(httpVersion0);
      assertEquals("X>MVLATQ1NN$SZE/248.248", httpVersion0.toString());
      assertEquals("X>MVLATQ1NN$SZE/248.248", httpVersion0.getText());
      assertEquals("X>MVLATQ1NN$SZE", httpVersion0.getProtocolName());
      assertFalse(httpVersion0.isKeepAliveDefault());
      assertEquals(248, httpVersion0.getMinorVersion());
      assertEquals(248, httpVersion0.getMajorVersion());
      
      HttpMethod httpMethod0 = new HttpMethod(string0);
      assertNotNull(httpMethod0);
      assertEquals("X>MvlaTQ1nN$sZe", httpMethod0.toString());
      assertEquals("X>MvlaTQ1nN$sZe", httpMethod0.getName());
      
      DefaultHttpRequest defaultHttpRequest0 = new DefaultHttpRequest(httpVersion0, httpMethod0, string0);
      assertNotNull(defaultHttpRequest0);
      assertEquals("X>MVLATQ1NN$SZE/248.248", httpVersion0.toString());
      assertEquals("X>MVLATQ1NN$SZE/248.248", httpVersion0.getText());
      assertEquals("X>MVLATQ1NN$SZE", httpVersion0.getProtocolName());
      assertFalse(httpVersion0.isKeepAliveDefault());
      assertEquals(248, httpVersion0.getMinorVersion());
      assertEquals(248, httpVersion0.getMajorVersion());
      assertEquals("X>MvlaTQ1nN$sZe", httpMethod0.toString());
      assertEquals("X>MvlaTQ1nN$sZe", httpMethod0.getName());
      assertEquals("X>MvlaTQ1nN$sZe", defaultHttpRequest0.getUri());
      
      DefaultLocalClientChannelFactory defaultLocalClientChannelFactory0 = new DefaultLocalClientChannelFactory();
      assertNotNull(defaultLocalClientChannelFactory0);
      
      DefaultChannelPipeline defaultChannelPipeline0 = new DefaultChannelPipeline();
      assertNotNull(defaultChannelPipeline0);
      assertFalse(defaultChannelPipeline0.isAttached());
      
      LocalChannel localChannel0 = defaultLocalClientChannelFactory0.newChannel(defaultChannelPipeline0);
      assertNotNull(localChannel0);
      assertTrue(defaultChannelPipeline0.isAttached());
      assertTrue(localChannel0.isReadable());
      assertEquals(0, (int)localChannel0.getId());
      
      NettyHttpRequest nettyHttpRequest0 = new NettyHttpRequest(defaultHttpRequest0, localChannel0);
      assertNotNull(nettyHttpRequest0);
      assertEquals("X>MVLATQ1NN$SZE/248.248", httpVersion0.toString());
      assertEquals("X>MVLATQ1NN$SZE/248.248", httpVersion0.getText());
      assertEquals("X>MVLATQ1NN$SZE", httpVersion0.getProtocolName());
      assertFalse(httpVersion0.isKeepAliveDefault());
      assertEquals(248, httpVersion0.getMinorVersion());
      assertEquals(248, httpVersion0.getMajorVersion());
      assertEquals("X>MvlaTQ1nN$sZe", httpMethod0.toString());
      assertEquals("X>MvlaTQ1nN$sZe", httpMethod0.getName());
      assertEquals("X>MvlaTQ1nN$sZe", defaultHttpRequest0.getUri());
      assertTrue(defaultChannelPipeline0.isAttached());
      assertTrue(localChannel0.isReadable());
      assertEquals(0, (int)localChannel0.getId());
      assertEquals("X>MvlaTQ1nN$sZe", nettyHttpRequest0.uri());
      assertEquals("X>MvlaTQ1nN$sZe", nettyHttpRequest0.rawPath());
      assertEquals(RestRequest.Method.GET, nettyHttpRequest0.method());
      assertFalse(nettyHttpRequest0.hasContent());
      
      NetworkService networkService0 = new NetworkService(settings0);
      assertNotNull(networkService0);
      
      BigArrays bigArrays0 = BigArrays.NON_RECYCLING_INSTANCE;
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertNotNull(bigArrays0);
      
      ThreadPool threadPool0 = new ThreadPool(networkService0.DEFAULT_NETWORK_HOST);
      assertNotNull(threadPool0);
      
      NettyHttpServerTransport nettyHttpServerTransport0 = new NettyHttpServerTransport(settings0, networkService0, bigArrays0, threadPool0);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertNotNull(nettyHttpServerTransport0);
      assertEquals(Lifecycle.State.INITIALIZED, nettyHttpServerTransport0.lifecycleState());
      
      int int1 = 0;
      NettyHttpChannel nettyHttpChannel0 = new NettyHttpChannel(nettyHttpServerTransport0, nettyHttpRequest0, boolean0);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertNotNull(nettyHttpChannel0);
      assertEquals("X>MVLATQ1NN$SZE/248.248", httpVersion0.toString());
      assertEquals("X>MVLATQ1NN$SZE/248.248", httpVersion0.getText());
      assertEquals("X>MVLATQ1NN$SZE", httpVersion0.getProtocolName());
      assertFalse(httpVersion0.isKeepAliveDefault());
      assertEquals(248, httpVersion0.getMinorVersion());
      assertEquals(248, httpVersion0.getMajorVersion());
      assertEquals("X>MvlaTQ1nN$sZe", httpMethod0.toString());
      assertEquals("X>MvlaTQ1nN$sZe", httpMethod0.getName());
      assertEquals("X>MvlaTQ1nN$sZe", defaultHttpRequest0.getUri());
      assertTrue(defaultChannelPipeline0.isAttached());
      assertTrue(localChannel0.isReadable());
      assertEquals(0, (int)localChannel0.getId());
      assertEquals("X>MvlaTQ1nN$sZe", nettyHttpRequest0.uri());
      assertEquals("X>MvlaTQ1nN$sZe", nettyHttpRequest0.rawPath());
      assertEquals(RestRequest.Method.GET, nettyHttpRequest0.method());
      assertFalse(nettyHttpRequest0.hasContent());
      assertEquals(Lifecycle.State.INITIALIZED, nettyHttpServerTransport0.lifecycleState());
      assertFalse(nettyHttpChannel0.detailedErrorsEnabled());
      assertFalse(int0 == int1);
      
      // Undeclared exception!
      try { 
        restNodesAction0.doRequest(nettyHttpRequest0, nettyHttpChannel0, client0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.rest.action.cat.RestNodesAction", e);
      }
  }

  @Test(timeout = 11000)
  public void test03()  throws Throwable  {
      MetaData metaData0 = MetaData.PROTO;
      assertNotNull(metaData0);
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0L, metaData0.version());
      
      Settings settings0 = metaData0.settings();
      assertNotNull(settings0);
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0L, metaData0.version());
      
      RestController restController0 = new RestController(settings0);
      assertNotNull(restController0);
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0L, metaData0.version());
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      
      Client client0 = null;
      RestNodesAction restNodesAction0 = new RestNodesAction(settings0, restController0, client0);
      assertNotNull(restNodesAction0);
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0L, metaData0.version());
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      
      StringBuilder stringBuilder0 = null;
      // Undeclared exception!
      try { 
        restNodesAction0.documentation(stringBuilder0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.rest.action.cat.RestNodesAction", e);
      }
  }

  @Test(timeout = 11000)
  public void test04()  throws Throwable  {
      MetaData metaData0 = MetaData.PROTO;
      assertNotNull(metaData0);
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      
      Settings settings0 = metaData0.transientSettings();
      assertNotNull(settings0);
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      
      RestController restController0 = new RestController(settings0);
      assertNotNull(restController0);
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      
      Client client0 = null;
      RestNodesAction restNodesAction0 = new RestNodesAction(settings0, restController0, client0);
      assertNotNull(restNodesAction0);
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) metaData0.GLOBAL_STATE_FILE_PREFIX);
      assertNotNull(stringBuilder0);
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals("global-", stringBuilder0.toString());
      
      String string0 = "9RQ";
      StringBuilder stringBuilder1 = stringBuilder0.append(string0);
      assertNotNull(stringBuilder1);
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals("global-9RQ", stringBuilder0.toString());
      assertEquals("global-9RQ", stringBuilder1.toString());
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      
      char char0 = '}';
      StringBuilder stringBuilder2 = stringBuilder1.append(char0);
      assertNotNull(stringBuilder2);
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals("global-9RQ}", stringBuilder0.toString());
      assertEquals("global-9RQ}", stringBuilder1.toString());
      assertEquals("global-9RQ}", stringBuilder2.toString());
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder1, stringBuilder2);
      assertSame(stringBuilder2, stringBuilder1);
      assertSame(stringBuilder2, stringBuilder0);
      
      int int0 = 0;
      StringBuilder stringBuilder3 = stringBuilder2.append(int0);
      assertNotNull(stringBuilder3);
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals("global-9RQ}0", stringBuilder0.toString());
      assertEquals("global-9RQ}0", stringBuilder1.toString());
      assertEquals("global-9RQ}0", stringBuilder2.toString());
      assertEquals("global-9RQ}0", stringBuilder3.toString());
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder0, stringBuilder3);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder1, stringBuilder2);
      assertSame(stringBuilder1, stringBuilder3);
      assertSame(stringBuilder2, stringBuilder1);
      assertSame(stringBuilder2, stringBuilder0);
      assertSame(stringBuilder2, stringBuilder3);
      assertSame(stringBuilder3, stringBuilder0);
      assertSame(stringBuilder3, stringBuilder1);
      assertSame(stringBuilder3, stringBuilder2);
      
      char[] charArray0 = new char[7];
      charArray0[0] = char0;
      charArray0[1] = char0;
      char char1 = '$';
      charArray0[2] = char1;
      charArray0[3] = char0;
      charArray0[4] = char0;
      charArray0[5] = char0;
      charArray0[6] = char0;
      StringBuilder stringBuilder4 = stringBuilder3.insert(int0, charArray0);
      assertNotNull(stringBuilder4);
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals("}}$}}}}global-9RQ}0", stringBuilder4.toString());
      assertEquals("}}$}}}}global-9RQ}0", stringBuilder0.toString());
      assertEquals("}}$}}}}global-9RQ}0", stringBuilder1.toString());
      assertEquals("}}$}}}}global-9RQ}0", stringBuilder2.toString());
      assertEquals("}}$}}}}global-9RQ}0", stringBuilder3.toString());
      assertSame(stringBuilder4, stringBuilder0);
      assertSame(stringBuilder4, stringBuilder3);
      assertSame(stringBuilder4, stringBuilder2);
      assertSame(stringBuilder4, stringBuilder1);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder0, stringBuilder3);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder0, stringBuilder4);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder1, stringBuilder2);
      assertSame(stringBuilder1, stringBuilder4);
      assertSame(stringBuilder1, stringBuilder3);
      assertSame(stringBuilder2, stringBuilder1);
      assertSame(stringBuilder2, stringBuilder0);
      assertSame(stringBuilder2, stringBuilder3);
      assertSame(stringBuilder2, stringBuilder4);
      assertSame(stringBuilder3, stringBuilder4);
      assertSame(stringBuilder3, stringBuilder0);
      assertSame(stringBuilder3, stringBuilder1);
      assertSame(stringBuilder3, stringBuilder2);
      assertArrayEquals(new char[] {'}', '}', '$', '}', '}', '}', '}'}, charArray0);
      assertEquals(7, charArray0.length);
      assertFalse(char0 == char1);
      
      restNodesAction0.documentation(stringBuilder4);
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertEquals("}}$}}}}global-9RQ}0/_cat/nodes\n", stringBuilder4.toString());
      assertEquals("}}$}}}}global-9RQ}0/_cat/nodes\n", stringBuilder0.toString());
      assertEquals("}}$}}}}global-9RQ}0/_cat/nodes\n", stringBuilder1.toString());
      assertEquals("}}$}}}}global-9RQ}0/_cat/nodes\n", stringBuilder2.toString());
      assertEquals("}}$}}}}global-9RQ}0/_cat/nodes\n", stringBuilder3.toString());
      assertSame(stringBuilder4, stringBuilder0);
      assertSame(stringBuilder4, stringBuilder3);
      assertSame(stringBuilder4, stringBuilder2);
      assertSame(stringBuilder4, stringBuilder1);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder0, stringBuilder3);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder0, stringBuilder4);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder1, stringBuilder2);
      assertSame(stringBuilder1, stringBuilder4);
      assertSame(stringBuilder1, stringBuilder3);
      assertSame(stringBuilder2, stringBuilder1);
      assertSame(stringBuilder2, stringBuilder0);
      assertSame(stringBuilder2, stringBuilder3);
      assertSame(stringBuilder2, stringBuilder4);
      assertSame(stringBuilder3, stringBuilder4);
      assertSame(stringBuilder3, stringBuilder0);
      assertSame(stringBuilder3, stringBuilder1);
      assertSame(stringBuilder3, stringBuilder2);
      assertArrayEquals(new char[] {'}', '}', '$', '}', '}', '}', '}'}, charArray0);
      assertEquals(7, charArray0.length);
      assertFalse(char0 == char1);
  }

  @Test(timeout = 11000)
  public void test05()  throws Throwable  {
      Settings settings0 = Settings.Builder.EMPTY_SETTINGS;
      assertNotNull(settings0);
      
      RestController restController0 = new RestController(settings0);
      assertNotNull(restController0);
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      
      LifecycleListener lifecycleListener0 = mock(LifecycleListener.class, new ViolatedAssumptionAnswer());
      restController0.addLifecycleListener(lifecycleListener0);
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      
      Client client0 = null;
      RestNodesAction restNodesAction0 = new RestNodesAction(settings0, restController0, client0);
      assertNotNull(restNodesAction0);
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      
      String string0 = "X>MvlaTQ1nN$sZe";
      int int0 = 248;
      boolean boolean0 = false;
      HttpVersion httpVersion0 = new HttpVersion(string0, int0, int0, boolean0);
      assertNotNull(httpVersion0);
      assertEquals("X>MVLATQ1NN$SZE", httpVersion0.getProtocolName());
      assertFalse(httpVersion0.isKeepAliveDefault());
      assertEquals(248, httpVersion0.getMinorVersion());
      assertEquals("X>MVLATQ1NN$SZE/248.248", httpVersion0.toString());
      assertEquals("X>MVLATQ1NN$SZE/248.248", httpVersion0.getText());
      assertEquals(248, httpVersion0.getMajorVersion());
      
      HttpMethod httpMethod0 = new HttpMethod(string0);
      assertNotNull(httpMethod0);
      assertEquals("X>MvlaTQ1nN$sZe", httpMethod0.getName());
      assertEquals("X>MvlaTQ1nN$sZe", httpMethod0.toString());
      
      DefaultHttpRequest defaultHttpRequest0 = new DefaultHttpRequest(httpVersion0, httpMethod0, string0);
      assertNotNull(defaultHttpRequest0);
      assertEquals("X>MVLATQ1NN$SZE", httpVersion0.getProtocolName());
      assertFalse(httpVersion0.isKeepAliveDefault());
      assertEquals(248, httpVersion0.getMinorVersion());
      assertEquals("X>MVLATQ1NN$SZE/248.248", httpVersion0.toString());
      assertEquals("X>MVLATQ1NN$SZE/248.248", httpVersion0.getText());
      assertEquals(248, httpVersion0.getMajorVersion());
      assertEquals("X>MvlaTQ1nN$sZe", httpMethod0.getName());
      assertEquals("X>MvlaTQ1nN$sZe", httpMethod0.toString());
      assertEquals("X>MvlaTQ1nN$sZe", defaultHttpRequest0.getUri());
      
      DefaultLocalClientChannelFactory defaultLocalClientChannelFactory0 = new DefaultLocalClientChannelFactory();
      assertNotNull(defaultLocalClientChannelFactory0);
      
      DefaultChannelPipeline defaultChannelPipeline0 = new DefaultChannelPipeline();
      assertNotNull(defaultChannelPipeline0);
      assertFalse(defaultChannelPipeline0.isAttached());
      
      LocalChannel localChannel0 = defaultLocalClientChannelFactory0.newChannel(defaultChannelPipeline0);
      assertNotNull(localChannel0);
      assertTrue(defaultChannelPipeline0.isAttached());
      assertEquals(0, (int)localChannel0.getId());
      assertTrue(localChannel0.isReadable());
      
      NettyHttpRequest nettyHttpRequest0 = new NettyHttpRequest(defaultHttpRequest0, localChannel0);
      assertNotNull(nettyHttpRequest0);
      assertEquals("X>MVLATQ1NN$SZE", httpVersion0.getProtocolName());
      assertFalse(httpVersion0.isKeepAliveDefault());
      assertEquals(248, httpVersion0.getMinorVersion());
      assertEquals("X>MVLATQ1NN$SZE/248.248", httpVersion0.toString());
      assertEquals("X>MVLATQ1NN$SZE/248.248", httpVersion0.getText());
      assertEquals(248, httpVersion0.getMajorVersion());
      assertEquals("X>MvlaTQ1nN$sZe", httpMethod0.getName());
      assertEquals("X>MvlaTQ1nN$sZe", httpMethod0.toString());
      assertEquals("X>MvlaTQ1nN$sZe", defaultHttpRequest0.getUri());
      assertTrue(defaultChannelPipeline0.isAttached());
      assertEquals(0, (int)localChannel0.getId());
      assertTrue(localChannel0.isReadable());
      assertEquals("X>MvlaTQ1nN$sZe", nettyHttpRequest0.uri());
      assertEquals("X>MvlaTQ1nN$sZe", nettyHttpRequest0.rawPath());
      assertFalse(nettyHttpRequest0.hasContent());
      assertEquals(RestRequest.Method.GET, nettyHttpRequest0.method());
      
      NetworkService networkService0 = new NetworkService(settings0);
      assertNotNull(networkService0);
      
      BigArrays bigArrays0 = BigArrays.NON_RECYCLING_INSTANCE;
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertNotNull(bigArrays0);
      
      ThreadPool threadPool0 = new ThreadPool(networkService0.DEFAULT_NETWORK_HOST);
      assertNotNull(threadPool0);
      
      NettyHttpServerTransport nettyHttpServerTransport0 = new NettyHttpServerTransport(settings0, networkService0, bigArrays0, threadPool0);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertNotNull(nettyHttpServerTransport0);
      assertEquals(Lifecycle.State.INITIALIZED, nettyHttpServerTransport0.lifecycleState());
      
      int int1 = 276;
      RootObjectMapper.Builder rootObjectMapper_Builder0 = new RootObjectMapper.Builder(networkService0.DEFAULT_NETWORK_HOST);
      assertNotNull(rootObjectMapper_Builder0);
      assertEquals("_local_", rootObjectMapper_Builder0.name());
      
      RootObjectMapper.Builder rootObjectMapper_Builder1 = rootObjectMapper_Builder0.noDynamicDateTimeFormatter();
      assertNotNull(rootObjectMapper_Builder1);
      assertEquals("_local_", rootObjectMapper_Builder0.name());
      assertEquals("_local_", rootObjectMapper_Builder1.name());
      assertSame(rootObjectMapper_Builder0, rootObjectMapper_Builder1);
      assertSame(rootObjectMapper_Builder1, rootObjectMapper_Builder0);
      
      InetAddress inetAddress0 = MockInetAddress.getByName(networkService0.DEFAULT_NETWORK_HOST);
      assertNotNull(inetAddress0);
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertEquals("200.42.42.0", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertEquals("_local_/200.42.42.0", inetAddress0.toString());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isMCOrgLocal());
      
      int int2 = 0;
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress(inetAddress0, int2);
      assertNotNull(mockInetSocketAddress0);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      
      OrderedUpstreamMessageEvent orderedUpstreamMessageEvent0 = new OrderedUpstreamMessageEvent(int1, localChannel0, rootObjectMapper_Builder1, mockInetSocketAddress0);
      assertNotNull(orderedUpstreamMessageEvent0);
      assertEquals("_local_", rootObjectMapper_Builder0.name());
      assertEquals("_local_", rootObjectMapper_Builder1.name());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertEquals("200.42.42.0", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertEquals("_local_/200.42.42.0", inetAddress0.toString());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertEquals("_local_/200.42.42.0:0", mockInetSocketAddress0.toString());
      assertFalse(mockInetSocketAddress0.isUnresolved());
      assertEquals("_local_", mockInetSocketAddress0.getHostString());
      assertEquals(0, mockInetSocketAddress0.getPort());
      assertEquals(276, orderedUpstreamMessageEvent0.getSequence());
      assertTrue(defaultChannelPipeline0.isAttached());
      assertEquals(0, (int)localChannel0.getId());
      assertTrue(localChannel0.isReadable());
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      
      boolean boolean1 = false;
      NettyHttpChannel nettyHttpChannel0 = new NettyHttpChannel(nettyHttpServerTransport0, nettyHttpRequest0, orderedUpstreamMessageEvent0, boolean1);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertNotNull(nettyHttpChannel0);
      assertEquals("X>MVLATQ1NN$SZE", httpVersion0.getProtocolName());
      assertFalse(httpVersion0.isKeepAliveDefault());
      assertEquals(248, httpVersion0.getMinorVersion());
      assertEquals("X>MVLATQ1NN$SZE/248.248", httpVersion0.toString());
      assertEquals("X>MVLATQ1NN$SZE/248.248", httpVersion0.getText());
      assertEquals(248, httpVersion0.getMajorVersion());
      assertEquals("X>MvlaTQ1nN$sZe", httpMethod0.getName());
      assertEquals("X>MvlaTQ1nN$sZe", httpMethod0.toString());
      assertEquals("X>MvlaTQ1nN$sZe", defaultHttpRequest0.getUri());
      assertTrue(defaultChannelPipeline0.isAttached());
      assertEquals(0, (int)localChannel0.getId());
      assertTrue(localChannel0.isReadable());
      assertEquals("X>MvlaTQ1nN$sZe", nettyHttpRequest0.uri());
      assertEquals("X>MvlaTQ1nN$sZe", nettyHttpRequest0.rawPath());
      assertFalse(nettyHttpRequest0.hasContent());
      assertEquals(RestRequest.Method.GET, nettyHttpRequest0.method());
      assertEquals(Lifecycle.State.INITIALIZED, nettyHttpServerTransport0.lifecycleState());
      assertEquals("_local_", rootObjectMapper_Builder0.name());
      assertEquals("_local_", rootObjectMapper_Builder1.name());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertEquals("200.42.42.0", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertEquals("_local_/200.42.42.0", inetAddress0.toString());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertEquals("_local_/200.42.42.0:0", mockInetSocketAddress0.toString());
      assertFalse(mockInetSocketAddress0.isUnresolved());
      assertEquals("_local_", mockInetSocketAddress0.getHostString());
      assertEquals(0, mockInetSocketAddress0.getPort());
      assertEquals(276, orderedUpstreamMessageEvent0.getSequence());
      assertFalse(nettyHttpChannel0.detailedErrorsEnabled());
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      
      // Undeclared exception!
      try { 
        restNodesAction0.doRequest(nettyHttpRequest0, nettyHttpChannel0, client0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.rest.action.cat.RestNodesAction", e);
      }
  }

  @Test(timeout = 11000)
  public void test06()  throws Throwable  {
      Settings settings0 = Settings.EMPTY;
      assertNotNull(settings0);
      
      RestController restController0 = null;
      Client client0 = null;
      RestNodesAction restNodesAction0 = null;
      try {
        restNodesAction0 = new RestNodesAction(settings0, restController0, client0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.rest.action.cat.RestNodesAction", e);
      }
  }

  @Test(timeout = 11000)
  public void test07()  throws Throwable  {
      MetaData metaData0 = MetaData.EMPTY_META_DATA;
      assertNotNull(metaData0);
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getNumberOfShards());
      
      Settings settings0 = metaData0.settings();
      assertNotNull(settings0);
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getNumberOfShards());
      
      RestController restController0 = new RestController(settings0);
      assertNotNull(restController0);
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      
      Client client0 = null;
      RestNodesAction restNodesAction0 = new RestNodesAction(settings0, restController0, client0);
      assertNotNull(restNodesAction0);
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      
      long long0 = 62035200000L;
      long long1 = 0L;
      short short0 = restNodesAction0.calculatePercentage(long0, long1);
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertEquals((short)0, short0);
      assertFalse(long0 == long1);
      assertFalse(long1 == long0);
  }

  @Test(timeout = 11000)
  public void test08()  throws Throwable  {
      IndexMetaData indexMetaData0 = IndexMetaData.PROTO;
      assertNotNull(indexMetaData0);
      assertEquals(1, indexMetaData0.getTotalNumberOfShards());
      assertEquals(1L, indexMetaData0.getVersion());
      assertEquals(IndexMetaData.State.OPEN, indexMetaData0.getState());
      assertEquals("_na_", indexMetaData0.getIndexUUID());
      assertEquals(1, indexMetaData0.getNumberOfShards());
      assertEquals(0, indexMetaData0.getNumberOfReplicas());
      
      Settings settings0 = indexMetaData0.getSettings();
      assertNotNull(settings0);
      assertEquals(1, indexMetaData0.getTotalNumberOfShards());
      assertEquals(1L, indexMetaData0.getVersion());
      assertEquals(IndexMetaData.State.OPEN, indexMetaData0.getState());
      assertEquals("_na_", indexMetaData0.getIndexUUID());
      assertEquals(1, indexMetaData0.getNumberOfShards());
      assertEquals(0, indexMetaData0.getNumberOfReplicas());
      
      String string0 = "alias:qcm,requestCacheMemory;default:false;text-align:right;desc:used request cache";
      float float0 = (-199.07F);
      Float float1 = new Float(float0);
      assertNotNull(float1);
      assertEquals((-199.07F), (float)float1, 0.01F);
      assertEquals((float)float1, (float)float0, 0.01F);
      
      Float float2 = settings0.getAsFloat(string0, float1);
      assertNotNull(float2);
      assertEquals(1, indexMetaData0.getTotalNumberOfShards());
      assertEquals(1L, indexMetaData0.getVersion());
      assertEquals(IndexMetaData.State.OPEN, indexMetaData0.getState());
      assertEquals("_na_", indexMetaData0.getIndexUUID());
      assertEquals(1, indexMetaData0.getNumberOfShards());
      assertEquals(0, indexMetaData0.getNumberOfReplicas());
      assertEquals((-199.07F), (float)float2, 0.01F);
      assertEquals((float)float1, (float)float0, 0.01F);
      assertEquals((float)float2, (float)float0, 0.01F);
      
      RestController restController0 = new RestController(settings0);
      assertNotNull(restController0);
      assertEquals(1, indexMetaData0.getTotalNumberOfShards());
      assertEquals(1L, indexMetaData0.getVersion());
      assertEquals(IndexMetaData.State.OPEN, indexMetaData0.getState());
      assertEquals("_na_", indexMetaData0.getIndexUUID());
      assertEquals(1, indexMetaData0.getNumberOfShards());
      assertEquals(0, indexMetaData0.getNumberOfReplicas());
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      
      String string1 = settings0.get(indexMetaData0.SETTING_CREATION_DATE);
      assertNull(string1);
      assertEquals(1, indexMetaData0.getTotalNumberOfShards());
      assertEquals(1L, indexMetaData0.getVersion());
      assertEquals(IndexMetaData.State.OPEN, indexMetaData0.getState());
      assertEquals("_na_", indexMetaData0.getIndexUUID());
      assertEquals(1, indexMetaData0.getNumberOfShards());
      assertEquals(0, indexMetaData0.getNumberOfReplicas());
      
      Client client0 = null;
      RestNodesAction restNodesAction0 = new RestNodesAction(settings0, restController0, client0);
      assertNotNull(restNodesAction0);
      assertEquals(1, indexMetaData0.getTotalNumberOfShards());
      assertEquals(1L, indexMetaData0.getVersion());
      assertEquals(IndexMetaData.State.OPEN, indexMetaData0.getState());
      assertEquals("_na_", indexMetaData0.getIndexUUID());
      assertEquals(1, indexMetaData0.getNumberOfShards());
      assertEquals(0, indexMetaData0.getNumberOfReplicas());
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      
      long long0 = 1440L;
      short short0 = restNodesAction0.calculatePercentage(long0, long0);
      assertEquals(1, indexMetaData0.getTotalNumberOfShards());
      assertEquals(1L, indexMetaData0.getVersion());
      assertEquals(IndexMetaData.State.OPEN, indexMetaData0.getState());
      assertEquals("_na_", indexMetaData0.getIndexUUID());
      assertEquals(1, indexMetaData0.getNumberOfShards());
      assertEquals(0, indexMetaData0.getNumberOfReplicas());
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertEquals((short)100, short0);
  }

  @Test(timeout = 11000)
  public void test09()  throws Throwable  {
      Settings settings0 = Settings.EMPTY;
      assertNotNull(settings0);
      
      String[] stringArray0 = new String[0];
      long long0 = 0L;
      SizeValue sizeValue0 = new SizeValue(long0);
      assertNotNull(sizeValue0);
      
      SizeValue sizeValue1 = settings0.getAsSize(stringArray0, sizeValue0);
      assertNotNull(sizeValue1);
      assertSame(sizeValue0, sizeValue1);
      assertSame(sizeValue1, sizeValue0);
      assertEquals(0, stringArray0.length);
      
      RestController restController0 = new RestController(settings0);
      assertNotNull(restController0);
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      
      Client client0 = null;
      RestNodesAction restNodesAction0 = new RestNodesAction(settings0, restController0, client0);
      assertNotNull(restNodesAction0);
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      
      long long1 = 0L;
      short short0 = restNodesAction0.calculatePercentage(long1, long1);
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertEquals((short)0, short0);
      
      String string0 = restNodesAction0.nodeName();
      assertNotNull(string0);
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertEquals("", string0);
      
      RestRequest restRequest0 = null;
      Table table0 = restNodesAction0.getTableWithHeader(restRequest0);
      assertNotNull(table0);
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      
      long long2 = 30962844000000L;
      short short1 = restNodesAction0.calculatePercentage(long0, long2);
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertEquals((short)0, short1);
      assertFalse(long0 == long2);
      assertFalse(long2 == long0);
      assertFalse(long2 == long1);
      assertTrue(short1 == short0);
      
      short short2 = restNodesAction0.calculatePercentage(long2, long2);
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertEquals((short)100, short2);
      assertFalse(long2 == long0);
      assertFalse(long2 == long1);
      assertFalse(short2 == short1);
      assertFalse(short2 == short0);
      
      // Undeclared exception!
      restNodesAction0.getTableWithHeader(restRequest0);
  }

  @Test(timeout = 11000)
  public void test10()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte)0;
      byteArray0[0] = byte0;
      byte byte1 = (byte) (-123);
      byteArray0[1] = byte1;
      byte byte2 = (byte)28;
      byteArray0[2] = byte2;
      byte byte3 = (byte) (-126);
      byteArray0[3] = byte3;
      BytesArray bytesArray0 = new BytesArray(byteArray0);
      assertNotNull(bytesArray0);
      assertTrue(bytesArray0.hasArray());
      assertEquals(4, bytesArray0.length());
      assertEquals(0, bytesArray0.arrayOffset());
      assertArrayEquals(new byte[] {(byte)0, (byte) (-123), (byte)28, (byte) (-126)}, byteArray0);
      assertEquals(4, byteArray0.length);
      
      StreamInput streamInput0 = bytesArray0.streamInput();
      assertNotNull(streamInput0);
      assertTrue(bytesArray0.hasArray());
      assertEquals(4, bytesArray0.length());
      assertEquals(0, bytesArray0.arrayOffset());
      assertArrayEquals(new byte[] {(byte)0, (byte) (-123), (byte)28, (byte) (-126)}, byteArray0);
      assertEquals(4, byteArray0.length);
      
      Settings settings0 = Settings.readSettingsFromStream(streamInput0);
      assertNotNull(settings0);
      assertTrue(bytesArray0.hasArray());
      assertEquals(4, bytesArray0.length());
      assertEquals(0, bytesArray0.arrayOffset());
      assertArrayEquals(new byte[] {(byte)0, (byte) (-123), (byte)28, (byte) (-126)}, byteArray0);
      assertEquals(4, byteArray0.length);
      
      RestController restController0 = new RestController(settings0);
      assertNotNull(restController0);
      assertTrue(bytesArray0.hasArray());
      assertEquals(4, bytesArray0.length());
      assertEquals(0, bytesArray0.arrayOffset());
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertArrayEquals(new byte[] {(byte)0, (byte) (-123), (byte)28, (byte) (-126)}, byteArray0);
      assertEquals(4, byteArray0.length);
      
      Client client0 = null;
      RestNodesAction restNodesAction0 = new RestNodesAction(settings0, restController0, client0);
      assertNotNull(restNodesAction0);
      assertTrue(bytesArray0.hasArray());
      assertEquals(4, bytesArray0.length());
      assertEquals(0, bytesArray0.arrayOffset());
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertArrayEquals(new byte[] {(byte)0, (byte) (-123), (byte)28, (byte) (-126)}, byteArray0);
      assertEquals(4, byteArray0.length);
      
      short short0 = restNodesAction0.calculatePercentage(byteArray0[0], byte3);
      assertTrue(bytesArray0.hasArray());
      assertEquals(4, bytesArray0.length());
      assertEquals(0, bytesArray0.arrayOffset());
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertArrayEquals(new byte[] {(byte)0, (byte) (-123), (byte)28, (byte) (-126)}, byteArray0);
      assertEquals((short)0, short0);
      assertEquals(4, byteArray0.length);
      assertFalse(byte3 == byte0);
      assertFalse(byte3 == byte2);
      assertFalse(byte3 == byte1);
  }

  @Test(timeout = 11000)
  public void test11()  throws Throwable  {
      ESLogger eSLogger0 = null;
      MetaData metaData0 = MetaData.PROTO;
      assertNotNull(metaData0);
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      
      MetaData metaData1 = MetaData.addDefaultUnitsIfNeeded(eSLogger0, metaData0);
      assertNotNull(metaData1);
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0, metaData1.getTotalNumberOfShards());
      assertEquals(0, metaData1.getNumberOfShards());
      assertEquals("_na_", metaData1.clusterUUID());
      assertEquals(0L, metaData1.version());
      assertSame(metaData0, metaData1);
      assertSame(metaData1, metaData0);
      
      Settings settings0 = metaData1.transientSettings();
      assertNotNull(settings0);
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0, metaData1.getTotalNumberOfShards());
      assertEquals(0, metaData1.getNumberOfShards());
      assertEquals("_na_", metaData1.clusterUUID());
      assertEquals(0L, metaData1.version());
      assertSame(metaData0, metaData1);
      assertSame(metaData1, metaData0);
      
      RestController restController0 = new RestController(settings0);
      assertNotNull(restController0);
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0, metaData1.getTotalNumberOfShards());
      assertEquals(0, metaData1.getNumberOfShards());
      assertEquals("_na_", metaData1.clusterUUID());
      assertEquals(0L, metaData1.version());
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      
      Client client0 = null;
      RestNodesAction restNodesAction0 = new RestNodesAction(settings0, restController0, client0);
      assertNotNull(restNodesAction0);
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0, metaData1.getTotalNumberOfShards());
      assertEquals(0, metaData1.getNumberOfShards());
      assertEquals("_na_", metaData1.clusterUUID());
      assertEquals(0L, metaData1.version());
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      
      long long0 = 1836L;
      long long1 = 31449600000L;
      short short0 = restNodesAction0.calculatePercentage(long0, long1);
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0, metaData1.getTotalNumberOfShards());
      assertEquals(0, metaData1.getNumberOfShards());
      assertEquals("_na_", metaData1.clusterUUID());
      assertEquals(0L, metaData1.version());
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertSame(metaData0, metaData1);
      assertSame(metaData1, metaData0);
      assertEquals((short)0, short0);
      assertFalse(long0 == long1);
      assertFalse(long1 == long0);
      
      RestRequest restRequest0 = null;
      ClusterStateResponse clusterStateResponse0 = new ClusterStateResponse();
      assertNotNull(clusterStateResponse0);
      
      NodesInfoResponse nodesInfoResponse0 = new NodesInfoResponse();
      assertNotNull(nodesInfoResponse0);
      
      ClusterName clusterName0 = ClusterName.DEFAULT;
      assertNotNull(clusterName0);
      assertEquals("elasticsearch", clusterName0.value());
      
      NodeStats[] nodeStatsArray0 = new NodeStats[0];
      NodesStatsResponse nodesStatsResponse0 = new NodesStatsResponse(clusterName0, nodeStatsArray0);
      assertNotNull(nodesStatsResponse0);
      assertEquals("elasticsearch", clusterName0.value());
      assertEquals("elasticsearch", nodesStatsResponse0.getClusterNameAsString());
      assertEquals(0, nodeStatsArray0.length);
      
      // Undeclared exception!
      try { 
        restNodesAction0.buildTable(restRequest0, clusterStateResponse0, nodesInfoResponse0, nodesStatsResponse0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.rest.action.cat.RestNodesAction", e);
      }
  }

  @Test(timeout = 11000)
  public void test12()  throws Throwable  {
      int int0 = (-244);
      Random.setNextRandom(int0);
      Settings settings0 = Settings.EMPTY;
      assertNotNull(settings0);
      
      Settings settings1 = IndexMetaData.addHumanReadableSettings(settings0);
      assertNotNull(settings1);
      assertNotSame(settings0, settings1);
      assertNotSame(settings1, settings0);
      assertTrue(settings1.equals((Object)settings0));
      
      RestController restController0 = new RestController(settings0);
      assertNotNull(restController0);
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertTrue(settings0.equals((Object)settings1));
      
      String string0 = restController0.nodeName();
      assertNotNull(string0);
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertNotSame(settings0, settings1);
      assertEquals("", string0);
      assertTrue(settings0.equals((Object)settings1));
      
      Client client0 = null;
      RestNodesAction restNodesAction0 = new RestNodesAction(settings1, restController0, client0);
      assertNotNull(restNodesAction0);
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertTrue(settings0.equals((Object)settings1));
      assertTrue(settings1.equals((Object)settings0));
      
      long long0 = 1440L;
      long long1 = (-174L);
      short short0 = restNodesAction0.calculatePercentage(long0, long1);
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertNotSame(settings0, settings1);
      assertNotSame(settings1, settings0);
      assertEquals((short)0, short0);
      assertTrue(settings0.equals((Object)settings1));
      assertTrue(settings1.equals((Object)settings0));
      assertFalse(long0 == long1);
      assertFalse(long1 == long0);
      
      restController0.close();
      assertEquals(Lifecycle.State.CLOSED, restController0.lifecycleState());
      assertNotSame(settings0, settings1);
      assertTrue(settings0.equals((Object)settings1));
      
      Set<String> set0 = settings0.names();
      assertNotNull(set0);
      assertFalse(set0.contains(string0));
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertNotSame(settings0, settings1);
      assertTrue(settings0.equals((Object)settings1));
      
      long long2 = (-1060L);
      long long3 = 464L;
      short short1 = restNodesAction0.calculatePercentage(long2, long3);
      assertEquals(Lifecycle.State.CLOSED, restController0.lifecycleState());
      assertNotSame(settings0, settings1);
      assertNotSame(settings1, settings0);
      assertEquals((short) (-228), short1);
      assertTrue(settings0.equals((Object)settings1));
      assertTrue(settings1.equals((Object)settings0));
      assertFalse(long2 == long3);
      assertFalse(long2 == long1);
      assertFalse(long2 == long0);
      assertFalse(long3 == long1);
      assertFalse(long3 == long2);
      assertFalse(long3 == long0);
      assertFalse(short1 == short0);
      
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
      assertFalse(boolean0);
      
      long long4 = 8589934591L;
      short short2 = restNodesAction0.calculatePercentage(long4, long2);
      assertEquals(Lifecycle.State.CLOSED, restController0.lifecycleState());
      assertNotSame(settings0, settings1);
      assertNotSame(settings1, settings0);
      assertEquals((short)0, short2);
      assertFalse(long4 == long1);
      assertFalse(long4 == long3);
      assertFalse(long4 == long2);
      assertFalse(long4 == long0);
      assertTrue(settings0.equals((Object)settings1));
      assertTrue(short2 == short0);
      assertFalse(short2 == short1);
      assertTrue(settings1.equals((Object)settings0));
      assertFalse(long2 == long3);
      assertFalse(long2 == long4);
      assertFalse(long2 == long1);
      assertFalse(long2 == long0);
      
      System.setCurrentTimeMillis(int0);
      long long5 = (-1806L);
      long long6 = 2405L;
      short short3 = restNodesAction0.calculatePercentage(long5, long6);
      assertEquals(Lifecycle.State.CLOSED, restController0.lifecycleState());
      assertNotSame(settings0, settings1);
      assertNotSame(settings1, settings0);
      assertEquals((short) (-75), short3);
      assertTrue(settings0.equals((Object)settings1));
      assertTrue(settings1.equals((Object)settings0));
      assertFalse(long5 == long2);
      assertFalse(long5 == long3);
      assertFalse(long5 == long6);
      assertFalse(long5 == long4);
      assertFalse(long5 == long1);
      assertFalse(long5 == long0);
      assertFalse(long6 == long4);
      assertFalse(long6 == long5);
      assertFalse(long6 == long1);
      assertFalse(long6 == long3);
      assertFalse(long6 == long0);
      assertFalse(long6 == long2);
      assertFalse(short3 == short1);
      assertFalse(short3 == short0);
      assertFalse(short3 == short2);
  }

  @Test(timeout = 11000)
  public void test13()  throws Throwable  {
      int int0 = (-1);
      Random.setNextRandom(int0);
      Random.setNextRandom(int0);
      int int1 = 0;
      Random.setNextRandom(int1);
      assertFalse(int1 == int0);
      
      ToXContent.Params toXContent_Params0 = ToXContent.EMPTY_PARAMS;
      assertNotNull(toXContent_Params0);
      
      IndexMetaData indexMetaData0 = IndexMetaData.PROTO;
      assertNotNull(indexMetaData0);
      assertEquals(1L, indexMetaData0.getVersion());
      assertEquals(1, indexMetaData0.getNumberOfShards());
      assertEquals("_na_", indexMetaData0.getIndexUUID());
      assertEquals(0, indexMetaData0.getNumberOfReplicas());
      assertEquals(1, indexMetaData0.getTotalNumberOfShards());
      assertEquals(IndexMetaData.State.OPEN, indexMetaData0.getState());
      
      Settings settings0 = indexMetaData0.getSettings();
      assertNotNull(settings0);
      assertEquals(1L, indexMetaData0.getVersion());
      assertEquals(1, indexMetaData0.getNumberOfShards());
      assertEquals("_na_", indexMetaData0.getIndexUUID());
      assertEquals(0, indexMetaData0.getNumberOfReplicas());
      assertEquals(1, indexMetaData0.getTotalNumberOfShards());
      assertEquals(IndexMetaData.State.OPEN, indexMetaData0.getState());
      
      Settings settings1 = SettingsFilter.filterSettings(toXContent_Params0, settings0);
      assertNotNull(settings1);
      assertEquals(1L, indexMetaData0.getVersion());
      assertEquals(1, indexMetaData0.getNumberOfShards());
      assertEquals("_na_", indexMetaData0.getIndexUUID());
      assertEquals(0, indexMetaData0.getNumberOfReplicas());
      assertEquals(1, indexMetaData0.getTotalNumberOfShards());
      assertEquals(IndexMetaData.State.OPEN, indexMetaData0.getState());
      assertSame(settings0, settings1);
      assertSame(settings1, settings0);
      
      RestController restController0 = new RestController(settings1);
      assertNotNull(restController0);
      assertEquals(1L, indexMetaData0.getVersion());
      assertEquals(1, indexMetaData0.getNumberOfShards());
      assertEquals("_na_", indexMetaData0.getIndexUUID());
      assertEquals(0, indexMetaData0.getNumberOfReplicas());
      assertEquals(1, indexMetaData0.getTotalNumberOfShards());
      assertEquals(IndexMetaData.State.OPEN, indexMetaData0.getState());
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      
      Client client0 = null;
      RestNodesAction restNodesAction0 = new RestNodesAction(settings1, restController0, client0);
      assertNotNull(restNodesAction0);
      assertEquals(1L, indexMetaData0.getVersion());
      assertEquals(1, indexMetaData0.getNumberOfShards());
      assertEquals("_na_", indexMetaData0.getIndexUUID());
      assertEquals(0, indexMetaData0.getNumberOfReplicas());
      assertEquals(1, indexMetaData0.getTotalNumberOfShards());
      assertEquals(IndexMetaData.State.OPEN, indexMetaData0.getState());
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      
      String string0 = "max_term_freq";
      int int2 = 48;
      int int3 = 894;
      boolean boolean0 = false;
      HttpVersion httpVersion0 = new HttpVersion(string0, int2, int3, boolean0);
      assertNotNull(httpVersion0);
      assertEquals("MAX_TERM_FREQ/48.894", httpVersion0.getText());
      assertEquals(48, httpVersion0.getMajorVersion());
      assertEquals("MAX_TERM_FREQ", httpVersion0.getProtocolName());
      assertFalse(httpVersion0.isKeepAliveDefault());
      assertEquals(894, httpVersion0.getMinorVersion());
      assertEquals("MAX_TERM_FREQ/48.894", httpVersion0.toString());
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(int2 == int3);
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      
      HttpMethod httpMethod0 = new HttpMethod(indexMetaData0.SETTING_SHARED_FS_ALLOW_RECOVERY_ON_ANY_NODE);
      assertNotNull(httpMethod0);
      assertEquals("index.shared_filesystem.recover_on_any_node", httpMethod0.toString());
      assertEquals("index.shared_filesystem.recover_on_any_node", httpMethod0.getName());
      assertEquals(1L, indexMetaData0.getVersion());
      assertEquals(1, indexMetaData0.getNumberOfShards());
      assertEquals("_na_", indexMetaData0.getIndexUUID());
      assertEquals(0, indexMetaData0.getNumberOfReplicas());
      assertEquals(1, indexMetaData0.getTotalNumberOfShards());
      assertEquals(IndexMetaData.State.OPEN, indexMetaData0.getState());
      
      String string1 = "l~VdK1<\"?Pg";
      DefaultHttpRequest defaultHttpRequest0 = new DefaultHttpRequest(httpVersion0, httpMethod0, string1);
      assertNotNull(defaultHttpRequest0);
      assertEquals("MAX_TERM_FREQ/48.894", httpVersion0.getText());
      assertEquals(48, httpVersion0.getMajorVersion());
      assertEquals("MAX_TERM_FREQ", httpVersion0.getProtocolName());
      assertFalse(httpVersion0.isKeepAliveDefault());
      assertEquals(894, httpVersion0.getMinorVersion());
      assertEquals("MAX_TERM_FREQ/48.894", httpVersion0.toString());
      assertEquals("index.shared_filesystem.recover_on_any_node", httpMethod0.toString());
      assertEquals("index.shared_filesystem.recover_on_any_node", httpMethod0.getName());
      assertEquals("l~VdK1<\"?Pg", defaultHttpRequest0.getUri());
      assertEquals(1L, indexMetaData0.getVersion());
      assertEquals(1, indexMetaData0.getNumberOfShards());
      assertEquals("_na_", indexMetaData0.getIndexUUID());
      assertEquals(0, indexMetaData0.getNumberOfReplicas());
      assertEquals(1, indexMetaData0.getTotalNumberOfShards());
      assertEquals(IndexMetaData.State.OPEN, indexMetaData0.getState());
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(int2 == int3);
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      
      Channel channel0 = null;
      NettyHttpRequest nettyHttpRequest0 = new NettyHttpRequest(defaultHttpRequest0, channel0);
      assertNotNull(nettyHttpRequest0);
      assertEquals("MAX_TERM_FREQ/48.894", httpVersion0.getText());
      assertEquals(48, httpVersion0.getMajorVersion());
      assertEquals("MAX_TERM_FREQ", httpVersion0.getProtocolName());
      assertFalse(httpVersion0.isKeepAliveDefault());
      assertEquals(894, httpVersion0.getMinorVersion());
      assertEquals("MAX_TERM_FREQ/48.894", httpVersion0.toString());
      assertEquals("index.shared_filesystem.recover_on_any_node", httpMethod0.toString());
      assertEquals("index.shared_filesystem.recover_on_any_node", httpMethod0.getName());
      assertEquals("l~VdK1<\"?Pg", defaultHttpRequest0.getUri());
      assertEquals("l~VdK1<\"", nettyHttpRequest0.rawPath());
      assertFalse(nettyHttpRequest0.hasContent());
      assertEquals("l~VdK1<\"?Pg", nettyHttpRequest0.uri());
      assertEquals(RestRequest.Method.GET, nettyHttpRequest0.method());
      assertEquals(1L, indexMetaData0.getVersion());
      assertEquals(1, indexMetaData0.getNumberOfShards());
      assertEquals("_na_", indexMetaData0.getIndexUUID());
      assertEquals(0, indexMetaData0.getNumberOfReplicas());
      assertEquals(1, indexMetaData0.getTotalNumberOfShards());
      assertEquals(IndexMetaData.State.OPEN, indexMetaData0.getState());
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(int2 == int3);
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      
      ClusterStateResponse clusterStateResponse0 = new ClusterStateResponse();
      assertNotNull(clusterStateResponse0);
      
      NodesInfoResponse nodesInfoResponse0 = null;
      ClusterName clusterName0 = ClusterName.DEFAULT;
      assertNotNull(clusterName0);
      assertEquals("elasticsearch", clusterName0.value());
      
      NodeStats[] nodeStatsArray0 = null;
      NodesStatsResponse nodesStatsResponse0 = new NodesStatsResponse(clusterName0, nodeStatsArray0);
      assertNotNull(nodesStatsResponse0);
      assertEquals("elasticsearch", clusterName0.value());
      assertEquals("elasticsearch", nodesStatsResponse0.getClusterNameAsString());
      
      // Undeclared exception!
      try { 
        restNodesAction0.buildTable(nettyHttpRequest0, clusterStateResponse0, nodesInfoResponse0, nodesStatsResponse0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.rest.action.cat.RestNodesAction", e);
      }
  }

  @Test(timeout = 11000)
  public void test14()  throws Throwable  {
      ClusterState clusterState0 = ClusterState.PROTO;
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertNotNull(clusterState0);
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState0.status());
      assertEquals(0L, clusterState0.getVersion());
      assertEquals(0L, clusterState0.version());
      assertFalse(clusterState0.wasReadFromDiff());
      assertEquals("AAAAAAEAQACCAAAAAwAAAA", clusterState0.stateUUID());
      
      RoutingNodes routingNodes0 = clusterState0.getRoutingNodes();
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertNotNull(routingNodes0);
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState0.status());
      assertEquals(0L, clusterState0.getVersion());
      assertEquals(0L, clusterState0.version());
      assertFalse(clusterState0.wasReadFromDiff());
      assertEquals("AAAAAAEAQACCAAAAAwAAAA", clusterState0.stateUUID());
      assertFalse(routingNodes0.hasUnassignedPrimaries());
      assertEquals(0, routingNodes0.getRelocatingShardCount());
      assertFalse(routingNodes0.hasInactivePrimaries());
      assertFalse(routingNodes0.hasUnassignedShards());
      assertFalse(routingNodes0.hasInactiveShards());
      assertEquals(0, routingNodes0.size());
      
      MetaData metaData0 = routingNodes0.getMetaData();
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertNotNull(metaData0);
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState0.status());
      assertEquals(0L, clusterState0.getVersion());
      assertEquals(0L, clusterState0.version());
      assertFalse(clusterState0.wasReadFromDiff());
      assertEquals("AAAAAAEAQACCAAAAAwAAAA", clusterState0.stateUUID());
      assertFalse(routingNodes0.hasUnassignedPrimaries());
      assertEquals(0, routingNodes0.getRelocatingShardCount());
      assertFalse(routingNodes0.hasInactivePrimaries());
      assertFalse(routingNodes0.hasUnassignedShards());
      assertFalse(routingNodes0.hasInactiveShards());
      assertEquals(0, routingNodes0.size());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      
      Settings settings0 = metaData0.transientSettings();
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertNotNull(settings0);
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState0.status());
      assertEquals(0L, clusterState0.getVersion());
      assertEquals(0L, clusterState0.version());
      assertFalse(clusterState0.wasReadFromDiff());
      assertEquals("AAAAAAEAQACCAAAAAwAAAA", clusterState0.stateUUID());
      assertFalse(routingNodes0.hasUnassignedPrimaries());
      assertEquals(0, routingNodes0.getRelocatingShardCount());
      assertFalse(routingNodes0.hasInactivePrimaries());
      assertFalse(routingNodes0.hasUnassignedShards());
      assertFalse(routingNodes0.hasInactiveShards());
      assertEquals(0, routingNodes0.size());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      
      RestController restController0 = new RestController(settings0);
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertNotNull(restController0);
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState0.status());
      assertEquals(0L, clusterState0.getVersion());
      assertEquals(0L, clusterState0.version());
      assertFalse(clusterState0.wasReadFromDiff());
      assertEquals("AAAAAAEAQACCAAAAAwAAAA", clusterState0.stateUUID());
      assertFalse(routingNodes0.hasUnassignedPrimaries());
      assertEquals(0, routingNodes0.getRelocatingShardCount());
      assertFalse(routingNodes0.hasInactivePrimaries());
      assertFalse(routingNodes0.hasUnassignedShards());
      assertFalse(routingNodes0.hasInactiveShards());
      assertEquals(0, routingNodes0.size());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      
      Client client0 = null;
      RestNodesAction restNodesAction0 = new RestNodesAction(settings0, restController0, client0);
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertNotNull(restNodesAction0);
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState0.status());
      assertEquals(0L, clusterState0.getVersion());
      assertEquals(0L, clusterState0.version());
      assertFalse(clusterState0.wasReadFromDiff());
      assertEquals("AAAAAAEAQACCAAAAAwAAAA", clusterState0.stateUUID());
      assertFalse(routingNodes0.hasUnassignedPrimaries());
      assertEquals(0, routingNodes0.getRelocatingShardCount());
      assertFalse(routingNodes0.hasInactivePrimaries());
      assertFalse(routingNodes0.hasUnassignedShards());
      assertFalse(routingNodes0.hasInactiveShards());
      assertEquals(0, routingNodes0.size());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertNotNull(linkedHashSet0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      RepositoriesMetaData repositoriesMetaData0 = metaData0.custom(clusterState0.UNKNOWN_UUID);
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertNull(repositoriesMetaData0);
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState0.status());
      assertEquals(0L, clusterState0.getVersion());
      assertEquals(0L, clusterState0.version());
      assertFalse(clusterState0.wasReadFromDiff());
      assertEquals("AAAAAAEAQACCAAAAAwAAAA", clusterState0.stateUUID());
      assertFalse(routingNodes0.hasUnassignedPrimaries());
      assertEquals(0, routingNodes0.getRelocatingShardCount());
      assertFalse(routingNodes0.hasInactivePrimaries());
      assertFalse(routingNodes0.hasUnassignedShards());
      assertFalse(routingNodes0.hasInactiveShards());
      assertEquals(0, routingNodes0.size());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      
      short short0 = restNodesAction0.calculatePercentage(clusterState0.UNKNOWN_VERSION, clusterState0.UNKNOWN_VERSION);
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState0.status());
      assertEquals(0L, clusterState0.getVersion());
      assertEquals(0L, clusterState0.version());
      assertFalse(clusterState0.wasReadFromDiff());
      assertEquals("AAAAAAEAQACCAAAAAwAAAA", clusterState0.stateUUID());
      assertFalse(routingNodes0.hasUnassignedPrimaries());
      assertEquals(0, routingNodes0.getRelocatingShardCount());
      assertFalse(routingNodes0.hasInactivePrimaries());
      assertFalse(routingNodes0.hasUnassignedShards());
      assertFalse(routingNodes0.hasInactiveShards());
      assertEquals(0, routingNodes0.size());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertEquals((short)0, short0);
      
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) metaData0.CONTEXT_MODE_GATEWAY);
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertNotNull(stringBuilder0);
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState0.status());
      assertEquals(0L, clusterState0.getVersion());
      assertEquals(0L, clusterState0.version());
      assertFalse(clusterState0.wasReadFromDiff());
      assertEquals("AAAAAAEAQACCAAAAAwAAAA", clusterState0.stateUUID());
      assertFalse(routingNodes0.hasUnassignedPrimaries());
      assertEquals(0, routingNodes0.getRelocatingShardCount());
      assertFalse(routingNodes0.hasInactivePrimaries());
      assertFalse(routingNodes0.hasUnassignedShards());
      assertFalse(routingNodes0.hasInactiveShards());
      assertEquals(0, routingNodes0.size());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals("GATEWAY", stringBuilder0.toString());
      
      restNodesAction0.documentation(stringBuilder0);
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState0.status());
      assertEquals(0L, clusterState0.getVersion());
      assertEquals(0L, clusterState0.version());
      assertFalse(clusterState0.wasReadFromDiff());
      assertEquals("AAAAAAEAQACCAAAAAwAAAA", clusterState0.stateUUID());
      assertFalse(routingNodes0.hasUnassignedPrimaries());
      assertEquals(0, routingNodes0.getRelocatingShardCount());
      assertFalse(routingNodes0.hasInactivePrimaries());
      assertFalse(routingNodes0.hasUnassignedShards());
      assertFalse(routingNodes0.hasInactiveShards());
      assertEquals(0, routingNodes0.size());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertEquals("GATEWAY/_cat/nodes\n", stringBuilder0.toString());
      
      HttpVersion httpVersion0 = HttpVersion.HTTP_1_1;
      assertNotNull(httpVersion0);
      assertTrue(httpVersion0.isKeepAliveDefault());
      assertEquals("HTTP/1.1", httpVersion0.toString());
      assertEquals(1, httpVersion0.getMinorVersion());
      assertEquals(1, httpVersion0.getMajorVersion());
      assertEquals("HTTP/1.1", httpVersion0.getText());
      assertEquals("HTTP", httpVersion0.getProtocolName());
      
      HttpMethod httpMethod0 = HttpMethod.POST;
      assertNotNull(httpMethod0);
      assertEquals("POST", httpMethod0.toString());
      assertEquals("POST", httpMethod0.getName());
      
      DefaultHttpRequest defaultHttpRequest0 = new DefaultHttpRequest(httpVersion0, httpMethod0, metaData0.CONTEXT_MODE_SNAPSHOT);
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertNotNull(defaultHttpRequest0);
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState0.status());
      assertEquals(0L, clusterState0.getVersion());
      assertEquals(0L, clusterState0.version());
      assertFalse(clusterState0.wasReadFromDiff());
      assertEquals("AAAAAAEAQACCAAAAAwAAAA", clusterState0.stateUUID());
      assertFalse(routingNodes0.hasUnassignedPrimaries());
      assertEquals(0, routingNodes0.getRelocatingShardCount());
      assertFalse(routingNodes0.hasInactivePrimaries());
      assertFalse(routingNodes0.hasUnassignedShards());
      assertFalse(routingNodes0.hasInactiveShards());
      assertEquals(0, routingNodes0.size());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertTrue(httpVersion0.isKeepAliveDefault());
      assertEquals("HTTP/1.1", httpVersion0.toString());
      assertEquals(1, httpVersion0.getMinorVersion());
      assertEquals(1, httpVersion0.getMajorVersion());
      assertEquals("HTTP/1.1", httpVersion0.getText());
      assertEquals("HTTP", httpVersion0.getProtocolName());
      assertEquals("POST", httpMethod0.toString());
      assertEquals("POST", httpMethod0.getName());
      assertEquals("SNAPSHOT", defaultHttpRequest0.getUri());
      
      DefaultLocalServerChannelFactory defaultLocalServerChannelFactory0 = new DefaultLocalServerChannelFactory();
      assertNotNull(defaultLocalServerChannelFactory0);
      
      DefaultChannelPipeline defaultChannelPipeline0 = new DefaultChannelPipeline();
      assertNotNull(defaultChannelPipeline0);
      assertFalse(defaultChannelPipeline0.isAttached());
      
      LocalServerChannel localServerChannel0 = defaultLocalServerChannelFactory0.newChannel(defaultChannelPipeline0);
      assertNotNull(localServerChannel0);
      assertTrue(defaultChannelPipeline0.isAttached());
      assertTrue(localServerChannel0.isReadable());
      assertEquals(1, (int)localServerChannel0.getId());
      
      ClusterName clusterName0 = null;
      ClusterState.Builder clusterState_Builder0 = ClusterState.builder(clusterName0);
      assertNotNull(clusterState_Builder0);
      
      NettyHttpRequest nettyHttpRequest0 = new NettyHttpRequest(defaultHttpRequest0, localServerChannel0);
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertNotNull(nettyHttpRequest0);
      assertTrue(defaultChannelPipeline0.isAttached());
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState0.status());
      assertEquals(0L, clusterState0.getVersion());
      assertEquals(0L, clusterState0.version());
      assertFalse(clusterState0.wasReadFromDiff());
      assertEquals("AAAAAAEAQACCAAAAAwAAAA", clusterState0.stateUUID());
      assertTrue(localServerChannel0.isReadable());
      assertEquals(1, (int)localServerChannel0.getId());
      assertFalse(routingNodes0.hasUnassignedPrimaries());
      assertEquals(0, routingNodes0.getRelocatingShardCount());
      assertFalse(routingNodes0.hasInactivePrimaries());
      assertFalse(routingNodes0.hasUnassignedShards());
      assertFalse(routingNodes0.hasInactiveShards());
      assertEquals(0, routingNodes0.size());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(RestRequest.Method.POST, nettyHttpRequest0.method());
      assertEquals("SNAPSHOT", nettyHttpRequest0.rawPath());
      assertEquals("SNAPSHOT", nettyHttpRequest0.uri());
      assertFalse(nettyHttpRequest0.hasContent());
      assertTrue(httpVersion0.isKeepAliveDefault());
      assertEquals("HTTP/1.1", httpVersion0.toString());
      assertEquals(1, httpVersion0.getMinorVersion());
      assertEquals(1, httpVersion0.getMajorVersion());
      assertEquals("HTTP/1.1", httpVersion0.getText());
      assertEquals("HTTP", httpVersion0.getProtocolName());
      assertEquals("POST", httpMethod0.toString());
      assertEquals("POST", httpMethod0.getName());
      assertEquals("SNAPSHOT", defaultHttpRequest0.getUri());
      
      ClusterName clusterName1 = new ClusterName(metaData0.GLOBAL_STATE_FILE_PREFIX);
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertNotNull(clusterName1);
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState0.status());
      assertEquals(0L, clusterState0.getVersion());
      assertEquals(0L, clusterState0.version());
      assertFalse(clusterState0.wasReadFromDiff());
      assertEquals("AAAAAAEAQACCAAAAAwAAAA", clusterState0.stateUUID());
      assertFalse(routingNodes0.hasUnassignedPrimaries());
      assertEquals(0, routingNodes0.getRelocatingShardCount());
      assertFalse(routingNodes0.hasInactivePrimaries());
      assertFalse(routingNodes0.hasUnassignedShards());
      assertFalse(routingNodes0.hasInactiveShards());
      assertEquals(0, routingNodes0.size());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals("global-", clusterName1.value());
      
      ClusterStateResponse clusterStateResponse0 = new ClusterStateResponse(clusterName1, clusterState0);
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertNotNull(clusterStateResponse0);
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState0.status());
      assertEquals(0L, clusterState0.getVersion());
      assertEquals(0L, clusterState0.version());
      assertFalse(clusterState0.wasReadFromDiff());
      assertEquals("AAAAAAEAQACCAAAAAwAAAA", clusterState0.stateUUID());
      assertFalse(routingNodes0.hasUnassignedPrimaries());
      assertEquals(0, routingNodes0.getRelocatingShardCount());
      assertFalse(routingNodes0.hasInactivePrimaries());
      assertFalse(routingNodes0.hasUnassignedShards());
      assertFalse(routingNodes0.hasInactiveShards());
      assertEquals(0, routingNodes0.size());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals("global-", clusterName1.value());
      
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.appendStringToFile(evoSuiteFile0, repositoriesMetaData0.TYPE);
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState0.status());
      assertEquals(0L, clusterState0.getVersion());
      assertEquals(0L, clusterState0.version());
      assertFalse(clusterState0.wasReadFromDiff());
      assertEquals("AAAAAAEAQACCAAAAAwAAAA", clusterState0.stateUUID());
      assertFalse(routingNodes0.hasUnassignedPrimaries());
      assertEquals(0, routingNodes0.getRelocatingShardCount());
      assertFalse(routingNodes0.hasInactivePrimaries());
      assertFalse(routingNodes0.hasUnassignedShards());
      assertFalse(routingNodes0.hasInactiveShards());
      assertEquals(0, routingNodes0.size());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertFalse(boolean0);
      
      NodeInfo[] nodeInfoArray0 = new NodeInfo[0];
      NodesInfoResponse nodesInfoResponse0 = new NodesInfoResponse(clusterName1, nodeInfoArray0);
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertNotNull(nodesInfoResponse0);
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState0.status());
      assertEquals(0L, clusterState0.getVersion());
      assertEquals(0L, clusterState0.version());
      assertFalse(clusterState0.wasReadFromDiff());
      assertEquals("AAAAAAEAQACCAAAAAwAAAA", clusterState0.stateUUID());
      assertFalse(routingNodes0.hasUnassignedPrimaries());
      assertEquals(0, routingNodes0.getRelocatingShardCount());
      assertFalse(routingNodes0.hasInactivePrimaries());
      assertFalse(routingNodes0.hasUnassignedShards());
      assertFalse(routingNodes0.hasInactiveShards());
      assertEquals(0, routingNodes0.size());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals("global-", clusterName1.value());
      assertEquals("global-", nodesInfoResponse0.getClusterNameAsString());
      assertEquals(0, nodeInfoArray0.length);
      
      NodeStats[] nodeStatsArray0 = null;
      NodesStatsResponse nodesStatsResponse0 = new NodesStatsResponse(clusterName1, nodeStatsArray0);
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertNotNull(nodesStatsResponse0);
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState0.status());
      assertEquals(0L, clusterState0.getVersion());
      assertEquals(0L, clusterState0.version());
      assertFalse(clusterState0.wasReadFromDiff());
      assertEquals("AAAAAAEAQACCAAAAAwAAAA", clusterState0.stateUUID());
      assertFalse(routingNodes0.hasUnassignedPrimaries());
      assertEquals(0, routingNodes0.getRelocatingShardCount());
      assertFalse(routingNodes0.hasInactivePrimaries());
      assertFalse(routingNodes0.hasUnassignedShards());
      assertFalse(routingNodes0.hasInactiveShards());
      assertEquals(0, routingNodes0.size());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals("global-", clusterName1.value());
      assertEquals("global-", nodesStatsResponse0.getClusterNameAsString());
      
      Table table0 = restNodesAction0.buildTable(nettyHttpRequest0, clusterStateResponse0, nodesInfoResponse0, nodesStatsResponse0);
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertNotNull(table0);
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState0.status());
      assertEquals(0L, clusterState0.getVersion());
      assertEquals(0L, clusterState0.version());
      assertFalse(clusterState0.wasReadFromDiff());
      assertEquals("AAAAAAEAQACCAAAAAwAAAA", clusterState0.stateUUID());
      assertFalse(routingNodes0.hasUnassignedPrimaries());
      assertEquals(0, routingNodes0.getRelocatingShardCount());
      assertFalse(routingNodes0.hasInactivePrimaries());
      assertFalse(routingNodes0.hasUnassignedShards());
      assertFalse(routingNodes0.hasInactiveShards());
      assertEquals(0, routingNodes0.size());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertTrue(httpVersion0.isKeepAliveDefault());
      assertEquals("HTTP/1.1", httpVersion0.toString());
      assertEquals(1, httpVersion0.getMinorVersion());
      assertEquals(1, httpVersion0.getMajorVersion());
      assertEquals("HTTP/1.1", httpVersion0.getText());
      assertEquals("HTTP", httpVersion0.getProtocolName());
      assertEquals("POST", httpMethod0.toString());
      assertEquals("POST", httpMethod0.getName());
      assertEquals("SNAPSHOT", defaultHttpRequest0.getUri());
      assertTrue(defaultChannelPipeline0.isAttached());
      assertTrue(localServerChannel0.isReadable());
      assertEquals(1, (int)localServerChannel0.getId());
      assertEquals(RestRequest.Method.POST, nettyHttpRequest0.method());
      assertEquals("SNAPSHOT", nettyHttpRequest0.rawPath());
      assertEquals("SNAPSHOT", nettyHttpRequest0.uri());
      assertFalse(nettyHttpRequest0.hasContent());
      assertEquals("global-", clusterName1.value());
      assertEquals("global-", nodesInfoResponse0.getClusterNameAsString());
      assertEquals("global-", nodesStatsResponse0.getClusterNameAsString());
      assertEquals(0, nodeInfoArray0.length);
      
      // Undeclared exception!
      restNodesAction0.buildTable(nettyHttpRequest0, clusterStateResponse0, nodesInfoResponse0, nodesStatsResponse0);
  }
}
