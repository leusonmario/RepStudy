/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 09 06:00:12 GMT 2021
 */

package org.elasticsearch.rest.action.cat;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.nio.ByteOrder;
import java.nio.channels.SocketChannel;
import java.util.Map;
import java.util.Set;
import java.util.concurrent.ScheduledThreadPoolExecutor;
import java.util.concurrent.ThreadPoolExecutor;
import org.elasticsearch.cache.recycler.PageCacheRecycler;
import org.elasticsearch.client.Client;
import org.elasticsearch.cluster.metadata.MetaData;
import org.elasticsearch.common.Table;
import org.elasticsearch.common.component.Lifecycle;
import org.elasticsearch.common.io.stream.BytesStreamOutput;
import org.elasticsearch.common.netty.NettyUtils;
import org.elasticsearch.common.network.NetworkService;
import org.elasticsearch.common.settings.Settings;
import org.elasticsearch.common.util.BigArrays;
import org.elasticsearch.http.HttpStats;
import org.elasticsearch.http.netty.NettyHttpChannel;
import org.elasticsearch.http.netty.NettyHttpRequest;
import org.elasticsearch.http.netty.NettyHttpServerTransport;
import org.elasticsearch.http.netty.pipelining.OrderedUpstreamMessageEvent;
import org.elasticsearch.indices.breaker.NoneCircuitBreakerService;
import org.elasticsearch.rest.RestChannel;
import org.elasticsearch.rest.RestController;
import org.elasticsearch.rest.RestFilter;
import org.elasticsearch.rest.RestFilterChain;
import org.elasticsearch.rest.RestRequest;
import org.elasticsearch.rest.action.cat.RestNodesAction;
import org.elasticsearch.search.aggregations.bucket.range.RangeAggregator;
import org.elasticsearch.threadpool.ThreadPool;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.net.MockInetSocketAddress;
import org.jboss.netty.channel.Channel;
import org.jboss.netty.channel.ChannelFactory;
import org.jboss.netty.channel.ChannelPipeline;
import org.jboss.netty.channel.ChannelSink;
import org.jboss.netty.channel.DefaultChannelPipeline;
import org.jboss.netty.channel.local.DefaultLocalServerChannelFactory;
import org.jboss.netty.channel.local.LocalServerChannel;
import org.jboss.netty.channel.socket.nio.NioSocketChannel;
import org.jboss.netty.channel.socket.nio.NioWorker;
import org.jboss.netty.handler.codec.http.DefaultHttpRequest;
import org.jboss.netty.handler.codec.http.HttpMethod;
import org.jboss.netty.handler.codec.http.HttpVersion;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class RestNodesAction_ESTest extends RestNodesAction_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test0()  throws Throwable  {
      MetaData metaData0 = MetaData.EMPTY_META_DATA;
      assertNotNull(metaData0);
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      
      Settings settings0 = metaData0.transientSettings();
      assertNotNull(settings0);
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      
      RestController restController0 = new RestController(settings0);
      assertNotNull(restController0);
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      
      Client client0 = null;
      RestNodesAction restNodesAction0 = new RestNodesAction(settings0, restController0, client0);
      assertNotNull(restNodesAction0);
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      
      StringBuilder stringBuilder0 = null;
      // Undeclared exception!
      try { 
        restNodesAction0.documentation(stringBuilder0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.rest.action.cat.RestNodesAction", e);
      }
  }

  @Test(timeout = 11000)
  public void test1()  throws Throwable  {
      Settings settings0 = Settings.EMPTY;
      assertNotNull(settings0);
      
      Client client0 = null;
      RestRequest restRequest0 = null;
      RestController restController0 = new RestController(settings0);
      assertNotNull(restController0);
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      
      RestNodesAction restNodesAction0 = new RestNodesAction(settings0, restController0, client0);
      assertNotNull(restNodesAction0);
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      
      Table table0 = restNodesAction0.getTableWithHeader(restRequest0);
      assertNotNull(table0);
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
  }

  @Test(timeout = 11000)
  public void test2()  throws Throwable  {
      Settings settings0 = Settings.EMPTY;
      assertNotNull(settings0);
      
      RestController restController0 = new RestController(settings0);
      assertNotNull(restController0);
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      
      Client client0 = null;
      RestNodesAction restNodesAction0 = new RestNodesAction(settings0, restController0, client0);
      assertNotNull(restNodesAction0);
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      
      String string0 = "E4[hq-Pxa";
      boolean boolean0 = false;
      HttpVersion httpVersion0 = HttpVersion.HTTP_1_0;
      assertNotNull(httpVersion0);
      assertFalse(httpVersion0.isKeepAliveDefault());
      assertEquals("HTTP/1.0", httpVersion0.getText());
      assertEquals(1, httpVersion0.getMajorVersion());
      assertEquals(0, httpVersion0.getMinorVersion());
      assertEquals("HTTP/1.0", httpVersion0.toString());
      assertEquals("HTTP", httpVersion0.getProtocolName());
      
      HttpMethod httpMethod0 = HttpMethod.GET;
      assertNotNull(httpMethod0);
      assertEquals("GET", httpMethod0.getName());
      assertEquals("GET", httpMethod0.toString());
      
      DefaultHttpRequest defaultHttpRequest0 = new DefaultHttpRequest(httpVersion0, httpMethod0, string0);
      assertNotNull(defaultHttpRequest0);
      assertFalse(httpVersion0.isKeepAliveDefault());
      assertEquals("HTTP/1.0", httpVersion0.getText());
      assertEquals(1, httpVersion0.getMajorVersion());
      assertEquals(0, httpVersion0.getMinorVersion());
      assertEquals("HTTP/1.0", httpVersion0.toString());
      assertEquals("HTTP", httpVersion0.getProtocolName());
      assertEquals("GET", httpMethod0.getName());
      assertEquals("GET", httpMethod0.toString());
      assertEquals("E4[hq-Pxa", defaultHttpRequest0.getUri());
      
      DefaultLocalServerChannelFactory defaultLocalServerChannelFactory0 = new DefaultLocalServerChannelFactory();
      assertNotNull(defaultLocalServerChannelFactory0);
      
      DefaultChannelPipeline defaultChannelPipeline0 = new DefaultChannelPipeline();
      assertNotNull(defaultChannelPipeline0);
      assertFalse(defaultChannelPipeline0.isAttached());
      
      LocalServerChannel localServerChannel0 = defaultLocalServerChannelFactory0.newChannel(defaultChannelPipeline0);
      assertNotNull(localServerChannel0);
      assertTrue(defaultChannelPipeline0.isAttached());
      assertEquals(0, (int)localServerChannel0.getId());
      assertTrue(localServerChannel0.isReadable());
      
      NettyHttpRequest nettyHttpRequest0 = new NettyHttpRequest(defaultHttpRequest0, localServerChannel0);
      assertNotNull(nettyHttpRequest0);
      assertFalse(httpVersion0.isKeepAliveDefault());
      assertEquals("HTTP/1.0", httpVersion0.getText());
      assertEquals(1, httpVersion0.getMajorVersion());
      assertEquals(0, httpVersion0.getMinorVersion());
      assertEquals("HTTP/1.0", httpVersion0.toString());
      assertEquals("HTTP", httpVersion0.getProtocolName());
      assertEquals("GET", httpMethod0.getName());
      assertEquals("GET", httpMethod0.toString());
      assertEquals("E4[hq-Pxa", defaultHttpRequest0.getUri());
      assertTrue(defaultChannelPipeline0.isAttached());
      assertEquals(0, (int)localServerChannel0.getId());
      assertTrue(localServerChannel0.isReadable());
      assertFalse(nettyHttpRequest0.hasContent());
      assertEquals(RestRequest.Method.GET, nettyHttpRequest0.method());
      assertEquals("E4[hq-Pxa", nettyHttpRequest0.uri());
      assertEquals("E4[hq-Pxa", nettyHttpRequest0.rawPath());
      
      NetworkService networkService0 = new NetworkService(settings0);
      assertNotNull(networkService0);
      
      ThreadPool threadPool0 = new ThreadPool(settings0);
      assertNotNull(threadPool0);
      
      BigArrays bigArrays0 = BigArrays.NON_RECYCLING_INSTANCE;
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertNotNull(bigArrays0);
      
      NettyHttpServerTransport nettyHttpServerTransport0 = new NettyHttpServerTransport(settings0, networkService0, bigArrays0, threadPool0);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertNotNull(nettyHttpServerTransport0);
      assertEquals(Lifecycle.State.INITIALIZED, nettyHttpServerTransport0.lifecycleState());
      
      NettyHttpChannel nettyHttpChannel0 = new NettyHttpChannel(nettyHttpServerTransport0, nettyHttpRequest0, boolean0);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertNotNull(nettyHttpChannel0);
      assertFalse(httpVersion0.isKeepAliveDefault());
      assertEquals("HTTP/1.0", httpVersion0.getText());
      assertEquals(1, httpVersion0.getMajorVersion());
      assertEquals(0, httpVersion0.getMinorVersion());
      assertEquals("HTTP/1.0", httpVersion0.toString());
      assertEquals("HTTP", httpVersion0.getProtocolName());
      assertEquals("GET", httpMethod0.getName());
      assertEquals("GET", httpMethod0.toString());
      assertEquals("E4[hq-Pxa", defaultHttpRequest0.getUri());
      assertTrue(defaultChannelPipeline0.isAttached());
      assertEquals(0, (int)localServerChannel0.getId());
      assertTrue(localServerChannel0.isReadable());
      assertFalse(nettyHttpRequest0.hasContent());
      assertEquals(RestRequest.Method.GET, nettyHttpRequest0.method());
      assertEquals("E4[hq-Pxa", nettyHttpRequest0.uri());
      assertEquals("E4[hq-Pxa", nettyHttpRequest0.rawPath());
      assertEquals(Lifecycle.State.INITIALIZED, nettyHttpServerTransport0.lifecycleState());
      assertFalse(nettyHttpChannel0.detailedErrorsEnabled());
      
      try { 
        restNodesAction0.handleRequest((RestRequest) nettyHttpRequest0, (RestChannel) nettyHttpChannel0, client0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.rest.action.cat.RestNodesAction", e);
      }
  }

  @Test(timeout = 11000)
  public void test3()  throws Throwable  {
      Settings settings0 = Settings.Builder.EMPTY_SETTINGS;
      assertNotNull(settings0);
      
      RestController restController0 = new RestController(settings0);
      assertNotNull(restController0);
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      
      Client client0 = null;
      RestNodesAction restNodesAction0 = new RestNodesAction(settings0, restController0, client0);
      assertNotNull(restNodesAction0);
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      
      StringBuilder stringBuilder0 = null;
      // Undeclared exception!
      try { 
        restNodesAction0.documentation(stringBuilder0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.rest.action.cat.RestNodesAction", e);
      }
  }

  @Test(timeout = 11000)
  public void test4()  throws Throwable  {
      MetaData metaData0 = MetaData.PROTO;
      assertNotNull(metaData0);
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      
      Settings settings0 = metaData0.transientSettings();
      assertNotNull(settings0);
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      
      RestController restController0 = null;
      Client client0 = null;
      RestNodesAction restNodesAction0 = null;
      try {
        restNodesAction0 = new RestNodesAction(settings0, restController0, client0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.rest.action.cat.RestNodesAction", e);
      }
  }

  @Test(timeout = 11000)
  public void test5()  throws Throwable  {
      Settings settings0 = Settings.EMPTY;
      assertNotNull(settings0);
      
      RestController restController0 = new RestController(settings0);
      assertNotNull(restController0);
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      
      Client client0 = null;
      RestNodesAction restNodesAction0 = new RestNodesAction(settings0, restController0, client0);
      assertNotNull(restNodesAction0);
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      
      StringBuilder stringBuilder0 = new StringBuilder();
      assertNotNull(stringBuilder0);
      assertEquals("", stringBuilder0.toString());
      
      int int0 = 0;
      float float0 = (-1098.5953F);
      StringBuilder stringBuilder1 = stringBuilder0.insert(int0, float0);
      assertNotNull(stringBuilder1);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      assertEquals("-1098.5953", stringBuilder0.toString());
      assertEquals("-1098.5953", stringBuilder1.toString());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      StringBuilder stringBuilder2 = stringBuilder1.insert(int0, object0);
      assertNotNull(stringBuilder2);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder2);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder2, stringBuilder0);
      assertSame(stringBuilder2, stringBuilder1);
      
      int int1 = 2284;
      char[] charArray0 = new char[2];
      char char0 = 'c';
      charArray0[0] = char0;
      char char1 = 'v';
      String string0 = "E4[Gq-Pxa";
      int int2 = 0;
      boolean boolean0 = false;
      HttpVersion httpVersion0 = new HttpVersion(string0, int1, int2, boolean0);
      assertNotNull(httpVersion0);
      assertEquals("E4[GQ-PXA/2284.0", httpVersion0.toString());
      assertEquals(0, httpVersion0.getMinorVersion());
      assertEquals("E4[GQ-PXA", httpVersion0.getProtocolName());
      assertEquals(2284, httpVersion0.getMajorVersion());
      assertFalse(httpVersion0.isKeepAliveDefault());
      assertEquals("E4[GQ-PXA/2284.0", httpVersion0.getText());
      assertFalse(int2 == int1);
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      
      HttpMethod httpMethod0 = HttpMethod.GET;
      assertNotNull(httpMethod0);
      assertEquals("GET", httpMethod0.getName());
      assertEquals("GET", httpMethod0.toString());
      
      String string1 = "/8,1'9jCKvV,OI";
      DefaultHttpRequest defaultHttpRequest0 = new DefaultHttpRequest(httpVersion0, httpMethod0, string1);
      assertNotNull(defaultHttpRequest0);
      assertEquals("E4[GQ-PXA/2284.0", httpVersion0.toString());
      assertEquals(0, httpVersion0.getMinorVersion());
      assertEquals("E4[GQ-PXA", httpVersion0.getProtocolName());
      assertEquals(2284, httpVersion0.getMajorVersion());
      assertFalse(httpVersion0.isKeepAliveDefault());
      assertEquals("E4[GQ-PXA/2284.0", httpVersion0.getText());
      assertEquals("GET", httpMethod0.getName());
      assertEquals("GET", httpMethod0.toString());
      assertEquals("/8,1'9jCKvV,OI", defaultHttpRequest0.getUri());
      assertFalse(int2 == int1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      assertFalse(string0.equals((Object)string1));
      
      DefaultLocalServerChannelFactory defaultLocalServerChannelFactory0 = new DefaultLocalServerChannelFactory();
      assertNotNull(defaultLocalServerChannelFactory0);
      
      DefaultChannelPipeline defaultChannelPipeline0 = new DefaultChannelPipeline();
      assertNotNull(defaultChannelPipeline0);
      assertFalse(defaultChannelPipeline0.isAttached());
      
      LocalServerChannel localServerChannel0 = defaultLocalServerChannelFactory0.newChannel(defaultChannelPipeline0);
      assertNotNull(localServerChannel0);
      assertTrue(defaultChannelPipeline0.isAttached());
      assertTrue(localServerChannel0.isReadable());
      assertEquals(0, (int)localServerChannel0.getId());
      
      NettyHttpRequest nettyHttpRequest0 = new NettyHttpRequest(defaultHttpRequest0, localServerChannel0);
      assertNotNull(nettyHttpRequest0);
      assertEquals("E4[GQ-PXA/2284.0", httpVersion0.toString());
      assertEquals(0, httpVersion0.getMinorVersion());
      assertEquals("E4[GQ-PXA", httpVersion0.getProtocolName());
      assertEquals(2284, httpVersion0.getMajorVersion());
      assertFalse(httpVersion0.isKeepAliveDefault());
      assertEquals("E4[GQ-PXA/2284.0", httpVersion0.getText());
      assertEquals("GET", httpMethod0.getName());
      assertEquals("GET", httpMethod0.toString());
      assertEquals("/8,1'9jCKvV,OI", defaultHttpRequest0.getUri());
      assertTrue(defaultChannelPipeline0.isAttached());
      assertTrue(localServerChannel0.isReadable());
      assertEquals(0, (int)localServerChannel0.getId());
      assertEquals("/8,1'9jCKvV,OI", nettyHttpRequest0.uri());
      assertFalse(nettyHttpRequest0.hasContent());
      assertEquals("/8,1'9jCKvV,OI", nettyHttpRequest0.rawPath());
      assertEquals(RestRequest.Method.GET, nettyHttpRequest0.method());
      assertFalse(int2 == int1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      assertFalse(string0.equals((Object)string1));
      
      NetworkService networkService0 = new NetworkService(settings0);
      assertNotNull(networkService0);
      
      ThreadPool threadPool0 = new ThreadPool(settings0);
      assertNotNull(threadPool0);
      
      PageCacheRecycler pageCacheRecycler0 = new PageCacheRecycler(settings0, threadPool0);
      assertNotNull(pageCacheRecycler0);
      
      NoneCircuitBreakerService noneCircuitBreakerService0 = new NoneCircuitBreakerService();
      assertNotNull(noneCircuitBreakerService0);
      assertEquals(Lifecycle.State.INITIALIZED, noneCircuitBreakerService0.lifecycleState());
      
      BigArrays bigArrays0 = new BigArrays(pageCacheRecycler0, noneCircuitBreakerService0);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertNotNull(bigArrays0);
      assertEquals(Lifecycle.State.INITIALIZED, noneCircuitBreakerService0.lifecycleState());
      
      ThreadPool threadPool1 = null;
      NettyHttpServerTransport nettyHttpServerTransport0 = new NettyHttpServerTransport(settings0, networkService0, bigArrays0, threadPool1);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertNotNull(nettyHttpServerTransport0);
      assertEquals(Lifecycle.State.INITIALIZED, nettyHttpServerTransport0.lifecycleState());
      assertEquals(Lifecycle.State.INITIALIZED, noneCircuitBreakerService0.lifecycleState());
      
      NettyHttpChannel nettyHttpChannel0 = new NettyHttpChannel(nettyHttpServerTransport0, nettyHttpRequest0, boolean0);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertNotNull(nettyHttpChannel0);
      assertEquals(Lifecycle.State.INITIALIZED, nettyHttpServerTransport0.lifecycleState());
      assertFalse(nettyHttpChannel0.detailedErrorsEnabled());
      assertEquals("E4[GQ-PXA/2284.0", httpVersion0.toString());
      assertEquals(0, httpVersion0.getMinorVersion());
      assertEquals("E4[GQ-PXA", httpVersion0.getProtocolName());
      assertEquals(2284, httpVersion0.getMajorVersion());
      assertFalse(httpVersion0.isKeepAliveDefault());
      assertEquals("E4[GQ-PXA/2284.0", httpVersion0.getText());
      assertEquals("GET", httpMethod0.getName());
      assertEquals("GET", httpMethod0.toString());
      assertEquals("/8,1'9jCKvV,OI", defaultHttpRequest0.getUri());
      assertTrue(defaultChannelPipeline0.isAttached());
      assertTrue(localServerChannel0.isReadable());
      assertEquals(0, (int)localServerChannel0.getId());
      assertEquals("/8,1'9jCKvV,OI", nettyHttpRequest0.uri());
      assertFalse(nettyHttpRequest0.hasContent());
      assertEquals("/8,1'9jCKvV,OI", nettyHttpRequest0.rawPath());
      assertEquals(RestRequest.Method.GET, nettyHttpRequest0.method());
      assertEquals(Lifecycle.State.INITIALIZED, noneCircuitBreakerService0.lifecycleState());
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(int2 == int1);
      assertFalse(string1.equals((Object)string0));
      
      try { 
        restNodesAction0.handleRequest((RestRequest) nettyHttpRequest0, (RestChannel) nettyHttpChannel0, client0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.rest.action.cat.RestNodesAction", e);
      }
  }

  @Test(timeout = 11000)
  public void test6()  throws Throwable  {
      Settings settings0 = Settings.Builder.EMPTY_SETTINGS;
      assertNotNull(settings0);
      
      RestController restController0 = new RestController(settings0);
      assertNotNull(restController0);
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      
      Client client0 = null;
      RestNodesAction restNodesAction0 = new RestNodesAction(settings0, restController0, client0);
      assertNotNull(restNodesAction0);
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      
      String string0 = "d";
      StringBuilder stringBuilder0 = new StringBuilder(string0);
      assertNotNull(stringBuilder0);
      assertEquals("d", stringBuilder0.toString());
      
      StringWriter stringWriter0 = new StringWriter();
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) stringBuilder0);
      assertNotNull(stringWriter1);
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter1, stringWriter0);
      assertEquals("d", stringBuilder0.toString());
      assertEquals("d", stringWriter0.toString());
      assertEquals("d", stringWriter1.toString());
      
      float float0 = 0.95F;
      StringBuilder stringBuilder1 = stringBuilder0.append(float0);
      assertNotNull(stringBuilder1);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      assertEquals("d0.95", stringBuilder0.toString());
      assertEquals("d0.95", stringBuilder1.toString());
      
      int int0 = 789;
      stringWriter1.write(int0);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter1, stringWriter0);
      assertEquals("d0.95", stringBuilder0.toString());
      assertEquals("d\u0315", stringWriter0.toString());
      assertEquals("d\u0315", stringWriter1.toString());
      
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      assertNotNull(stringBuffer0);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter1, stringWriter0);
      assertEquals("d0.95", stringBuilder0.toString());
      assertEquals("d\u0315", stringWriter0.toString());
      assertEquals("d\u0315", stringWriter1.toString());
      assertEquals(2, stringBuffer0.length());
      assertEquals("d\u0315", stringBuffer0.toString());
      
      StringBuilder stringBuilder2 = stringBuilder0.append(stringBuffer0);
      assertNotNull(stringBuilder2);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter1, stringWriter0);
      assertSame(stringBuilder2, stringBuilder0);
      assertSame(stringBuilder2, stringBuilder1);
      assertEquals("d0.95d\u0315", stringBuilder0.toString());
      assertEquals("d\u0315", stringWriter0.toString());
      assertEquals("d\u0315", stringWriter1.toString());
      assertEquals(2, stringBuffer0.length());
      assertEquals("d\u0315", stringBuffer0.toString());
      assertEquals("d0.95d\u0315", stringBuilder2.toString());
      
      int int1 = 2;
      double double0 = 0.0;
      StringBuilder stringBuilder3 = stringBuilder2.insert(int1, double0);
      assertNotNull(stringBuilder3);
      assertSame(stringBuilder3, stringBuilder1);
      assertSame(stringBuilder3, stringBuilder0);
      assertSame(stringBuilder3, stringBuilder2);
      assertSame(stringBuilder0, stringBuilder3);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter1, stringWriter0);
      assertSame(stringBuilder2, stringBuilder0);
      assertSame(stringBuilder2, stringBuilder3);
      assertSame(stringBuilder2, stringBuilder1);
      assertEquals("d00.0.95d\u0315", stringBuilder3.toString());
      assertEquals("d00.0.95d\u0315", stringBuilder0.toString());
      assertEquals("d\u0315", stringWriter0.toString());
      assertEquals("d\u0315", stringWriter1.toString());
      assertEquals(2, stringBuffer0.length());
      assertEquals("d\u0315", stringBuffer0.toString());
      assertEquals("d00.0.95d\u0315", stringBuilder2.toString());
      assertFalse(int1 == int0);
      
      StringBuilder stringBuilder4 = stringBuilder2.append((CharSequence) stringBuffer0);
      assertNotNull(stringBuilder4);
      assertSame(stringBuilder4, stringBuilder0);
      assertSame(stringBuilder4, stringBuilder2);
      assertSame(stringBuilder4, stringBuilder3);
      assertSame(stringBuilder4, stringBuilder1);
      assertSame(stringBuilder0, stringBuilder3);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder0, stringBuilder4);
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter1, stringWriter0);
      assertSame(stringBuilder2, stringBuilder0);
      assertSame(stringBuilder2, stringBuilder4);
      assertSame(stringBuilder2, stringBuilder3);
      assertSame(stringBuilder2, stringBuilder1);
      assertEquals("d00.0.95d\u0315d\u0315", stringBuilder4.toString());
      assertEquals("d00.0.95d\u0315d\u0315", stringBuilder0.toString());
      assertEquals("d\u0315", stringWriter0.toString());
      assertEquals("d\u0315", stringWriter1.toString());
      assertEquals(2, stringBuffer0.length());
      assertEquals("d\u0315", stringBuffer0.toString());
      assertEquals("d00.0.95d\u0315d\u0315", stringBuilder2.toString());
      
      restNodesAction0.documentation(stringBuilder2);
      assertSame(stringBuilder0, stringBuilder3);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder0, stringBuilder4);
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter1, stringWriter0);
      assertSame(stringBuilder2, stringBuilder0);
      assertSame(stringBuilder2, stringBuilder4);
      assertSame(stringBuilder2, stringBuilder3);
      assertSame(stringBuilder2, stringBuilder1);
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertEquals("d00.0.95d\u0315d\u0315/_cat/nodes\n", stringBuilder0.toString());
      assertEquals("d\u0315", stringWriter0.toString());
      assertEquals("d\u0315", stringWriter1.toString());
      assertEquals(2, stringBuffer0.length());
      assertEquals("d\u0315", stringBuffer0.toString());
      assertEquals("d00.0.95d\u0315d\u0315/_cat/nodes\n", stringBuilder2.toString());
      
      restNodesAction0.documentation(stringBuilder0);
      assertSame(stringBuilder0, stringBuilder3);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder0, stringBuilder4);
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertEquals("d00.0.95d\u0315d\u0315/_cat/nodes\n/_cat/nodes\n", stringBuilder0.toString());
      
      String string1 = null;
      boolean boolean0 = true;
      HttpVersion httpVersion0 = null;
      try {
        httpVersion0 = new HttpVersion(string1, boolean0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // text
         //
         verifyException("org.jboss.netty.handler.codec.http.HttpVersion", e);
      }
  }

  @Test(timeout = 11000)
  public void test7()  throws Throwable  {
      MetaData metaData0 = MetaData.EMPTY_META_DATA;
      assertNotNull(metaData0);
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0L, metaData0.version());
      
      Settings settings0 = metaData0.persistentSettings();
      assertNotNull(settings0);
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0L, metaData0.version());
      
      String string0 = "search.fetch_current";
      String string1 = null;
      Integer integer0 = Integer.getInteger(string1);
      assertNull(integer0);
      
      int int0 = 429;
      int int1 = (-4104);
      int int2 = Integer.sum(int0, int1);
      assertEquals((-3675), int2);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      
      Integer integer1 = settings0.getAsInt(string0, integer0);
      assertNull(integer1);
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0L, metaData0.version());
      
      RestController restController0 = new RestController(settings0);
      assertNotNull(restController0);
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      
      Client client0 = null;
      RestNodesAction restNodesAction0 = new RestNodesAction(settings0, restController0, client0);
      assertNotNull(restNodesAction0);
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      
      RestRequest restRequest0 = null;
      Table table0 = restNodesAction0.getTableWithHeader(restRequest0);
      assertNotNull(table0);
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      
      StringBuilder stringBuilder0 = new StringBuilder(metaData0.ALL);
      assertNotNull(stringBuilder0);
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals("_all", stringBuilder0.toString());
      
      String string2 = "*>Fo\\USo9Y~~|";
      RangeAggregator.Range rangeAggregator_Range0 = new RangeAggregator.Range(string2, string0, string1);
      assertNotNull(rangeAggregator_Range0);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string2.equals((Object)string0));
      
      ByteOrder byteOrder0 = null;
      int int3 = (-1);
      float float0 = 951.2F;
      // Undeclared exception!
      try { 
        stringBuilder0.insert(int1, float0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -4104
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 11000)
  public void test8()  throws Throwable  {
      Settings settings0 = Settings.EMPTY;
      assertNotNull(settings0);
      
      RestController restController0 = new RestController(settings0);
      assertNotNull(restController0);
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      
      boolean boolean0 = false;
      Map<String, Settings> map0 = settings0.getAsGroups(boolean0);
      assertNotNull(map0);
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      
      Client client0 = null;
      RestNodesAction restNodesAction0 = new RestNodesAction(settings0, restController0, client0);
      assertNotNull(restNodesAction0);
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      
      StringBuilder stringBuilder0 = new StringBuilder();
      assertNotNull(stringBuilder0);
      assertEquals("", stringBuilder0.toString());
      
      boolean boolean1 = true;
      RestFilter restFilter0 = mock(RestFilter.class, new ViolatedAssumptionAnswer());
      RestFilterChain restFilterChain0 = restController0.filterChainOrNull(restFilter0);
      assertNull(restFilterChain0);
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      
      StringBuilder stringBuilder1 = stringBuilder0.append(boolean1);
      assertNotNull(stringBuilder1);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      assertEquals("true", stringBuilder0.toString());
      assertEquals("true", stringBuilder1.toString());
      assertFalse(boolean1 == boolean0);
      
      int int0 = 1782;
      Set<String> set0 = settings0.names();
      assertNotNull(set0);
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      
      RestRequest restRequest0 = null;
      Table table0 = restNodesAction0.getTableWithHeader(restRequest0);
      assertNotNull(table0);
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      
      // Undeclared exception!
      restNodesAction0.getTableWithHeader(restRequest0);
  }

  @Test(timeout = 11000)
  public void test9()  throws Throwable  {
      Settings settings0 = Settings.EMPTY;
      assertNotNull(settings0);
      
      RestController restController0 = new RestController(settings0);
      assertNotNull(restController0);
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      
      Client client0 = null;
      RestNodesAction restNodesAction0 = new RestNodesAction(settings0, restController0, client0);
      assertNotNull(restNodesAction0);
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      
      StringBuilder stringBuilder0 = new StringBuilder();
      assertNotNull(stringBuilder0);
      assertEquals("", stringBuilder0.toString());
      
      int int0 = 0;
      float float0 = (-1098.5953F);
      StringBuilder stringBuilder1 = stringBuilder0.insert(int0, float0);
      assertNotNull(stringBuilder1);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      assertEquals("-1098.5953", stringBuilder0.toString());
      assertEquals("-1098.5953", stringBuilder1.toString());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      StringBuilder stringBuilder2 = stringBuilder1.insert(int0, object0);
      assertNotNull(stringBuilder2);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder1, stringBuilder2);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder2, stringBuilder1);
      assertSame(stringBuilder2, stringBuilder0);
      
      int int1 = 2284;
      char[] charArray0 = new char[1];
      char char0 = 'j';
      String string0 = "E4[Gq-Pxa";
      int int2 = 0;
      boolean boolean0 = false;
      HttpVersion httpVersion0 = new HttpVersion(string0, int1, int2, boolean0);
      assertNotNull(httpVersion0);
      assertFalse(httpVersion0.isKeepAliveDefault());
      assertEquals(2284, httpVersion0.getMajorVersion());
      assertEquals("E4[GQ-PXA/2284.0", httpVersion0.getText());
      assertEquals("E4[GQ-PXA", httpVersion0.getProtocolName());
      assertEquals("E4[GQ-PXA/2284.0", httpVersion0.toString());
      assertEquals(0, httpVersion0.getMinorVersion());
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertFalse(int2 == int1);
      
      HttpMethod httpMethod0 = HttpMethod.GET;
      assertNotNull(httpMethod0);
      assertEquals("GET", httpMethod0.getName());
      assertEquals("GET", httpMethod0.toString());
      
      String string1 = "/8,1'9jCKvV,OI";
      DefaultHttpRequest defaultHttpRequest0 = new DefaultHttpRequest(httpVersion0, httpMethod0, string1);
      assertNotNull(defaultHttpRequest0);
      assertFalse(httpVersion0.isKeepAliveDefault());
      assertEquals(2284, httpVersion0.getMajorVersion());
      assertEquals("E4[GQ-PXA/2284.0", httpVersion0.getText());
      assertEquals("E4[GQ-PXA", httpVersion0.getProtocolName());
      assertEquals("E4[GQ-PXA/2284.0", httpVersion0.toString());
      assertEquals(0, httpVersion0.getMinorVersion());
      assertEquals("GET", httpMethod0.getName());
      assertEquals("GET", httpMethod0.toString());
      assertEquals("/8,1'9jCKvV,OI", defaultHttpRequest0.getUri());
      assertFalse(string1.equals((Object)string0));
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertFalse(string0.equals((Object)string1));
      assertFalse(int2 == int1);
      
      DefaultLocalServerChannelFactory defaultLocalServerChannelFactory0 = new DefaultLocalServerChannelFactory();
      assertNotNull(defaultLocalServerChannelFactory0);
      
      DefaultChannelPipeline defaultChannelPipeline0 = new DefaultChannelPipeline();
      assertNotNull(defaultChannelPipeline0);
      assertFalse(defaultChannelPipeline0.isAttached());
      
      LocalServerChannel localServerChannel0 = defaultLocalServerChannelFactory0.newChannel(defaultChannelPipeline0);
      assertNotNull(localServerChannel0);
      assertTrue(defaultChannelPipeline0.isAttached());
      assertTrue(localServerChannel0.isReadable());
      assertEquals(1, (int)localServerChannel0.getId());
      
      NettyHttpRequest nettyHttpRequest0 = new NettyHttpRequest(defaultHttpRequest0, localServerChannel0);
      assertNotNull(nettyHttpRequest0);
      assertFalse(httpVersion0.isKeepAliveDefault());
      assertEquals(2284, httpVersion0.getMajorVersion());
      assertEquals("E4[GQ-PXA/2284.0", httpVersion0.getText());
      assertEquals("E4[GQ-PXA", httpVersion0.getProtocolName());
      assertEquals("E4[GQ-PXA/2284.0", httpVersion0.toString());
      assertEquals(0, httpVersion0.getMinorVersion());
      assertEquals("GET", httpMethod0.getName());
      assertEquals("GET", httpMethod0.toString());
      assertEquals("/8,1'9jCKvV,OI", defaultHttpRequest0.getUri());
      assertTrue(defaultChannelPipeline0.isAttached());
      assertTrue(localServerChannel0.isReadable());
      assertEquals(1, (int)localServerChannel0.getId());
      assertEquals(RestRequest.Method.GET, nettyHttpRequest0.method());
      assertEquals("/8,1'9jCKvV,OI", nettyHttpRequest0.rawPath());
      assertEquals("/8,1'9jCKvV,OI", nettyHttpRequest0.uri());
      assertFalse(nettyHttpRequest0.hasContent());
      assertFalse(string1.equals((Object)string0));
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertFalse(string0.equals((Object)string1));
      assertFalse(int2 == int1);
      
      NetworkService networkService0 = new NetworkService(settings0);
      assertNotNull(networkService0);
      
      ThreadPool threadPool0 = new ThreadPool(settings0);
      assertNotNull(threadPool0);
      
      PageCacheRecycler pageCacheRecycler0 = new PageCacheRecycler(settings0, threadPool0);
      assertNotNull(pageCacheRecycler0);
      
      NoneCircuitBreakerService noneCircuitBreakerService0 = new NoneCircuitBreakerService();
      assertNotNull(noneCircuitBreakerService0);
      assertEquals(Lifecycle.State.INITIALIZED, noneCircuitBreakerService0.lifecycleState());
      
      BigArrays bigArrays0 = new BigArrays(pageCacheRecycler0, noneCircuitBreakerService0);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertNotNull(bigArrays0);
      assertEquals(Lifecycle.State.INITIALIZED, noneCircuitBreakerService0.lifecycleState());
      
      ThreadPool threadPool1 = null;
      NettyHttpServerTransport nettyHttpServerTransport0 = new NettyHttpServerTransport(settings0, networkService0, bigArrays0, threadPool1);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertNotNull(nettyHttpServerTransport0);
      assertEquals(Lifecycle.State.INITIALIZED, noneCircuitBreakerService0.lifecycleState());
      assertEquals(Lifecycle.State.INITIALIZED, nettyHttpServerTransport0.lifecycleState());
      
      HttpStats httpStats0 = nettyHttpServerTransport0.stats();
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertNotNull(httpStats0);
      assertEquals(Lifecycle.State.INITIALIZED, noneCircuitBreakerService0.lifecycleState());
      assertEquals(Lifecycle.State.INITIALIZED, nettyHttpServerTransport0.lifecycleState());
      assertEquals(0L, httpStats0.getTotalOpen());
      assertEquals(0L, httpStats0.getServerOpen());
      
      NettyHttpChannel nettyHttpChannel0 = new NettyHttpChannel(nettyHttpServerTransport0, nettyHttpRequest0, boolean0);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertNotNull(nettyHttpChannel0);
      assertFalse(nettyHttpChannel0.detailedErrorsEnabled());
      assertFalse(httpVersion0.isKeepAliveDefault());
      assertEquals(2284, httpVersion0.getMajorVersion());
      assertEquals("E4[GQ-PXA/2284.0", httpVersion0.getText());
      assertEquals("E4[GQ-PXA", httpVersion0.getProtocolName());
      assertEquals("E4[GQ-PXA/2284.0", httpVersion0.toString());
      assertEquals(0, httpVersion0.getMinorVersion());
      assertEquals("GET", httpMethod0.getName());
      assertEquals("GET", httpMethod0.toString());
      assertEquals("/8,1'9jCKvV,OI", defaultHttpRequest0.getUri());
      assertTrue(defaultChannelPipeline0.isAttached());
      assertTrue(localServerChannel0.isReadable());
      assertEquals(1, (int)localServerChannel0.getId());
      assertEquals(RestRequest.Method.GET, nettyHttpRequest0.method());
      assertEquals("/8,1'9jCKvV,OI", nettyHttpRequest0.rawPath());
      assertEquals("/8,1'9jCKvV,OI", nettyHttpRequest0.uri());
      assertFalse(nettyHttpRequest0.hasContent());
      assertEquals(Lifecycle.State.INITIALIZED, noneCircuitBreakerService0.lifecycleState());
      assertEquals(Lifecycle.State.INITIALIZED, nettyHttpServerTransport0.lifecycleState());
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertFalse(string0.equals((Object)string1));
      assertFalse(int2 == int1);
      assertFalse(string1.equals((Object)string0));
      
      BytesStreamOutput bytesStreamOutput0 = nettyHttpChannel0.newBytesOutput();
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertNotNull(bytesStreamOutput0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(nettyHttpChannel0.detailedErrorsEnabled());
      assertEquals(0, bytesStreamOutput0.size());
      assertEquals(0L, bytesStreamOutput0.position());
      assertFalse(httpVersion0.isKeepAliveDefault());
      assertEquals(2284, httpVersion0.getMajorVersion());
      assertEquals("E4[GQ-PXA/2284.0", httpVersion0.getText());
      assertEquals("E4[GQ-PXA", httpVersion0.getProtocolName());
      assertEquals("E4[GQ-PXA/2284.0", httpVersion0.toString());
      assertEquals(0, httpVersion0.getMinorVersion());
      assertEquals("GET", httpMethod0.getName());
      assertEquals("GET", httpMethod0.toString());
      assertEquals("/8,1'9jCKvV,OI", defaultHttpRequest0.getUri());
      assertTrue(defaultChannelPipeline0.isAttached());
      assertTrue(localServerChannel0.isReadable());
      assertEquals(1, (int)localServerChannel0.getId());
      assertEquals(RestRequest.Method.GET, nettyHttpRequest0.method());
      assertEquals("/8,1'9jCKvV,OI", nettyHttpRequest0.rawPath());
      assertEquals("/8,1'9jCKvV,OI", nettyHttpRequest0.uri());
      assertFalse(nettyHttpRequest0.hasContent());
      assertEquals(Lifecycle.State.INITIALIZED, noneCircuitBreakerService0.lifecycleState());
      assertEquals(Lifecycle.State.INITIALIZED, nettyHttpServerTransport0.lifecycleState());
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertFalse(string0.equals((Object)string1));
      assertFalse(int2 == int1);
      assertFalse(string1.equals((Object)string0));
      
      // Undeclared exception!
      try { 
        restNodesAction0.doRequest(nettyHttpRequest0, nettyHttpChannel0, client0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.rest.action.cat.RestNodesAction", e);
      }
  }
}
