/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 08 18:03:08 GMT 2021
 */

package org.elasticsearch.rest.action.cat;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.log4j.Logger;
import org.elasticsearch.action.admin.cluster.health.ClusterHealthResponse;
import org.elasticsearch.action.admin.indices.stats.IndicesStatsResponse;
import org.elasticsearch.client.Client;
import org.elasticsearch.client.node.NodeClient;
import org.elasticsearch.cluster.ClusterName;
import org.elasticsearch.cluster.ClusterState;
import org.elasticsearch.cluster.block.ClusterBlocks;
import org.elasticsearch.cluster.health.ClusterHealthStatus;
import org.elasticsearch.cluster.metadata.IndexMetaData;
import org.elasticsearch.cluster.metadata.IndexNameExpressionResolver;
import org.elasticsearch.cluster.metadata.MetaData;
import org.elasticsearch.cluster.node.DiscoveryNodes;
import org.elasticsearch.cluster.routing.RoutingNodes;
import org.elasticsearch.cluster.routing.RoutingTable;
import org.elasticsearch.common.collect.ImmutableOpenMap;
import org.elasticsearch.common.component.Lifecycle;
import org.elasticsearch.common.io.stream.NamedWriteableAwareStreamInput;
import org.elasticsearch.common.io.stream.NamedWriteableRegistry;
import org.elasticsearch.common.io.stream.StreamInput;
import org.elasticsearch.common.logging.ESLogger;
import org.elasticsearch.common.network.NetworkService;
import org.elasticsearch.common.settings.Settings;
import org.elasticsearch.common.settings.SettingsFilter;
import org.elasticsearch.common.unit.TimeValue;
import org.elasticsearch.common.util.BigArrays;
import org.elasticsearch.common.xcontent.ToXContent;
import org.elasticsearch.http.netty.NettyHttpChannel;
import org.elasticsearch.http.netty.NettyHttpRequest;
import org.elasticsearch.http.netty.NettyHttpServerTransport;
import org.elasticsearch.index.fielddata.IndexFieldDataService;
import org.elasticsearch.index.mapper.MapperService;
import org.elasticsearch.rest.RestChannel;
import org.elasticsearch.rest.RestController;
import org.elasticsearch.rest.RestRequest;
import org.elasticsearch.rest.RestStatus;
import org.elasticsearch.rest.action.cat.RestIndicesAction;
import org.elasticsearch.search.lookup.SearchLookup;
import org.elasticsearch.search.lookup.SourceLookup;
import org.elasticsearch.threadpool.ThreadPool;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.jboss.netty.channel.Channel;
import org.jboss.netty.channel.DefaultChannelPipeline;
import org.jboss.netty.channel.local.DefaultLocalServerChannelFactory;
import org.jboss.netty.channel.local.LocalServerChannel;
import org.jboss.netty.handler.codec.http.DefaultHttpRequest;
import org.jboss.netty.handler.codec.http.HttpMethod;
import org.jboss.netty.handler.codec.http.HttpVersion;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class RestIndicesAction_ESTest extends RestIndicesAction_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test00()  throws Throwable  {
      MetaData metaData0 = MetaData.PROTO;
      assertNotNull(metaData0);
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0L, metaData0.version());
      
      Client client0 = null;
      HttpVersion httpVersion0 = HttpVersion.HTTP_1_0;
      assertNotNull(httpVersion0);
      assertEquals("HTTP/1.0", httpVersion0.getText());
      assertEquals(1, httpVersion0.getMajorVersion());
      assertFalse(httpVersion0.isKeepAliveDefault());
      assertEquals("HTTP", httpVersion0.getProtocolName());
      assertEquals("HTTP/1.0", httpVersion0.toString());
      assertEquals(0, httpVersion0.getMinorVersion());
      
      HttpMethod httpMethod0 = HttpMethod.POST;
      assertNotNull(httpMethod0);
      assertEquals("POST", httpMethod0.toString());
      assertEquals("POST", httpMethod0.getName());
      
      DefaultHttpRequest defaultHttpRequest0 = new DefaultHttpRequest(httpVersion0, httpMethod0, metaData0.ALL);
      assertNotNull(defaultHttpRequest0);
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals("HTTP/1.0", httpVersion0.getText());
      assertEquals(1, httpVersion0.getMajorVersion());
      assertFalse(httpVersion0.isKeepAliveDefault());
      assertEquals("HTTP", httpVersion0.getProtocolName());
      assertEquals("HTTP/1.0", httpVersion0.toString());
      assertEquals(0, httpVersion0.getMinorVersion());
      assertEquals("POST", httpMethod0.toString());
      assertEquals("POST", httpMethod0.getName());
      assertEquals("_all", defaultHttpRequest0.getUri());
      
      DefaultChannelPipeline defaultChannelPipeline0 = new DefaultChannelPipeline();
      assertNotNull(defaultChannelPipeline0);
      assertFalse(defaultChannelPipeline0.isAttached());
      
      Channel channel0 = defaultChannelPipeline0.getChannel();
      assertNull(channel0);
      assertFalse(defaultChannelPipeline0.isAttached());
      
      NettyHttpRequest nettyHttpRequest0 = new NettyHttpRequest(defaultHttpRequest0, channel0);
      assertNotNull(nettyHttpRequest0);
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals("HTTP/1.0", httpVersion0.getText());
      assertEquals(1, httpVersion0.getMajorVersion());
      assertFalse(httpVersion0.isKeepAliveDefault());
      assertEquals("HTTP", httpVersion0.getProtocolName());
      assertEquals("HTTP/1.0", httpVersion0.toString());
      assertEquals(0, httpVersion0.getMinorVersion());
      assertEquals("POST", httpMethod0.toString());
      assertEquals("POST", httpMethod0.getName());
      assertEquals("_all", defaultHttpRequest0.getUri());
      assertFalse(defaultChannelPipeline0.isAttached());
      assertEquals(RestRequest.Method.POST, nettyHttpRequest0.method());
      assertEquals("_all", nettyHttpRequest0.rawPath());
      assertEquals("_all", nettyHttpRequest0.uri());
      assertFalse(nettyHttpRequest0.hasContent());
      
      RestChannel restChannel0 = null;
      Settings settings0 = metaData0.settings();
      assertNotNull(settings0);
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0L, metaData0.version());
      
      RestController restController0 = new RestController(settings0);
      assertNotNull(restController0);
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      
      IndexNameExpressionResolver indexNameExpressionResolver0 = new IndexNameExpressionResolver(settings0);
      assertNotNull(indexNameExpressionResolver0);
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0L, metaData0.version());
      
      RestIndicesAction restIndicesAction0 = new RestIndicesAction(settings0, restController0, client0, indexNameExpressionResolver0);
      assertNotNull(restIndicesAction0);
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      
      // Undeclared exception!
      try { 
        restIndicesAction0.doRequest(nettyHttpRequest0, restChannel0, client0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.rest.action.cat.RestIndicesAction", e);
      }
  }

  @Test(timeout = 11000)
  public void test01()  throws Throwable  {
      Settings settings0 = Settings.EMPTY;
      assertNotNull(settings0);
      
      Client client0 = null;
      IndexNameExpressionResolver indexNameExpressionResolver0 = new IndexNameExpressionResolver(settings0);
      assertNotNull(indexNameExpressionResolver0);
      
      HttpVersion httpVersion0 = HttpVersion.HTTP_1_1;
      assertNotNull(httpVersion0);
      assertEquals("HTTP/1.1", httpVersion0.getText());
      assertEquals("HTTP", httpVersion0.getProtocolName());
      assertEquals(1, httpVersion0.getMajorVersion());
      assertEquals("HTTP/1.1", httpVersion0.toString());
      assertEquals(1, httpVersion0.getMinorVersion());
      assertTrue(httpVersion0.isKeepAliveDefault());
      
      String string0 = "'u&k[=RcO";
      HttpMethod httpMethod0 = HttpMethod.POST;
      assertNotNull(httpMethod0);
      assertEquals("POST", httpMethod0.getName());
      assertEquals("POST", httpMethod0.toString());
      
      DefaultHttpRequest defaultHttpRequest0 = new DefaultHttpRequest(httpVersion0, httpMethod0, string0);
      assertNotNull(defaultHttpRequest0);
      assertEquals("HTTP/1.1", httpVersion0.getText());
      assertEquals("HTTP", httpVersion0.getProtocolName());
      assertEquals(1, httpVersion0.getMajorVersion());
      assertEquals("HTTP/1.1", httpVersion0.toString());
      assertEquals(1, httpVersion0.getMinorVersion());
      assertTrue(httpVersion0.isKeepAliveDefault());
      assertEquals("POST", httpMethod0.getName());
      assertEquals("POST", httpMethod0.toString());
      assertEquals("'u&k[=RcO", defaultHttpRequest0.getUri());
      
      DefaultLocalServerChannelFactory defaultLocalServerChannelFactory0 = new DefaultLocalServerChannelFactory();
      assertNotNull(defaultLocalServerChannelFactory0);
      
      DefaultChannelPipeline defaultChannelPipeline0 = new DefaultChannelPipeline();
      assertNotNull(defaultChannelPipeline0);
      assertFalse(defaultChannelPipeline0.isAttached());
      
      LocalServerChannel localServerChannel0 = defaultLocalServerChannelFactory0.newChannel(defaultChannelPipeline0);
      assertNotNull(localServerChannel0);
      assertTrue(defaultChannelPipeline0.isAttached());
      assertTrue(localServerChannel0.isReadable());
      assertEquals(0, (int)localServerChannel0.getId());
      
      NettyHttpRequest nettyHttpRequest0 = new NettyHttpRequest(defaultHttpRequest0, localServerChannel0);
      assertNotNull(nettyHttpRequest0);
      assertEquals("HTTP/1.1", httpVersion0.getText());
      assertEquals("HTTP", httpVersion0.getProtocolName());
      assertEquals(1, httpVersion0.getMajorVersion());
      assertEquals("HTTP/1.1", httpVersion0.toString());
      assertEquals(1, httpVersion0.getMinorVersion());
      assertTrue(httpVersion0.isKeepAliveDefault());
      assertEquals("POST", httpMethod0.getName());
      assertEquals("POST", httpMethod0.toString());
      assertEquals("'u&k[=RcO", defaultHttpRequest0.getUri());
      assertTrue(defaultChannelPipeline0.isAttached());
      assertTrue(localServerChannel0.isReadable());
      assertEquals(0, (int)localServerChannel0.getId());
      assertFalse(nettyHttpRequest0.hasContent());
      assertEquals(RestRequest.Method.POST, nettyHttpRequest0.method());
      assertEquals("'u&k[=RcO", nettyHttpRequest0.uri());
      assertEquals("'u&k[=RcO", nettyHttpRequest0.rawPath());
      
      RestController restController0 = new RestController(settings0);
      assertNotNull(restController0);
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      
      RestIndicesAction restIndicesAction0 = new RestIndicesAction(settings0, restController0, client0, indexNameExpressionResolver0);
      assertNotNull(restIndicesAction0);
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      
      String[] stringArray0 = new String[1];
      long long0 = 31536000000L;
      ClusterState clusterState0 = ClusterState.PROTO;
      assertNotNull(clusterState0);
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertEquals(0L, clusterState0.version());
      assertEquals(0L, clusterState0.getVersion());
      assertEquals("AQAAAAIAQACDAAAABAAAAA", clusterState0.stateUUID());
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState0.status());
      assertFalse(clusterState0.wasReadFromDiff());
      
      int int0 = 1504;
      TimeValue timeValue0 = new TimeValue(long0);
      assertNotNull(timeValue0);
      assertEquals(1000000L, TimeValue.NSEC_PER_MSEC);
      
      ClusterHealthResponse clusterHealthResponse0 = new ClusterHealthResponse(string0, stringArray0, clusterState0, int0, int0, int0, timeValue0);
      assertNotNull(clusterHealthResponse0);
      assertEquals(1000000L, TimeValue.NSEC_PER_MSEC);
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertEquals("'u&k[=RcO", clusterHealthResponse0.getClusterName());
      assertEquals(1504, clusterHealthResponse0.getNumberOfPendingTasks());
      assertEquals(0, clusterHealthResponse0.getNumberOfNodes());
      assertEquals(RestStatus.OK, clusterHealthResponse0.status());
      assertFalse(clusterHealthResponse0.isTimedOut());
      assertEquals(0, clusterHealthResponse0.getUnassignedShards());
      assertEquals(0, clusterHealthResponse0.getNumberOfDataNodes());
      assertEquals(0, clusterHealthResponse0.getRelocatingShards());
      assertEquals(1504, clusterHealthResponse0.getDelayedUnassignedShards());
      assertEquals(ClusterHealthStatus.GREEN, clusterHealthResponse0.getStatus());
      assertEquals(0, clusterHealthResponse0.getActiveShards());
      assertEquals(100.0, clusterHealthResponse0.getActiveShardsPercent(), 0.01);
      assertEquals(0, clusterHealthResponse0.getActivePrimaryShards());
      assertEquals(0, clusterHealthResponse0.getInitializingShards());
      assertEquals(1504, clusterHealthResponse0.getNumberOfInFlightFetch());
      assertEquals(0L, clusterState0.version());
      assertEquals(0L, clusterState0.getVersion());
      assertEquals("AQAAAAIAQACDAAAABAAAAA", clusterState0.stateUUID());
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState0.status());
      assertFalse(clusterState0.wasReadFromDiff());
      assertEquals(1, stringArray0.length);
      
      IndicesStatsResponse indicesStatsResponse0 = null;
      MetaData metaData0 = MetaData.PROTO;
      assertNotNull(metaData0);
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getNumberOfShards());
      
      // Undeclared exception!
      restIndicesAction0.buildTable(nettyHttpRequest0, stringArray0, clusterHealthResponse0, indicesStatsResponse0, metaData0);
  }

  @Test(timeout = 11000)
  public void test02()  throws Throwable  {
      MetaData metaData0 = MetaData.PROTO;
      assertNotNull(metaData0);
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      
      Settings settings0 = metaData0.settings();
      assertNotNull(settings0);
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      
      RestController restController0 = new RestController(settings0);
      assertNotNull(restController0);
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      
      Client client0 = null;
      IndexNameExpressionResolver indexNameExpressionResolver0 = null;
      RestIndicesAction restIndicesAction0 = new RestIndicesAction(settings0, restController0, client0, indexNameExpressionResolver0);
      assertNotNull(restIndicesAction0);
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      
      IndexNameExpressionResolver indexNameExpressionResolver1 = restIndicesAction0.getindexNameExpressionResolver();
      assertNull(indexNameExpressionResolver1);
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
  }

  @Test(timeout = 11000)
  public void test03()  throws Throwable  {
      Settings settings0 = Settings.EMPTY;
      assertNotNull(settings0);
      
      RestController restController0 = new RestController(settings0);
      assertNotNull(restController0);
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      
      Client client0 = null;
      IndexNameExpressionResolver indexNameExpressionResolver0 = new IndexNameExpressionResolver(settings0);
      assertNotNull(indexNameExpressionResolver0);
      
      RestIndicesAction restIndicesAction0 = new RestIndicesAction(settings0, restController0, client0, indexNameExpressionResolver0);
      assertNotNull(restIndicesAction0);
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      
      int int0 = 0;
      StringBuilder stringBuilder0 = new StringBuilder();
      assertNotNull(stringBuilder0);
      assertEquals("", stringBuilder0.toString());
      
      restIndicesAction0.documentation(stringBuilder0);
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertEquals("/_cat/indices\n/_cat/indices/{index}\n", stringBuilder0.toString());
  }

  @Test(timeout = 11000)
  public void test04()  throws Throwable  {
      Settings settings0 = Settings.Builder.EMPTY_SETTINGS;
      assertNotNull(settings0);
      
      RestController restController0 = null;
      Client client0 = null;
      IndexNameExpressionResolver indexNameExpressionResolver0 = new IndexNameExpressionResolver(settings0);
      assertNotNull(indexNameExpressionResolver0);
      
      RestIndicesAction restIndicesAction0 = null;
      try {
        restIndicesAction0 = new RestIndicesAction(settings0, restController0, client0, indexNameExpressionResolver0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.rest.action.cat.RestIndicesAction", e);
      }
  }

  @Test(timeout = 11000)
  public void test05()  throws Throwable  {
      ToXContent.Params toXContent_Params0 = ToXContent.EMPTY_PARAMS;
      assertNotNull(toXContent_Params0);
      
      Settings settings0 = Settings.EMPTY;
      assertNotNull(settings0);
      
      Settings settings1 = SettingsFilter.filterSettings(toXContent_Params0, settings0);
      assertNotNull(settings1);
      assertSame(settings0, settings1);
      assertSame(settings1, settings0);
      
      Settings settings2 = IndexMetaData.addHumanReadableSettings(settings1);
      assertNotNull(settings2);
      assertNotSame(settings0, settings2);
      assertSame(settings0, settings1);
      assertSame(settings1, settings0);
      assertNotSame(settings1, settings2);
      assertNotSame(settings2, settings1);
      assertNotSame(settings2, settings0);
      assertTrue(settings2.equals((Object)settings0));
      assertTrue(settings2.equals((Object)settings1));
      
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte)0;
      byteArray0[0] = byte0;
      byte byte1 = (byte)0;
      byteArray0[1] = byte1;
      StreamInput streamInput0 = StreamInput.wrap(byteArray0);
      assertNotNull(streamInput0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertEquals(2, byteArray0.length);
      
      NamedWriteableRegistry namedWriteableRegistry0 = new NamedWriteableRegistry();
      assertNotNull(namedWriteableRegistry0);
      
      NamedWriteableAwareStreamInput namedWriteableAwareStreamInput0 = new NamedWriteableAwareStreamInput(streamInput0, namedWriteableRegistry0);
      assertNotNull(namedWriteableAwareStreamInput0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertEquals(2, byteArray0.length);
      
      Settings settings3 = Settings.readSettingsFromStream(namedWriteableAwareStreamInput0);
      assertNotNull(settings3);
      assertNotSame(settings3, settings2);
      assertNotSame(settings3, settings1);
      assertNotSame(settings3, settings0);
      assertTrue(settings3.equals((Object)settings2));
      assertTrue(settings3.equals((Object)settings0));
      assertTrue(settings3.equals((Object)settings1));
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertEquals(2, byteArray0.length);
      
      RestController restController0 = new RestController(settings3);
      assertNotNull(restController0);
      assertTrue(settings3.equals((Object)settings2));
      assertTrue(settings3.equals((Object)settings0));
      assertTrue(settings3.equals((Object)settings1));
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertEquals(2, byteArray0.length);
      
      ThreadPool threadPool0 = new ThreadPool(settings1);
      assertNotNull(threadPool0);
      assertTrue(settings0.equals((Object)settings3));
      assertTrue(settings0.equals((Object)settings2));
      assertTrue(settings1.equals((Object)settings2));
      assertTrue(settings1.equals((Object)settings3));
      
      MapperService mapperService0 = null;
      IndexFieldDataService indexFieldDataService0 = null;
      String[] stringArray0 = new String[0];
      SearchLookup searchLookup0 = new SearchLookup(mapperService0, indexFieldDataService0, stringArray0);
      assertNotNull(searchLookup0);
      assertEquals(0, stringArray0.length);
      
      SourceLookup sourceLookup0 = searchLookup0.source();
      assertNotNull(sourceLookup0);
      assertNull(sourceLookup0.sourceContentType());
      assertEquals(0, stringArray0.length);
      
      NodeClient nodeClient0 = new NodeClient(settings1, threadPool0, sourceLookup0);
      assertNotNull(nodeClient0);
      assertTrue(settings0.equals((Object)settings3));
      assertTrue(settings0.equals((Object)settings2));
      assertTrue(settings1.equals((Object)settings2));
      assertTrue(settings1.equals((Object)settings3));
      assertNull(sourceLookup0.sourceContentType());
      assertEquals(0, stringArray0.length);
      
      IndexNameExpressionResolver indexNameExpressionResolver0 = new IndexNameExpressionResolver(settings3);
      assertNotNull(indexNameExpressionResolver0);
      assertTrue(settings3.equals((Object)settings2));
      assertTrue(settings3.equals((Object)settings0));
      assertTrue(settings3.equals((Object)settings1));
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertEquals(2, byteArray0.length);
      
      RestIndicesAction restIndicesAction0 = new RestIndicesAction(settings2, restController0, nodeClient0, indexNameExpressionResolver0);
      assertNotNull(restIndicesAction0);
      assertTrue(settings0.equals((Object)settings3));
      assertTrue(settings0.equals((Object)settings2));
      assertTrue(settings1.equals((Object)settings2));
      assertTrue(settings1.equals((Object)settings3));
      assertTrue(settings2.equals((Object)settings0));
      assertTrue(settings2.equals((Object)settings3));
      assertTrue(settings2.equals((Object)settings1));
      assertTrue(settings3.equals((Object)settings2));
      assertTrue(settings3.equals((Object)settings0));
      assertTrue(settings3.equals((Object)settings1));
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertNull(sourceLookup0.sourceContentType());
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertEquals(0, stringArray0.length);
      assertEquals(2, byteArray0.length);
      
      IndexNameExpressionResolver indexNameExpressionResolver1 = restIndicesAction0.getindexNameExpressionResolver();
      assertNotNull(indexNameExpressionResolver1);
      assertNotSame(settings0, settings2);
      assertNotSame(settings0, settings3);
      assertSame(settings0, settings1);
      assertSame(settings1, settings0);
      assertNotSame(settings1, settings2);
      assertNotSame(settings1, settings3);
      assertNotSame(settings2, settings3);
      assertNotSame(settings2, settings1);
      assertNotSame(settings2, settings0);
      assertNotSame(settings3, settings2);
      assertNotSame(settings3, settings1);
      assertNotSame(settings3, settings0);
      assertSame(indexNameExpressionResolver0, indexNameExpressionResolver1);
      assertSame(indexNameExpressionResolver1, indexNameExpressionResolver0);
      assertTrue(settings0.equals((Object)settings3));
      assertTrue(settings0.equals((Object)settings2));
      assertTrue(settings1.equals((Object)settings2));
      assertTrue(settings1.equals((Object)settings3));
      assertTrue(settings2.equals((Object)settings0));
      assertTrue(settings2.equals((Object)settings3));
      assertTrue(settings2.equals((Object)settings1));
      assertTrue(settings3.equals((Object)settings2));
      assertTrue(settings3.equals((Object)settings0));
      assertTrue(settings3.equals((Object)settings1));
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertNull(sourceLookup0.sourceContentType());
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertEquals(0, stringArray0.length);
      assertEquals(2, byteArray0.length);
  }

  @Test(timeout = 11000)
  public void test06()  throws Throwable  {
      String string0 = ";L4i=6fO:ppOxSRr";
      Logger logger0 = Logger.getRootLogger();
      assertNotNull(logger0);
      assertTrue(logger0.getAdditivity());
      assertFalse(logger0.isInfoEnabled());
      assertEquals("root", logger0.getName());
      assertFalse(logger0.isDebugEnabled());
      assertFalse(logger0.isTraceEnabled());
      
      ESLogger eSLogger0 = new ESLogger(string0, logger0);
      assertNotNull(eSLogger0);
      assertTrue(logger0.getAdditivity());
      assertFalse(logger0.isInfoEnabled());
      assertEquals("root", logger0.getName());
      assertFalse(logger0.isDebugEnabled());
      assertFalse(logger0.isTraceEnabled());
      assertFalse(eSLogger0.isTraceEnabled());
      assertFalse(eSLogger0.isInfoEnabled());
      assertEquals(";L4i=6fO:ppOxSRr", eSLogger0.getPrefix());
      assertFalse(eSLogger0.isErrorEnabled());
      assertFalse(eSLogger0.isWarnEnabled());
      assertFalse(eSLogger0.isDebugEnabled());
      assertEquals("root", eSLogger0.getName());
      assertEquals("OFF", eSLogger0.getLevel());
      
      MetaData metaData0 = MetaData.EMPTY_META_DATA;
      assertNotNull(metaData0);
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      
      MetaData metaData1 = MetaData.addDefaultUnitsIfNeeded(eSLogger0, metaData0);
      assertNotNull(metaData1);
      assertSame(metaData0, metaData1);
      assertSame(metaData1, metaData0);
      assertTrue(logger0.getAdditivity());
      assertFalse(logger0.isInfoEnabled());
      assertEquals("root", logger0.getName());
      assertFalse(logger0.isDebugEnabled());
      assertFalse(logger0.isTraceEnabled());
      assertFalse(eSLogger0.isTraceEnabled());
      assertFalse(eSLogger0.isInfoEnabled());
      assertEquals(";L4i=6fO:ppOxSRr", eSLogger0.getPrefix());
      assertFalse(eSLogger0.isErrorEnabled());
      assertFalse(eSLogger0.isWarnEnabled());
      assertFalse(eSLogger0.isDebugEnabled());
      assertEquals("root", eSLogger0.getName());
      assertEquals("OFF", eSLogger0.getLevel());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals("_na_", metaData1.clusterUUID());
      assertEquals(0, metaData1.getNumberOfShards());
      assertEquals(0L, metaData1.version());
      assertEquals(0, metaData1.getTotalNumberOfShards());
      
      boolean boolean0 = metaData0.equalsAliases(metaData1);
      assertTrue(boolean0);
      assertSame(metaData0, metaData1);
      assertSame(metaData1, metaData0);
      assertTrue(logger0.getAdditivity());
      assertFalse(logger0.isInfoEnabled());
      assertEquals("root", logger0.getName());
      assertFalse(logger0.isDebugEnabled());
      assertFalse(logger0.isTraceEnabled());
      assertFalse(eSLogger0.isTraceEnabled());
      assertFalse(eSLogger0.isInfoEnabled());
      assertEquals(";L4i=6fO:ppOxSRr", eSLogger0.getPrefix());
      assertFalse(eSLogger0.isErrorEnabled());
      assertFalse(eSLogger0.isWarnEnabled());
      assertFalse(eSLogger0.isDebugEnabled());
      assertEquals("root", eSLogger0.getName());
      assertEquals("OFF", eSLogger0.getLevel());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals("_na_", metaData1.clusterUUID());
      assertEquals(0, metaData1.getNumberOfShards());
      assertEquals(0L, metaData1.version());
      assertEquals(0, metaData1.getTotalNumberOfShards());
      
      Settings settings0 = metaData1.persistentSettings();
      assertNotNull(settings0);
      assertSame(metaData0, metaData1);
      assertSame(metaData1, metaData0);
      assertTrue(logger0.getAdditivity());
      assertFalse(logger0.isInfoEnabled());
      assertEquals("root", logger0.getName());
      assertFalse(logger0.isDebugEnabled());
      assertFalse(logger0.isTraceEnabled());
      assertFalse(eSLogger0.isTraceEnabled());
      assertFalse(eSLogger0.isInfoEnabled());
      assertEquals(";L4i=6fO:ppOxSRr", eSLogger0.getPrefix());
      assertFalse(eSLogger0.isErrorEnabled());
      assertFalse(eSLogger0.isWarnEnabled());
      assertFalse(eSLogger0.isDebugEnabled());
      assertEquals("root", eSLogger0.getName());
      assertEquals("OFF", eSLogger0.getLevel());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals("_na_", metaData1.clusterUUID());
      assertEquals(0, metaData1.getNumberOfShards());
      assertEquals(0L, metaData1.version());
      assertEquals(0, metaData1.getTotalNumberOfShards());
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = metaData1.ALL;
      stringArray0[1] = metaData1.CONTEXT_MODE_SNAPSHOT;
      String string1 = "";
      stringArray0[2] = string1;
      String string2 = "#9|<cg";
      stringArray0[3] = string2;
      stringArray0[4] = metaData1.CONTEXT_MODE_GATEWAY;
      stringArray0[5] = metaData0.CONTEXT_MODE_SNAPSHOT;
      stringArray0[6] = metaData1.CONTEXT_MODE_GATEWAY;
      stringArray0[7] = metaData0.ALL;
      stringArray0[8] = metaData0.CONTEXT_MODE_GATEWAY;
      float float0 = 2021.72F;
      Float float1 = new Float(float0);
      assertEquals(2021.72F, (float)float1, 0.01F);
      assertNotNull(float1);
      assertEquals((float)float1, (float)float0, 0.01F);
      
      eSLogger0.debug(metaData0.CONTEXT_MODE_GATEWAY, (Object[]) stringArray0);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertSame(metaData0, metaData1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertTrue(logger0.getAdditivity());
      assertFalse(logger0.isInfoEnabled());
      assertEquals("root", logger0.getName());
      assertFalse(logger0.isDebugEnabled());
      assertFalse(logger0.isTraceEnabled());
      assertFalse(eSLogger0.isTraceEnabled());
      assertFalse(eSLogger0.isInfoEnabled());
      assertEquals(";L4i=6fO:ppOxSRr", eSLogger0.getPrefix());
      assertFalse(eSLogger0.isErrorEnabled());
      assertFalse(eSLogger0.isWarnEnabled());
      assertFalse(eSLogger0.isDebugEnabled());
      assertEquals("root", eSLogger0.getName());
      assertEquals("OFF", eSLogger0.getLevel());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(9, stringArray0.length);
      
      Float float2 = settings0.getAsFloat(stringArray0, float1);
      assertEquals(2021.72F, (float)float2, 0.01F);
      assertNotNull(float2);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertSame(metaData0, metaData1);
      assertSame(metaData1, metaData0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertEquals((float)float1, (float)float0, 0.01F);
      assertEquals((float)float2, (float)float0, 0.01F);
      assertTrue(logger0.getAdditivity());
      assertFalse(logger0.isInfoEnabled());
      assertEquals("root", logger0.getName());
      assertFalse(logger0.isDebugEnabled());
      assertFalse(logger0.isTraceEnabled());
      assertFalse(eSLogger0.isTraceEnabled());
      assertFalse(eSLogger0.isInfoEnabled());
      assertEquals(";L4i=6fO:ppOxSRr", eSLogger0.getPrefix());
      assertFalse(eSLogger0.isErrorEnabled());
      assertFalse(eSLogger0.isWarnEnabled());
      assertFalse(eSLogger0.isDebugEnabled());
      assertEquals("root", eSLogger0.getName());
      assertEquals("OFF", eSLogger0.getLevel());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals("_na_", metaData1.clusterUUID());
      assertEquals(0, metaData1.getNumberOfShards());
      assertEquals(0L, metaData1.version());
      assertEquals(0, metaData1.getTotalNumberOfShards());
      assertEquals(9, stringArray0.length);
      
      RestController restController0 = new RestController(settings0);
      assertNotNull(restController0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertTrue(logger0.getAdditivity());
      assertFalse(logger0.isInfoEnabled());
      assertEquals("root", logger0.getName());
      assertFalse(logger0.isDebugEnabled());
      assertFalse(logger0.isTraceEnabled());
      assertFalse(eSLogger0.isTraceEnabled());
      assertFalse(eSLogger0.isInfoEnabled());
      assertEquals(";L4i=6fO:ppOxSRr", eSLogger0.getPrefix());
      assertFalse(eSLogger0.isErrorEnabled());
      assertFalse(eSLogger0.isWarnEnabled());
      assertFalse(eSLogger0.isDebugEnabled());
      assertEquals("root", eSLogger0.getName());
      assertEquals("OFF", eSLogger0.getLevel());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals("_na_", metaData1.clusterUUID());
      assertEquals(0, metaData1.getNumberOfShards());
      assertEquals(0L, metaData1.version());
      assertEquals(0, metaData1.getTotalNumberOfShards());
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      
      Client client0 = null;
      IndexNameExpressionResolver indexNameExpressionResolver0 = new IndexNameExpressionResolver(settings0);
      assertNotNull(indexNameExpressionResolver0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertTrue(logger0.getAdditivity());
      assertFalse(logger0.isInfoEnabled());
      assertEquals("root", logger0.getName());
      assertFalse(logger0.isDebugEnabled());
      assertFalse(logger0.isTraceEnabled());
      assertFalse(eSLogger0.isTraceEnabled());
      assertFalse(eSLogger0.isInfoEnabled());
      assertEquals(";L4i=6fO:ppOxSRr", eSLogger0.getPrefix());
      assertFalse(eSLogger0.isErrorEnabled());
      assertFalse(eSLogger0.isWarnEnabled());
      assertFalse(eSLogger0.isDebugEnabled());
      assertEquals("root", eSLogger0.getName());
      assertEquals("OFF", eSLogger0.getLevel());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals("_na_", metaData1.clusterUUID());
      assertEquals(0, metaData1.getNumberOfShards());
      assertEquals(0L, metaData1.version());
      assertEquals(0, metaData1.getTotalNumberOfShards());
      
      RestIndicesAction restIndicesAction0 = new RestIndicesAction(settings0, restController0, client0, indexNameExpressionResolver0);
      assertNotNull(restIndicesAction0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertTrue(logger0.getAdditivity());
      assertFalse(logger0.isInfoEnabled());
      assertEquals("root", logger0.getName());
      assertFalse(logger0.isDebugEnabled());
      assertFalse(logger0.isTraceEnabled());
      assertFalse(eSLogger0.isTraceEnabled());
      assertFalse(eSLogger0.isInfoEnabled());
      assertEquals(";L4i=6fO:ppOxSRr", eSLogger0.getPrefix());
      assertFalse(eSLogger0.isErrorEnabled());
      assertFalse(eSLogger0.isWarnEnabled());
      assertFalse(eSLogger0.isDebugEnabled());
      assertEquals("root", eSLogger0.getName());
      assertEquals("OFF", eSLogger0.getLevel());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals("_na_", metaData1.clusterUUID());
      assertEquals(0, metaData1.getNumberOfShards());
      assertEquals(0L, metaData1.version());
      assertEquals(0, metaData1.getTotalNumberOfShards());
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      
      IndexNameExpressionResolver indexNameExpressionResolver1 = restIndicesAction0.getindexNameExpressionResolver();
      assertNotNull(indexNameExpressionResolver1);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertSame(metaData0, metaData1);
      assertSame(metaData1, metaData0);
      assertSame(indexNameExpressionResolver0, indexNameExpressionResolver1);
      assertSame(indexNameExpressionResolver1, indexNameExpressionResolver0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertTrue(logger0.getAdditivity());
      assertFalse(logger0.isInfoEnabled());
      assertEquals("root", logger0.getName());
      assertFalse(logger0.isDebugEnabled());
      assertFalse(logger0.isTraceEnabled());
      assertFalse(eSLogger0.isTraceEnabled());
      assertFalse(eSLogger0.isInfoEnabled());
      assertEquals(";L4i=6fO:ppOxSRr", eSLogger0.getPrefix());
      assertFalse(eSLogger0.isErrorEnabled());
      assertFalse(eSLogger0.isWarnEnabled());
      assertFalse(eSLogger0.isDebugEnabled());
      assertEquals("root", eSLogger0.getName());
      assertEquals("OFF", eSLogger0.getLevel());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals("_na_", metaData1.clusterUUID());
      assertEquals(0, metaData1.getNumberOfShards());
      assertEquals(0L, metaData1.version());
      assertEquals(0, metaData1.getTotalNumberOfShards());
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      
      String string3 = "camelCase";
      HttpVersion httpVersion0 = null;
      try {
        httpVersion0 = new HttpVersion(string3, boolean0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // invalid version format: CAMELCASE
         //
         verifyException("org.jboss.netty.handler.codec.http.HttpVersion", e);
      }
  }

  @Test(timeout = 11000)
  public void test07()  throws Throwable  {
      long long0 = 0L;
      String string0 = "h";
      ClusterState clusterState0 = ClusterState.PROTO;
      assertNotNull(clusterState0);
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertEquals("AQAAAAIAQACDAAAABAAAAA", clusterState0.stateUUID());
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState0.status());
      assertFalse(clusterState0.wasReadFromDiff());
      assertEquals(0L, clusterState0.version());
      assertEquals(0L, clusterState0.getVersion());
      
      ClusterState clusterState1 = new ClusterState(long0, string0, clusterState0);
      assertNotNull(clusterState1);
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertFalse(clusterState1.equals((Object)clusterState0));
      assertEquals("AQAAAAIAQACDAAAABAAAAA", clusterState0.stateUUID());
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState0.status());
      assertFalse(clusterState0.wasReadFromDiff());
      assertEquals(0L, clusterState0.version());
      assertEquals(0L, clusterState0.getVersion());
      assertEquals(0L, clusterState1.getVersion());
      assertEquals(0L, clusterState1.version());
      assertEquals("h", clusterState1.stateUUID());
      assertFalse(clusterState1.wasReadFromDiff());
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState1.status());
      
      RoutingNodes routingNodes0 = new RoutingNodes(clusterState1);
      assertNotNull(routingNodes0);
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertFalse(clusterState0.equals((Object)clusterState1));
      assertFalse(clusterState1.equals((Object)clusterState0));
      assertEquals("AQAAAAIAQACDAAAABAAAAA", clusterState0.stateUUID());
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState0.status());
      assertFalse(clusterState0.wasReadFromDiff());
      assertEquals(0L, clusterState0.version());
      assertEquals(0L, clusterState0.getVersion());
      assertEquals(0L, clusterState1.getVersion());
      assertEquals(0L, clusterState1.version());
      assertEquals("h", clusterState1.stateUUID());
      assertFalse(clusterState1.wasReadFromDiff());
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState1.status());
      assertEquals(0, routingNodes0.size());
      assertEquals(0, routingNodes0.getRelocatingShardCount());
      assertFalse(routingNodes0.hasUnassignedShards());
      assertFalse(routingNodes0.hasInactivePrimaries());
      assertFalse(routingNodes0.hasInactiveShards());
      assertFalse(routingNodes0.hasUnassignedPrimaries());
      
      MetaData metaData0 = routingNodes0.metaData();
      assertNotNull(metaData0);
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertNotSame(clusterState0, clusterState1);
      assertNotSame(clusterState1, clusterState0);
      assertFalse(clusterState0.equals((Object)clusterState1));
      assertFalse(clusterState1.equals((Object)clusterState0));
      assertEquals("AQAAAAIAQACDAAAABAAAAA", clusterState0.stateUUID());
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState0.status());
      assertFalse(clusterState0.wasReadFromDiff());
      assertEquals(0L, clusterState0.version());
      assertEquals(0L, clusterState0.getVersion());
      assertEquals(0L, clusterState1.getVersion());
      assertEquals(0L, clusterState1.version());
      assertEquals("h", clusterState1.stateUUID());
      assertFalse(clusterState1.wasReadFromDiff());
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState1.status());
      assertEquals(0, routingNodes0.size());
      assertEquals(0, routingNodes0.getRelocatingShardCount());
      assertFalse(routingNodes0.hasUnassignedShards());
      assertFalse(routingNodes0.hasInactivePrimaries());
      assertFalse(routingNodes0.hasInactiveShards());
      assertFalse(routingNodes0.hasUnassignedPrimaries());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      
      Settings settings0 = metaData0.transientSettings();
      assertNotNull(settings0);
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertNotSame(clusterState0, clusterState1);
      assertNotSame(clusterState1, clusterState0);
      assertFalse(clusterState0.equals((Object)clusterState1));
      assertFalse(clusterState1.equals((Object)clusterState0));
      assertEquals("AQAAAAIAQACDAAAABAAAAA", clusterState0.stateUUID());
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState0.status());
      assertFalse(clusterState0.wasReadFromDiff());
      assertEquals(0L, clusterState0.version());
      assertEquals(0L, clusterState0.getVersion());
      assertEquals(0L, clusterState1.getVersion());
      assertEquals(0L, clusterState1.version());
      assertEquals("h", clusterState1.stateUUID());
      assertFalse(clusterState1.wasReadFromDiff());
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState1.status());
      assertEquals(0, routingNodes0.size());
      assertEquals(0, routingNodes0.getRelocatingShardCount());
      assertFalse(routingNodes0.hasUnassignedShards());
      assertFalse(routingNodes0.hasInactivePrimaries());
      assertFalse(routingNodes0.hasInactiveShards());
      assertFalse(routingNodes0.hasUnassignedPrimaries());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      
      RestController restController0 = new RestController(settings0);
      assertNotNull(restController0);
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertFalse(clusterState0.equals((Object)clusterState1));
      assertFalse(clusterState1.equals((Object)clusterState0));
      assertEquals("AQAAAAIAQACDAAAABAAAAA", clusterState0.stateUUID());
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState0.status());
      assertFalse(clusterState0.wasReadFromDiff());
      assertEquals(0L, clusterState0.version());
      assertEquals(0L, clusterState0.getVersion());
      assertEquals(0L, clusterState1.getVersion());
      assertEquals(0L, clusterState1.version());
      assertEquals("h", clusterState1.stateUUID());
      assertFalse(clusterState1.wasReadFromDiff());
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState1.status());
      assertEquals(0, routingNodes0.size());
      assertEquals(0, routingNodes0.getRelocatingShardCount());
      assertFalse(routingNodes0.hasUnassignedShards());
      assertFalse(routingNodes0.hasInactivePrimaries());
      assertFalse(routingNodes0.hasInactiveShards());
      assertFalse(routingNodes0.hasUnassignedPrimaries());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      
      RestController restController1 = restController0.start();
      assertNotNull(restController1);
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertNotSame(clusterState0, clusterState1);
      assertNotSame(clusterState1, clusterState0);
      assertSame(restController0, restController1);
      assertSame(restController1, restController0);
      assertFalse(clusterState0.equals((Object)clusterState1));
      assertFalse(clusterState1.equals((Object)clusterState0));
      assertEquals("AQAAAAIAQACDAAAABAAAAA", clusterState0.stateUUID());
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState0.status());
      assertFalse(clusterState0.wasReadFromDiff());
      assertEquals(0L, clusterState0.version());
      assertEquals(0L, clusterState0.getVersion());
      assertEquals(0L, clusterState1.getVersion());
      assertEquals(0L, clusterState1.version());
      assertEquals("h", clusterState1.stateUUID());
      assertFalse(clusterState1.wasReadFromDiff());
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState1.status());
      assertEquals(0, routingNodes0.size());
      assertEquals(0, routingNodes0.getRelocatingShardCount());
      assertFalse(routingNodes0.hasUnassignedShards());
      assertFalse(routingNodes0.hasInactivePrimaries());
      assertFalse(routingNodes0.hasInactiveShards());
      assertFalse(routingNodes0.hasUnassignedPrimaries());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(Lifecycle.State.STARTED, restController0.lifecycleState());
      assertEquals(Lifecycle.State.STARTED, restController1.lifecycleState());
      
      Client client0 = null;
      IndexNameExpressionResolver indexNameExpressionResolver0 = null;
      RestIndicesAction restIndicesAction0 = new RestIndicesAction(settings0, restController0, client0, indexNameExpressionResolver0);
      assertNotNull(restIndicesAction0);
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertFalse(clusterState0.equals((Object)clusterState1));
      assertFalse(clusterState1.equals((Object)clusterState0));
      assertEquals("AQAAAAIAQACDAAAABAAAAA", clusterState0.stateUUID());
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState0.status());
      assertFalse(clusterState0.wasReadFromDiff());
      assertEquals(0L, clusterState0.version());
      assertEquals(0L, clusterState0.getVersion());
      assertEquals(0L, clusterState1.getVersion());
      assertEquals(0L, clusterState1.version());
      assertEquals("h", clusterState1.stateUUID());
      assertFalse(clusterState1.wasReadFromDiff());
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState1.status());
      assertEquals(0, routingNodes0.size());
      assertEquals(0, routingNodes0.getRelocatingShardCount());
      assertFalse(routingNodes0.hasUnassignedShards());
      assertFalse(routingNodes0.hasInactivePrimaries());
      assertFalse(routingNodes0.hasInactiveShards());
      assertFalse(routingNodes0.hasUnassignedPrimaries());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(Lifecycle.State.STARTED, restController0.lifecycleState());
      
      IndexNameExpressionResolver indexNameExpressionResolver1 = restIndicesAction0.getindexNameExpressionResolver();
      assertNull(indexNameExpressionResolver1);
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertNotSame(clusterState0, clusterState1);
      assertNotSame(clusterState1, clusterState0);
      assertSame(restController0, restController1);
      assertFalse(clusterState0.equals((Object)clusterState1));
      assertFalse(clusterState1.equals((Object)clusterState0));
      assertEquals("AQAAAAIAQACDAAAABAAAAA", clusterState0.stateUUID());
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState0.status());
      assertFalse(clusterState0.wasReadFromDiff());
      assertEquals(0L, clusterState0.version());
      assertEquals(0L, clusterState0.getVersion());
      assertEquals(0L, clusterState1.getVersion());
      assertEquals(0L, clusterState1.version());
      assertEquals("h", clusterState1.stateUUID());
      assertFalse(clusterState1.wasReadFromDiff());
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState1.status());
      assertEquals(0, routingNodes0.size());
      assertEquals(0, routingNodes0.getRelocatingShardCount());
      assertFalse(routingNodes0.hasUnassignedShards());
      assertFalse(routingNodes0.hasInactivePrimaries());
      assertFalse(routingNodes0.hasInactiveShards());
      assertFalse(routingNodes0.hasUnassignedPrimaries());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(Lifecycle.State.STARTED, restController0.lifecycleState());
      
      StringBuilder stringBuilder0 = new StringBuilder();
      assertNotNull(stringBuilder0);
      assertEquals("", stringBuilder0.toString());
      
      int int0 = (-789);
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        stringBuilder0.insert(int0, boolean0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -789
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 11000)
  public void test08()  throws Throwable  {
      IndexMetaData indexMetaData0 = IndexMetaData.PROTO;
      assertNotNull(indexMetaData0);
      assertEquals(0, indexMetaData0.getNumberOfReplicas());
      assertEquals(1L, indexMetaData0.getVersion());
      assertEquals(1, indexMetaData0.getTotalNumberOfShards());
      assertEquals(IndexMetaData.State.OPEN, indexMetaData0.getState());
      assertEquals(1, indexMetaData0.getNumberOfShards());
      assertEquals("_na_", indexMetaData0.getIndexUUID());
      
      Settings settings0 = indexMetaData0.getSettings();
      assertNotNull(settings0);
      assertEquals(0, indexMetaData0.getNumberOfReplicas());
      assertEquals(1L, indexMetaData0.getVersion());
      assertEquals(1, indexMetaData0.getTotalNumberOfShards());
      assertEquals(IndexMetaData.State.OPEN, indexMetaData0.getState());
      assertEquals(1, indexMetaData0.getNumberOfShards());
      assertEquals("_na_", indexMetaData0.getIndexUUID());
      
      Settings settings1 = IndexMetaData.addHumanReadableSettings(settings0);
      assertNotNull(settings1);
      assertNotSame(settings0, settings1);
      assertNotSame(settings1, settings0);
      assertFalse(settings1.equals((Object)settings0));
      assertEquals(0, indexMetaData0.getNumberOfReplicas());
      assertEquals(1L, indexMetaData0.getVersion());
      assertEquals(1, indexMetaData0.getTotalNumberOfShards());
      assertEquals(IndexMetaData.State.OPEN, indexMetaData0.getState());
      assertEquals(1, indexMetaData0.getNumberOfShards());
      assertEquals("_na_", indexMetaData0.getIndexUUID());
      
      RestController restController0 = new RestController(settings1);
      assertNotNull(restController0);
      assertFalse(settings0.equals((Object)settings1));
      assertFalse(settings1.equals((Object)settings0));
      assertEquals(0, indexMetaData0.getNumberOfReplicas());
      assertEquals(1L, indexMetaData0.getVersion());
      assertEquals(1, indexMetaData0.getTotalNumberOfShards());
      assertEquals(IndexMetaData.State.OPEN, indexMetaData0.getState());
      assertEquals(1, indexMetaData0.getNumberOfShards());
      assertEquals("_na_", indexMetaData0.getIndexUUID());
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      
      Client client0 = null;
      IndexNameExpressionResolver indexNameExpressionResolver0 = new IndexNameExpressionResolver(settings1);
      assertNotNull(indexNameExpressionResolver0);
      assertFalse(settings0.equals((Object)settings1));
      assertFalse(settings1.equals((Object)settings0));
      assertEquals(0, indexMetaData0.getNumberOfReplicas());
      assertEquals(1L, indexMetaData0.getVersion());
      assertEquals(1, indexMetaData0.getTotalNumberOfShards());
      assertEquals(IndexMetaData.State.OPEN, indexMetaData0.getState());
      assertEquals(1, indexMetaData0.getNumberOfShards());
      assertEquals("_na_", indexMetaData0.getIndexUUID());
      
      RestIndicesAction restIndicesAction0 = new RestIndicesAction(settings1, restController0, client0, indexNameExpressionResolver0);
      assertNotNull(restIndicesAction0);
      assertFalse(settings0.equals((Object)settings1));
      assertFalse(settings1.equals((Object)settings0));
      assertEquals(0, indexMetaData0.getNumberOfReplicas());
      assertEquals(1L, indexMetaData0.getVersion());
      assertEquals(1, indexMetaData0.getTotalNumberOfShards());
      assertEquals(IndexMetaData.State.OPEN, indexMetaData0.getState());
      assertEquals(1, indexMetaData0.getNumberOfShards());
      assertEquals("_na_", indexMetaData0.getIndexUUID());
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      
      HttpVersion httpVersion0 = HttpVersion.HTTP_1_0;
      assertNotNull(httpVersion0);
      assertEquals(1, httpVersion0.getMajorVersion());
      assertFalse(httpVersion0.isKeepAliveDefault());
      assertEquals("HTTP/1.0", httpVersion0.getText());
      assertEquals("HTTP/1.0", httpVersion0.toString());
      assertEquals("HTTP", httpVersion0.getProtocolName());
      assertEquals(0, httpVersion0.getMinorVersion());
      
      HttpMethod httpMethod0 = HttpMethod.CONNECT;
      assertNotNull(httpMethod0);
      assertEquals("CONNECT", httpMethod0.toString());
      assertEquals("CONNECT", httpMethod0.getName());
      
      String string0 = "Cannot inject a MembersInjector that has no type parameter";
      DefaultHttpRequest defaultHttpRequest0 = new DefaultHttpRequest(httpVersion0, httpMethod0, string0);
      assertNotNull(defaultHttpRequest0);
      assertEquals(1, httpVersion0.getMajorVersion());
      assertFalse(httpVersion0.isKeepAliveDefault());
      assertEquals("HTTP/1.0", httpVersion0.getText());
      assertEquals("HTTP/1.0", httpVersion0.toString());
      assertEquals("HTTP", httpVersion0.getProtocolName());
      assertEquals(0, httpVersion0.getMinorVersion());
      assertEquals("CONNECT", httpMethod0.toString());
      assertEquals("CONNECT", httpMethod0.getName());
      assertEquals("Cannot inject a MembersInjector that has no type parameter", defaultHttpRequest0.getUri());
      
      DefaultLocalServerChannelFactory defaultLocalServerChannelFactory0 = new DefaultLocalServerChannelFactory();
      assertNotNull(defaultLocalServerChannelFactory0);
      
      DefaultChannelPipeline defaultChannelPipeline0 = new DefaultChannelPipeline();
      assertNotNull(defaultChannelPipeline0);
      assertFalse(defaultChannelPipeline0.isAttached());
      
      LocalServerChannel localServerChannel0 = defaultLocalServerChannelFactory0.newChannel(defaultChannelPipeline0);
      assertNotNull(localServerChannel0);
      assertTrue(defaultChannelPipeline0.isAttached());
      assertTrue(localServerChannel0.isReadable());
      assertEquals(0, (int)localServerChannel0.getId());
      
      NettyHttpRequest nettyHttpRequest0 = new NettyHttpRequest(defaultHttpRequest0, localServerChannel0);
      assertNotNull(nettyHttpRequest0);
      assertEquals(1, httpVersion0.getMajorVersion());
      assertFalse(httpVersion0.isKeepAliveDefault());
      assertEquals("HTTP/1.0", httpVersion0.getText());
      assertEquals("HTTP/1.0", httpVersion0.toString());
      assertEquals("HTTP", httpVersion0.getProtocolName());
      assertEquals(0, httpVersion0.getMinorVersion());
      assertEquals("CONNECT", httpMethod0.toString());
      assertEquals("CONNECT", httpMethod0.getName());
      assertEquals("Cannot inject a MembersInjector that has no type parameter", defaultHttpRequest0.getUri());
      assertTrue(defaultChannelPipeline0.isAttached());
      assertTrue(localServerChannel0.isReadable());
      assertEquals(0, (int)localServerChannel0.getId());
      assertEquals("Cannot inject a MembersInjector that has no type parameter", nettyHttpRequest0.uri());
      assertEquals("Cannot inject a MembersInjector that has no type parameter", nettyHttpRequest0.rawPath());
      assertFalse(nettyHttpRequest0.hasContent());
      assertEquals(RestRequest.Method.GET, nettyHttpRequest0.method());
      
      NetworkService networkService0 = new NetworkService(settings0);
      assertNotNull(networkService0);
      assertFalse(settings0.equals((Object)settings1));
      assertEquals(0, indexMetaData0.getNumberOfReplicas());
      assertEquals(1L, indexMetaData0.getVersion());
      assertEquals(1, indexMetaData0.getTotalNumberOfShards());
      assertEquals(IndexMetaData.State.OPEN, indexMetaData0.getState());
      assertEquals(1, indexMetaData0.getNumberOfShards());
      assertEquals("_na_", indexMetaData0.getIndexUUID());
      
      BigArrays bigArrays0 = null;
      String string1 = "Non-standard token '";
      ThreadPool threadPool0 = new ThreadPool(string1);
      assertNotNull(threadPool0);
      assertFalse(string1.equals((Object)string0));
      
      NettyHttpServerTransport nettyHttpServerTransport0 = new NettyHttpServerTransport(settings0, networkService0, bigArrays0, threadPool0);
      assertNotNull(nettyHttpServerTransport0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(settings0.equals((Object)settings1));
      assertEquals(0, indexMetaData0.getNumberOfReplicas());
      assertEquals(1L, indexMetaData0.getVersion());
      assertEquals(1, indexMetaData0.getTotalNumberOfShards());
      assertEquals(IndexMetaData.State.OPEN, indexMetaData0.getState());
      assertEquals(1, indexMetaData0.getNumberOfShards());
      assertEquals("_na_", indexMetaData0.getIndexUUID());
      assertEquals(Lifecycle.State.INITIALIZED, nettyHttpServerTransport0.lifecycleState());
      
      boolean boolean0 = true;
      NettyHttpChannel nettyHttpChannel0 = new NettyHttpChannel(nettyHttpServerTransport0, nettyHttpRequest0, boolean0);
      assertNotNull(nettyHttpChannel0);
      assertFalse(settings0.equals((Object)settings1));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals(0, indexMetaData0.getNumberOfReplicas());
      assertEquals(1L, indexMetaData0.getVersion());
      assertEquals(1, indexMetaData0.getTotalNumberOfShards());
      assertEquals(IndexMetaData.State.OPEN, indexMetaData0.getState());
      assertEquals(1, indexMetaData0.getNumberOfShards());
      assertEquals("_na_", indexMetaData0.getIndexUUID());
      assertEquals(1, httpVersion0.getMajorVersion());
      assertFalse(httpVersion0.isKeepAliveDefault());
      assertEquals("HTTP/1.0", httpVersion0.getText());
      assertEquals("HTTP/1.0", httpVersion0.toString());
      assertEquals("HTTP", httpVersion0.getProtocolName());
      assertEquals(0, httpVersion0.getMinorVersion());
      assertEquals("CONNECT", httpMethod0.toString());
      assertEquals("CONNECT", httpMethod0.getName());
      assertEquals("Cannot inject a MembersInjector that has no type parameter", defaultHttpRequest0.getUri());
      assertTrue(defaultChannelPipeline0.isAttached());
      assertTrue(localServerChannel0.isReadable());
      assertEquals(0, (int)localServerChannel0.getId());
      assertEquals("Cannot inject a MembersInjector that has no type parameter", nettyHttpRequest0.uri());
      assertEquals("Cannot inject a MembersInjector that has no type parameter", nettyHttpRequest0.rawPath());
      assertFalse(nettyHttpRequest0.hasContent());
      assertEquals(RestRequest.Method.GET, nettyHttpRequest0.method());
      assertEquals(Lifecycle.State.INITIALIZED, nettyHttpServerTransport0.lifecycleState());
      assertTrue(nettyHttpChannel0.detailedErrorsEnabled());
      
      // Undeclared exception!
      try { 
        restIndicesAction0.doRequest(nettyHttpRequest0, nettyHttpChannel0, client0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.rest.action.cat.RestIndicesAction", e);
      }
  }

  @Test(timeout = 11000)
  public void test09()  throws Throwable  {
      ClusterName clusterName0 = null;
      long long0 = 0L;
      String string0 = "";
      MetaData metaData0 = MetaData.EMPTY_META_DATA;
      assertNotNull(metaData0);
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0, metaData0.getNumberOfShards());
      
      RoutingTable routingTable0 = RoutingTable.EMPTY_ROUTING_TABLE;
      assertNotNull(routingTable0);
      assertEquals(0L, routingTable0.version());
      
      DiscoveryNodes discoveryNodes0 = DiscoveryNodes.PROTO;
      assertNotNull(discoveryNodes0);
      assertFalse(discoveryNodes0.valid());
      assertNull(discoveryNodes0.masterNodeId());
      assertEquals(0, discoveryNodes0.getSize());
      assertNull(discoveryNodes0.getLocalNodeId());
      assertFalse(discoveryNodes0.localNodeMaster());
      assertNull(discoveryNodes0.localNodeId());
      assertEquals(0, discoveryNodes0.size());
      assertNull(discoveryNodes0.getMasterNodeId());
      
      ClusterBlocks clusterBlocks0 = null;
      ImmutableOpenMap<String, ClusterState.Custom> immutableOpenMap0 = null;
      boolean boolean0 = true;
      ClusterState clusterState0 = new ClusterState(clusterName0, long0, string0, metaData0, routingTable0, discoveryNodes0, clusterBlocks0, immutableOpenMap0, boolean0);
      assertNotNull(clusterState0);
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0L, routingTable0.version());
      assertFalse(discoveryNodes0.valid());
      assertNull(discoveryNodes0.masterNodeId());
      assertEquals(0, discoveryNodes0.getSize());
      assertNull(discoveryNodes0.getLocalNodeId());
      assertFalse(discoveryNodes0.localNodeMaster());
      assertNull(discoveryNodes0.localNodeId());
      assertEquals(0, discoveryNodes0.size());
      assertNull(discoveryNodes0.getMasterNodeId());
      assertTrue(clusterState0.wasReadFromDiff());
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState0.status());
      assertEquals("", clusterState0.stateUUID());
      assertEquals(0L, clusterState0.version());
      assertEquals(0L, clusterState0.getVersion());
      
      RoutingNodes routingNodes0 = new RoutingNodes(clusterState0, boolean0);
      assertNotNull(routingNodes0);
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0L, routingTable0.version());
      assertFalse(discoveryNodes0.valid());
      assertNull(discoveryNodes0.masterNodeId());
      assertEquals(0, discoveryNodes0.getSize());
      assertNull(discoveryNodes0.getLocalNodeId());
      assertFalse(discoveryNodes0.localNodeMaster());
      assertNull(discoveryNodes0.localNodeId());
      assertEquals(0, discoveryNodes0.size());
      assertNull(discoveryNodes0.getMasterNodeId());
      assertTrue(clusterState0.wasReadFromDiff());
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState0.status());
      assertEquals("", clusterState0.stateUUID());
      assertEquals(0L, clusterState0.version());
      assertEquals(0L, clusterState0.getVersion());
      assertEquals(0, routingNodes0.size());
      assertFalse(routingNodes0.hasInactiveShards());
      assertFalse(routingNodes0.hasInactivePrimaries());
      assertFalse(routingNodes0.hasUnassignedShards());
      assertFalse(routingNodes0.hasUnassignedPrimaries());
      assertEquals(0, routingNodes0.getRelocatingShardCount());
      
      MetaData metaData1 = routingNodes0.metaData();
      assertNotNull(metaData1);
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertSame(metaData0, metaData1);
      assertSame(metaData1, metaData0);
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0L, routingTable0.version());
      assertFalse(discoveryNodes0.valid());
      assertNull(discoveryNodes0.masterNodeId());
      assertEquals(0, discoveryNodes0.getSize());
      assertNull(discoveryNodes0.getLocalNodeId());
      assertFalse(discoveryNodes0.localNodeMaster());
      assertNull(discoveryNodes0.localNodeId());
      assertEquals(0, discoveryNodes0.size());
      assertNull(discoveryNodes0.getMasterNodeId());
      assertTrue(clusterState0.wasReadFromDiff());
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState0.status());
      assertEquals("", clusterState0.stateUUID());
      assertEquals(0L, clusterState0.version());
      assertEquals(0L, clusterState0.getVersion());
      assertEquals(0, routingNodes0.size());
      assertFalse(routingNodes0.hasInactiveShards());
      assertFalse(routingNodes0.hasInactivePrimaries());
      assertFalse(routingNodes0.hasUnassignedShards());
      assertFalse(routingNodes0.hasUnassignedPrimaries());
      assertEquals(0, routingNodes0.getRelocatingShardCount());
      assertEquals(0, metaData1.getTotalNumberOfShards());
      assertEquals(0L, metaData1.version());
      assertEquals(0, metaData1.getNumberOfShards());
      assertEquals("_na_", metaData1.clusterUUID());
      
      Settings settings0 = metaData1.settings();
      assertNotNull(settings0);
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertSame(metaData0, metaData1);
      assertSame(metaData1, metaData0);
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0L, routingTable0.version());
      assertFalse(discoveryNodes0.valid());
      assertNull(discoveryNodes0.masterNodeId());
      assertEquals(0, discoveryNodes0.getSize());
      assertNull(discoveryNodes0.getLocalNodeId());
      assertFalse(discoveryNodes0.localNodeMaster());
      assertNull(discoveryNodes0.localNodeId());
      assertEquals(0, discoveryNodes0.size());
      assertNull(discoveryNodes0.getMasterNodeId());
      assertTrue(clusterState0.wasReadFromDiff());
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState0.status());
      assertEquals("", clusterState0.stateUUID());
      assertEquals(0L, clusterState0.version());
      assertEquals(0L, clusterState0.getVersion());
      assertEquals(0, routingNodes0.size());
      assertFalse(routingNodes0.hasInactiveShards());
      assertFalse(routingNodes0.hasInactivePrimaries());
      assertFalse(routingNodes0.hasUnassignedShards());
      assertFalse(routingNodes0.hasUnassignedPrimaries());
      assertEquals(0, routingNodes0.getRelocatingShardCount());
      assertEquals(0, metaData1.getTotalNumberOfShards());
      assertEquals(0L, metaData1.version());
      assertEquals(0, metaData1.getNumberOfShards());
      assertEquals("_na_", metaData1.clusterUUID());
      
      RestController restController0 = new RestController(settings0);
      assertNotNull(restController0);
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0L, routingTable0.version());
      assertFalse(discoveryNodes0.valid());
      assertNull(discoveryNodes0.masterNodeId());
      assertEquals(0, discoveryNodes0.getSize());
      assertNull(discoveryNodes0.getLocalNodeId());
      assertFalse(discoveryNodes0.localNodeMaster());
      assertNull(discoveryNodes0.localNodeId());
      assertEquals(0, discoveryNodes0.size());
      assertNull(discoveryNodes0.getMasterNodeId());
      assertTrue(clusterState0.wasReadFromDiff());
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState0.status());
      assertEquals("", clusterState0.stateUUID());
      assertEquals(0L, clusterState0.version());
      assertEquals(0L, clusterState0.getVersion());
      assertEquals(0, routingNodes0.size());
      assertFalse(routingNodes0.hasInactiveShards());
      assertFalse(routingNodes0.hasInactivePrimaries());
      assertFalse(routingNodes0.hasUnassignedShards());
      assertFalse(routingNodes0.hasUnassignedPrimaries());
      assertEquals(0, routingNodes0.getRelocatingShardCount());
      assertEquals(0, metaData1.getTotalNumberOfShards());
      assertEquals(0L, metaData1.version());
      assertEquals(0, metaData1.getNumberOfShards());
      assertEquals("_na_", metaData1.clusterUUID());
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      
      Client client0 = null;
      IndexNameExpressionResolver indexNameExpressionResolver0 = new IndexNameExpressionResolver(settings0);
      assertNotNull(indexNameExpressionResolver0);
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0L, routingTable0.version());
      assertFalse(discoveryNodes0.valid());
      assertNull(discoveryNodes0.masterNodeId());
      assertEquals(0, discoveryNodes0.getSize());
      assertNull(discoveryNodes0.getLocalNodeId());
      assertFalse(discoveryNodes0.localNodeMaster());
      assertNull(discoveryNodes0.localNodeId());
      assertEquals(0, discoveryNodes0.size());
      assertNull(discoveryNodes0.getMasterNodeId());
      assertTrue(clusterState0.wasReadFromDiff());
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState0.status());
      assertEquals("", clusterState0.stateUUID());
      assertEquals(0L, clusterState0.version());
      assertEquals(0L, clusterState0.getVersion());
      assertEquals(0, routingNodes0.size());
      assertFalse(routingNodes0.hasInactiveShards());
      assertFalse(routingNodes0.hasInactivePrimaries());
      assertFalse(routingNodes0.hasUnassignedShards());
      assertFalse(routingNodes0.hasUnassignedPrimaries());
      assertEquals(0, routingNodes0.getRelocatingShardCount());
      assertEquals(0, metaData1.getTotalNumberOfShards());
      assertEquals(0L, metaData1.version());
      assertEquals(0, metaData1.getNumberOfShards());
      assertEquals("_na_", metaData1.clusterUUID());
      
      RestIndicesAction restIndicesAction0 = new RestIndicesAction(settings0, restController0, client0, indexNameExpressionResolver0);
      assertNotNull(restIndicesAction0);
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0L, routingTable0.version());
      assertFalse(discoveryNodes0.valid());
      assertNull(discoveryNodes0.masterNodeId());
      assertEquals(0, discoveryNodes0.getSize());
      assertNull(discoveryNodes0.getLocalNodeId());
      assertFalse(discoveryNodes0.localNodeMaster());
      assertNull(discoveryNodes0.localNodeId());
      assertEquals(0, discoveryNodes0.size());
      assertNull(discoveryNodes0.getMasterNodeId());
      assertTrue(clusterState0.wasReadFromDiff());
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState0.status());
      assertEquals("", clusterState0.stateUUID());
      assertEquals(0L, clusterState0.version());
      assertEquals(0L, clusterState0.getVersion());
      assertEquals(0, routingNodes0.size());
      assertFalse(routingNodes0.hasInactiveShards());
      assertFalse(routingNodes0.hasInactivePrimaries());
      assertFalse(routingNodes0.hasUnassignedShards());
      assertFalse(routingNodes0.hasUnassignedPrimaries());
      assertEquals(0, routingNodes0.getRelocatingShardCount());
      assertEquals(0, metaData1.getTotalNumberOfShards());
      assertEquals(0L, metaData1.version());
      assertEquals(0, metaData1.getNumberOfShards());
      assertEquals("_na_", metaData1.clusterUUID());
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      
      HttpVersion httpVersion0 = HttpVersion.HTTP_1_0;
      assertNotNull(httpVersion0);
      assertEquals("HTTP/1.0", httpVersion0.getText());
      assertEquals("HTTP", httpVersion0.getProtocolName());
      assertEquals(1, httpVersion0.getMajorVersion());
      assertEquals("HTTP/1.0", httpVersion0.toString());
      assertEquals(0, httpVersion0.getMinorVersion());
      assertFalse(httpVersion0.isKeepAliveDefault());
      
      HttpMethod httpMethod0 = HttpMethod.PUT;
      assertNotNull(httpMethod0);
      assertEquals("PUT", httpMethod0.getName());
      assertEquals("PUT", httpMethod0.toString());
      
      DefaultHttpRequest defaultHttpRequest0 = new DefaultHttpRequest(httpVersion0, httpMethod0, metaData0.ALL);
      assertNotNull(defaultHttpRequest0);
      assertEquals("HTTP/1.0", httpVersion0.getText());
      assertEquals("HTTP", httpVersion0.getProtocolName());
      assertEquals(1, httpVersion0.getMajorVersion());
      assertEquals("HTTP/1.0", httpVersion0.toString());
      assertEquals(0, httpVersion0.getMinorVersion());
      assertFalse(httpVersion0.isKeepAliveDefault());
      assertEquals("PUT", httpMethod0.getName());
      assertEquals("PUT", httpMethod0.toString());
      assertEquals("_all", defaultHttpRequest0.getUri());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0, metaData0.getNumberOfShards());
      
      DefaultChannelPipeline defaultChannelPipeline0 = new DefaultChannelPipeline();
      assertNotNull(defaultChannelPipeline0);
      assertFalse(defaultChannelPipeline0.isAttached());
      
      Channel channel0 = defaultChannelPipeline0.getChannel();
      assertNull(channel0);
      assertFalse(defaultChannelPipeline0.isAttached());
      
      HttpMethod httpMethod1 = HttpMethod.valueOf(clusterState0.UNKNOWN_UUID);
      assertNotNull(httpMethod1);
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertSame(metaData0, metaData1);
      assertNotSame(httpMethod1, httpMethod0);
      assertFalse(httpMethod1.equals((Object)httpMethod0));
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0L, routingTable0.version());
      assertFalse(discoveryNodes0.valid());
      assertNull(discoveryNodes0.masterNodeId());
      assertEquals(0, discoveryNodes0.getSize());
      assertNull(discoveryNodes0.getLocalNodeId());
      assertFalse(discoveryNodes0.localNodeMaster());
      assertNull(discoveryNodes0.localNodeId());
      assertEquals(0, discoveryNodes0.size());
      assertNull(discoveryNodes0.getMasterNodeId());
      assertEquals("_na_", httpMethod1.toString());
      assertEquals("_na_", httpMethod1.getName());
      assertTrue(clusterState0.wasReadFromDiff());
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState0.status());
      assertEquals("", clusterState0.stateUUID());
      assertEquals(0L, clusterState0.version());
      assertEquals(0L, clusterState0.getVersion());
      
      NettyHttpRequest nettyHttpRequest0 = new NettyHttpRequest(defaultHttpRequest0, channel0);
      assertNotNull(nettyHttpRequest0);
      assertFalse(httpMethod0.equals((Object)httpMethod1));
      assertEquals("HTTP/1.0", httpVersion0.getText());
      assertEquals("HTTP", httpVersion0.getProtocolName());
      assertEquals(1, httpVersion0.getMajorVersion());
      assertEquals("HTTP/1.0", httpVersion0.toString());
      assertEquals(0, httpVersion0.getMinorVersion());
      assertFalse(httpVersion0.isKeepAliveDefault());
      assertEquals("PUT", httpMethod0.getName());
      assertEquals("PUT", httpMethod0.toString());
      assertEquals("_all", defaultHttpRequest0.getUri());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0, metaData0.getNumberOfShards());
      assertFalse(defaultChannelPipeline0.isAttached());
      assertFalse(nettyHttpRequest0.hasContent());
      assertEquals("_all", nettyHttpRequest0.uri());
      assertEquals(RestRequest.Method.PUT, nettyHttpRequest0.method());
      assertEquals("_all", nettyHttpRequest0.rawPath());
      
      RestChannel restChannel0 = null;
      // Undeclared exception!
      try { 
        restIndicesAction0.doRequest(nettyHttpRequest0, restChannel0, client0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.rest.action.cat.RestIndicesAction", e);
      }
  }

  @Test(timeout = 11000)
  public void test10()  throws Throwable  {
      Settings settings0 = Settings.EMPTY;
      assertNotNull(settings0);
      
      RestController restController0 = new RestController(settings0);
      assertNotNull(restController0);
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      
      Client client0 = null;
      IndexNameExpressionResolver indexNameExpressionResolver0 = new IndexNameExpressionResolver(settings0);
      assertNotNull(indexNameExpressionResolver0);
      
      RestIndicesAction restIndicesAction0 = new RestIndicesAction(settings0, restController0, client0, indexNameExpressionResolver0);
      assertNotNull(restIndicesAction0);
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      
      HttpVersion httpVersion0 = HttpVersion.HTTP_1_0;
      assertNotNull(httpVersion0);
      assertFalse(httpVersion0.isKeepAliveDefault());
      assertEquals("HTTP/1.0", httpVersion0.getText());
      assertEquals(1, httpVersion0.getMajorVersion());
      assertEquals("HTTP", httpVersion0.getProtocolName());
      assertEquals("HTTP/1.0", httpVersion0.toString());
      assertEquals(0, httpVersion0.getMinorVersion());
      
      HttpMethod httpMethod0 = HttpMethod.HEAD;
      assertNotNull(httpMethod0);
      assertEquals("HEAD", httpMethod0.getName());
      assertEquals("HEAD", httpMethod0.toString());
      
      String string0 = "F& nj:v?!?{,^MO\"}0";
      DefaultHttpRequest defaultHttpRequest0 = new DefaultHttpRequest(httpVersion0, httpMethod0, string0);
      assertNotNull(defaultHttpRequest0);
      assertFalse(httpVersion0.isKeepAliveDefault());
      assertEquals("HTTP/1.0", httpVersion0.getText());
      assertEquals(1, httpVersion0.getMajorVersion());
      assertEquals("HTTP", httpVersion0.getProtocolName());
      assertEquals("HTTP/1.0", httpVersion0.toString());
      assertEquals(0, httpVersion0.getMinorVersion());
      assertEquals("HEAD", httpMethod0.getName());
      assertEquals("HEAD", httpMethod0.toString());
      assertEquals("F& nj:v?!?{,^MO\"}0", defaultHttpRequest0.getUri());
      
      DefaultChannelPipeline defaultChannelPipeline0 = new DefaultChannelPipeline();
      assertNotNull(defaultChannelPipeline0);
      assertFalse(defaultChannelPipeline0.isAttached());
      
      Channel channel0 = defaultChannelPipeline0.getChannel();
      assertNull(channel0);
      assertFalse(defaultChannelPipeline0.isAttached());
      
      NettyHttpRequest nettyHttpRequest0 = new NettyHttpRequest(defaultHttpRequest0, channel0);
      assertNotNull(nettyHttpRequest0);
      assertFalse(httpVersion0.isKeepAliveDefault());
      assertEquals("HTTP/1.0", httpVersion0.getText());
      assertEquals(1, httpVersion0.getMajorVersion());
      assertEquals("HTTP", httpVersion0.getProtocolName());
      assertEquals("HTTP/1.0", httpVersion0.toString());
      assertEquals(0, httpVersion0.getMinorVersion());
      assertEquals("HEAD", httpMethod0.getName());
      assertEquals("HEAD", httpMethod0.toString());
      assertEquals("F& nj:v?!?{,^MO\"}0", defaultHttpRequest0.getUri());
      assertFalse(defaultChannelPipeline0.isAttached());
      assertEquals("F& nj:v", nettyHttpRequest0.rawPath());
      assertEquals("F& nj:v?!?{,^MO\"}0", nettyHttpRequest0.uri());
      assertEquals(RestRequest.Method.HEAD, nettyHttpRequest0.method());
      assertFalse(nettyHttpRequest0.hasContent());
      
      // Undeclared exception!
      restIndicesAction0.getTableWithHeader(nettyHttpRequest0);
  }

  @Test(timeout = 11000)
  public void test11()  throws Throwable  {
      Settings settings0 = Settings.Builder.EMPTY_SETTINGS;
      assertNotNull(settings0);
      
      RestController restController0 = new RestController(settings0);
      assertNotNull(restController0);
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      
      Client client0 = null;
      IndexNameExpressionResolver indexNameExpressionResolver0 = new IndexNameExpressionResolver(settings0);
      assertNotNull(indexNameExpressionResolver0);
      
      RestIndicesAction restIndicesAction0 = new RestIndicesAction(settings0, restController0, client0, indexNameExpressionResolver0);
      assertNotNull(restIndicesAction0);
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      
      int int0 = 0;
      StringBuilder stringBuilder0 = new StringBuilder(int0);
      assertNotNull(stringBuilder0);
      assertEquals("", stringBuilder0.toString());
      
      StringBuilder stringBuilder1 = stringBuilder0.append((float) int0);
      assertNotNull(stringBuilder1);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      assertEquals("0.0", stringBuilder0.toString());
      assertEquals("0.0", stringBuilder1.toString());
      
      restIndicesAction0.documentation(stringBuilder1);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertEquals("0.0/_cat/indices\n/_cat/indices/{index}\n", stringBuilder0.toString());
      assertEquals("0.0/_cat/indices\n/_cat/indices/{index}\n", stringBuilder1.toString());
      
      String string0 = "VlWI^f-LLP";
      boolean boolean0 = true;
      HttpVersion httpVersion0 = null;
      try {
        httpVersion0 = new HttpVersion(string0, boolean0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // invalid version format: VLWI^F-LLP
         //
         verifyException("org.jboss.netty.handler.codec.http.HttpVersion", e);
      }
  }

  @Test(timeout = 11000)
  public void test12()  throws Throwable  {
      Settings settings0 = Settings.EMPTY;
      assertNotNull(settings0);
      
      Client client0 = null;
      IndexNameExpressionResolver indexNameExpressionResolver0 = new IndexNameExpressionResolver(settings0);
      assertNotNull(indexNameExpressionResolver0);
      
      HttpVersion httpVersion0 = HttpVersion.HTTP_1_0;
      assertNotNull(httpVersion0);
      assertEquals("HTTP", httpVersion0.getProtocolName());
      assertEquals("HTTP/1.0", httpVersion0.getText());
      assertEquals(1, httpVersion0.getMajorVersion());
      assertFalse(httpVersion0.isKeepAliveDefault());
      assertEquals("HTTP/1.0", httpVersion0.toString());
      assertEquals(0, httpVersion0.getMinorVersion());
      
      String string0 = "'u&k[=RcO";
      HttpMethod httpMethod0 = HttpMethod.valueOf(string0);
      assertNotNull(httpMethod0);
      assertEquals("'u&k[=RcO", httpMethod0.toString());
      assertEquals("'u&k[=RcO", httpMethod0.getName());
      
      DefaultHttpRequest defaultHttpRequest0 = new DefaultHttpRequest(httpVersion0, httpMethod0, string0);
      assertNotNull(defaultHttpRequest0);
      assertEquals("HTTP", httpVersion0.getProtocolName());
      assertEquals("HTTP/1.0", httpVersion0.getText());
      assertEquals(1, httpVersion0.getMajorVersion());
      assertFalse(httpVersion0.isKeepAliveDefault());
      assertEquals("HTTP/1.0", httpVersion0.toString());
      assertEquals(0, httpVersion0.getMinorVersion());
      assertEquals("'u&k[=RcO", httpMethod0.toString());
      assertEquals("'u&k[=RcO", httpMethod0.getName());
      assertEquals("'u&k[=RcO", defaultHttpRequest0.getUri());
      
      DefaultLocalServerChannelFactory defaultLocalServerChannelFactory0 = new DefaultLocalServerChannelFactory();
      assertNotNull(defaultLocalServerChannelFactory0);
      
      DefaultChannelPipeline defaultChannelPipeline0 = new DefaultChannelPipeline();
      assertNotNull(defaultChannelPipeline0);
      assertFalse(defaultChannelPipeline0.isAttached());
      
      LocalServerChannel localServerChannel0 = defaultLocalServerChannelFactory0.newChannel(defaultChannelPipeline0);
      assertNotNull(localServerChannel0);
      assertTrue(defaultChannelPipeline0.isAttached());
      assertEquals(0, (int)localServerChannel0.getId());
      assertTrue(localServerChannel0.isReadable());
      
      NettyHttpRequest nettyHttpRequest0 = new NettyHttpRequest(defaultHttpRequest0, localServerChannel0);
      assertNotNull(nettyHttpRequest0);
      assertEquals("HTTP", httpVersion0.getProtocolName());
      assertEquals("HTTP/1.0", httpVersion0.getText());
      assertEquals(1, httpVersion0.getMajorVersion());
      assertFalse(httpVersion0.isKeepAliveDefault());
      assertEquals("HTTP/1.0", httpVersion0.toString());
      assertEquals(0, httpVersion0.getMinorVersion());
      assertEquals("'u&k[=RcO", httpMethod0.toString());
      assertEquals("'u&k[=RcO", httpMethod0.getName());
      assertEquals("'u&k[=RcO", defaultHttpRequest0.getUri());
      assertTrue(defaultChannelPipeline0.isAttached());
      assertEquals(0, (int)localServerChannel0.getId());
      assertTrue(localServerChannel0.isReadable());
      assertEquals("'u&k[=RcO", nettyHttpRequest0.rawPath());
      assertEquals("'u&k[=RcO", nettyHttpRequest0.uri());
      assertFalse(nettyHttpRequest0.hasContent());
      assertEquals(RestRequest.Method.GET, nettyHttpRequest0.method());
      
      RestController restController0 = new RestController(settings0);
      assertNotNull(restController0);
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      
      RestIndicesAction restIndicesAction0 = new RestIndicesAction(settings0, restController0, client0, indexNameExpressionResolver0);
      assertNotNull(restIndicesAction0);
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      
      String[] stringArray0 = new String[1];
      String string1 = "";
      stringArray0[0] = string1;
      long long0 = 31536000000L;
      ClusterState clusterState0 = ClusterState.PROTO;
      assertNotNull(clusterState0);
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertEquals("AQAAAAIAQACDAAAABAAAAA", clusterState0.stateUUID());
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState0.status());
      assertFalse(clusterState0.wasReadFromDiff());
      assertEquals(0L, clusterState0.getVersion());
      assertEquals(0L, clusterState0.version());
      
      ClusterState clusterState1 = new ClusterState(long0, stringArray0[0], clusterState0);
      assertNotNull(clusterState1);
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertFalse(clusterState1.equals((Object)clusterState0));
      assertEquals("AQAAAAIAQACDAAAABAAAAA", clusterState0.stateUUID());
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState0.status());
      assertFalse(clusterState0.wasReadFromDiff());
      assertEquals(0L, clusterState0.getVersion());
      assertEquals(0L, clusterState0.version());
      assertFalse(clusterState1.wasReadFromDiff());
      assertEquals(31536000000L, clusterState1.version());
      assertEquals("", clusterState1.stateUUID());
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState1.status());
      assertEquals(31536000000L, clusterState1.getVersion());
      assertEquals(1, stringArray0.length);
      
      int int0 = 1504;
      int int1 = 1988;
      TimeValue timeValue0 = new TimeValue(long0);
      assertNotNull(timeValue0);
      assertEquals(1000000L, TimeValue.NSEC_PER_MSEC);
      
      ClusterHealthResponse clusterHealthResponse0 = new ClusterHealthResponse(string0, stringArray0, clusterState1, int0, int1, int1, timeValue0);
      assertNotNull(clusterHealthResponse0);
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertEquals(1000000L, TimeValue.NSEC_PER_MSEC);
      assertFalse(clusterState0.equals((Object)clusterState1));
      assertFalse(clusterState1.equals((Object)clusterState0));
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(string0.equals((Object)string1));
      assertEquals("AQAAAAIAQACDAAAABAAAAA", clusterState0.stateUUID());
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState0.status());
      assertFalse(clusterState0.wasReadFromDiff());
      assertEquals(0L, clusterState0.getVersion());
      assertEquals(0L, clusterState0.version());
      assertFalse(clusterState1.wasReadFromDiff());
      assertEquals(31536000000L, clusterState1.version());
      assertEquals("", clusterState1.stateUUID());
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState1.status());
      assertEquals(31536000000L, clusterState1.getVersion());
      assertEquals(0, clusterHealthResponse0.getRelocatingShards());
      assertEquals(0, clusterHealthResponse0.getInitializingShards());
      assertEquals(0, clusterHealthResponse0.getActivePrimaryShards());
      assertEquals(1504, clusterHealthResponse0.getNumberOfPendingTasks());
      assertEquals(0, clusterHealthResponse0.getActiveShards());
      assertEquals(0, clusterHealthResponse0.getUnassignedShards());
      assertEquals(100.0, clusterHealthResponse0.getActiveShardsPercent(), 0.01);
      assertEquals(RestStatus.OK, clusterHealthResponse0.status());
      assertEquals(1988, clusterHealthResponse0.getNumberOfInFlightFetch());
      assertEquals(ClusterHealthStatus.GREEN, clusterHealthResponse0.getStatus());
      assertEquals(1988, clusterHealthResponse0.getDelayedUnassignedShards());
      assertEquals("'u&k[=RcO", clusterHealthResponse0.getClusterName());
      assertEquals(0, clusterHealthResponse0.getNumberOfDataNodes());
      assertEquals(0, clusterHealthResponse0.getNumberOfNodes());
      assertFalse(clusterHealthResponse0.isTimedOut());
      assertEquals(1, stringArray0.length);
      
      IndicesStatsResponse indicesStatsResponse0 = null;
      RoutingNodes routingNodes0 = clusterState1.getRoutingNodes();
      assertNotNull(routingNodes0);
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertNotSame(clusterState0, clusterState1);
      assertNotSame(clusterState1, clusterState0);
      assertFalse(clusterState0.equals((Object)clusterState1));
      assertFalse(clusterState1.equals((Object)clusterState0));
      assertEquals("AQAAAAIAQACDAAAABAAAAA", clusterState0.stateUUID());
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState0.status());
      assertFalse(clusterState0.wasReadFromDiff());
      assertEquals(0L, clusterState0.getVersion());
      assertEquals(0L, clusterState0.version());
      assertFalse(clusterState1.wasReadFromDiff());
      assertEquals(31536000000L, clusterState1.version());
      assertEquals("", clusterState1.stateUUID());
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState1.status());
      assertEquals(31536000000L, clusterState1.getVersion());
      assertFalse(routingNodes0.hasInactivePrimaries());
      assertEquals(0, routingNodes0.getRelocatingShardCount());
      assertFalse(routingNodes0.hasUnassignedShards());
      assertEquals(0, routingNodes0.size());
      assertFalse(routingNodes0.hasInactiveShards());
      assertFalse(routingNodes0.hasUnassignedPrimaries());
      assertEquals(1, stringArray0.length);
      
      MetaData metaData0 = routingNodes0.metaData();
      assertNotNull(metaData0);
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertNotSame(clusterState0, clusterState1);
      assertNotSame(clusterState1, clusterState0);
      assertFalse(clusterState0.equals((Object)clusterState1));
      assertFalse(clusterState1.equals((Object)clusterState0));
      assertEquals("AQAAAAIAQACDAAAABAAAAA", clusterState0.stateUUID());
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState0.status());
      assertFalse(clusterState0.wasReadFromDiff());
      assertEquals(0L, clusterState0.getVersion());
      assertEquals(0L, clusterState0.version());
      assertFalse(clusterState1.wasReadFromDiff());
      assertEquals(31536000000L, clusterState1.version());
      assertEquals("", clusterState1.stateUUID());
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState1.status());
      assertEquals(31536000000L, clusterState1.getVersion());
      assertFalse(routingNodes0.hasInactivePrimaries());
      assertEquals(0, routingNodes0.getRelocatingShardCount());
      assertFalse(routingNodes0.hasUnassignedShards());
      assertEquals(0, routingNodes0.size());
      assertFalse(routingNodes0.hasInactiveShards());
      assertFalse(routingNodes0.hasUnassignedPrimaries());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(1, stringArray0.length);
      
      // Undeclared exception!
      restIndicesAction0.buildTable(nettyHttpRequest0, stringArray0, clusterHealthResponse0, indicesStatsResponse0, metaData0);
  }

  @Test(timeout = 11000)
  public void test13()  throws Throwable  {
      long long0 = 0L;
      String string0 = "h";
      ClusterState clusterState0 = ClusterState.PROTO;
      assertNotNull(clusterState0);
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertEquals("AQAAAAIAQACDAAAABAAAAA", clusterState0.stateUUID());
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState0.status());
      assertFalse(clusterState0.wasReadFromDiff());
      assertEquals(0L, clusterState0.version());
      assertEquals(0L, clusterState0.getVersion());
      
      ClusterState clusterState1 = ClusterState.PROTO;
      assertNotNull(clusterState1);
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertSame(clusterState1, clusterState0);
      assertEquals(0L, clusterState1.getVersion());
      assertFalse(clusterState1.wasReadFromDiff());
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState1.status());
      assertEquals(0L, clusterState1.version());
      assertEquals("AQAAAAIAQACDAAAABAAAAA", clusterState1.stateUUID());
      
      RoutingNodes routingNodes0 = new RoutingNodes(clusterState1);
      assertNotNull(routingNodes0);
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertEquals(0L, clusterState1.getVersion());
      assertFalse(clusterState1.wasReadFromDiff());
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState1.status());
      assertEquals(0L, clusterState1.version());
      assertEquals("AQAAAAIAQACDAAAABAAAAA", clusterState1.stateUUID());
      assertFalse(routingNodes0.hasInactiveShards());
      assertFalse(routingNodes0.hasUnassignedPrimaries());
      assertFalse(routingNodes0.hasInactivePrimaries());
      assertEquals(0, routingNodes0.getRelocatingShardCount());
      assertFalse(routingNodes0.hasUnassignedShards());
      assertEquals(0, routingNodes0.size());
      
      MetaData metaData0 = routingNodes0.metaData();
      assertNotNull(metaData0);
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertSame(clusterState1, clusterState0);
      assertEquals(0L, clusterState1.getVersion());
      assertFalse(clusterState1.wasReadFromDiff());
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState1.status());
      assertEquals(0L, clusterState1.version());
      assertEquals("AQAAAAIAQACDAAAABAAAAA", clusterState1.stateUUID());
      assertFalse(routingNodes0.hasInactiveShards());
      assertFalse(routingNodes0.hasUnassignedPrimaries());
      assertFalse(routingNodes0.hasInactivePrimaries());
      assertEquals(0, routingNodes0.getRelocatingShardCount());
      assertFalse(routingNodes0.hasUnassignedShards());
      assertEquals(0, routingNodes0.size());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getNumberOfShards());
      
      Settings settings0 = metaData0.transientSettings();
      assertNotNull(settings0);
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertSame(clusterState1, clusterState0);
      assertEquals(0L, clusterState1.getVersion());
      assertFalse(clusterState1.wasReadFromDiff());
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState1.status());
      assertEquals(0L, clusterState1.version());
      assertEquals("AQAAAAIAQACDAAAABAAAAA", clusterState1.stateUUID());
      assertFalse(routingNodes0.hasInactiveShards());
      assertFalse(routingNodes0.hasUnassignedPrimaries());
      assertFalse(routingNodes0.hasInactivePrimaries());
      assertEquals(0, routingNodes0.getRelocatingShardCount());
      assertFalse(routingNodes0.hasUnassignedShards());
      assertEquals(0, routingNodes0.size());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getNumberOfShards());
      
      RestController restController0 = new RestController(settings0);
      assertNotNull(restController0);
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertEquals(0L, clusterState1.getVersion());
      assertFalse(clusterState1.wasReadFromDiff());
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState1.status());
      assertEquals(0L, clusterState1.version());
      assertEquals("AQAAAAIAQACDAAAABAAAAA", clusterState1.stateUUID());
      assertFalse(routingNodes0.hasInactiveShards());
      assertFalse(routingNodes0.hasUnassignedPrimaries());
      assertFalse(routingNodes0.hasInactivePrimaries());
      assertEquals(0, routingNodes0.getRelocatingShardCount());
      assertFalse(routingNodes0.hasUnassignedShards());
      assertEquals(0, routingNodes0.size());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      
      RestController restController1 = restController0.start();
      assertNotNull(restController1);
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertSame(clusterState1, clusterState0);
      assertSame(restController0, restController1);
      assertSame(restController1, restController0);
      assertEquals(0L, clusterState1.getVersion());
      assertFalse(clusterState1.wasReadFromDiff());
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState1.status());
      assertEquals(0L, clusterState1.version());
      assertEquals("AQAAAAIAQACDAAAABAAAAA", clusterState1.stateUUID());
      assertFalse(routingNodes0.hasInactiveShards());
      assertFalse(routingNodes0.hasUnassignedPrimaries());
      assertFalse(routingNodes0.hasInactivePrimaries());
      assertEquals(0, routingNodes0.getRelocatingShardCount());
      assertFalse(routingNodes0.hasUnassignedShards());
      assertEquals(0, routingNodes0.size());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(Lifecycle.State.STARTED, restController0.lifecycleState());
      assertEquals(Lifecycle.State.STARTED, restController1.lifecycleState());
      
      Client client0 = null;
      IndexNameExpressionResolver indexNameExpressionResolver0 = null;
      RestIndicesAction restIndicesAction0 = new RestIndicesAction(settings0, restController0, client0, indexNameExpressionResolver0);
      assertNotNull(restIndicesAction0);
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertEquals(0L, clusterState1.getVersion());
      assertFalse(clusterState1.wasReadFromDiff());
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState1.status());
      assertEquals(0L, clusterState1.version());
      assertEquals("AQAAAAIAQACDAAAABAAAAA", clusterState1.stateUUID());
      assertFalse(routingNodes0.hasInactiveShards());
      assertFalse(routingNodes0.hasUnassignedPrimaries());
      assertFalse(routingNodes0.hasInactivePrimaries());
      assertEquals(0, routingNodes0.getRelocatingShardCount());
      assertFalse(routingNodes0.hasUnassignedShards());
      assertEquals(0, routingNodes0.size());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(Lifecycle.State.STARTED, restController0.lifecycleState());
      
      StringBuilder stringBuilder0 = null;
      // Undeclared exception!
      try { 
        restIndicesAction0.documentation(stringBuilder0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.rest.action.cat.RestIndicesAction", e);
      }
  }
}
