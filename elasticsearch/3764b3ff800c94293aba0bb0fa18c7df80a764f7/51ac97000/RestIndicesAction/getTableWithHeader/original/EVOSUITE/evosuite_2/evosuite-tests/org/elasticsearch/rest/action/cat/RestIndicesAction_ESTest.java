/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 08 17:47:22 GMT 2021
 */

package org.elasticsearch.rest.action.cat;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.log4j.Logger;
import org.elasticsearch.client.Client;
import org.elasticsearch.cluster.metadata.IndexMetaData;
import org.elasticsearch.cluster.metadata.IndexNameExpressionResolver;
import org.elasticsearch.cluster.metadata.MetaData;
import org.elasticsearch.common.component.Lifecycle;
import org.elasticsearch.common.logging.ESLogger;
import org.elasticsearch.common.network.NetworkService;
import org.elasticsearch.common.settings.Settings;
import org.elasticsearch.common.settings.SettingsFilter;
import org.elasticsearch.common.util.BigArrays;
import org.elasticsearch.common.xcontent.ToXContent;
import org.elasticsearch.http.netty.NettyHttpChannel;
import org.elasticsearch.http.netty.NettyHttpRequest;
import org.elasticsearch.http.netty.NettyHttpServerTransport;
import org.elasticsearch.http.netty.pipelining.OrderedUpstreamMessageEvent;
import org.elasticsearch.rest.RestController;
import org.elasticsearch.rest.RestRequest;
import org.elasticsearch.rest.action.cat.RestIndicesAction;
import org.elasticsearch.search.aggregations.bucket.range.RangeAggregator;
import org.elasticsearch.threadpool.ThreadPool;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.net.MockInetSocketAddress;
import org.jboss.netty.channel.Channel;
import org.jboss.netty.channel.DefaultChannelPipeline;
import org.jboss.netty.channel.local.DefaultLocalClientChannelFactory;
import org.jboss.netty.channel.local.DefaultLocalServerChannelFactory;
import org.jboss.netty.channel.local.LocalChannel;
import org.jboss.netty.channel.local.LocalServerChannel;
import org.jboss.netty.handler.codec.http.DefaultHttpRequest;
import org.jboss.netty.handler.codec.http.HttpMethod;
import org.jboss.netty.handler.codec.http.HttpVersion;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class RestIndicesAction_ESTest extends RestIndicesAction_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test0()  throws Throwable  {
      Settings settings0 = Settings.Builder.EMPTY_SETTINGS;
      assertNotNull(settings0);
      
      RestController restController0 = new RestController(settings0);
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertNotNull(restController0);
      
      Client client0 = null;
      IndexNameExpressionResolver indexNameExpressionResolver0 = new IndexNameExpressionResolver(settings0);
      assertNotNull(indexNameExpressionResolver0);
      
      RestIndicesAction restIndicesAction0 = new RestIndicesAction(settings0, restController0, client0, indexNameExpressionResolver0);
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertNotNull(restIndicesAction0);
      
      RestRequest restRequest0 = null;
      // Undeclared exception!
      restIndicesAction0.getTableWithHeader(restRequest0);
  }

  @Test(timeout = 11000)
  public void test1()  throws Throwable  {
      IndexMetaData indexMetaData0 = IndexMetaData.PROTO;
      assertEquals(1L, indexMetaData0.getVersion());
      assertEquals("_na_", indexMetaData0.getIndexUUID());
      assertEquals(IndexMetaData.State.OPEN, indexMetaData0.getState());
      assertEquals(1, indexMetaData0.getNumberOfShards());
      assertEquals(0, indexMetaData0.getNumberOfReplicas());
      assertEquals(1, indexMetaData0.getTotalNumberOfShards());
      assertNotNull(indexMetaData0);
      
      Settings settings0 = Settings.EMPTY;
      assertNotNull(settings0);
      
      RestController restController0 = new RestController(settings0);
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertNotNull(restController0);
      
      Client client0 = null;
      IndexNameExpressionResolver indexNameExpressionResolver0 = new IndexNameExpressionResolver(settings0);
      assertNotNull(indexNameExpressionResolver0);
      
      RestIndicesAction restIndicesAction0 = new RestIndicesAction(settings0, restController0, client0, indexNameExpressionResolver0);
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertNotNull(restIndicesAction0);
      
      StringBuilder stringBuilder0 = new StringBuilder(indexMetaData0.SETTING_SHADOW_REPLICAS);
      assertEquals(1L, indexMetaData0.getVersion());
      assertEquals("_na_", indexMetaData0.getIndexUUID());
      assertEquals(IndexMetaData.State.OPEN, indexMetaData0.getState());
      assertEquals(1, indexMetaData0.getNumberOfShards());
      assertEquals(0, indexMetaData0.getNumberOfReplicas());
      assertEquals(1, indexMetaData0.getTotalNumberOfShards());
      assertEquals("index.shadow_replicas", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      restIndicesAction0.documentation(stringBuilder0);
      assertEquals(1L, indexMetaData0.getVersion());
      assertEquals("_na_", indexMetaData0.getIndexUUID());
      assertEquals(IndexMetaData.State.OPEN, indexMetaData0.getState());
      assertEquals(1, indexMetaData0.getNumberOfShards());
      assertEquals(0, indexMetaData0.getNumberOfReplicas());
      assertEquals(1, indexMetaData0.getTotalNumberOfShards());
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertEquals("index.shadow_replicas/_cat/indices\n/_cat/indices/{index}\n", stringBuilder0.toString());
      
      HttpVersion httpVersion0 = HttpVersion.HTTP_1_0;
      assertEquals(0, httpVersion0.getMinorVersion());
      assertFalse(httpVersion0.isKeepAliveDefault());
      assertEquals("HTTP", httpVersion0.getProtocolName());
      assertEquals("HTTP/1.0", httpVersion0.toString());
      assertEquals("HTTP/1.0", httpVersion0.getText());
      assertEquals(1, httpVersion0.getMajorVersion());
      assertNotNull(httpVersion0);
      
      HttpMethod httpMethod0 = HttpMethod.OPTIONS;
      assertEquals("OPTIONS", httpMethod0.toString());
      assertEquals("OPTIONS", httpMethod0.getName());
      assertNotNull(httpMethod0);
      
      DefaultHttpRequest defaultHttpRequest0 = new DefaultHttpRequest(httpVersion0, httpMethod0, indexMetaData0.SETTING_PRIORITY);
      assertEquals(1L, indexMetaData0.getVersion());
      assertEquals("_na_", indexMetaData0.getIndexUUID());
      assertEquals(IndexMetaData.State.OPEN, indexMetaData0.getState());
      assertEquals(1, indexMetaData0.getNumberOfShards());
      assertEquals(0, indexMetaData0.getNumberOfReplicas());
      assertEquals(1, indexMetaData0.getTotalNumberOfShards());
      assertEquals(0, httpVersion0.getMinorVersion());
      assertFalse(httpVersion0.isKeepAliveDefault());
      assertEquals("HTTP", httpVersion0.getProtocolName());
      assertEquals("HTTP/1.0", httpVersion0.toString());
      assertEquals("HTTP/1.0", httpVersion0.getText());
      assertEquals(1, httpVersion0.getMajorVersion());
      assertEquals("OPTIONS", httpMethod0.toString());
      assertEquals("OPTIONS", httpMethod0.getName());
      assertEquals("index.priority", defaultHttpRequest0.getUri());
      assertNotNull(defaultHttpRequest0);
      
      DefaultLocalServerChannelFactory defaultLocalServerChannelFactory0 = new DefaultLocalServerChannelFactory();
      assertNotNull(defaultLocalServerChannelFactory0);
      
      DefaultChannelPipeline defaultChannelPipeline0 = new DefaultChannelPipeline();
      assertFalse(defaultChannelPipeline0.isAttached());
      assertNotNull(defaultChannelPipeline0);
      
      LocalServerChannel localServerChannel0 = defaultLocalServerChannelFactory0.newChannel(defaultChannelPipeline0);
      assertTrue(defaultChannelPipeline0.isAttached());
      assertTrue(localServerChannel0.isReadable());
      assertEquals(0, (int)localServerChannel0.getId());
      assertNotNull(localServerChannel0);
      
      NettyHttpRequest nettyHttpRequest0 = new NettyHttpRequest(defaultHttpRequest0, localServerChannel0);
      assertEquals(1L, indexMetaData0.getVersion());
      assertEquals("_na_", indexMetaData0.getIndexUUID());
      assertEquals(IndexMetaData.State.OPEN, indexMetaData0.getState());
      assertEquals(1, indexMetaData0.getNumberOfShards());
      assertEquals(0, indexMetaData0.getNumberOfReplicas());
      assertEquals(1, indexMetaData0.getTotalNumberOfShards());
      assertEquals(0, httpVersion0.getMinorVersion());
      assertFalse(httpVersion0.isKeepAliveDefault());
      assertEquals("HTTP", httpVersion0.getProtocolName());
      assertEquals("HTTP/1.0", httpVersion0.toString());
      assertEquals("HTTP/1.0", httpVersion0.getText());
      assertEquals(1, httpVersion0.getMajorVersion());
      assertEquals("OPTIONS", httpMethod0.toString());
      assertEquals("OPTIONS", httpMethod0.getName());
      assertEquals("index.priority", defaultHttpRequest0.getUri());
      assertTrue(defaultChannelPipeline0.isAttached());
      assertTrue(localServerChannel0.isReadable());
      assertEquals(0, (int)localServerChannel0.getId());
      assertFalse(nettyHttpRequest0.hasContent());
      assertEquals(RestRequest.Method.OPTIONS, nettyHttpRequest0.method());
      assertEquals("index.priority", nettyHttpRequest0.rawPath());
      assertEquals("index.priority", nettyHttpRequest0.uri());
      assertNotNull(nettyHttpRequest0);
      
      NettyHttpServerTransport nettyHttpServerTransport0 = null;
      boolean boolean0 = true;
      NettyHttpChannel nettyHttpChannel0 = new NettyHttpChannel(nettyHttpServerTransport0, nettyHttpRequest0, boolean0);
      assertEquals(1L, indexMetaData0.getVersion());
      assertEquals("_na_", indexMetaData0.getIndexUUID());
      assertEquals(IndexMetaData.State.OPEN, indexMetaData0.getState());
      assertEquals(1, indexMetaData0.getNumberOfShards());
      assertEquals(0, indexMetaData0.getNumberOfReplicas());
      assertEquals(1, indexMetaData0.getTotalNumberOfShards());
      assertTrue(nettyHttpChannel0.detailedErrorsEnabled());
      assertEquals(0, httpVersion0.getMinorVersion());
      assertFalse(httpVersion0.isKeepAliveDefault());
      assertEquals("HTTP", httpVersion0.getProtocolName());
      assertEquals("HTTP/1.0", httpVersion0.toString());
      assertEquals("HTTP/1.0", httpVersion0.getText());
      assertEquals(1, httpVersion0.getMajorVersion());
      assertEquals("OPTIONS", httpMethod0.toString());
      assertEquals("OPTIONS", httpMethod0.getName());
      assertEquals("index.priority", defaultHttpRequest0.getUri());
      assertTrue(defaultChannelPipeline0.isAttached());
      assertTrue(localServerChannel0.isReadable());
      assertEquals(0, (int)localServerChannel0.getId());
      assertFalse(nettyHttpRequest0.hasContent());
      assertEquals(RestRequest.Method.OPTIONS, nettyHttpRequest0.method());
      assertEquals("index.priority", nettyHttpRequest0.rawPath());
      assertEquals("index.priority", nettyHttpRequest0.uri());
      assertNotNull(nettyHttpChannel0);
      
      // Undeclared exception!
      try { 
        restIndicesAction0.doRequest(nettyHttpRequest0, nettyHttpChannel0, client0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.rest.action.cat.RestIndicesAction", e);
      }
  }

  @Test(timeout = 11000)
  public void test2()  throws Throwable  {
      Settings settings0 = Settings.EMPTY;
      assertNotNull(settings0);
      
      RestController restController0 = new RestController(settings0);
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertNotNull(restController0);
      
      Client client0 = null;
      IndexNameExpressionResolver indexNameExpressionResolver0 = new IndexNameExpressionResolver(settings0);
      assertNotNull(indexNameExpressionResolver0);
      
      RestIndicesAction restIndicesAction0 = new RestIndicesAction(settings0, restController0, client0, indexNameExpressionResolver0);
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertNotNull(restIndicesAction0);
  }

  @Test(timeout = 11000)
  public void test3()  throws Throwable  {
      Settings settings0 = Settings.Builder.EMPTY_SETTINGS;
      assertNotNull(settings0);
      
      RestController restController0 = new RestController(settings0);
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertNotNull(restController0);
      
      Client client0 = null;
      IndexNameExpressionResolver indexNameExpressionResolver0 = new IndexNameExpressionResolver(settings0);
      assertNotNull(indexNameExpressionResolver0);
      
      RestIndicesAction restIndicesAction0 = new RestIndicesAction(settings0, restController0, client0, indexNameExpressionResolver0);
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertNotNull(restIndicesAction0);
      
      HttpVersion httpVersion0 = HttpVersion.HTTP_1_0;
      assertEquals("HTTP/1.0", httpVersion0.toString());
      assertEquals(0, httpVersion0.getMinorVersion());
      assertEquals("HTTP", httpVersion0.getProtocolName());
      assertFalse(httpVersion0.isKeepAliveDefault());
      assertEquals("HTTP/1.0", httpVersion0.getText());
      assertEquals(1, httpVersion0.getMajorVersion());
      assertNotNull(httpVersion0);
      
      HttpMethod httpMethod0 = HttpMethod.PATCH;
      assertEquals("PATCH", httpMethod0.toString());
      assertEquals("PATCH", httpMethod0.getName());
      assertNotNull(httpMethod0);
      
      String string0 = "";
      DefaultHttpRequest defaultHttpRequest0 = new DefaultHttpRequest(httpVersion0, httpMethod0, string0);
      assertEquals("HTTP/1.0", httpVersion0.toString());
      assertEquals(0, httpVersion0.getMinorVersion());
      assertEquals("HTTP", httpVersion0.getProtocolName());
      assertFalse(httpVersion0.isKeepAliveDefault());
      assertEquals("HTTP/1.0", httpVersion0.getText());
      assertEquals(1, httpVersion0.getMajorVersion());
      assertEquals("PATCH", httpMethod0.toString());
      assertEquals("PATCH", httpMethod0.getName());
      assertEquals("", defaultHttpRequest0.getUri());
      assertNotNull(defaultHttpRequest0);
      
      DefaultLocalServerChannelFactory defaultLocalServerChannelFactory0 = new DefaultLocalServerChannelFactory();
      assertNotNull(defaultLocalServerChannelFactory0);
      
      DefaultChannelPipeline defaultChannelPipeline0 = new DefaultChannelPipeline();
      assertFalse(defaultChannelPipeline0.isAttached());
      assertNotNull(defaultChannelPipeline0);
      
      LocalServerChannel localServerChannel0 = defaultLocalServerChannelFactory0.newChannel(defaultChannelPipeline0);
      assertTrue(defaultChannelPipeline0.isAttached());
      assertTrue(localServerChannel0.isReadable());
      assertEquals(0, (int)localServerChannel0.getId());
      assertNotNull(localServerChannel0);
      
      NettyHttpRequest nettyHttpRequest0 = new NettyHttpRequest(defaultHttpRequest0, localServerChannel0);
      assertEquals("HTTP/1.0", httpVersion0.toString());
      assertEquals(0, httpVersion0.getMinorVersion());
      assertEquals("HTTP", httpVersion0.getProtocolName());
      assertFalse(httpVersion0.isKeepAliveDefault());
      assertEquals("HTTP/1.0", httpVersion0.getText());
      assertEquals(1, httpVersion0.getMajorVersion());
      assertEquals("PATCH", httpMethod0.toString());
      assertEquals("PATCH", httpMethod0.getName());
      assertEquals("", defaultHttpRequest0.getUri());
      assertTrue(defaultChannelPipeline0.isAttached());
      assertTrue(localServerChannel0.isReadable());
      assertEquals(0, (int)localServerChannel0.getId());
      assertEquals("", nettyHttpRequest0.uri());
      assertEquals("", nettyHttpRequest0.rawPath());
      assertEquals(RestRequest.Method.GET, nettyHttpRequest0.method());
      assertFalse(nettyHttpRequest0.hasContent());
      assertNotNull(nettyHttpRequest0);
      
      // Undeclared exception!
      restIndicesAction0.getTableWithHeader(nettyHttpRequest0);
  }

  @Test(timeout = 11000)
  public void test4()  throws Throwable  {
      Settings settings0 = Settings.Builder.EMPTY_SETTINGS;
      assertNotNull(settings0);
      
      RestController restController0 = new RestController(settings0);
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertNotNull(restController0);
      
      Client client0 = null;
      IndexNameExpressionResolver indexNameExpressionResolver0 = new IndexNameExpressionResolver(settings0);
      assertNotNull(indexNameExpressionResolver0);
      
      RestIndicesAction restIndicesAction0 = new RestIndicesAction(settings0, restController0, client0, indexNameExpressionResolver0);
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertNotNull(restIndicesAction0);
      
      Settings settings1 = Settings.Builder.EMPTY_SETTINGS;
      assertSame(settings1, settings0);
      assertNotNull(settings1);
      
      NetworkService networkService0 = new NetworkService(settings1);
      assertNotNull(networkService0);
      
      BigArrays bigArrays0 = null;
      ThreadPool threadPool0 = new ThreadPool(settings0);
      assertNotNull(threadPool0);
      
      NettyHttpServerTransport nettyHttpServerTransport0 = new NettyHttpServerTransport(settings0, networkService0, bigArrays0, threadPool0);
      assertEquals(Lifecycle.State.INITIALIZED, nettyHttpServerTransport0.lifecycleState());
      assertNotNull(nettyHttpServerTransport0);
      
      HttpVersion httpVersion0 = HttpVersion.HTTP_1_1;
      assertEquals("HTTP", httpVersion0.getProtocolName());
      assertEquals("HTTP/1.1", httpVersion0.toString());
      assertTrue(httpVersion0.isKeepAliveDefault());
      assertEquals(1, httpVersion0.getMinorVersion());
      assertEquals("HTTP/1.1", httpVersion0.getText());
      assertEquals(1, httpVersion0.getMajorVersion());
      assertNotNull(httpVersion0);
      
      HttpMethod httpMethod0 = HttpMethod.PUT;
      assertEquals("PUT", httpMethod0.getName());
      assertEquals("PUT", httpMethod0.toString());
      assertNotNull(httpMethod0);
      
      DefaultHttpRequest defaultHttpRequest0 = new DefaultHttpRequest(httpVersion0, httpMethod0, networkService0.DEFAULT_NETWORK_HOST);
      assertEquals("HTTP", httpVersion0.getProtocolName());
      assertEquals("HTTP/1.1", httpVersion0.toString());
      assertTrue(httpVersion0.isKeepAliveDefault());
      assertEquals(1, httpVersion0.getMinorVersion());
      assertEquals("HTTP/1.1", httpVersion0.getText());
      assertEquals(1, httpVersion0.getMajorVersion());
      assertEquals("PUT", httpMethod0.getName());
      assertEquals("PUT", httpMethod0.toString());
      assertEquals("_local_", defaultHttpRequest0.getUri());
      assertNotNull(defaultHttpRequest0);
      
      Channel channel0 = null;
      NettyHttpRequest nettyHttpRequest0 = new NettyHttpRequest(defaultHttpRequest0, channel0);
      assertEquals("HTTP", httpVersion0.getProtocolName());
      assertEquals("HTTP/1.1", httpVersion0.toString());
      assertTrue(httpVersion0.isKeepAliveDefault());
      assertEquals(1, httpVersion0.getMinorVersion());
      assertEquals("HTTP/1.1", httpVersion0.getText());
      assertEquals(1, httpVersion0.getMajorVersion());
      assertEquals("PUT", httpMethod0.getName());
      assertEquals("PUT", httpMethod0.toString());
      assertEquals("_local_", defaultHttpRequest0.getUri());
      assertFalse(nettyHttpRequest0.hasContent());
      assertEquals("_local_", nettyHttpRequest0.uri());
      assertEquals("_local_", nettyHttpRequest0.rawPath());
      assertEquals(RestRequest.Method.PUT, nettyHttpRequest0.method());
      assertNotNull(nettyHttpRequest0);
      
      boolean boolean0 = false;
      NettyHttpChannel nettyHttpChannel0 = new NettyHttpChannel(nettyHttpServerTransport0, nettyHttpRequest0, boolean0);
      assertFalse(nettyHttpChannel0.detailedErrorsEnabled());
      assertEquals(Lifecycle.State.INITIALIZED, nettyHttpServerTransport0.lifecycleState());
      assertEquals("HTTP", httpVersion0.getProtocolName());
      assertEquals("HTTP/1.1", httpVersion0.toString());
      assertTrue(httpVersion0.isKeepAliveDefault());
      assertEquals(1, httpVersion0.getMinorVersion());
      assertEquals("HTTP/1.1", httpVersion0.getText());
      assertEquals(1, httpVersion0.getMajorVersion());
      assertEquals("PUT", httpMethod0.getName());
      assertEquals("PUT", httpMethod0.toString());
      assertEquals("_local_", defaultHttpRequest0.getUri());
      assertFalse(nettyHttpRequest0.hasContent());
      assertEquals("_local_", nettyHttpRequest0.uri());
      assertEquals("_local_", nettyHttpRequest0.rawPath());
      assertEquals(RestRequest.Method.PUT, nettyHttpRequest0.method());
      assertNotNull(nettyHttpChannel0);
      
      RestRequest restRequest0 = nettyHttpChannel0.request();
      assertFalse(nettyHttpChannel0.detailedErrorsEnabled());
      assertEquals("_local_", restRequest0.rawPath());
      assertEquals("_local_", restRequest0.uri());
      assertFalse(restRequest0.hasContent());
      assertEquals(RestRequest.Method.PUT, restRequest0.method());
      assertEquals(Lifecycle.State.INITIALIZED, nettyHttpServerTransport0.lifecycleState());
      assertEquals("HTTP", httpVersion0.getProtocolName());
      assertEquals("HTTP/1.1", httpVersion0.toString());
      assertTrue(httpVersion0.isKeepAliveDefault());
      assertEquals(1, httpVersion0.getMinorVersion());
      assertEquals("HTTP/1.1", httpVersion0.getText());
      assertEquals(1, httpVersion0.getMajorVersion());
      assertEquals("PUT", httpMethod0.getName());
      assertEquals("PUT", httpMethod0.toString());
      assertEquals("_local_", defaultHttpRequest0.getUri());
      assertFalse(nettyHttpRequest0.hasContent());
      assertEquals("_local_", nettyHttpRequest0.uri());
      assertEquals("_local_", nettyHttpRequest0.rawPath());
      assertEquals(RestRequest.Method.PUT, nettyHttpRequest0.method());
      assertSame(settings0, settings1);
      assertSame(restRequest0, nettyHttpRequest0);
      assertSame(settings1, settings0);
      assertSame(nettyHttpRequest0, restRequest0);
      assertNotNull(restRequest0);
      
      // Undeclared exception!
      restIndicesAction0.getTableWithHeader(restRequest0);
  }

  @Test(timeout = 11000)
  public void test5()  throws Throwable  {
      ToXContent.Params toXContent_Params0 = ToXContent.EMPTY_PARAMS;
      assertNotNull(toXContent_Params0);
      
      Settings settings0 = Settings.EMPTY;
      assertNotNull(settings0);
      
      Settings settings1 = SettingsFilter.filterSettings(toXContent_Params0, settings0);
      assertSame(settings0, settings1);
      assertSame(settings1, settings0);
      assertNotNull(settings1);
      
      RestController restController0 = new RestController(settings0);
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertNotNull(restController0);
      
      Client client0 = null;
      IndexNameExpressionResolver indexNameExpressionResolver0 = new IndexNameExpressionResolver(settings0);
      assertNotNull(indexNameExpressionResolver0);
      
      RestIndicesAction restIndicesAction0 = new RestIndicesAction(settings1, restController0, client0, indexNameExpressionResolver0);
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertNotNull(restIndicesAction0);
      
      StringBuilder stringBuilder0 = null;
      // Undeclared exception!
      try { 
        restIndicesAction0.documentation(stringBuilder0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.rest.action.cat.RestIndicesAction", e);
      }
  }

  @Test(timeout = 11000)
  public void test6()  throws Throwable  {
      IndexMetaData indexMetaData0 = IndexMetaData.PROTO;
      assertEquals(1, indexMetaData0.getTotalNumberOfShards());
      assertEquals(IndexMetaData.State.OPEN, indexMetaData0.getState());
      assertEquals(1L, indexMetaData0.getVersion());
      assertEquals(1, indexMetaData0.getNumberOfShards());
      assertEquals("_na_", indexMetaData0.getIndexUUID());
      assertEquals(0, indexMetaData0.getNumberOfReplicas());
      assertNotNull(indexMetaData0);
      
      Settings settings0 = indexMetaData0.getSettings();
      assertEquals(1, indexMetaData0.getTotalNumberOfShards());
      assertEquals(IndexMetaData.State.OPEN, indexMetaData0.getState());
      assertEquals(1L, indexMetaData0.getVersion());
      assertEquals(1, indexMetaData0.getNumberOfShards());
      assertEquals("_na_", indexMetaData0.getIndexUUID());
      assertEquals(0, indexMetaData0.getNumberOfReplicas());
      assertNotNull(settings0);
      
      RestController restController0 = new RestController(settings0);
      assertEquals(1, indexMetaData0.getTotalNumberOfShards());
      assertEquals(IndexMetaData.State.OPEN, indexMetaData0.getState());
      assertEquals(1L, indexMetaData0.getVersion());
      assertEquals(1, indexMetaData0.getNumberOfShards());
      assertEquals("_na_", indexMetaData0.getIndexUUID());
      assertEquals(0, indexMetaData0.getNumberOfReplicas());
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertNotNull(restController0);
      
      Client client0 = null;
      IndexNameExpressionResolver indexNameExpressionResolver0 = new IndexNameExpressionResolver(settings0);
      assertEquals(1, indexMetaData0.getTotalNumberOfShards());
      assertEquals(IndexMetaData.State.OPEN, indexMetaData0.getState());
      assertEquals(1L, indexMetaData0.getVersion());
      assertEquals(1, indexMetaData0.getNumberOfShards());
      assertEquals("_na_", indexMetaData0.getIndexUUID());
      assertEquals(0, indexMetaData0.getNumberOfReplicas());
      assertNotNull(indexNameExpressionResolver0);
      
      RestIndicesAction restIndicesAction0 = new RestIndicesAction(settings0, restController0, client0, indexNameExpressionResolver0);
      assertEquals(1, indexMetaData0.getTotalNumberOfShards());
      assertEquals(IndexMetaData.State.OPEN, indexMetaData0.getState());
      assertEquals(1L, indexMetaData0.getVersion());
      assertEquals(1, indexMetaData0.getNumberOfShards());
      assertEquals("_na_", indexMetaData0.getIndexUUID());
      assertEquals(0, indexMetaData0.getNumberOfReplicas());
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertNotNull(restIndicesAction0);
      
      RestController restController1 = restController0.start();
      assertEquals(1, indexMetaData0.getTotalNumberOfShards());
      assertEquals(IndexMetaData.State.OPEN, indexMetaData0.getState());
      assertEquals(1L, indexMetaData0.getVersion());
      assertEquals(1, indexMetaData0.getNumberOfShards());
      assertEquals("_na_", indexMetaData0.getIndexUUID());
      assertEquals(0, indexMetaData0.getNumberOfReplicas());
      assertEquals(Lifecycle.State.STARTED, restController0.lifecycleState());
      assertEquals(Lifecycle.State.STARTED, restController1.lifecycleState());
      assertSame(restController0, restController1);
      assertSame(restController1, restController0);
      assertNotNull(restController1);
      
      StringBuilder stringBuilder0 = new StringBuilder();
      assertEquals("", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      restIndicesAction0.documentation(stringBuilder0);
      assertEquals(1, indexMetaData0.getTotalNumberOfShards());
      assertEquals(IndexMetaData.State.OPEN, indexMetaData0.getState());
      assertEquals(1L, indexMetaData0.getVersion());
      assertEquals(1, indexMetaData0.getNumberOfShards());
      assertEquals("_na_", indexMetaData0.getIndexUUID());
      assertEquals(0, indexMetaData0.getNumberOfReplicas());
      assertEquals(Lifecycle.State.STARTED, restController0.lifecycleState());
      assertEquals("/_cat/indices\n/_cat/indices/{index}\n", stringBuilder0.toString());
      assertSame(restController0, restController1);
      
      restIndicesAction0.documentation(stringBuilder0);
      assertEquals(1, indexMetaData0.getTotalNumberOfShards());
      assertEquals(IndexMetaData.State.OPEN, indexMetaData0.getState());
      assertEquals(1L, indexMetaData0.getVersion());
      assertEquals(1, indexMetaData0.getNumberOfShards());
      assertEquals("_na_", indexMetaData0.getIndexUUID());
      assertEquals(0, indexMetaData0.getNumberOfReplicas());
      assertEquals(Lifecycle.State.STARTED, restController0.lifecycleState());
      assertEquals("/_cat/indices\n/_cat/indices/{index}\n/_cat/indices\n/_cat/indices/{index}\n", stringBuilder0.toString());
      assertSame(restController0, restController1);
      
      // Undeclared exception!
      try { 
        HttpVersion.valueOf(indexMetaData0.SETTING_AUTO_EXPAND_REPLICAS);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // invalid version format: INDEX.AUTO_EXPAND_REPLICAS
         //
         verifyException("org.jboss.netty.handler.codec.http.HttpVersion", e);
      }
  }

  @Test(timeout = 11000)
  public void test7()  throws Throwable  {
      String string0 = "YELLOW";
      Logger logger0 = Logger.getRootLogger();
      assertFalse(logger0.isDebugEnabled());
      assertFalse(logger0.isInfoEnabled());
      assertFalse(logger0.isTraceEnabled());
      assertEquals("root", logger0.getName());
      assertTrue(logger0.getAdditivity());
      assertNotNull(logger0);
      
      ESLogger eSLogger0 = new ESLogger(string0, logger0);
      assertFalse(logger0.isDebugEnabled());
      assertFalse(logger0.isInfoEnabled());
      assertFalse(logger0.isTraceEnabled());
      assertEquals("root", logger0.getName());
      assertTrue(logger0.getAdditivity());
      assertFalse(eSLogger0.isTraceEnabled());
      assertFalse(eSLogger0.isDebugEnabled());
      assertFalse(eSLogger0.isWarnEnabled());
      assertFalse(eSLogger0.isInfoEnabled());
      assertEquals("OFF", eSLogger0.getLevel());
      assertEquals("root", eSLogger0.getName());
      assertFalse(eSLogger0.isErrorEnabled());
      assertEquals("YELLOW", eSLogger0.getPrefix());
      assertNotNull(eSLogger0);
      
      MetaData metaData0 = MetaData.EMPTY_META_DATA;
      assertEquals(0L, metaData0.version());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertNotNull(metaData0);
      
      MetaData metaData1 = MetaData.addDefaultUnitsIfNeeded(eSLogger0, metaData0);
      assertFalse(logger0.isDebugEnabled());
      assertFalse(logger0.isInfoEnabled());
      assertFalse(logger0.isTraceEnabled());
      assertEquals("root", logger0.getName());
      assertTrue(logger0.getAdditivity());
      assertFalse(eSLogger0.isTraceEnabled());
      assertFalse(eSLogger0.isDebugEnabled());
      assertFalse(eSLogger0.isWarnEnabled());
      assertFalse(eSLogger0.isInfoEnabled());
      assertEquals("OFF", eSLogger0.getLevel());
      assertEquals("root", eSLogger0.getName());
      assertFalse(eSLogger0.isErrorEnabled());
      assertEquals("YELLOW", eSLogger0.getPrefix());
      assertEquals(0L, metaData0.version());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0, metaData1.getTotalNumberOfShards());
      assertEquals(0L, metaData1.version());
      assertEquals("_na_", metaData1.clusterUUID());
      assertEquals(0, metaData1.getNumberOfShards());
      assertSame(metaData0, metaData1);
      assertSame(metaData1, metaData0);
      assertNotNull(metaData1);
      
      Settings settings0 = metaData1.settings();
      assertFalse(logger0.isDebugEnabled());
      assertFalse(logger0.isInfoEnabled());
      assertFalse(logger0.isTraceEnabled());
      assertEquals("root", logger0.getName());
      assertTrue(logger0.getAdditivity());
      assertFalse(eSLogger0.isTraceEnabled());
      assertFalse(eSLogger0.isDebugEnabled());
      assertFalse(eSLogger0.isWarnEnabled());
      assertFalse(eSLogger0.isInfoEnabled());
      assertEquals("OFF", eSLogger0.getLevel());
      assertEquals("root", eSLogger0.getName());
      assertFalse(eSLogger0.isErrorEnabled());
      assertEquals("YELLOW", eSLogger0.getPrefix());
      assertEquals(0L, metaData0.version());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0, metaData1.getTotalNumberOfShards());
      assertEquals(0L, metaData1.version());
      assertEquals("_na_", metaData1.clusterUUID());
      assertEquals(0, metaData1.getNumberOfShards());
      assertSame(metaData0, metaData1);
      assertSame(metaData1, metaData0);
      assertNotNull(settings0);
      
      RestController restController0 = null;
      Client client0 = null;
      IndexNameExpressionResolver indexNameExpressionResolver0 = null;
      RestIndicesAction restIndicesAction0 = null;
      try {
        restIndicesAction0 = new RestIndicesAction(settings0, restController0, client0, indexNameExpressionResolver0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.rest.action.cat.RestIndicesAction", e);
      }
  }

  @Test(timeout = 11000)
  public void test8()  throws Throwable  {
      Settings settings0 = Settings.EMPTY;
      assertNotNull(settings0);
      
      RestController restController0 = new RestController(settings0);
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertNotNull(restController0);
      
      RestController restController1 = restController0.stop();
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertEquals(Lifecycle.State.INITIALIZED, restController1.lifecycleState());
      assertSame(restController0, restController1);
      assertSame(restController1, restController0);
      assertNotNull(restController1);
      
      Client client0 = null;
      IndexNameExpressionResolver indexNameExpressionResolver0 = new IndexNameExpressionResolver(settings0);
      assertNotNull(indexNameExpressionResolver0);
      
      RestIndicesAction restIndicesAction0 = new RestIndicesAction(settings0, restController0, client0, indexNameExpressionResolver0);
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertNotNull(restIndicesAction0);
      
      HttpVersion httpVersion0 = HttpVersion.HTTP_1_0;
      assertFalse(httpVersion0.isKeepAliveDefault());
      assertEquals(0, httpVersion0.getMinorVersion());
      assertEquals("HTTP", httpVersion0.getProtocolName());
      assertEquals(1, httpVersion0.getMajorVersion());
      assertEquals("HTTP/1.0", httpVersion0.toString());
      assertEquals("HTTP/1.0", httpVersion0.getText());
      assertNotNull(httpVersion0);
      
      HttpMethod httpMethod0 = HttpMethod.PATCH;
      assertEquals("PATCH", httpMethod0.getName());
      assertEquals("PATCH", httpMethod0.toString());
      assertNotNull(httpMethod0);
      
      String string0 = "";
      DefaultHttpRequest defaultHttpRequest0 = new DefaultHttpRequest(httpVersion0, httpMethod0, string0);
      assertFalse(httpVersion0.isKeepAliveDefault());
      assertEquals(0, httpVersion0.getMinorVersion());
      assertEquals("HTTP", httpVersion0.getProtocolName());
      assertEquals(1, httpVersion0.getMajorVersion());
      assertEquals("HTTP/1.0", httpVersion0.toString());
      assertEquals("HTTP/1.0", httpVersion0.getText());
      assertEquals("PATCH", httpMethod0.getName());
      assertEquals("PATCH", httpMethod0.toString());
      assertEquals("", defaultHttpRequest0.getUri());
      assertNotNull(defaultHttpRequest0);
      
      DefaultLocalServerChannelFactory defaultLocalServerChannelFactory0 = new DefaultLocalServerChannelFactory();
      assertNotNull(defaultLocalServerChannelFactory0);
      
      DefaultChannelPipeline defaultChannelPipeline0 = new DefaultChannelPipeline();
      assertFalse(defaultChannelPipeline0.isAttached());
      assertNotNull(defaultChannelPipeline0);
      
      LocalServerChannel localServerChannel0 = defaultLocalServerChannelFactory0.newChannel(defaultChannelPipeline0);
      assertTrue(defaultChannelPipeline0.isAttached());
      assertTrue(localServerChannel0.isReadable());
      assertEquals(1, (int)localServerChannel0.getId());
      assertNotNull(localServerChannel0);
      
      NettyHttpRequest nettyHttpRequest0 = new NettyHttpRequest(defaultHttpRequest0, localServerChannel0);
      assertFalse(httpVersion0.isKeepAliveDefault());
      assertEquals(0, httpVersion0.getMinorVersion());
      assertEquals("HTTP", httpVersion0.getProtocolName());
      assertEquals(1, httpVersion0.getMajorVersion());
      assertEquals("HTTP/1.0", httpVersion0.toString());
      assertEquals("HTTP/1.0", httpVersion0.getText());
      assertEquals("PATCH", httpMethod0.getName());
      assertEquals("PATCH", httpMethod0.toString());
      assertEquals("", defaultHttpRequest0.getUri());
      assertTrue(defaultChannelPipeline0.isAttached());
      assertTrue(localServerChannel0.isReadable());
      assertEquals(1, (int)localServerChannel0.getId());
      assertEquals(RestRequest.Method.GET, nettyHttpRequest0.method());
      assertFalse(nettyHttpRequest0.hasContent());
      assertEquals("", nettyHttpRequest0.rawPath());
      assertEquals("", nettyHttpRequest0.uri());
      assertNotNull(nettyHttpRequest0);
      
      NettyHttpServerTransport nettyHttpServerTransport0 = null;
      boolean boolean0 = true;
      NettyHttpChannel nettyHttpChannel0 = new NettyHttpChannel(nettyHttpServerTransport0, nettyHttpRequest0, boolean0);
      assertTrue(nettyHttpChannel0.detailedErrorsEnabled());
      assertFalse(httpVersion0.isKeepAliveDefault());
      assertEquals(0, httpVersion0.getMinorVersion());
      assertEquals("HTTP", httpVersion0.getProtocolName());
      assertEquals(1, httpVersion0.getMajorVersion());
      assertEquals("HTTP/1.0", httpVersion0.toString());
      assertEquals("HTTP/1.0", httpVersion0.getText());
      assertEquals("PATCH", httpMethod0.getName());
      assertEquals("PATCH", httpMethod0.toString());
      assertEquals("", defaultHttpRequest0.getUri());
      assertTrue(defaultChannelPipeline0.isAttached());
      assertTrue(localServerChannel0.isReadable());
      assertEquals(1, (int)localServerChannel0.getId());
      assertEquals(RestRequest.Method.GET, nettyHttpRequest0.method());
      assertFalse(nettyHttpRequest0.hasContent());
      assertEquals("", nettyHttpRequest0.rawPath());
      assertEquals("", nettyHttpRequest0.uri());
      assertNotNull(nettyHttpChannel0);
      
      // Undeclared exception!
      try { 
        restIndicesAction0.doRequest(nettyHttpRequest0, nettyHttpChannel0, client0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.rest.action.cat.RestIndicesAction", e);
      }
  }
}
