/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 09 06:24:22 GMT 2021
 */

package org.elasticsearch.rest.action.cat;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.channels.SocketChannel;
import java.util.Map;
import java.util.concurrent.ForkJoinPool;
import org.apache.log4j.Logger;
import org.elasticsearch.action.admin.cluster.node.info.NodeInfo;
import org.elasticsearch.action.admin.cluster.node.info.NodesInfoResponse;
import org.elasticsearch.action.admin.cluster.node.stats.NodeStats;
import org.elasticsearch.action.admin.cluster.node.stats.NodesStatsResponse;
import org.elasticsearch.action.admin.cluster.state.ClusterStateResponse;
import org.elasticsearch.client.Client;
import org.elasticsearch.cluster.ClusterName;
import org.elasticsearch.cluster.ClusterState;
import org.elasticsearch.cluster.metadata.IndexMetaData;
import org.elasticsearch.cluster.metadata.MetaData;
import org.elasticsearch.common.Table;
import org.elasticsearch.common.component.Lifecycle;
import org.elasticsearch.common.component.LifecycleListener;
import org.elasticsearch.common.io.stream.StreamInput;
import org.elasticsearch.common.logging.ESLogger;
import org.elasticsearch.common.settings.Settings;
import org.elasticsearch.common.settings.SettingsFilter;
import org.elasticsearch.common.xcontent.ToXContent;
import org.elasticsearch.http.netty.NettyHttpChannel;
import org.elasticsearch.http.netty.NettyHttpRequest;
import org.elasticsearch.http.netty.NettyHttpServerTransport;
import org.elasticsearch.rest.RestChannel;
import org.elasticsearch.rest.RestController;
import org.elasticsearch.rest.RestRequest;
import org.elasticsearch.rest.action.cat.RestNodesAction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jboss.netty.channel.Channel;
import org.jboss.netty.channel.ChannelSink;
import org.jboss.netty.channel.DefaultChannelPipeline;
import org.jboss.netty.channel.local.DefaultLocalClientChannelFactory;
import org.jboss.netty.channel.local.DefaultLocalServerChannelFactory;
import org.jboss.netty.channel.local.LocalServerChannel;
import org.jboss.netty.channel.socket.nio.NioSocketChannel;
import org.jboss.netty.channel.socket.nio.NioWorker;
import org.jboss.netty.handler.codec.http.DefaultHttpRequest;
import org.jboss.netty.handler.codec.http.HttpMethod;
import org.jboss.netty.handler.codec.http.HttpVersion;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class RestNodesAction_ESTest extends RestNodesAction_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test00()  throws Throwable  {
      Settings settings0 = Settings.Builder.EMPTY_SETTINGS;
      assertNotNull(settings0);
      
      RestController restController0 = new RestController(settings0);
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertNotNull(restController0);
      
      Client client0 = null;
      RestNodesAction restNodesAction0 = new RestNodesAction(settings0, restController0, client0);
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertNotNull(restNodesAction0);
      
      long long0 = (-427L);
      short short0 = restNodesAction0.calculatePercentage(long0, long0);
      assertEquals((short)0, short0);
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      
      StringBuilder stringBuilder0 = new StringBuilder();
      assertEquals("", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      restNodesAction0.documentation(stringBuilder0);
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertEquals("/_cat/nodes\n", stringBuilder0.toString());
  }

  @Test(timeout = 11000)
  public void test01()  throws Throwable  {
      IndexMetaData indexMetaData0 = IndexMetaData.PROTO;
      assertEquals("_na_", indexMetaData0.getIndexUUID());
      assertEquals(1, indexMetaData0.getNumberOfShards());
      assertEquals(IndexMetaData.State.OPEN, indexMetaData0.getState());
      assertEquals(1L, indexMetaData0.getVersion());
      assertEquals(1, indexMetaData0.getTotalNumberOfShards());
      assertEquals(0, indexMetaData0.getNumberOfReplicas());
      assertNotNull(indexMetaData0);
      
      Settings settings0 = indexMetaData0.getSettings();
      assertEquals("_na_", indexMetaData0.getIndexUUID());
      assertEquals(1, indexMetaData0.getNumberOfShards());
      assertEquals(IndexMetaData.State.OPEN, indexMetaData0.getState());
      assertEquals(1L, indexMetaData0.getVersion());
      assertEquals(1, indexMetaData0.getTotalNumberOfShards());
      assertEquals(0, indexMetaData0.getNumberOfReplicas());
      assertNotNull(settings0);
      
      RestController restController0 = new RestController(settings0);
      assertEquals("_na_", indexMetaData0.getIndexUUID());
      assertEquals(1, indexMetaData0.getNumberOfShards());
      assertEquals(IndexMetaData.State.OPEN, indexMetaData0.getState());
      assertEquals(1L, indexMetaData0.getVersion());
      assertEquals(1, indexMetaData0.getTotalNumberOfShards());
      assertEquals(0, indexMetaData0.getNumberOfReplicas());
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertNotNull(restController0);
      
      Client client0 = null;
      RestNodesAction restNodesAction0 = new RestNodesAction(settings0, restController0, client0);
      assertEquals("_na_", indexMetaData0.getIndexUUID());
      assertEquals(1, indexMetaData0.getNumberOfShards());
      assertEquals(IndexMetaData.State.OPEN, indexMetaData0.getState());
      assertEquals(1L, indexMetaData0.getVersion());
      assertEquals(1, indexMetaData0.getTotalNumberOfShards());
      assertEquals(0, indexMetaData0.getNumberOfReplicas());
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertNotNull(restNodesAction0);
      
      HttpVersion httpVersion0 = HttpVersion.HTTP_1_1;
      assertEquals("HTTP", httpVersion0.getProtocolName());
      assertEquals("HTTP/1.1", httpVersion0.toString());
      assertTrue(httpVersion0.isKeepAliveDefault());
      assertEquals(1, httpVersion0.getMinorVersion());
      assertEquals("HTTP/1.1", httpVersion0.getText());
      assertEquals(1, httpVersion0.getMajorVersion());
      assertNotNull(httpVersion0);
      
      Float float0 = null;
      HttpMethod httpMethod0 = HttpMethod.GET;
      assertEquals("GET", httpMethod0.getName());
      assertEquals("GET", httpMethod0.toString());
      assertNotNull(httpMethod0);
      
      DefaultHttpRequest defaultHttpRequest0 = new DefaultHttpRequest(httpVersion0, httpMethod0, indexMetaData0.SETTING_VERSION_CREATED);
      assertEquals("_na_", indexMetaData0.getIndexUUID());
      assertEquals(1, indexMetaData0.getNumberOfShards());
      assertEquals(IndexMetaData.State.OPEN, indexMetaData0.getState());
      assertEquals(1L, indexMetaData0.getVersion());
      assertEquals(1, indexMetaData0.getTotalNumberOfShards());
      assertEquals(0, indexMetaData0.getNumberOfReplicas());
      assertEquals("HTTP", httpVersion0.getProtocolName());
      assertEquals("HTTP/1.1", httpVersion0.toString());
      assertTrue(httpVersion0.isKeepAliveDefault());
      assertEquals(1, httpVersion0.getMinorVersion());
      assertEquals("HTTP/1.1", httpVersion0.getText());
      assertEquals(1, httpVersion0.getMajorVersion());
      assertEquals("GET", httpMethod0.getName());
      assertEquals("GET", httpMethod0.toString());
      assertEquals("index.version.created", defaultHttpRequest0.getUri());
      assertNotNull(defaultHttpRequest0);
      
      DefaultLocalServerChannelFactory defaultLocalServerChannelFactory0 = new DefaultLocalServerChannelFactory();
      assertNotNull(defaultLocalServerChannelFactory0);
      
      DefaultChannelPipeline defaultChannelPipeline0 = new DefaultChannelPipeline();
      assertFalse(defaultChannelPipeline0.isAttached());
      assertNotNull(defaultChannelPipeline0);
      
      LocalServerChannel localServerChannel0 = defaultLocalServerChannelFactory0.newChannel(defaultChannelPipeline0);
      assertTrue(defaultChannelPipeline0.isAttached());
      assertEquals(0, (int)localServerChannel0.getId());
      assertTrue(localServerChannel0.isReadable());
      assertNotNull(localServerChannel0);
      
      NettyHttpRequest nettyHttpRequest0 = new NettyHttpRequest(defaultHttpRequest0, localServerChannel0);
      assertEquals("_na_", indexMetaData0.getIndexUUID());
      assertEquals(1, indexMetaData0.getNumberOfShards());
      assertEquals(IndexMetaData.State.OPEN, indexMetaData0.getState());
      assertEquals(1L, indexMetaData0.getVersion());
      assertEquals(1, indexMetaData0.getTotalNumberOfShards());
      assertEquals(0, indexMetaData0.getNumberOfReplicas());
      assertEquals("HTTP", httpVersion0.getProtocolName());
      assertEquals("HTTP/1.1", httpVersion0.toString());
      assertTrue(httpVersion0.isKeepAliveDefault());
      assertEquals(1, httpVersion0.getMinorVersion());
      assertEquals("HTTP/1.1", httpVersion0.getText());
      assertEquals(1, httpVersion0.getMajorVersion());
      assertEquals("GET", httpMethod0.getName());
      assertEquals("GET", httpMethod0.toString());
      assertEquals("index.version.created", defaultHttpRequest0.getUri());
      assertTrue(defaultChannelPipeline0.isAttached());
      assertEquals(0, (int)localServerChannel0.getId());
      assertTrue(localServerChannel0.isReadable());
      assertEquals("index.version.created", nettyHttpRequest0.uri());
      assertEquals("index.version.created", nettyHttpRequest0.rawPath());
      assertEquals(RestRequest.Method.GET, nettyHttpRequest0.method());
      assertFalse(nettyHttpRequest0.hasContent());
      assertNotNull(nettyHttpRequest0);
      
      ClusterName clusterName0 = new ClusterName(indexMetaData0.SETTING_NUMBER_OF_SHARDS);
      assertEquals("_na_", indexMetaData0.getIndexUUID());
      assertEquals(1, indexMetaData0.getNumberOfShards());
      assertEquals(IndexMetaData.State.OPEN, indexMetaData0.getState());
      assertEquals(1L, indexMetaData0.getVersion());
      assertEquals(1, indexMetaData0.getTotalNumberOfShards());
      assertEquals(0, indexMetaData0.getNumberOfReplicas());
      assertEquals("index.number_of_shards", clusterName0.value());
      assertNotNull(clusterName0);
      
      long long0 = 1059L;
      ClusterState clusterState0 = ClusterState.PROTO;
      assertEquals("AQAAAAIAQACDAAAABAAAAA", clusterState0.stateUUID());
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState0.status());
      assertEquals(0L, clusterState0.getVersion());
      assertEquals(0L, clusterState0.version());
      assertFalse(clusterState0.wasReadFromDiff());
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertNotNull(clusterState0);
      
      ClusterStateResponse clusterStateResponse0 = new ClusterStateResponse(clusterName0, clusterState0);
      assertEquals("_na_", indexMetaData0.getIndexUUID());
      assertEquals(1, indexMetaData0.getNumberOfShards());
      assertEquals(IndexMetaData.State.OPEN, indexMetaData0.getState());
      assertEquals(1L, indexMetaData0.getVersion());
      assertEquals(1, indexMetaData0.getTotalNumberOfShards());
      assertEquals(0, indexMetaData0.getNumberOfReplicas());
      assertEquals("index.number_of_shards", clusterName0.value());
      assertEquals("AQAAAAIAQACDAAAABAAAAA", clusterState0.stateUUID());
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState0.status());
      assertEquals(0L, clusterState0.getVersion());
      assertEquals(0L, clusterState0.version());
      assertFalse(clusterState0.wasReadFromDiff());
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertNotNull(clusterStateResponse0);
      
      NodesInfoResponse nodesInfoResponse0 = new NodesInfoResponse();
      assertNotNull(nodesInfoResponse0);
      
      NodesStatsResponse nodesStatsResponse0 = null;
      Table table0 = restNodesAction0.buildTable(nettyHttpRequest0, clusterStateResponse0, nodesInfoResponse0, nodesStatsResponse0);
      assertEquals("_na_", indexMetaData0.getIndexUUID());
      assertEquals(1, indexMetaData0.getNumberOfShards());
      assertEquals(IndexMetaData.State.OPEN, indexMetaData0.getState());
      assertEquals(1L, indexMetaData0.getVersion());
      assertEquals(1, indexMetaData0.getTotalNumberOfShards());
      assertEquals(0, indexMetaData0.getNumberOfReplicas());
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertEquals("HTTP", httpVersion0.getProtocolName());
      assertEquals("HTTP/1.1", httpVersion0.toString());
      assertTrue(httpVersion0.isKeepAliveDefault());
      assertEquals(1, httpVersion0.getMinorVersion());
      assertEquals("HTTP/1.1", httpVersion0.getText());
      assertEquals(1, httpVersion0.getMajorVersion());
      assertEquals("GET", httpMethod0.getName());
      assertEquals("GET", httpMethod0.toString());
      assertEquals("index.version.created", defaultHttpRequest0.getUri());
      assertTrue(defaultChannelPipeline0.isAttached());
      assertEquals(0, (int)localServerChannel0.getId());
      assertTrue(localServerChannel0.isReadable());
      assertEquals("index.version.created", nettyHttpRequest0.uri());
      assertEquals("index.version.created", nettyHttpRequest0.rawPath());
      assertEquals(RestRequest.Method.GET, nettyHttpRequest0.method());
      assertFalse(nettyHttpRequest0.hasContent());
      assertEquals("index.number_of_shards", clusterName0.value());
      assertEquals("AQAAAAIAQACDAAAABAAAAA", clusterState0.stateUUID());
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState0.status());
      assertEquals(0L, clusterState0.getVersion());
      assertEquals(0L, clusterState0.version());
      assertFalse(clusterState0.wasReadFromDiff());
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertNotNull(table0);
      
      long long1 = 43L;
      short short0 = restNodesAction0.calculatePercentage(long1, long1);
      assertEquals((short)100, short0);
      assertFalse(long1 == long0);
      assertEquals("_na_", indexMetaData0.getIndexUUID());
      assertEquals(1, indexMetaData0.getNumberOfShards());
      assertEquals(IndexMetaData.State.OPEN, indexMetaData0.getState());
      assertEquals(1L, indexMetaData0.getVersion());
      assertEquals(1, indexMetaData0.getTotalNumberOfShards());
      assertEquals(0, indexMetaData0.getNumberOfReplicas());
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      
      // Undeclared exception!
      try { 
        defaultLocalServerChannelFactory0.newChannel(defaultChannelPipeline0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // attached already
         //
         verifyException("org.jboss.netty.channel.DefaultChannelPipeline", e);
      }
  }

  @Test(timeout = 11000)
  public void test02()  throws Throwable  {
      IndexMetaData indexMetaData0 = IndexMetaData.PROTO;
      assertEquals(1, indexMetaData0.getNumberOfShards());
      assertEquals("_na_", indexMetaData0.getIndexUUID());
      assertEquals(0, indexMetaData0.getNumberOfReplicas());
      assertEquals(1, indexMetaData0.getTotalNumberOfShards());
      assertEquals(IndexMetaData.State.OPEN, indexMetaData0.getState());
      assertEquals(1L, indexMetaData0.getVersion());
      assertNotNull(indexMetaData0);
      
      Settings settings0 = indexMetaData0.getSettings();
      assertEquals(1, indexMetaData0.getNumberOfShards());
      assertEquals("_na_", indexMetaData0.getIndexUUID());
      assertEquals(0, indexMetaData0.getNumberOfReplicas());
      assertEquals(1, indexMetaData0.getTotalNumberOfShards());
      assertEquals(IndexMetaData.State.OPEN, indexMetaData0.getState());
      assertEquals(1L, indexMetaData0.getVersion());
      assertNotNull(settings0);
      
      RestController restController0 = new RestController(settings0);
      assertEquals(1, indexMetaData0.getNumberOfShards());
      assertEquals("_na_", indexMetaData0.getIndexUUID());
      assertEquals(0, indexMetaData0.getNumberOfReplicas());
      assertEquals(1, indexMetaData0.getTotalNumberOfShards());
      assertEquals(IndexMetaData.State.OPEN, indexMetaData0.getState());
      assertEquals(1L, indexMetaData0.getVersion());
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertNotNull(restController0);
      
      Client client0 = null;
      RestNodesAction restNodesAction0 = new RestNodesAction(settings0, restController0, client0);
      assertEquals(1, indexMetaData0.getNumberOfShards());
      assertEquals("_na_", indexMetaData0.getIndexUUID());
      assertEquals(0, indexMetaData0.getNumberOfReplicas());
      assertEquals(1, indexMetaData0.getTotalNumberOfShards());
      assertEquals(IndexMetaData.State.OPEN, indexMetaData0.getState());
      assertEquals(1L, indexMetaData0.getVersion());
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertNotNull(restNodesAction0);
      
      HttpVersion httpVersion0 = HttpVersion.HTTP_1_1;
      assertEquals("HTTP", httpVersion0.getProtocolName());
      assertEquals(1, httpVersion0.getMajorVersion());
      assertEquals("HTTP/1.1", httpVersion0.toString());
      assertEquals("HTTP/1.1", httpVersion0.getText());
      assertTrue(httpVersion0.isKeepAliveDefault());
      assertEquals(1, httpVersion0.getMinorVersion());
      assertNotNull(httpVersion0);
      
      Float float0 = null;
      HttpMethod httpMethod0 = HttpMethod.GET;
      assertEquals("GET", httpMethod0.toString());
      assertEquals("GET", httpMethod0.getName());
      assertNotNull(httpMethod0);
      
      DefaultHttpRequest defaultHttpRequest0 = new DefaultHttpRequest(httpVersion0, httpMethod0, indexMetaData0.SETTING_VERSION_CREATED);
      assertEquals(1, indexMetaData0.getNumberOfShards());
      assertEquals("_na_", indexMetaData0.getIndexUUID());
      assertEquals(0, indexMetaData0.getNumberOfReplicas());
      assertEquals(1, indexMetaData0.getTotalNumberOfShards());
      assertEquals(IndexMetaData.State.OPEN, indexMetaData0.getState());
      assertEquals(1L, indexMetaData0.getVersion());
      assertEquals("HTTP", httpVersion0.getProtocolName());
      assertEquals(1, httpVersion0.getMajorVersion());
      assertEquals("HTTP/1.1", httpVersion0.toString());
      assertEquals("HTTP/1.1", httpVersion0.getText());
      assertTrue(httpVersion0.isKeepAliveDefault());
      assertEquals(1, httpVersion0.getMinorVersion());
      assertEquals("GET", httpMethod0.toString());
      assertEquals("GET", httpMethod0.getName());
      assertEquals("index.version.created", defaultHttpRequest0.getUri());
      assertNotNull(defaultHttpRequest0);
      
      DefaultChannelPipeline defaultChannelPipeline0 = new DefaultChannelPipeline();
      assertFalse(defaultChannelPipeline0.isAttached());
      assertNotNull(defaultChannelPipeline0);
      
      DefaultLocalServerChannelFactory defaultLocalServerChannelFactory0 = new DefaultLocalServerChannelFactory();
      assertNotNull(defaultLocalServerChannelFactory0);
      
      LocalServerChannel localServerChannel0 = defaultLocalServerChannelFactory0.newChannel(defaultChannelPipeline0);
      assertTrue(defaultChannelPipeline0.isAttached());
      assertTrue(localServerChannel0.isReadable());
      assertEquals(0, (int)localServerChannel0.getId());
      assertNotNull(localServerChannel0);
      
      NettyHttpRequest nettyHttpRequest0 = new NettyHttpRequest(defaultHttpRequest0, localServerChannel0);
      assertEquals(1, indexMetaData0.getNumberOfShards());
      assertEquals("_na_", indexMetaData0.getIndexUUID());
      assertEquals(0, indexMetaData0.getNumberOfReplicas());
      assertEquals(1, indexMetaData0.getTotalNumberOfShards());
      assertEquals(IndexMetaData.State.OPEN, indexMetaData0.getState());
      assertEquals(1L, indexMetaData0.getVersion());
      assertEquals("HTTP", httpVersion0.getProtocolName());
      assertEquals(1, httpVersion0.getMajorVersion());
      assertEquals("HTTP/1.1", httpVersion0.toString());
      assertEquals("HTTP/1.1", httpVersion0.getText());
      assertTrue(httpVersion0.isKeepAliveDefault());
      assertEquals(1, httpVersion0.getMinorVersion());
      assertEquals("GET", httpMethod0.toString());
      assertEquals("GET", httpMethod0.getName());
      assertEquals("index.version.created", defaultHttpRequest0.getUri());
      assertTrue(defaultChannelPipeline0.isAttached());
      assertTrue(localServerChannel0.isReadable());
      assertEquals(0, (int)localServerChannel0.getId());
      assertEquals(RestRequest.Method.GET, nettyHttpRequest0.method());
      assertEquals("index.version.created", nettyHttpRequest0.rawPath());
      assertEquals("index.version.created", nettyHttpRequest0.uri());
      assertFalse(nettyHttpRequest0.hasContent());
      assertNotNull(nettyHttpRequest0);
      
      ClusterName clusterName0 = new ClusterName(indexMetaData0.SETTING_NUMBER_OF_SHARDS);
      assertEquals(1, indexMetaData0.getNumberOfShards());
      assertEquals("_na_", indexMetaData0.getIndexUUID());
      assertEquals(0, indexMetaData0.getNumberOfReplicas());
      assertEquals(1, indexMetaData0.getTotalNumberOfShards());
      assertEquals(IndexMetaData.State.OPEN, indexMetaData0.getState());
      assertEquals(1L, indexMetaData0.getVersion());
      assertEquals("index.number_of_shards", clusterName0.value());
      assertNotNull(clusterName0);
      
      String string0 = "";
      ClusterState clusterState0 = ClusterState.PROTO;
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState0.status());
      assertEquals("AQAAAAIAQACDAAAABAAAAA", clusterState0.stateUUID());
      assertFalse(clusterState0.wasReadFromDiff());
      assertEquals(0L, clusterState0.version());
      assertEquals(0L, clusterState0.getVersion());
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertNotNull(clusterState0);
      
      ClusterState clusterState1 = ClusterState.PROTO;
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState1.status());
      assertEquals(0L, clusterState1.getVersion());
      assertFalse(clusterState1.wasReadFromDiff());
      assertEquals(0L, clusterState1.version());
      assertEquals("AQAAAAIAQACDAAAABAAAAA", clusterState1.stateUUID());
      assertSame(clusterState1, clusterState0);
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertNotNull(clusterState1);
      
      ClusterStateResponse clusterStateResponse0 = new ClusterStateResponse(clusterName0, clusterState1);
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState1.status());
      assertEquals(0L, clusterState1.getVersion());
      assertFalse(clusterState1.wasReadFromDiff());
      assertEquals(0L, clusterState1.version());
      assertEquals("AQAAAAIAQACDAAAABAAAAA", clusterState1.stateUUID());
      assertEquals(1, indexMetaData0.getNumberOfShards());
      assertEquals("_na_", indexMetaData0.getIndexUUID());
      assertEquals(0, indexMetaData0.getNumberOfReplicas());
      assertEquals(1, indexMetaData0.getTotalNumberOfShards());
      assertEquals(IndexMetaData.State.OPEN, indexMetaData0.getState());
      assertEquals(1L, indexMetaData0.getVersion());
      assertEquals("index.number_of_shards", clusterName0.value());
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertNotNull(clusterStateResponse0);
      
      NodesInfoResponse nodesInfoResponse0 = new NodesInfoResponse();
      assertNotNull(nodesInfoResponse0);
      
      NodesStatsResponse nodesStatsResponse0 = null;
      Table table0 = restNodesAction0.buildTable(nettyHttpRequest0, clusterStateResponse0, nodesInfoResponse0, nodesStatsResponse0);
      assertEquals(1, indexMetaData0.getNumberOfShards());
      assertEquals("_na_", indexMetaData0.getIndexUUID());
      assertEquals(0, indexMetaData0.getNumberOfReplicas());
      assertEquals(1, indexMetaData0.getTotalNumberOfShards());
      assertEquals(IndexMetaData.State.OPEN, indexMetaData0.getState());
      assertEquals(1L, indexMetaData0.getVersion());
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertEquals("HTTP", httpVersion0.getProtocolName());
      assertEquals(1, httpVersion0.getMajorVersion());
      assertEquals("HTTP/1.1", httpVersion0.toString());
      assertEquals("HTTP/1.1", httpVersion0.getText());
      assertTrue(httpVersion0.isKeepAliveDefault());
      assertEquals(1, httpVersion0.getMinorVersion());
      assertEquals("GET", httpMethod0.toString());
      assertEquals("GET", httpMethod0.getName());
      assertEquals("index.version.created", defaultHttpRequest0.getUri());
      assertTrue(defaultChannelPipeline0.isAttached());
      assertTrue(localServerChannel0.isReadable());
      assertEquals(0, (int)localServerChannel0.getId());
      assertEquals(RestRequest.Method.GET, nettyHttpRequest0.method());
      assertEquals("index.version.created", nettyHttpRequest0.rawPath());
      assertEquals("index.version.created", nettyHttpRequest0.uri());
      assertFalse(nettyHttpRequest0.hasContent());
      assertEquals("index.number_of_shards", clusterName0.value());
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState1.status());
      assertEquals(0L, clusterState1.getVersion());
      assertFalse(clusterState1.wasReadFromDiff());
      assertEquals(0L, clusterState1.version());
      assertEquals("AQAAAAIAQACDAAAABAAAAA", clusterState1.stateUUID());
      assertSame(clusterState1, clusterState0);
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertNotNull(table0);
      
      Channel channel0 = defaultChannelPipeline0.getChannel();
      assertEquals(0, (int)channel0.getId());
      assertTrue(channel0.isReadable());
      assertTrue(defaultChannelPipeline0.isAttached());
      assertNotNull(channel0);
      
      RestChannel restChannel0 = null;
      // Undeclared exception!
      try { 
        restNodesAction0.doRequest(nettyHttpRequest0, restChannel0, client0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.rest.action.cat.RestNodesAction", e);
      }
  }

  @Test(timeout = 11000)
  public void test03()  throws Throwable  {
      Settings settings0 = Settings.EMPTY;
      assertNotNull(settings0);
      
      RestController restController0 = new RestController(settings0);
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertNotNull(restController0);
      
      Client client0 = null;
      RestNodesAction restNodesAction0 = new RestNodesAction(settings0, restController0, client0);
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertNotNull(restNodesAction0);
      
      long long0 = 0L;
      short short0 = restNodesAction0.calculatePercentage(long0, long0);
      assertEquals((short)0, short0);
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      
      RestRequest restRequest0 = null;
      ClusterStateResponse clusterStateResponse0 = new ClusterStateResponse();
      assertNotNull(clusterStateResponse0);
      
      byte[] byteArray0 = new byte[7];
      byte byte0 = (byte)4;
      byteArray0[0] = byte0;
      byte byte1 = (byte)0;
      byteArray0[1] = byte1;
      byte byte2 = (byte)0;
      byteArray0[2] = byte2;
      byte byte3 = (byte)4;
      byteArray0[3] = byte3;
      byte byte4 = (byte) (-44);
      byteArray0[4] = byte4;
      byte byte5 = (byte)0;
      byteArray0[5] = byte5;
      byte byte6 = (byte)15;
      byteArray0[6] = byte6;
      StreamInput streamInput0 = StreamInput.wrap(byteArray0);
      assertNotNull(streamInput0);
      assertArrayEquals(new byte[] {(byte)4, (byte)0, (byte)0, (byte)4, (byte) (-44), (byte)0, (byte)15}, byteArray0);
      assertEquals(7, byteArray0.length);
      
      ClusterName clusterName0 = ClusterName.readClusterName(streamInput0);
      assertEquals("\u0000\u0000\u0004\u0500", clusterName0.value());
      assertNotNull(clusterName0);
      assertArrayEquals(new byte[] {(byte)4, (byte)0, (byte)0, (byte)4, (byte) (-44), (byte)0, (byte)15}, byteArray0);
      assertEquals(7, byteArray0.length);
      
      NodeInfo[] nodeInfoArray0 = null;
      NodesInfoResponse nodesInfoResponse0 = new NodesInfoResponse(clusterName0, nodeInfoArray0);
      assertEquals("\u0000\u0000\u0004\u0500", clusterName0.value());
      assertEquals("\u0000\u0000\u0004\u0500", nodesInfoResponse0.getClusterNameAsString());
      assertNotNull(nodesInfoResponse0);
      assertArrayEquals(new byte[] {(byte)4, (byte)0, (byte)0, (byte)4, (byte) (-44), (byte)0, (byte)15}, byteArray0);
      assertEquals(7, byteArray0.length);
      
      NodeStats[] nodeStatsArray0 = null;
      NodesStatsResponse nodesStatsResponse0 = new NodesStatsResponse(clusterName0, nodeStatsArray0);
      assertEquals("\u0000\u0000\u0004\u0500", clusterName0.value());
      assertEquals("\u0000\u0000\u0004\u0500", nodesStatsResponse0.getClusterNameAsString());
      assertNotNull(nodesStatsResponse0);
      assertArrayEquals(new byte[] {(byte)4, (byte)0, (byte)0, (byte)4, (byte) (-44), (byte)0, (byte)15}, byteArray0);
      assertEquals(7, byteArray0.length);
      
      // Undeclared exception!
      try { 
        restNodesAction0.buildTable(restRequest0, clusterStateResponse0, nodesInfoResponse0, nodesStatsResponse0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.rest.action.cat.RestNodesAction", e);
      }
  }

  @Test(timeout = 11000)
  public void test04()  throws Throwable  {
      Settings settings0 = Settings.Builder.EMPTY_SETTINGS;
      assertNotNull(settings0);
      
      RestController restController0 = new RestController(settings0);
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertNotNull(restController0);
      
      String string0 = restController0.nodeName();
      assertEquals("", string0);
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertNotNull(string0);
      
      Client client0 = null;
      RestNodesAction restNodesAction0 = new RestNodesAction(settings0, restController0, client0);
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertNotNull(restNodesAction0);
      
      long long0 = (-2393L);
      long long1 = 1492L;
      short short0 = restNodesAction0.calculatePercentage(long0, long1);
      assertEquals((short) (-160), short0);
      assertFalse(long0 == long1);
      assertFalse(long1 == long0);
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
  }

  @Test(timeout = 11000)
  public void test05()  throws Throwable  {
      Settings settings0 = Settings.Builder.EMPTY_SETTINGS;
      assertNotNull(settings0);
      
      RestController restController0 = new RestController(settings0);
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertNotNull(restController0);
      
      String string0 = "KP:$]R(KZ</";
      String string1 = settings0.get(string0, string0);
      assertEquals("KP:$]R(KZ</", string1);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertNotNull(string1);
      
      Client client0 = null;
      RestNodesAction restNodesAction0 = new RestNodesAction(settings0, restController0, client0);
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertNotNull(restNodesAction0);
      
      long long0 = 0L;
      long long1 = 298L;
      short short0 = restNodesAction0.calculatePercentage(long0, long1);
      assertEquals((short)0, short0);
      assertFalse(long0 == long1);
      assertFalse(long1 == long0);
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
  }

  @Test(timeout = 11000)
  public void test06()  throws Throwable  {
      Settings settings0 = Settings.Builder.EMPTY_SETTINGS;
      assertNotNull(settings0);
      
      String string0 = "vOkSl/JsLF_:";
      Logger logger0 = Logger.getRootLogger();
      assertFalse(logger0.isTraceEnabled());
      assertTrue(logger0.getAdditivity());
      assertFalse(logger0.isDebugEnabled());
      assertEquals("root", logger0.getName());
      assertFalse(logger0.isInfoEnabled());
      assertNotNull(logger0);
      
      ESLogger eSLogger0 = new ESLogger(string0, logger0);
      assertFalse(logger0.isTraceEnabled());
      assertTrue(logger0.getAdditivity());
      assertFalse(logger0.isDebugEnabled());
      assertEquals("root", logger0.getName());
      assertFalse(logger0.isInfoEnabled());
      assertEquals("vOkSl/JsLF_:", eSLogger0.getPrefix());
      assertEquals("root", eSLogger0.getName());
      assertFalse(eSLogger0.isWarnEnabled());
      assertFalse(eSLogger0.isDebugEnabled());
      assertFalse(eSLogger0.isTraceEnabled());
      assertFalse(eSLogger0.isErrorEnabled());
      assertEquals("OFF", eSLogger0.getLevel());
      assertFalse(eSLogger0.isInfoEnabled());
      assertNotNull(eSLogger0);
      
      MetaData metaData0 = MetaData.EMPTY_META_DATA;
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertNotNull(metaData0);
      
      MetaData metaData1 = MetaData.addDefaultUnitsIfNeeded(eSLogger0, metaData0);
      assertFalse(logger0.isTraceEnabled());
      assertTrue(logger0.getAdditivity());
      assertFalse(logger0.isDebugEnabled());
      assertEquals("root", logger0.getName());
      assertFalse(logger0.isInfoEnabled());
      assertEquals("vOkSl/JsLF_:", eSLogger0.getPrefix());
      assertEquals("root", eSLogger0.getName());
      assertFalse(eSLogger0.isWarnEnabled());
      assertFalse(eSLogger0.isDebugEnabled());
      assertFalse(eSLogger0.isTraceEnabled());
      assertFalse(eSLogger0.isErrorEnabled());
      assertEquals("OFF", eSLogger0.getLevel());
      assertFalse(eSLogger0.isInfoEnabled());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0, metaData1.getNumberOfShards());
      assertEquals("_na_", metaData1.clusterUUID());
      assertEquals(0L, metaData1.version());
      assertEquals(0, metaData1.getTotalNumberOfShards());
      assertSame(metaData0, metaData1);
      assertSame(metaData1, metaData0);
      assertNotNull(metaData1);
      
      Settings settings1 = metaData1.transientSettings();
      assertTrue(settings1.equals((Object)settings0));
      assertFalse(logger0.isTraceEnabled());
      assertTrue(logger0.getAdditivity());
      assertFalse(logger0.isDebugEnabled());
      assertEquals("root", logger0.getName());
      assertFalse(logger0.isInfoEnabled());
      assertEquals("vOkSl/JsLF_:", eSLogger0.getPrefix());
      assertEquals("root", eSLogger0.getName());
      assertFalse(eSLogger0.isWarnEnabled());
      assertFalse(eSLogger0.isDebugEnabled());
      assertFalse(eSLogger0.isTraceEnabled());
      assertFalse(eSLogger0.isErrorEnabled());
      assertEquals("OFF", eSLogger0.getLevel());
      assertFalse(eSLogger0.isInfoEnabled());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0, metaData1.getNumberOfShards());
      assertEquals("_na_", metaData1.clusterUUID());
      assertEquals(0L, metaData1.version());
      assertEquals(0, metaData1.getTotalNumberOfShards());
      assertSame(metaData0, metaData1);
      assertSame(metaData1, metaData0);
      assertNotSame(settings1, settings0);
      assertNotNull(settings1);
      
      RestController restController0 = new RestController(settings1);
      assertTrue(settings1.equals((Object)settings0));
      assertFalse(logger0.isTraceEnabled());
      assertTrue(logger0.getAdditivity());
      assertFalse(logger0.isDebugEnabled());
      assertEquals("root", logger0.getName());
      assertFalse(logger0.isInfoEnabled());
      assertEquals("vOkSl/JsLF_:", eSLogger0.getPrefix());
      assertEquals("root", eSLogger0.getName());
      assertFalse(eSLogger0.isWarnEnabled());
      assertFalse(eSLogger0.isDebugEnabled());
      assertFalse(eSLogger0.isTraceEnabled());
      assertFalse(eSLogger0.isErrorEnabled());
      assertEquals("OFF", eSLogger0.getLevel());
      assertFalse(eSLogger0.isInfoEnabled());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0, metaData1.getNumberOfShards());
      assertEquals("_na_", metaData1.clusterUUID());
      assertEquals(0L, metaData1.version());
      assertEquals(0, metaData1.getTotalNumberOfShards());
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertNotNull(restController0);
      
      Client client0 = null;
      RestNodesAction restNodesAction0 = new RestNodesAction(settings0, restController0, client0);
      assertTrue(settings0.equals((Object)settings1));
      assertTrue(settings1.equals((Object)settings0));
      assertFalse(logger0.isTraceEnabled());
      assertTrue(logger0.getAdditivity());
      assertFalse(logger0.isDebugEnabled());
      assertEquals("root", logger0.getName());
      assertFalse(logger0.isInfoEnabled());
      assertEquals("vOkSl/JsLF_:", eSLogger0.getPrefix());
      assertEquals("root", eSLogger0.getName());
      assertFalse(eSLogger0.isWarnEnabled());
      assertFalse(eSLogger0.isDebugEnabled());
      assertFalse(eSLogger0.isTraceEnabled());
      assertFalse(eSLogger0.isErrorEnabled());
      assertEquals("OFF", eSLogger0.getLevel());
      assertFalse(eSLogger0.isInfoEnabled());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0, metaData1.getNumberOfShards());
      assertEquals("_na_", metaData1.clusterUUID());
      assertEquals(0L, metaData1.version());
      assertEquals(0, metaData1.getTotalNumberOfShards());
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertNotNull(restNodesAction0);
      
      long long0 = (-1L);
      short short0 = restNodesAction0.calculatePercentage(long0, long0);
      assertEquals((short)0, short0);
      assertTrue(settings0.equals((Object)settings1));
      assertTrue(settings1.equals((Object)settings0));
      assertFalse(logger0.isTraceEnabled());
      assertTrue(logger0.getAdditivity());
      assertFalse(logger0.isDebugEnabled());
      assertEquals("root", logger0.getName());
      assertFalse(logger0.isInfoEnabled());
      assertEquals("vOkSl/JsLF_:", eSLogger0.getPrefix());
      assertEquals("root", eSLogger0.getName());
      assertFalse(eSLogger0.isWarnEnabled());
      assertFalse(eSLogger0.isDebugEnabled());
      assertFalse(eSLogger0.isTraceEnabled());
      assertFalse(eSLogger0.isErrorEnabled());
      assertEquals("OFF", eSLogger0.getLevel());
      assertFalse(eSLogger0.isInfoEnabled());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0, metaData1.getNumberOfShards());
      assertEquals("_na_", metaData1.clusterUUID());
      assertEquals(0L, metaData1.version());
      assertEquals(0, metaData1.getTotalNumberOfShards());
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertNotSame(settings0, settings1);
      assertSame(metaData0, metaData1);
      assertSame(metaData1, metaData0);
      assertNotSame(settings1, settings0);
  }

  @Test(timeout = 11000)
  public void test07()  throws Throwable  {
      MetaData metaData0 = MetaData.EMPTY_META_DATA;
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertNotNull(metaData0);
      
      Settings settings0 = metaData0.settings();
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertNotNull(settings0);
      
      RestController restController0 = new RestController(settings0);
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertNotNull(restController0);
      
      Client client0 = null;
      RestNodesAction restNodesAction0 = new RestNodesAction(settings0, restController0, client0);
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertNotNull(restNodesAction0);
      
      StringBuilder stringBuilder0 = null;
      // Undeclared exception!
      try { 
        restNodesAction0.documentation(stringBuilder0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.rest.action.cat.RestNodesAction", e);
      }
  }

  @Test(timeout = 11000)
  public void test08()  throws Throwable  {
      Settings settings0 = Settings.Builder.EMPTY_SETTINGS;
      assertNotNull(settings0);
      
      Settings settings1 = IndexMetaData.addHumanReadableSettings(settings0);
      assertTrue(settings1.equals((Object)settings0));
      assertNotSame(settings0, settings1);
      assertNotSame(settings1, settings0);
      assertNotNull(settings1);
      
      RestController restController0 = new RestController(settings1);
      assertTrue(settings0.equals((Object)settings1));
      assertTrue(settings1.equals((Object)settings0));
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertNotNull(restController0);
      
      String string0 = ">";
      boolean boolean0 = true;
      LifecycleListener lifecycleListener0 = mock(LifecycleListener.class, new ViolatedAssumptionAnswer());
      restController0.removeLifecycleListener(lifecycleListener0);
      assertTrue(settings0.equals((Object)settings1));
      assertTrue(settings1.equals((Object)settings0));
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertNotSame(settings0, settings1);
      assertNotSame(settings1, settings0);
      
      Boolean boolean1 = new Boolean(boolean0);
      assertTrue(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      
      Boolean boolean2 = settings1.getAsBoolean(string0, boolean1);
      assertTrue(boolean2);
      assertTrue(settings0.equals((Object)settings1));
      assertTrue(settings1.equals((Object)settings0));
      assertTrue(boolean1.equals((Object)boolean0));
      assertTrue(boolean2.equals((Object)boolean0));
      assertNotSame(settings0, settings1);
      assertNotSame(settings1, settings0);
      assertNotNull(boolean2);
      
      Client client0 = null;
      RestNodesAction restNodesAction0 = new RestNodesAction(settings1, restController0, client0);
      assertTrue(settings0.equals((Object)settings1));
      assertTrue(settings1.equals((Object)settings0));
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertNotNull(restNodesAction0);
      
      long long0 = (-427L);
      short short0 = restNodesAction0.calculatePercentage(long0, long0);
      assertEquals((short)0, short0);
      assertTrue(settings0.equals((Object)settings1));
      assertTrue(settings1.equals((Object)settings0));
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertNotSame(settings0, settings1);
      assertNotSame(settings1, settings0);
      
      long long1 = 0L;
      long long2 = 977L;
      LifecycleListener lifecycleListener1 = mock(LifecycleListener.class, new ViolatedAssumptionAnswer());
      restController0.removeLifecycleListener(lifecycleListener1);
      assertTrue(settings0.equals((Object)settings1));
      assertTrue(settings1.equals((Object)settings0));
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertNotSame(settings0, settings1);
      assertNotSame(settings1, settings0);
      
      short short1 = restNodesAction0.calculatePercentage(long1, long2);
      assertEquals((short)0, short1);
      assertTrue(settings0.equals((Object)settings1));
      assertTrue(short1 == short0);
      assertTrue(settings1.equals((Object)settings0));
      assertFalse(long1 == long2);
      assertFalse(long1 == long0);
      assertFalse(long2 == long0);
      assertFalse(long2 == long1);
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertNotSame(settings0, settings1);
      assertNotSame(settings1, settings0);
      
      int int0 = 1983;
      StringBuilder stringBuilder0 = new StringBuilder(int0);
      assertEquals("", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      restNodesAction0.documentation(stringBuilder0);
      assertTrue(settings0.equals((Object)settings1));
      assertTrue(settings1.equals((Object)settings0));
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertEquals("/_cat/nodes\n", stringBuilder0.toString());
      assertNotSame(settings0, settings1);
      assertNotSame(settings1, settings0);
      
      int int1 = 0;
      HttpVersion httpVersion0 = new HttpVersion(string0, int1, int0, boolean0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(">/0.1983", httpVersion0.toString());
      assertEquals(">/0.1983", httpVersion0.getText());
      assertEquals(1983, httpVersion0.getMinorVersion());
      assertTrue(httpVersion0.isKeepAliveDefault());
      assertEquals(0, httpVersion0.getMajorVersion());
      assertEquals(">", httpVersion0.getProtocolName());
      assertNotNull(httpVersion0);
      
      HttpMethod httpMethod0 = null;
      String string1 = "OU<&fUqE";
      DefaultHttpRequest defaultHttpRequest0 = null;
      try {
        defaultHttpRequest0 = new DefaultHttpRequest(httpVersion0, httpMethod0, string1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // method
         //
         verifyException("org.jboss.netty.handler.codec.http.DefaultHttpRequest", e);
      }
  }

  @Test(timeout = 11000)
  public void test09()  throws Throwable  {
      MetaData metaData0 = MetaData.EMPTY_META_DATA;
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertNotNull(metaData0);
      
      Settings settings0 = metaData0.persistentSettings();
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertNotNull(settings0);
      
      Settings settings1 = IndexMetaData.addHumanReadableSettings(settings0);
      assertTrue(settings1.equals((Object)settings0));
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertNotSame(settings0, settings1);
      assertNotSame(settings1, settings0);
      assertNotNull(settings1);
      
      RestController restController0 = new RestController(settings1);
      assertTrue(settings0.equals((Object)settings1));
      assertTrue(settings1.equals((Object)settings0));
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertNotNull(restController0);
      
      Client client0 = null;
      String string0 = "E-m";
      String[] stringArray0 = settings0.getAsArray(string0);
      assertTrue(settings0.equals((Object)settings1));
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertNotSame(settings0, settings1);
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      String[] stringArray1 = new String[2];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      stringArray1[0] = metaData0.CONTEXT_MODE_SNAPSHOT;
      stringArray1[1] = metaData0.CONTEXT_MODE_GATEWAY;
      restController0.registerRelevantHeaders(stringArray1);
      assertTrue(settings0.equals((Object)settings1));
      assertTrue(settings1.equals((Object)settings0));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertNotSame(settings0, settings1);
      assertNotSame(settings1, settings0);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(2, stringArray1.length);
      
      double double0 = 663.4912100664616;
      Double double1 = new Double(double0);
      assertEquals(663.4912100664616, (double)double1, 0.01);
      assertEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      
      Double double2 = settings1.getAsDouble(stringArray1, double1);
      assertEquals(663.4912100664616, (double)double2, 0.01);
      assertTrue(settings0.equals((Object)settings1));
      assertTrue(settings1.equals((Object)settings0));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals((double)double1, (double)double0, 0.01);
      assertEquals((double)double2, (double)double0, 0.01);
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertNotSame(settings0, settings1);
      assertNotSame(settings1, settings0);
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(double2);
      assertEquals(2, stringArray1.length);
      
      RestNodesAction restNodesAction0 = new RestNodesAction(settings1, restController0, client0);
      assertTrue(settings0.equals((Object)settings1));
      assertTrue(settings1.equals((Object)settings0));
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertNotNull(restNodesAction0);
      
      Settings.Builder settings_Builder0 = Settings.settingsBuilder();
      assertNotNull(settings_Builder0);
      
      RestRequest restRequest0 = null;
      Table table0 = restNodesAction0.getTableWithHeader(restRequest0);
      assertTrue(settings0.equals((Object)settings1));
      assertTrue(settings1.equals((Object)settings0));
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertNotSame(settings0, settings1);
      assertNotSame(settings1, settings0);
      assertNotNull(table0);
  }

  @Test(timeout = 11000)
  public void test10()  throws Throwable  {
      String string0 = "";
      Logger logger0 = Logger.getRootLogger();
      assertEquals("root", logger0.getName());
      assertFalse(logger0.isDebugEnabled());
      assertFalse(logger0.isInfoEnabled());
      assertTrue(logger0.getAdditivity());
      assertFalse(logger0.isTraceEnabled());
      assertNotNull(logger0);
      
      ESLogger eSLogger0 = new ESLogger(string0, logger0);
      assertEquals("root", logger0.getName());
      assertFalse(logger0.isDebugEnabled());
      assertFalse(logger0.isInfoEnabled());
      assertTrue(logger0.getAdditivity());
      assertFalse(logger0.isTraceEnabled());
      assertFalse(eSLogger0.isWarnEnabled());
      assertEquals("root", eSLogger0.getName());
      assertEquals("", eSLogger0.getPrefix());
      assertFalse(eSLogger0.isInfoEnabled());
      assertEquals("OFF", eSLogger0.getLevel());
      assertFalse(eSLogger0.isTraceEnabled());
      assertFalse(eSLogger0.isErrorEnabled());
      assertFalse(eSLogger0.isDebugEnabled());
      assertNotNull(eSLogger0);
      
      MetaData metaData0 = MetaData.PROTO;
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertNotNull(metaData0);
      
      MetaData metaData1 = MetaData.addDefaultUnitsIfNeeded(eSLogger0, metaData0);
      assertEquals("root", logger0.getName());
      assertFalse(logger0.isDebugEnabled());
      assertFalse(logger0.isInfoEnabled());
      assertTrue(logger0.getAdditivity());
      assertFalse(logger0.isTraceEnabled());
      assertFalse(eSLogger0.isWarnEnabled());
      assertEquals("root", eSLogger0.getName());
      assertEquals("", eSLogger0.getPrefix());
      assertFalse(eSLogger0.isInfoEnabled());
      assertEquals("OFF", eSLogger0.getLevel());
      assertFalse(eSLogger0.isTraceEnabled());
      assertFalse(eSLogger0.isErrorEnabled());
      assertFalse(eSLogger0.isDebugEnabled());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0, metaData1.getNumberOfShards());
      assertEquals(0L, metaData1.version());
      assertEquals("_na_", metaData1.clusterUUID());
      assertEquals(0, metaData1.getTotalNumberOfShards());
      assertSame(metaData0, metaData1);
      assertSame(metaData1, metaData0);
      assertNotNull(metaData1);
      
      Settings settings0 = metaData1.settings();
      assertEquals("root", logger0.getName());
      assertFalse(logger0.isDebugEnabled());
      assertFalse(logger0.isInfoEnabled());
      assertTrue(logger0.getAdditivity());
      assertFalse(logger0.isTraceEnabled());
      assertFalse(eSLogger0.isWarnEnabled());
      assertEquals("root", eSLogger0.getName());
      assertEquals("", eSLogger0.getPrefix());
      assertFalse(eSLogger0.isInfoEnabled());
      assertEquals("OFF", eSLogger0.getLevel());
      assertFalse(eSLogger0.isTraceEnabled());
      assertFalse(eSLogger0.isErrorEnabled());
      assertFalse(eSLogger0.isDebugEnabled());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0, metaData1.getNumberOfShards());
      assertEquals(0L, metaData1.version());
      assertEquals("_na_", metaData1.clusterUUID());
      assertEquals(0, metaData1.getTotalNumberOfShards());
      assertSame(metaData0, metaData1);
      assertSame(metaData1, metaData0);
      assertNotNull(settings0);
      
      RestController restController0 = new RestController(settings0);
      assertEquals("root", logger0.getName());
      assertFalse(logger0.isDebugEnabled());
      assertFalse(logger0.isInfoEnabled());
      assertTrue(logger0.getAdditivity());
      assertFalse(logger0.isTraceEnabled());
      assertFalse(eSLogger0.isWarnEnabled());
      assertEquals("root", eSLogger0.getName());
      assertEquals("", eSLogger0.getPrefix());
      assertFalse(eSLogger0.isInfoEnabled());
      assertEquals("OFF", eSLogger0.getLevel());
      assertFalse(eSLogger0.isTraceEnabled());
      assertFalse(eSLogger0.isErrorEnabled());
      assertFalse(eSLogger0.isDebugEnabled());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0, metaData1.getNumberOfShards());
      assertEquals(0L, metaData1.version());
      assertEquals("_na_", metaData1.clusterUUID());
      assertEquals(0, metaData1.getTotalNumberOfShards());
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertNotNull(restController0);
      
      MetaData.Builder metaData_Builder0 = MetaData.builder();
      assertNotNull(metaData_Builder0);
      
      Client client0 = null;
      double double0 = (-2427.3880518889);
      Double double1 = new Double(double0);
      assertEquals((-2427.3880518889), (double)double1, 0.01);
      assertEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      
      Double double2 = settings0.getAsDouble(metaData1.CONTEXT_MODE_GATEWAY, double1);
      assertEquals((-2427.3880518889), (double)double2, 0.01);
      assertEquals((double)double1, (double)double0, 0.01);
      assertEquals((double)double2, (double)double0, 0.01);
      assertEquals("root", logger0.getName());
      assertFalse(logger0.isDebugEnabled());
      assertFalse(logger0.isInfoEnabled());
      assertTrue(logger0.getAdditivity());
      assertFalse(logger0.isTraceEnabled());
      assertFalse(eSLogger0.isWarnEnabled());
      assertEquals("root", eSLogger0.getName());
      assertEquals("", eSLogger0.getPrefix());
      assertFalse(eSLogger0.isInfoEnabled());
      assertEquals("OFF", eSLogger0.getLevel());
      assertFalse(eSLogger0.isTraceEnabled());
      assertFalse(eSLogger0.isErrorEnabled());
      assertFalse(eSLogger0.isDebugEnabled());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0, metaData1.getNumberOfShards());
      assertEquals(0L, metaData1.version());
      assertEquals("_na_", metaData1.clusterUUID());
      assertEquals(0, metaData1.getTotalNumberOfShards());
      assertSame(metaData0, metaData1);
      assertSame(metaData1, metaData0);
      assertNotNull(double2);
      
      RestNodesAction restNodesAction0 = new RestNodesAction(settings0, restController0, client0);
      assertEquals("root", logger0.getName());
      assertFalse(logger0.isDebugEnabled());
      assertFalse(logger0.isInfoEnabled());
      assertTrue(logger0.getAdditivity());
      assertFalse(logger0.isTraceEnabled());
      assertFalse(eSLogger0.isWarnEnabled());
      assertEquals("root", eSLogger0.getName());
      assertEquals("", eSLogger0.getPrefix());
      assertFalse(eSLogger0.isInfoEnabled());
      assertEquals("OFF", eSLogger0.getLevel());
      assertFalse(eSLogger0.isTraceEnabled());
      assertFalse(eSLogger0.isErrorEnabled());
      assertFalse(eSLogger0.isDebugEnabled());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0, metaData1.getNumberOfShards());
      assertEquals(0L, metaData1.version());
      assertEquals("_na_", metaData1.clusterUUID());
      assertEquals(0, metaData1.getTotalNumberOfShards());
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertNotNull(restNodesAction0);
      
      long long0 = 1760L;
      short short0 = restNodesAction0.calculatePercentage(long0, long0);
      assertEquals((short)100, short0);
      assertEquals("root", logger0.getName());
      assertFalse(logger0.isDebugEnabled());
      assertFalse(logger0.isInfoEnabled());
      assertTrue(logger0.getAdditivity());
      assertFalse(logger0.isTraceEnabled());
      assertFalse(eSLogger0.isWarnEnabled());
      assertEquals("root", eSLogger0.getName());
      assertEquals("", eSLogger0.getPrefix());
      assertFalse(eSLogger0.isInfoEnabled());
      assertEquals("OFF", eSLogger0.getLevel());
      assertFalse(eSLogger0.isTraceEnabled());
      assertFalse(eSLogger0.isErrorEnabled());
      assertFalse(eSLogger0.isDebugEnabled());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0, metaData1.getNumberOfShards());
      assertEquals(0L, metaData1.version());
      assertEquals("_na_", metaData1.clusterUUID());
      assertEquals(0, metaData1.getTotalNumberOfShards());
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertSame(metaData0, metaData1);
      assertSame(metaData1, metaData0);
  }

  @Test(timeout = 11000)
  public void test11()  throws Throwable  {
      IndexMetaData indexMetaData0 = IndexMetaData.PROTO;
      assertEquals(1, indexMetaData0.getTotalNumberOfShards());
      assertEquals(1, indexMetaData0.getNumberOfShards());
      assertEquals("_na_", indexMetaData0.getIndexUUID());
      assertEquals(IndexMetaData.State.OPEN, indexMetaData0.getState());
      assertEquals(0, indexMetaData0.getNumberOfReplicas());
      assertEquals(1L, indexMetaData0.getVersion());
      assertNotNull(indexMetaData0);
      
      Settings settings0 = indexMetaData0.getSettings();
      assertEquals(1, indexMetaData0.getTotalNumberOfShards());
      assertEquals(1, indexMetaData0.getNumberOfShards());
      assertEquals("_na_", indexMetaData0.getIndexUUID());
      assertEquals(IndexMetaData.State.OPEN, indexMetaData0.getState());
      assertEquals(0, indexMetaData0.getNumberOfReplicas());
      assertEquals(1L, indexMetaData0.getVersion());
      assertNotNull(settings0);
      
      RestController restController0 = new RestController(settings0);
      assertEquals(1, indexMetaData0.getTotalNumberOfShards());
      assertEquals(1, indexMetaData0.getNumberOfShards());
      assertEquals("_na_", indexMetaData0.getIndexUUID());
      assertEquals(IndexMetaData.State.OPEN, indexMetaData0.getState());
      assertEquals(0, indexMetaData0.getNumberOfReplicas());
      assertEquals(1L, indexMetaData0.getVersion());
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertNotNull(restController0);
      
      Client client0 = null;
      RestNodesAction restNodesAction0 = new RestNodesAction(settings0, restController0, client0);
      assertEquals(1, indexMetaData0.getTotalNumberOfShards());
      assertEquals(1, indexMetaData0.getNumberOfShards());
      assertEquals("_na_", indexMetaData0.getIndexUUID());
      assertEquals(IndexMetaData.State.OPEN, indexMetaData0.getState());
      assertEquals(0, indexMetaData0.getNumberOfReplicas());
      assertEquals(1L, indexMetaData0.getVersion());
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertNotNull(restNodesAction0);
      
      StringBuilder stringBuilder0 = new StringBuilder(indexMetaData0.SETTING_NUMBER_OF_SHARDS);
      assertEquals(1, indexMetaData0.getTotalNumberOfShards());
      assertEquals(1, indexMetaData0.getNumberOfShards());
      assertEquals("_na_", indexMetaData0.getIndexUUID());
      assertEquals(IndexMetaData.State.OPEN, indexMetaData0.getState());
      assertEquals(0, indexMetaData0.getNumberOfReplicas());
      assertEquals(1L, indexMetaData0.getVersion());
      assertEquals("index.number_of_shards", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      char[] charArray0 = new char[1];
      char char0 = ':';
      HttpVersion httpVersion0 = HttpVersion.HTTP_1_0;
      assertEquals("HTTP/1.0", httpVersion0.getText());
      assertEquals(0, httpVersion0.getMinorVersion());
      assertEquals(1, httpVersion0.getMajorVersion());
      assertEquals("HTTP/1.0", httpVersion0.toString());
      assertEquals("HTTP", httpVersion0.getProtocolName());
      assertFalse(httpVersion0.isKeepAliveDefault());
      assertNotNull(httpVersion0);
      
      HttpMethod httpMethod0 = HttpMethod.GET;
      assertEquals("GET", httpMethod0.getName());
      assertEquals("GET", httpMethod0.toString());
      assertNotNull(httpMethod0);
      
      DefaultHttpRequest defaultHttpRequest0 = new DefaultHttpRequest(httpVersion0, httpMethod0, indexMetaData0.SETTING_VERSION_CREATED);
      assertEquals(1, indexMetaData0.getTotalNumberOfShards());
      assertEquals(1, indexMetaData0.getNumberOfShards());
      assertEquals("_na_", indexMetaData0.getIndexUUID());
      assertEquals(IndexMetaData.State.OPEN, indexMetaData0.getState());
      assertEquals(0, indexMetaData0.getNumberOfReplicas());
      assertEquals(1L, indexMetaData0.getVersion());
      assertEquals("HTTP/1.0", httpVersion0.getText());
      assertEquals(0, httpVersion0.getMinorVersion());
      assertEquals(1, httpVersion0.getMajorVersion());
      assertEquals("HTTP/1.0", httpVersion0.toString());
      assertEquals("HTTP", httpVersion0.getProtocolName());
      assertFalse(httpVersion0.isKeepAliveDefault());
      assertEquals("GET", httpMethod0.getName());
      assertEquals("GET", httpMethod0.toString());
      assertEquals("index.version.created", defaultHttpRequest0.getUri());
      assertNotNull(defaultHttpRequest0);
      
      DefaultChannelPipeline defaultChannelPipeline0 = new DefaultChannelPipeline();
      assertFalse(defaultChannelPipeline0.isAttached());
      assertNotNull(defaultChannelPipeline0);
      
      Channel channel0 = defaultChannelPipeline0.getChannel();
      assertFalse(defaultChannelPipeline0.isAttached());
      assertNull(channel0);
      
      DefaultLocalClientChannelFactory defaultLocalClientChannelFactory0 = new DefaultLocalClientChannelFactory();
      assertNotNull(defaultLocalClientChannelFactory0);
      
      ChannelSink channelSink0 = defaultChannelPipeline0.getSink();
      assertFalse(defaultChannelPipeline0.isAttached());
      assertNotNull(channelSink0);
      
      SocketChannel socketChannel0 = SocketChannel.open();
      assertTrue(socketChannel0.isOpen());
      assertFalse(socketChannel0.isConnected());
      assertTrue(socketChannel0.isBlocking());
      assertFalse(socketChannel0.isConnectionPending());
      assertEquals(13, socketChannel0.validOps());
      assertFalse(socketChannel0.isRegistered());
      assertNotNull(socketChannel0);
      
      ForkJoinPool forkJoinPool0 = ForkJoinPool.commonPool();
      assertNotNull(forkJoinPool0);
      
      HttpMethod httpMethod1 = HttpMethod.valueOf(indexMetaData0.SETTING_CREATION_DATE_STRING);
      assertFalse(httpMethod1.equals((Object)httpMethod0));
      assertEquals(1, indexMetaData0.getTotalNumberOfShards());
      assertEquals(1, indexMetaData0.getNumberOfShards());
      assertEquals("_na_", indexMetaData0.getIndexUUID());
      assertEquals(IndexMetaData.State.OPEN, indexMetaData0.getState());
      assertEquals(0, indexMetaData0.getNumberOfReplicas());
      assertEquals(1L, indexMetaData0.getVersion());
      assertEquals("index.creation_date_string", httpMethod1.getName());
      assertEquals("index.creation_date_string", httpMethod1.toString());
      assertNotSame(httpMethod1, httpMethod0);
      assertNotNull(httpMethod1);
      
      NioWorker nioWorker0 = new NioWorker(forkJoinPool0);
      assertNotNull(nioWorker0);
      
      NioSocketChannel nioSocketChannel0 = new NioSocketChannel(channel0, defaultLocalClientChannelFactory0, defaultChannelPipeline0, channelSink0, socketChannel0, nioWorker0);
      assertFalse(nioSocketChannel0.isBound());
      assertTrue(nioSocketChannel0.isReadable());
      assertEquals(0, (int)nioSocketChannel0.getId());
      assertFalse(nioSocketChannel0.isConnected());
      assertTrue(nioSocketChannel0.isOpen());
      assertTrue(defaultChannelPipeline0.isAttached());
      assertTrue(socketChannel0.isOpen());
      assertFalse(socketChannel0.isConnected());
      assertTrue(socketChannel0.isBlocking());
      assertFalse(socketChannel0.isConnectionPending());
      assertEquals(13, socketChannel0.validOps());
      assertFalse(socketChannel0.isRegistered());
      assertNotNull(nioSocketChannel0);
      
      NettyHttpRequest nettyHttpRequest0 = new NettyHttpRequest(defaultHttpRequest0, nioSocketChannel0);
      assertFalse(httpMethod0.equals((Object)httpMethod1));
      assertEquals(1, indexMetaData0.getTotalNumberOfShards());
      assertEquals(1, indexMetaData0.getNumberOfShards());
      assertEquals("_na_", indexMetaData0.getIndexUUID());
      assertEquals(IndexMetaData.State.OPEN, indexMetaData0.getState());
      assertEquals(0, indexMetaData0.getNumberOfReplicas());
      assertEquals(1L, indexMetaData0.getVersion());
      assertEquals("HTTP/1.0", httpVersion0.getText());
      assertEquals(0, httpVersion0.getMinorVersion());
      assertEquals(1, httpVersion0.getMajorVersion());
      assertEquals("HTTP/1.0", httpVersion0.toString());
      assertEquals("HTTP", httpVersion0.getProtocolName());
      assertFalse(httpVersion0.isKeepAliveDefault());
      assertEquals("GET", httpMethod0.getName());
      assertEquals("GET", httpMethod0.toString());
      assertEquals("index.version.created", defaultHttpRequest0.getUri());
      assertTrue(defaultChannelPipeline0.isAttached());
      assertTrue(socketChannel0.isOpen());
      assertFalse(socketChannel0.isConnected());
      assertTrue(socketChannel0.isBlocking());
      assertFalse(socketChannel0.isConnectionPending());
      assertEquals(13, socketChannel0.validOps());
      assertFalse(socketChannel0.isRegistered());
      assertFalse(nioSocketChannel0.isBound());
      assertTrue(nioSocketChannel0.isReadable());
      assertEquals(0, (int)nioSocketChannel0.getId());
      assertFalse(nioSocketChannel0.isConnected());
      assertTrue(nioSocketChannel0.isOpen());
      assertEquals("index.version.created", nettyHttpRequest0.uri());
      assertEquals(RestRequest.Method.GET, nettyHttpRequest0.method());
      assertFalse(nettyHttpRequest0.hasContent());
      assertEquals("index.version.created", nettyHttpRequest0.rawPath());
      assertNotNull(nettyHttpRequest0);
      
      RestChannel restChannel0 = null;
      try { 
        restNodesAction0.handleRequest(nettyHttpRequest0, restChannel0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.rest.action.cat.RestNodesAction", e);
      }
  }

  @Test(timeout = 11000)
  public void test12()  throws Throwable  {
      Settings settings0 = null;
      RestController restController0 = null;
      Client client0 = null;
      RestNodesAction restNodesAction0 = null;
      try {
        restNodesAction0 = new RestNodesAction(settings0, restController0, client0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.common.logging.Loggers", e);
      }
  }

  @Test(timeout = 11000)
  public void test13()  throws Throwable  {
      ToXContent.Params toXContent_Params0 = ToXContent.EMPTY_PARAMS;
      assertNotNull(toXContent_Params0);
      
      MetaData metaData0 = MetaData.EMPTY_META_DATA;
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertNotNull(metaData0);
      
      Settings settings0 = metaData0.persistentSettings();
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertNotNull(settings0);
      
      Settings settings1 = SettingsFilter.filterSettings(toXContent_Params0, settings0);
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertSame(settings0, settings1);
      assertSame(settings1, settings0);
      assertNotNull(settings1);
      
      RestController restController0 = new RestController(settings0);
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertNotNull(restController0);
      
      Client client0 = null;
      RestNodesAction restNodesAction0 = new RestNodesAction(settings1, restController0, client0);
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertNotNull(restNodesAction0);
      
      HttpVersion httpVersion0 = HttpVersion.HTTP_1_1;
      assertEquals("HTTP/1.1", httpVersion0.toString());
      assertTrue(httpVersion0.isKeepAliveDefault());
      assertEquals(1, httpVersion0.getMinorVersion());
      assertEquals("HTTP", httpVersion0.getProtocolName());
      assertEquals(1, httpVersion0.getMajorVersion());
      assertEquals("HTTP/1.1", httpVersion0.getText());
      assertNotNull(httpVersion0);
      
      String string0 = "OHPwj";
      HttpMethod httpMethod0 = new HttpMethod(string0);
      assertEquals("OHPwj", httpMethod0.toString());
      assertEquals("OHPwj", httpMethod0.getName());
      assertNotNull(httpMethod0);
      
      DefaultHttpRequest defaultHttpRequest0 = new DefaultHttpRequest(httpVersion0, httpMethod0, metaData0.CONTEXT_MODE_PARAM);
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals("HTTP/1.1", httpVersion0.toString());
      assertTrue(httpVersion0.isKeepAliveDefault());
      assertEquals(1, httpVersion0.getMinorVersion());
      assertEquals("HTTP", httpVersion0.getProtocolName());
      assertEquals(1, httpVersion0.getMajorVersion());
      assertEquals("HTTP/1.1", httpVersion0.getText());
      assertEquals("OHPwj", httpMethod0.toString());
      assertEquals("OHPwj", httpMethod0.getName());
      assertEquals("context_mode", defaultHttpRequest0.getUri());
      assertNotNull(defaultHttpRequest0);
      
      Channel channel0 = null;
      DefaultLocalServerChannelFactory defaultLocalServerChannelFactory0 = new DefaultLocalServerChannelFactory();
      assertNotNull(defaultLocalServerChannelFactory0);
      
      DefaultChannelPipeline defaultChannelPipeline0 = new DefaultChannelPipeline();
      assertFalse(defaultChannelPipeline0.isAttached());
      assertNotNull(defaultChannelPipeline0);
      
      ChannelSink channelSink0 = defaultChannelPipeline0.getSink();
      assertFalse(defaultChannelPipeline0.isAttached());
      assertNotNull(channelSink0);
      
      float float0 = (-201.7059F);
      Float float1 = new Float(float0);
      assertEquals((-201.7059F), (float)float1, 0.01F);
      assertEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      
      Float float2 = settings1.getAsFloat(string0, float1);
      assertEquals((-201.7059F), (float)float2, 0.01F);
      assertEquals((float)float1, (float)float0, 0.01F);
      assertEquals((float)float2, (float)float0, 0.01F);
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertSame(settings0, settings1);
      assertSame(settings1, settings0);
      assertNotNull(float2);
      
      String string1 = "default:false;alias:po;desc:bound transport port";
      Map<String, Settings> map0 = settings0.getGroups(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertNotSame(string1, string0);
      assertSame(settings0, settings1);
      assertNotNull(map0);
      
      SocketChannel socketChannel0 = SocketChannel.open();
      assertFalse(socketChannel0.isRegistered());
      assertFalse(socketChannel0.isConnected());
      assertFalse(socketChannel0.isConnectionPending());
      assertEquals(13, socketChannel0.validOps());
      assertTrue(socketChannel0.isOpen());
      assertTrue(socketChannel0.isBlocking());
      assertNotNull(socketChannel0);
      
      ForkJoinPool forkJoinPool0 = ForkJoinPool.commonPool();
      assertNotNull(forkJoinPool0);
      
      NioWorker nioWorker0 = new NioWorker(forkJoinPool0);
      assertNotNull(nioWorker0);
      
      NioSocketChannel nioSocketChannel0 = new NioSocketChannel(channel0, defaultLocalServerChannelFactory0, defaultChannelPipeline0, channelSink0, socketChannel0, nioWorker0);
      assertFalse(socketChannel0.isRegistered());
      assertFalse(socketChannel0.isConnected());
      assertFalse(socketChannel0.isConnectionPending());
      assertEquals(13, socketChannel0.validOps());
      assertTrue(socketChannel0.isOpen());
      assertTrue(socketChannel0.isBlocking());
      assertFalse(nioSocketChannel0.isBound());
      assertTrue(nioSocketChannel0.isReadable());
      assertEquals(0, (int)nioSocketChannel0.getId());
      assertTrue(nioSocketChannel0.isOpen());
      assertFalse(nioSocketChannel0.isConnected());
      assertTrue(defaultChannelPipeline0.isAttached());
      assertNotNull(nioSocketChannel0);
      
      NettyHttpRequest nettyHttpRequest0 = new NettyHttpRequest(defaultHttpRequest0, nioSocketChannel0);
      assertFalse(string0.equals((Object)string1));
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertFalse(socketChannel0.isRegistered());
      assertFalse(socketChannel0.isConnected());
      assertFalse(socketChannel0.isConnectionPending());
      assertEquals(13, socketChannel0.validOps());
      assertTrue(socketChannel0.isOpen());
      assertTrue(socketChannel0.isBlocking());
      assertFalse(nioSocketChannel0.isBound());
      assertTrue(nioSocketChannel0.isReadable());
      assertEquals(0, (int)nioSocketChannel0.getId());
      assertTrue(nioSocketChannel0.isOpen());
      assertFalse(nioSocketChannel0.isConnected());
      assertEquals("HTTP/1.1", httpVersion0.toString());
      assertTrue(httpVersion0.isKeepAliveDefault());
      assertEquals(1, httpVersion0.getMinorVersion());
      assertEquals("HTTP", httpVersion0.getProtocolName());
      assertEquals(1, httpVersion0.getMajorVersion());
      assertEquals("HTTP/1.1", httpVersion0.getText());
      assertEquals(RestRequest.Method.GET, nettyHttpRequest0.method());
      assertFalse(nettyHttpRequest0.hasContent());
      assertEquals("context_mode", nettyHttpRequest0.rawPath());
      assertEquals("context_mode", nettyHttpRequest0.uri());
      assertEquals("OHPwj", httpMethod0.toString());
      assertEquals("OHPwj", httpMethod0.getName());
      assertEquals("context_mode", defaultHttpRequest0.getUri());
      assertTrue(defaultChannelPipeline0.isAttached());
      assertNotNull(nettyHttpRequest0);
      
      NettyHttpServerTransport nettyHttpServerTransport0 = null;
      boolean boolean0 = true;
      NettyHttpChannel nettyHttpChannel0 = new NettyHttpChannel(nettyHttpServerTransport0, nettyHttpRequest0, boolean0);
      assertFalse(string0.equals((Object)string1));
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals("HTTP/1.1", httpVersion0.toString());
      assertTrue(httpVersion0.isKeepAliveDefault());
      assertEquals(1, httpVersion0.getMinorVersion());
      assertEquals("HTTP", httpVersion0.getProtocolName());
      assertEquals(1, httpVersion0.getMajorVersion());
      assertEquals("HTTP/1.1", httpVersion0.getText());
      assertEquals("OHPwj", httpMethod0.toString());
      assertEquals("OHPwj", httpMethod0.getName());
      assertEquals("context_mode", defaultHttpRequest0.getUri());
      assertTrue(defaultChannelPipeline0.isAttached());
      assertFalse(socketChannel0.isRegistered());
      assertFalse(socketChannel0.isConnected());
      assertFalse(socketChannel0.isConnectionPending());
      assertEquals(13, socketChannel0.validOps());
      assertTrue(socketChannel0.isOpen());
      assertTrue(socketChannel0.isBlocking());
      assertFalse(nioSocketChannel0.isBound());
      assertTrue(nioSocketChannel0.isReadable());
      assertEquals(0, (int)nioSocketChannel0.getId());
      assertTrue(nioSocketChannel0.isOpen());
      assertFalse(nioSocketChannel0.isConnected());
      assertEquals(RestRequest.Method.GET, nettyHttpRequest0.method());
      assertFalse(nettyHttpRequest0.hasContent());
      assertEquals("context_mode", nettyHttpRequest0.rawPath());
      assertEquals("context_mode", nettyHttpRequest0.uri());
      assertTrue(nettyHttpChannel0.detailedErrorsEnabled());
      assertNotNull(nettyHttpChannel0);
      
      // Undeclared exception!
      try { 
        restNodesAction0.doRequest(nettyHttpRequest0, nettyHttpChannel0, client0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.rest.action.cat.RestNodesAction", e);
      }
  }

  @Test(timeout = 11000)
  public void test14()  throws Throwable  {
      MetaData metaData0 = MetaData.EMPTY_META_DATA;
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getNumberOfShards());
      assertNotNull(metaData0);
      
      Settings settings0 = metaData0.persistentSettings();
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getNumberOfShards());
      assertNotNull(settings0);
      
      Settings settings1 = IndexMetaData.addHumanReadableSettings(settings0);
      assertTrue(settings1.equals((Object)settings0));
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getNumberOfShards());
      assertNotSame(settings0, settings1);
      assertNotSame(settings1, settings0);
      assertNotNull(settings1);
      
      RestController restController0 = new RestController(settings1);
      assertTrue(settings0.equals((Object)settings1));
      assertTrue(settings1.equals((Object)settings0));
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertNotNull(restController0);
      
      Client client0 = null;
      String string0 = "E-m";
      String[] stringArray0 = settings0.getAsArray(string0);
      assertTrue(settings0.equals((Object)settings1));
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getNumberOfShards());
      assertNotSame(settings0, settings1);
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      String[] stringArray1 = new String[2];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      stringArray1[0] = metaData0.CONTEXT_MODE_SNAPSHOT;
      stringArray1[1] = string0;
      restController0.registerRelevantHeaders(stringArray1);
      assertTrue(settings0.equals((Object)settings1));
      assertTrue(settings1.equals((Object)settings0));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertNotSame(settings0, settings1);
      assertNotSame(settings1, settings0);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(2, stringArray1.length);
      
      double double0 = 626.2679940141606;
      Double double1 = new Double(double0);
      assertEquals(626.2679940141606, (double)double1, 0.01);
      assertEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      
      Double double2 = settings1.getAsDouble(stringArray1, double1);
      assertEquals(626.2679940141606, (double)double2, 0.01);
      assertTrue(settings0.equals((Object)settings1));
      assertTrue(settings1.equals((Object)settings0));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals((double)double1, (double)double0, 0.01);
      assertEquals((double)double2, (double)double0, 0.01);
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getNumberOfShards());
      assertNotSame(settings0, settings1);
      assertNotSame(settings1, settings0);
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(double2);
      assertEquals(2, stringArray1.length);
      
      RestNodesAction restNodesAction0 = new RestNodesAction(settings1, restController0, client0);
      assertTrue(settings0.equals((Object)settings1));
      assertTrue(settings1.equals((Object)settings0));
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertNotNull(restNodesAction0);
      
      Settings.Builder settings_Builder0 = Settings.settingsBuilder();
      assertNotNull(settings_Builder0);
      
      RestRequest restRequest0 = null;
      Table table0 = restNodesAction0.getTableWithHeader(restRequest0);
      assertTrue(settings0.equals((Object)settings1));
      assertTrue(settings1.equals((Object)settings0));
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertNotSame(settings0, settings1);
      assertNotSame(settings1, settings0);
      assertNotNull(table0);
      
      ClusterName clusterName0 = ClusterName.clusterNameFromSettings(settings0);
      assertTrue(settings0.equals((Object)settings1));
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals("elasticsearch", clusterName0.value());
      assertNotSame(settings0, settings1);
      assertNotNull(clusterName0);
      
      ClusterState clusterState0 = null;
      ClusterStateResponse clusterStateResponse0 = new ClusterStateResponse(clusterName0, clusterState0);
      assertTrue(settings0.equals((Object)settings1));
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals("elasticsearch", clusterName0.value());
      assertNotNull(clusterStateResponse0);
      
      NodesInfoResponse nodesInfoResponse0 = new NodesInfoResponse();
      assertNotNull(nodesInfoResponse0);
      
      NodesStatsResponse nodesStatsResponse0 = null;
      // Undeclared exception!
      restNodesAction0.getTableWithHeader(restRequest0);
  }

  @Test(timeout = 11000)
  public void test15()  throws Throwable  {
      IndexMetaData indexMetaData0 = IndexMetaData.PROTO;
      assertEquals(1, indexMetaData0.getTotalNumberOfShards());
      assertEquals(0, indexMetaData0.getNumberOfReplicas());
      assertEquals("_na_", indexMetaData0.getIndexUUID());
      assertEquals(1, indexMetaData0.getNumberOfShards());
      assertEquals(IndexMetaData.State.OPEN, indexMetaData0.getState());
      assertEquals(1L, indexMetaData0.getVersion());
      assertNotNull(indexMetaData0);
      
      Settings settings0 = indexMetaData0.getSettings();
      assertEquals(1, indexMetaData0.getTotalNumberOfShards());
      assertEquals(0, indexMetaData0.getNumberOfReplicas());
      assertEquals("_na_", indexMetaData0.getIndexUUID());
      assertEquals(1, indexMetaData0.getNumberOfShards());
      assertEquals(IndexMetaData.State.OPEN, indexMetaData0.getState());
      assertEquals(1L, indexMetaData0.getVersion());
      assertNotNull(settings0);
      
      RestController restController0 = new RestController(settings0);
      assertEquals(1, indexMetaData0.getTotalNumberOfShards());
      assertEquals(0, indexMetaData0.getNumberOfReplicas());
      assertEquals("_na_", indexMetaData0.getIndexUUID());
      assertEquals(1, indexMetaData0.getNumberOfShards());
      assertEquals(IndexMetaData.State.OPEN, indexMetaData0.getState());
      assertEquals(1L, indexMetaData0.getVersion());
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertNotNull(restController0);
      
      Client client0 = null;
      RestNodesAction restNodesAction0 = new RestNodesAction(settings0, restController0, client0);
      assertEquals(1, indexMetaData0.getTotalNumberOfShards());
      assertEquals(0, indexMetaData0.getNumberOfReplicas());
      assertEquals("_na_", indexMetaData0.getIndexUUID());
      assertEquals(1, indexMetaData0.getNumberOfShards());
      assertEquals(IndexMetaData.State.OPEN, indexMetaData0.getState());
      assertEquals(1L, indexMetaData0.getVersion());
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertNotNull(restNodesAction0);
      
      char[] charArray0 = new char[1];
      HttpVersion httpVersion0 = HttpVersion.HTTP_1_1;
      assertEquals("HTTP", httpVersion0.getProtocolName());
      assertEquals(1, httpVersion0.getMajorVersion());
      assertEquals("HTTP/1.1", httpVersion0.toString());
      assertTrue(httpVersion0.isKeepAliveDefault());
      assertEquals(1, httpVersion0.getMinorVersion());
      assertEquals("HTTP/1.1", httpVersion0.getText());
      assertNotNull(httpVersion0);
      
      HttpMethod httpMethod0 = HttpMethod.GET;
      assertEquals("GET", httpMethod0.getName());
      assertEquals("GET", httpMethod0.toString());
      assertNotNull(httpMethod0);
      
      DefaultHttpRequest defaultHttpRequest0 = new DefaultHttpRequest(httpVersion0, httpMethod0, indexMetaData0.SETTING_VERSION_CREATED);
      assertEquals(1, indexMetaData0.getTotalNumberOfShards());
      assertEquals(0, indexMetaData0.getNumberOfReplicas());
      assertEquals("_na_", indexMetaData0.getIndexUUID());
      assertEquals(1, indexMetaData0.getNumberOfShards());
      assertEquals(IndexMetaData.State.OPEN, indexMetaData0.getState());
      assertEquals(1L, indexMetaData0.getVersion());
      assertEquals("HTTP", httpVersion0.getProtocolName());
      assertEquals(1, httpVersion0.getMajorVersion());
      assertEquals("HTTP/1.1", httpVersion0.toString());
      assertTrue(httpVersion0.isKeepAliveDefault());
      assertEquals(1, httpVersion0.getMinorVersion());
      assertEquals("HTTP/1.1", httpVersion0.getText());
      assertEquals("GET", httpMethod0.getName());
      assertEquals("GET", httpMethod0.toString());
      assertEquals("index.version.created", defaultHttpRequest0.getUri());
      assertNotNull(defaultHttpRequest0);
      
      DefaultChannelPipeline defaultChannelPipeline0 = new DefaultChannelPipeline();
      assertFalse(defaultChannelPipeline0.isAttached());
      assertNotNull(defaultChannelPipeline0);
      
      Channel channel0 = defaultChannelPipeline0.getChannel();
      assertFalse(defaultChannelPipeline0.isAttached());
      assertNull(channel0);
      
      DefaultLocalClientChannelFactory defaultLocalClientChannelFactory0 = new DefaultLocalClientChannelFactory();
      assertNotNull(defaultLocalClientChannelFactory0);
      
      ChannelSink channelSink0 = defaultChannelPipeline0.getSink();
      assertFalse(defaultChannelPipeline0.isAttached());
      assertNotNull(channelSink0);
      
      SocketChannel socketChannel0 = SocketChannel.open();
      assertFalse(socketChannel0.isConnectionPending());
      assertTrue(socketChannel0.isOpen());
      assertTrue(socketChannel0.isBlocking());
      assertEquals(13, socketChannel0.validOps());
      assertFalse(socketChannel0.isRegistered());
      assertFalse(socketChannel0.isConnected());
      assertNotNull(socketChannel0);
      
      ForkJoinPool forkJoinPool0 = ForkJoinPool.commonPool();
      assertNotNull(forkJoinPool0);
      
      HttpMethod httpMethod1 = HttpMethod.valueOf(indexMetaData0.SETTING_CREATION_DATE_STRING);
      assertFalse(httpMethod1.equals((Object)httpMethod0));
      assertEquals(1, indexMetaData0.getTotalNumberOfShards());
      assertEquals(0, indexMetaData0.getNumberOfReplicas());
      assertEquals("_na_", indexMetaData0.getIndexUUID());
      assertEquals(1, indexMetaData0.getNumberOfShards());
      assertEquals(IndexMetaData.State.OPEN, indexMetaData0.getState());
      assertEquals(1L, indexMetaData0.getVersion());
      assertEquals("index.creation_date_string", httpMethod1.getName());
      assertEquals("index.creation_date_string", httpMethod1.toString());
      assertNotSame(httpMethod1, httpMethod0);
      assertNotNull(httpMethod1);
      
      NioWorker nioWorker0 = new NioWorker(forkJoinPool0);
      assertNotNull(nioWorker0);
      
      NioSocketChannel nioSocketChannel0 = new NioSocketChannel(channel0, defaultLocalClientChannelFactory0, defaultChannelPipeline0, channelSink0, socketChannel0, nioWorker0);
      assertTrue(nioSocketChannel0.isReadable());
      assertEquals(0, (int)nioSocketChannel0.getId());
      assertFalse(nioSocketChannel0.isBound());
      assertFalse(nioSocketChannel0.isConnected());
      assertTrue(nioSocketChannel0.isOpen());
      assertTrue(defaultChannelPipeline0.isAttached());
      assertFalse(socketChannel0.isConnectionPending());
      assertTrue(socketChannel0.isOpen());
      assertTrue(socketChannel0.isBlocking());
      assertEquals(13, socketChannel0.validOps());
      assertFalse(socketChannel0.isRegistered());
      assertFalse(socketChannel0.isConnected());
      assertNotNull(nioSocketChannel0);
      
      NettyHttpRequest nettyHttpRequest0 = new NettyHttpRequest(defaultHttpRequest0, nioSocketChannel0);
      assertFalse(httpMethod0.equals((Object)httpMethod1));
      assertEquals(1, indexMetaData0.getTotalNumberOfShards());
      assertEquals(0, indexMetaData0.getNumberOfReplicas());
      assertEquals("_na_", indexMetaData0.getIndexUUID());
      assertEquals(1, indexMetaData0.getNumberOfShards());
      assertEquals(IndexMetaData.State.OPEN, indexMetaData0.getState());
      assertEquals(1L, indexMetaData0.getVersion());
      assertEquals("HTTP", httpVersion0.getProtocolName());
      assertEquals(1, httpVersion0.getMajorVersion());
      assertEquals("HTTP/1.1", httpVersion0.toString());
      assertTrue(httpVersion0.isKeepAliveDefault());
      assertEquals(1, httpVersion0.getMinorVersion());
      assertEquals("HTTP/1.1", httpVersion0.getText());
      assertEquals("GET", httpMethod0.getName());
      assertEquals("GET", httpMethod0.toString());
      assertEquals("index.version.created", defaultHttpRequest0.getUri());
      assertTrue(defaultChannelPipeline0.isAttached());
      assertFalse(socketChannel0.isConnectionPending());
      assertTrue(socketChannel0.isOpen());
      assertTrue(socketChannel0.isBlocking());
      assertEquals(13, socketChannel0.validOps());
      assertFalse(socketChannel0.isRegistered());
      assertFalse(socketChannel0.isConnected());
      assertTrue(nioSocketChannel0.isReadable());
      assertEquals(0, (int)nioSocketChannel0.getId());
      assertFalse(nioSocketChannel0.isBound());
      assertFalse(nioSocketChannel0.isConnected());
      assertTrue(nioSocketChannel0.isOpen());
      assertEquals("index.version.created", nettyHttpRequest0.uri());
      assertEquals(RestRequest.Method.GET, nettyHttpRequest0.method());
      assertFalse(nettyHttpRequest0.hasContent());
      assertEquals("index.version.created", nettyHttpRequest0.rawPath());
      assertNotNull(nettyHttpRequest0);
      
      ClusterStateResponse clusterStateResponse0 = new ClusterStateResponse();
      assertNotNull(clusterStateResponse0);
      
      NodesInfoResponse nodesInfoResponse0 = new NodesInfoResponse();
      assertNotNull(nodesInfoResponse0);
      
      NodesStatsResponse nodesStatsResponse0 = null;
      Table table0 = restNodesAction0.getTableWithHeader(nettyHttpRequest0);
      assertFalse(httpMethod0.equals((Object)httpMethod1));
      assertEquals(1, indexMetaData0.getTotalNumberOfShards());
      assertEquals(0, indexMetaData0.getNumberOfReplicas());
      assertEquals("_na_", indexMetaData0.getIndexUUID());
      assertEquals(1, indexMetaData0.getNumberOfShards());
      assertEquals(IndexMetaData.State.OPEN, indexMetaData0.getState());
      assertEquals(1L, indexMetaData0.getVersion());
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertEquals("HTTP", httpVersion0.getProtocolName());
      assertEquals(1, httpVersion0.getMajorVersion());
      assertEquals("HTTP/1.1", httpVersion0.toString());
      assertTrue(httpVersion0.isKeepAliveDefault());
      assertEquals(1, httpVersion0.getMinorVersion());
      assertEquals("HTTP/1.1", httpVersion0.getText());
      assertEquals("GET", httpMethod0.getName());
      assertEquals("GET", httpMethod0.toString());
      assertEquals("index.version.created", defaultHttpRequest0.getUri());
      assertTrue(defaultChannelPipeline0.isAttached());
      assertFalse(socketChannel0.isConnectionPending());
      assertTrue(socketChannel0.isOpen());
      assertTrue(socketChannel0.isBlocking());
      assertEquals(13, socketChannel0.validOps());
      assertFalse(socketChannel0.isRegistered());
      assertFalse(socketChannel0.isConnected());
      assertTrue(nioSocketChannel0.isReadable());
      assertEquals(0, (int)nioSocketChannel0.getId());
      assertFalse(nioSocketChannel0.isBound());
      assertFalse(nioSocketChannel0.isConnected());
      assertTrue(nioSocketChannel0.isOpen());
      assertEquals("index.version.created", nettyHttpRequest0.uri());
      assertEquals(RestRequest.Method.GET, nettyHttpRequest0.method());
      assertFalse(nettyHttpRequest0.hasContent());
      assertEquals("index.version.created", nettyHttpRequest0.rawPath());
      assertNotSame(httpMethod0, httpMethod1);
      assertNotNull(table0);
      
      // Undeclared exception!
      try { 
        restNodesAction0.buildTable(nettyHttpRequest0, clusterStateResponse0, nodesInfoResponse0, nodesStatsResponse0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.rest.action.cat.RestNodesAction", e);
      }
  }

  @Test(timeout = 11000)
  public void test16()  throws Throwable  {
      IndexMetaData indexMetaData0 = IndexMetaData.PROTO;
      assertEquals(IndexMetaData.State.OPEN, indexMetaData0.getState());
      assertEquals("_na_", indexMetaData0.getIndexUUID());
      assertEquals(1L, indexMetaData0.getVersion());
      assertEquals(1, indexMetaData0.getNumberOfShards());
      assertEquals(1, indexMetaData0.getTotalNumberOfShards());
      assertEquals(0, indexMetaData0.getNumberOfReplicas());
      assertNotNull(indexMetaData0);
      
      Settings settings0 = indexMetaData0.getSettings();
      assertEquals(IndexMetaData.State.OPEN, indexMetaData0.getState());
      assertEquals("_na_", indexMetaData0.getIndexUUID());
      assertEquals(1L, indexMetaData0.getVersion());
      assertEquals(1, indexMetaData0.getNumberOfShards());
      assertEquals(1, indexMetaData0.getTotalNumberOfShards());
      assertEquals(0, indexMetaData0.getNumberOfReplicas());
      assertNotNull(settings0);
      
      RestController restController0 = new RestController(settings0);
      assertEquals(IndexMetaData.State.OPEN, indexMetaData0.getState());
      assertEquals("_na_", indexMetaData0.getIndexUUID());
      assertEquals(1L, indexMetaData0.getVersion());
      assertEquals(1, indexMetaData0.getNumberOfShards());
      assertEquals(1, indexMetaData0.getTotalNumberOfShards());
      assertEquals(0, indexMetaData0.getNumberOfReplicas());
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertNotNull(restController0);
      
      Client client0 = null;
      RestNodesAction restNodesAction0 = new RestNodesAction(settings0, restController0, client0);
      assertEquals(IndexMetaData.State.OPEN, indexMetaData0.getState());
      assertEquals("_na_", indexMetaData0.getIndexUUID());
      assertEquals(1L, indexMetaData0.getVersion());
      assertEquals(1, indexMetaData0.getNumberOfShards());
      assertEquals(1, indexMetaData0.getTotalNumberOfShards());
      assertEquals(0, indexMetaData0.getNumberOfReplicas());
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertNotNull(restNodesAction0);
      
      HttpVersion httpVersion0 = HttpVersion.HTTP_1_1;
      assertEquals("HTTP", httpVersion0.getProtocolName());
      assertTrue(httpVersion0.isKeepAliveDefault());
      assertEquals(1, httpVersion0.getMinorVersion());
      assertEquals("HTTP/1.1", httpVersion0.toString());
      assertEquals(1, httpVersion0.getMajorVersion());
      assertEquals("HTTP/1.1", httpVersion0.getText());
      assertNotNull(httpVersion0);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = indexMetaData0.SETTING_PRIORITY;
      stringArray0[1] = indexMetaData0.SETTING_BLOCKS_READ;
      stringArray0[2] = indexMetaData0.SETTING_VERSION_MINIMUM_COMPATIBLE;
      stringArray0[3] = indexMetaData0.SETTING_VERSION_UPGRADED;
      Float float0 = null;
      Float float1 = settings0.getAsFloat(stringArray0, float0);
      assertEquals(IndexMetaData.State.OPEN, indexMetaData0.getState());
      assertEquals("_na_", indexMetaData0.getIndexUUID());
      assertEquals(1L, indexMetaData0.getVersion());
      assertEquals(1, indexMetaData0.getNumberOfShards());
      assertEquals(1, indexMetaData0.getTotalNumberOfShards());
      assertEquals(0, indexMetaData0.getNumberOfReplicas());
      assertNull(float1);
      assertEquals(4, stringArray0.length);
      
      HttpMethod httpMethod0 = HttpMethod.GET;
      assertEquals("GET", httpMethod0.getName());
      assertEquals("GET", httpMethod0.toString());
      assertNotNull(httpMethod0);
      
      DefaultHttpRequest defaultHttpRequest0 = new DefaultHttpRequest(httpVersion0, httpMethod0, indexMetaData0.SETTING_VERSION_CREATED);
      assertEquals(IndexMetaData.State.OPEN, indexMetaData0.getState());
      assertEquals("_na_", indexMetaData0.getIndexUUID());
      assertEquals(1L, indexMetaData0.getVersion());
      assertEquals(1, indexMetaData0.getNumberOfShards());
      assertEquals(1, indexMetaData0.getTotalNumberOfShards());
      assertEquals(0, indexMetaData0.getNumberOfReplicas());
      assertEquals("HTTP", httpVersion0.getProtocolName());
      assertTrue(httpVersion0.isKeepAliveDefault());
      assertEquals(1, httpVersion0.getMinorVersion());
      assertEquals("HTTP/1.1", httpVersion0.toString());
      assertEquals(1, httpVersion0.getMajorVersion());
      assertEquals("HTTP/1.1", httpVersion0.getText());
      assertEquals("GET", httpMethod0.getName());
      assertEquals("GET", httpMethod0.toString());
      assertEquals("index.version.created", defaultHttpRequest0.getUri());
      assertNotNull(defaultHttpRequest0);
      
      DefaultChannelPipeline defaultChannelPipeline0 = new DefaultChannelPipeline();
      assertFalse(defaultChannelPipeline0.isAttached());
      assertNotNull(defaultChannelPipeline0);
      
      DefaultLocalServerChannelFactory defaultLocalServerChannelFactory0 = new DefaultLocalServerChannelFactory();
      assertNotNull(defaultLocalServerChannelFactory0);
      
      DefaultChannelPipeline defaultChannelPipeline1 = new DefaultChannelPipeline();
      assertFalse(defaultChannelPipeline1.equals((Object)defaultChannelPipeline0));
      assertFalse(defaultChannelPipeline1.isAttached());
      assertNotNull(defaultChannelPipeline1);
      
      LocalServerChannel localServerChannel0 = defaultLocalServerChannelFactory0.newChannel(defaultChannelPipeline1);
      assertFalse(defaultChannelPipeline1.equals((Object)defaultChannelPipeline0));
      assertTrue(defaultChannelPipeline1.isAttached());
      assertTrue(localServerChannel0.isReadable());
      assertEquals(0, (int)localServerChannel0.getId());
      assertNotSame(defaultChannelPipeline1, defaultChannelPipeline0);
      assertNotNull(localServerChannel0);
      
      NettyHttpRequest nettyHttpRequest0 = new NettyHttpRequest(defaultHttpRequest0, localServerChannel0);
      assertFalse(defaultChannelPipeline1.equals((Object)defaultChannelPipeline0));
      assertEquals(IndexMetaData.State.OPEN, indexMetaData0.getState());
      assertEquals("_na_", indexMetaData0.getIndexUUID());
      assertEquals(1L, indexMetaData0.getVersion());
      assertEquals(1, indexMetaData0.getNumberOfShards());
      assertEquals(1, indexMetaData0.getTotalNumberOfShards());
      assertEquals(0, indexMetaData0.getNumberOfReplicas());
      assertTrue(defaultChannelPipeline1.isAttached());
      assertTrue(localServerChannel0.isReadable());
      assertEquals(0, (int)localServerChannel0.getId());
      assertEquals("index.version.created", nettyHttpRequest0.uri());
      assertEquals("index.version.created", nettyHttpRequest0.rawPath());
      assertEquals(RestRequest.Method.GET, nettyHttpRequest0.method());
      assertFalse(nettyHttpRequest0.hasContent());
      assertEquals("HTTP", httpVersion0.getProtocolName());
      assertTrue(httpVersion0.isKeepAliveDefault());
      assertEquals(1, httpVersion0.getMinorVersion());
      assertEquals("HTTP/1.1", httpVersion0.toString());
      assertEquals(1, httpVersion0.getMajorVersion());
      assertEquals("HTTP/1.1", httpVersion0.getText());
      assertEquals("GET", httpMethod0.getName());
      assertEquals("GET", httpMethod0.toString());
      assertEquals("index.version.created", defaultHttpRequest0.getUri());
      assertNotNull(nettyHttpRequest0);
      
      ClusterName clusterName0 = new ClusterName(indexMetaData0.SETTING_NUMBER_OF_SHARDS);
      assertEquals(IndexMetaData.State.OPEN, indexMetaData0.getState());
      assertEquals("_na_", indexMetaData0.getIndexUUID());
      assertEquals(1L, indexMetaData0.getVersion());
      assertEquals(1, indexMetaData0.getNumberOfShards());
      assertEquals(1, indexMetaData0.getTotalNumberOfShards());
      assertEquals(0, indexMetaData0.getNumberOfReplicas());
      assertEquals("index.number_of_shards", clusterName0.value());
      assertNotNull(clusterName0);
      
      long long0 = 1059L;
      String string0 = "";
      ClusterState clusterState0 = ClusterState.PROTO;
      assertEquals("AQAAAAIAQACDAAAABAAAAA", clusterState0.stateUUID());
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState0.status());
      assertEquals(0L, clusterState0.version());
      assertEquals(0L, clusterState0.getVersion());
      assertFalse(clusterState0.wasReadFromDiff());
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertNotNull(clusterState0);
      
      ClusterState clusterState1 = new ClusterState(long0, string0, clusterState0);
      assertFalse(clusterState1.equals((Object)clusterState0));
      assertEquals("AQAAAAIAQACDAAAABAAAAA", clusterState0.stateUUID());
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState0.status());
      assertEquals(0L, clusterState0.version());
      assertEquals(0L, clusterState0.getVersion());
      assertFalse(clusterState0.wasReadFromDiff());
      assertFalse(clusterState1.wasReadFromDiff());
      assertEquals(1059L, clusterState1.getVersion());
      assertEquals("", clusterState1.stateUUID());
      assertEquals(1059L, clusterState1.version());
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState1.status());
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertNotNull(clusterState1);
      
      ClusterStateResponse clusterStateResponse0 = new ClusterStateResponse(clusterName0, clusterState1);
      assertFalse(clusterState0.equals((Object)clusterState1));
      assertFalse(clusterState1.equals((Object)clusterState0));
      assertEquals(IndexMetaData.State.OPEN, indexMetaData0.getState());
      assertEquals("_na_", indexMetaData0.getIndexUUID());
      assertEquals(1L, indexMetaData0.getVersion());
      assertEquals(1, indexMetaData0.getNumberOfShards());
      assertEquals(1, indexMetaData0.getTotalNumberOfShards());
      assertEquals(0, indexMetaData0.getNumberOfReplicas());
      assertEquals("index.number_of_shards", clusterName0.value());
      assertEquals("AQAAAAIAQACDAAAABAAAAA", clusterState0.stateUUID());
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState0.status());
      assertEquals(0L, clusterState0.version());
      assertEquals(0L, clusterState0.getVersion());
      assertFalse(clusterState0.wasReadFromDiff());
      assertFalse(clusterState1.wasReadFromDiff());
      assertEquals(1059L, clusterState1.getVersion());
      assertEquals("", clusterState1.stateUUID());
      assertEquals(1059L, clusterState1.version());
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState1.status());
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertNotNull(clusterStateResponse0);
      
      NodesInfoResponse nodesInfoResponse0 = new NodesInfoResponse();
      assertNotNull(nodesInfoResponse0);
      
      NodesStatsResponse nodesStatsResponse0 = null;
      Table table0 = restNodesAction0.buildTable(nettyHttpRequest0, clusterStateResponse0, nodesInfoResponse0, nodesStatsResponse0);
      assertFalse(defaultChannelPipeline1.equals((Object)defaultChannelPipeline0));
      assertFalse(clusterState0.equals((Object)clusterState1));
      assertFalse(clusterState1.equals((Object)clusterState0));
      assertEquals(IndexMetaData.State.OPEN, indexMetaData0.getState());
      assertEquals("_na_", indexMetaData0.getIndexUUID());
      assertEquals(1L, indexMetaData0.getVersion());
      assertEquals(1, indexMetaData0.getNumberOfShards());
      assertEquals(1, indexMetaData0.getTotalNumberOfShards());
      assertEquals(0, indexMetaData0.getNumberOfReplicas());
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertEquals("HTTP", httpVersion0.getProtocolName());
      assertTrue(httpVersion0.isKeepAliveDefault());
      assertEquals(1, httpVersion0.getMinorVersion());
      assertEquals("HTTP/1.1", httpVersion0.toString());
      assertEquals(1, httpVersion0.getMajorVersion());
      assertEquals("HTTP/1.1", httpVersion0.getText());
      assertEquals("GET", httpMethod0.getName());
      assertEquals("GET", httpMethod0.toString());
      assertEquals("index.version.created", defaultHttpRequest0.getUri());
      assertTrue(defaultChannelPipeline1.isAttached());
      assertTrue(localServerChannel0.isReadable());
      assertEquals(0, (int)localServerChannel0.getId());
      assertEquals("index.version.created", nettyHttpRequest0.uri());
      assertEquals("index.version.created", nettyHttpRequest0.rawPath());
      assertEquals(RestRequest.Method.GET, nettyHttpRequest0.method());
      assertFalse(nettyHttpRequest0.hasContent());
      assertEquals("index.number_of_shards", clusterName0.value());
      assertEquals("AQAAAAIAQACDAAAABAAAAA", clusterState0.stateUUID());
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState0.status());
      assertEquals(0L, clusterState0.version());
      assertEquals(0L, clusterState0.getVersion());
      assertFalse(clusterState0.wasReadFromDiff());
      assertFalse(clusterState1.wasReadFromDiff());
      assertEquals(1059L, clusterState1.getVersion());
      assertEquals("", clusterState1.stateUUID());
      assertEquals(1059L, clusterState1.version());
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState1.status());
      assertNotSame(defaultChannelPipeline1, defaultChannelPipeline0);
      assertNotSame(clusterState0, clusterState1);
      assertNotSame(clusterState1, clusterState0);
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertNotNull(table0);
      
      Channel channel0 = defaultChannelPipeline0.getChannel();
      assertFalse(defaultChannelPipeline0.equals((Object)defaultChannelPipeline1));
      assertFalse(defaultChannelPipeline0.isAttached());
      assertNotSame(defaultChannelPipeline0, defaultChannelPipeline1);
      assertNull(channel0);
      
      ChannelSink channelSink0 = defaultChannelPipeline0.getSink();
      assertFalse(defaultChannelPipeline0.equals((Object)defaultChannelPipeline1));
      assertFalse(defaultChannelPipeline0.isAttached());
      assertNotSame(defaultChannelPipeline0, defaultChannelPipeline1);
      assertNotNull(channelSink0);
      
      RestChannel restChannel0 = null;
      long long1 = 43L;
      short short0 = restNodesAction0.calculatePercentage(long1, long1);
      assertEquals((short)100, short0);
      assertFalse(long1 == long0);
      assertEquals(IndexMetaData.State.OPEN, indexMetaData0.getState());
      assertEquals("_na_", indexMetaData0.getIndexUUID());
      assertEquals(1L, indexMetaData0.getVersion());
      assertEquals(1, indexMetaData0.getNumberOfShards());
      assertEquals(1, indexMetaData0.getTotalNumberOfShards());
      assertEquals(0, indexMetaData0.getNumberOfReplicas());
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      
      NettyHttpRequest nettyHttpRequest1 = new NettyHttpRequest(defaultHttpRequest0, channel0);
      assertFalse(nettyHttpRequest1.equals((Object)nettyHttpRequest0));
      assertFalse(defaultChannelPipeline0.equals((Object)defaultChannelPipeline1));
      assertEquals(IndexMetaData.State.OPEN, indexMetaData0.getState());
      assertEquals("_na_", indexMetaData0.getIndexUUID());
      assertEquals(1L, indexMetaData0.getVersion());
      assertEquals(1, indexMetaData0.getNumberOfShards());
      assertEquals(1, indexMetaData0.getTotalNumberOfShards());
      assertEquals(0, indexMetaData0.getNumberOfReplicas());
      assertEquals("index.version.created", nettyHttpRequest1.uri());
      assertEquals("index.version.created", nettyHttpRequest1.rawPath());
      assertFalse(nettyHttpRequest1.hasContent());
      assertEquals(RestRequest.Method.GET, nettyHttpRequest1.method());
      assertEquals("HTTP", httpVersion0.getProtocolName());
      assertTrue(httpVersion0.isKeepAliveDefault());
      assertEquals(1, httpVersion0.getMinorVersion());
      assertEquals("HTTP/1.1", httpVersion0.toString());
      assertEquals(1, httpVersion0.getMajorVersion());
      assertEquals("HTTP/1.1", httpVersion0.getText());
      assertEquals("GET", httpMethod0.getName());
      assertEquals("GET", httpMethod0.toString());
      assertEquals("index.version.created", defaultHttpRequest0.getUri());
      assertFalse(defaultChannelPipeline0.isAttached());
      assertNotNull(nettyHttpRequest1);
      
      // Undeclared exception!
      try { 
        restNodesAction0.doRequest(nettyHttpRequest1, restChannel0, client0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.rest.action.cat.RestNodesAction", e);
      }
  }

  @Test(timeout = 11000)
  public void test17()  throws Throwable  {
      IndexMetaData indexMetaData0 = IndexMetaData.PROTO;
      assertEquals(1, indexMetaData0.getNumberOfShards());
      assertEquals("_na_", indexMetaData0.getIndexUUID());
      assertEquals(1, indexMetaData0.getTotalNumberOfShards());
      assertEquals(IndexMetaData.State.OPEN, indexMetaData0.getState());
      assertEquals(1L, indexMetaData0.getVersion());
      assertEquals(0, indexMetaData0.getNumberOfReplicas());
      assertNotNull(indexMetaData0);
      
      Settings settings0 = indexMetaData0.getSettings();
      assertEquals(1, indexMetaData0.getNumberOfShards());
      assertEquals("_na_", indexMetaData0.getIndexUUID());
      assertEquals(1, indexMetaData0.getTotalNumberOfShards());
      assertEquals(IndexMetaData.State.OPEN, indexMetaData0.getState());
      assertEquals(1L, indexMetaData0.getVersion());
      assertEquals(0, indexMetaData0.getNumberOfReplicas());
      assertNotNull(settings0);
      
      RestController restController0 = new RestController(settings0);
      assertEquals(1, indexMetaData0.getNumberOfShards());
      assertEquals("_na_", indexMetaData0.getIndexUUID());
      assertEquals(1, indexMetaData0.getTotalNumberOfShards());
      assertEquals(IndexMetaData.State.OPEN, indexMetaData0.getState());
      assertEquals(1L, indexMetaData0.getVersion());
      assertEquals(0, indexMetaData0.getNumberOfReplicas());
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertNotNull(restController0);
      
      Client client0 = null;
      RestNodesAction restNodesAction0 = new RestNodesAction(settings0, restController0, client0);
      assertEquals(1, indexMetaData0.getNumberOfShards());
      assertEquals("_na_", indexMetaData0.getIndexUUID());
      assertEquals(1, indexMetaData0.getTotalNumberOfShards());
      assertEquals(IndexMetaData.State.OPEN, indexMetaData0.getState());
      assertEquals(1L, indexMetaData0.getVersion());
      assertEquals(0, indexMetaData0.getNumberOfReplicas());
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertNotNull(restNodesAction0);
      
      HttpVersion httpVersion0 = HttpVersion.HTTP_1_1;
      assertEquals("HTTP", httpVersion0.getProtocolName());
      assertEquals("HTTP/1.1", httpVersion0.toString());
      assertEquals(1, httpVersion0.getMajorVersion());
      assertEquals("HTTP/1.1", httpVersion0.getText());
      assertTrue(httpVersion0.isKeepAliveDefault());
      assertEquals(1, httpVersion0.getMinorVersion());
      assertNotNull(httpVersion0);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = indexMetaData0.SETTING_PRIORITY;
      stringArray0[1] = indexMetaData0.SETTING_BLOCKS_READ;
      stringArray0[2] = indexMetaData0.SETTING_VERSION_MINIMUM_COMPATIBLE;
      stringArray0[3] = indexMetaData0.SETTING_VERSION_UPGRADED;
      Float float0 = null;
      Float float1 = settings0.getAsFloat(stringArray0, float0);
      assertEquals(1, indexMetaData0.getNumberOfShards());
      assertEquals("_na_", indexMetaData0.getIndexUUID());
      assertEquals(1, indexMetaData0.getTotalNumberOfShards());
      assertEquals(IndexMetaData.State.OPEN, indexMetaData0.getState());
      assertEquals(1L, indexMetaData0.getVersion());
      assertEquals(0, indexMetaData0.getNumberOfReplicas());
      assertNull(float1);
      assertEquals(4, stringArray0.length);
      
      HttpMethod httpMethod0 = HttpMethod.GET;
      assertEquals("GET", httpMethod0.getName());
      assertEquals("GET", httpMethod0.toString());
      assertNotNull(httpMethod0);
      
      DefaultHttpRequest defaultHttpRequest0 = new DefaultHttpRequest(httpVersion0, httpMethod0, indexMetaData0.SETTING_VERSION_CREATED);
      assertEquals(1, indexMetaData0.getNumberOfShards());
      assertEquals("_na_", indexMetaData0.getIndexUUID());
      assertEquals(1, indexMetaData0.getTotalNumberOfShards());
      assertEquals(IndexMetaData.State.OPEN, indexMetaData0.getState());
      assertEquals(1L, indexMetaData0.getVersion());
      assertEquals(0, indexMetaData0.getNumberOfReplicas());
      assertEquals("HTTP", httpVersion0.getProtocolName());
      assertEquals("HTTP/1.1", httpVersion0.toString());
      assertEquals(1, httpVersion0.getMajorVersion());
      assertEquals("HTTP/1.1", httpVersion0.getText());
      assertTrue(httpVersion0.isKeepAliveDefault());
      assertEquals(1, httpVersion0.getMinorVersion());
      assertEquals("GET", httpMethod0.getName());
      assertEquals("GET", httpMethod0.toString());
      assertEquals("index.version.created", defaultHttpRequest0.getUri());
      assertNotNull(defaultHttpRequest0);
      
      DefaultChannelPipeline defaultChannelPipeline0 = new DefaultChannelPipeline();
      assertFalse(defaultChannelPipeline0.isAttached());
      assertNotNull(defaultChannelPipeline0);
      
      DefaultLocalServerChannelFactory defaultLocalServerChannelFactory0 = new DefaultLocalServerChannelFactory();
      assertNotNull(defaultLocalServerChannelFactory0);
      
      DefaultChannelPipeline defaultChannelPipeline1 = new DefaultChannelPipeline();
      assertFalse(defaultChannelPipeline1.equals((Object)defaultChannelPipeline0));
      assertFalse(defaultChannelPipeline1.isAttached());
      assertNotNull(defaultChannelPipeline1);
      
      LocalServerChannel localServerChannel0 = defaultLocalServerChannelFactory0.newChannel(defaultChannelPipeline1);
      assertFalse(defaultChannelPipeline1.equals((Object)defaultChannelPipeline0));
      assertTrue(defaultChannelPipeline1.isAttached());
      assertEquals(1, (int)localServerChannel0.getId());
      assertTrue(localServerChannel0.isReadable());
      assertNotSame(defaultChannelPipeline1, defaultChannelPipeline0);
      assertNotNull(localServerChannel0);
      
      NettyHttpRequest nettyHttpRequest0 = new NettyHttpRequest(defaultHttpRequest0, localServerChannel0);
      assertFalse(defaultChannelPipeline1.equals((Object)defaultChannelPipeline0));
      assertEquals(1, indexMetaData0.getNumberOfShards());
      assertEquals("_na_", indexMetaData0.getIndexUUID());
      assertEquals(1, indexMetaData0.getTotalNumberOfShards());
      assertEquals(IndexMetaData.State.OPEN, indexMetaData0.getState());
      assertEquals(1L, indexMetaData0.getVersion());
      assertEquals(0, indexMetaData0.getNumberOfReplicas());
      assertTrue(defaultChannelPipeline1.isAttached());
      assertEquals(1, (int)localServerChannel0.getId());
      assertTrue(localServerChannel0.isReadable());
      assertFalse(nettyHttpRequest0.hasContent());
      assertEquals(RestRequest.Method.GET, nettyHttpRequest0.method());
      assertEquals("index.version.created", nettyHttpRequest0.rawPath());
      assertEquals("index.version.created", nettyHttpRequest0.uri());
      assertEquals("HTTP", httpVersion0.getProtocolName());
      assertEquals("HTTP/1.1", httpVersion0.toString());
      assertEquals(1, httpVersion0.getMajorVersion());
      assertEquals("HTTP/1.1", httpVersion0.getText());
      assertTrue(httpVersion0.isKeepAliveDefault());
      assertEquals(1, httpVersion0.getMinorVersion());
      assertEquals("GET", httpMethod0.getName());
      assertEquals("GET", httpMethod0.toString());
      assertEquals("index.version.created", defaultHttpRequest0.getUri());
      assertNotNull(nettyHttpRequest0);
      
      ClusterName clusterName0 = new ClusterName(indexMetaData0.SETTING_NUMBER_OF_SHARDS);
      assertEquals(1, indexMetaData0.getNumberOfShards());
      assertEquals("_na_", indexMetaData0.getIndexUUID());
      assertEquals(1, indexMetaData0.getTotalNumberOfShards());
      assertEquals(IndexMetaData.State.OPEN, indexMetaData0.getState());
      assertEquals(1L, indexMetaData0.getVersion());
      assertEquals(0, indexMetaData0.getNumberOfReplicas());
      assertEquals("index.number_of_shards", clusterName0.value());
      assertNotNull(clusterName0);
      
      long long0 = 1059L;
      String string0 = "";
      ClusterState clusterState0 = ClusterState.PROTO;
      assertEquals(0L, clusterState0.version());
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState0.status());
      assertEquals("AQAAAAIAQACDAAAABAAAAA", clusterState0.stateUUID());
      assertFalse(clusterState0.wasReadFromDiff());
      assertEquals(0L, clusterState0.getVersion());
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertNotNull(clusterState0);
      
      ClusterState clusterState1 = new ClusterState(long0, string0, clusterState0);
      assertFalse(clusterState1.equals((Object)clusterState0));
      assertEquals(0L, clusterState0.version());
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState0.status());
      assertEquals("AQAAAAIAQACDAAAABAAAAA", clusterState0.stateUUID());
      assertFalse(clusterState0.wasReadFromDiff());
      assertEquals(0L, clusterState0.getVersion());
      assertEquals(1059L, clusterState1.getVersion());
      assertFalse(clusterState1.wasReadFromDiff());
      assertEquals("", clusterState1.stateUUID());
      assertEquals(1059L, clusterState1.version());
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState1.status());
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertNotNull(clusterState1);
      
      ClusterStateResponse clusterStateResponse0 = new ClusterStateResponse(clusterName0, clusterState1);
      assertFalse(clusterState0.equals((Object)clusterState1));
      assertFalse(clusterState1.equals((Object)clusterState0));
      assertEquals(1, indexMetaData0.getNumberOfShards());
      assertEquals("_na_", indexMetaData0.getIndexUUID());
      assertEquals(1, indexMetaData0.getTotalNumberOfShards());
      assertEquals(IndexMetaData.State.OPEN, indexMetaData0.getState());
      assertEquals(1L, indexMetaData0.getVersion());
      assertEquals(0, indexMetaData0.getNumberOfReplicas());
      assertEquals("index.number_of_shards", clusterName0.value());
      assertEquals(0L, clusterState0.version());
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState0.status());
      assertEquals("AQAAAAIAQACDAAAABAAAAA", clusterState0.stateUUID());
      assertFalse(clusterState0.wasReadFromDiff());
      assertEquals(0L, clusterState0.getVersion());
      assertEquals(1059L, clusterState1.getVersion());
      assertFalse(clusterState1.wasReadFromDiff());
      assertEquals("", clusterState1.stateUUID());
      assertEquals(1059L, clusterState1.version());
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState1.status());
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertNotNull(clusterStateResponse0);
      
      String string1 = restController0.nodeName();
      assertEquals("", string1);
      assertEquals(1, indexMetaData0.getNumberOfShards());
      assertEquals("_na_", indexMetaData0.getIndexUUID());
      assertEquals(1, indexMetaData0.getTotalNumberOfShards());
      assertEquals(IndexMetaData.State.OPEN, indexMetaData0.getState());
      assertEquals(1L, indexMetaData0.getVersion());
      assertEquals(0, indexMetaData0.getNumberOfReplicas());
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertSame(string1, string0);
      assertNotNull(string1);
      
      NodesInfoResponse nodesInfoResponse0 = new NodesInfoResponse();
      assertNotNull(nodesInfoResponse0);
      
      NodesStatsResponse nodesStatsResponse0 = null;
      Table table0 = restNodesAction0.buildTable(nettyHttpRequest0, clusterStateResponse0, nodesInfoResponse0, nodesStatsResponse0);
      assertFalse(defaultChannelPipeline1.equals((Object)defaultChannelPipeline0));
      assertFalse(clusterState0.equals((Object)clusterState1));
      assertFalse(clusterState1.equals((Object)clusterState0));
      assertEquals(1, indexMetaData0.getNumberOfShards());
      assertEquals("_na_", indexMetaData0.getIndexUUID());
      assertEquals(1, indexMetaData0.getTotalNumberOfShards());
      assertEquals(IndexMetaData.State.OPEN, indexMetaData0.getState());
      assertEquals(1L, indexMetaData0.getVersion());
      assertEquals(0, indexMetaData0.getNumberOfReplicas());
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertEquals("HTTP", httpVersion0.getProtocolName());
      assertEquals("HTTP/1.1", httpVersion0.toString());
      assertEquals(1, httpVersion0.getMajorVersion());
      assertEquals("HTTP/1.1", httpVersion0.getText());
      assertTrue(httpVersion0.isKeepAliveDefault());
      assertEquals(1, httpVersion0.getMinorVersion());
      assertEquals("GET", httpMethod0.getName());
      assertEquals("GET", httpMethod0.toString());
      assertEquals("index.version.created", defaultHttpRequest0.getUri());
      assertTrue(defaultChannelPipeline1.isAttached());
      assertEquals(1, (int)localServerChannel0.getId());
      assertTrue(localServerChannel0.isReadable());
      assertFalse(nettyHttpRequest0.hasContent());
      assertEquals(RestRequest.Method.GET, nettyHttpRequest0.method());
      assertEquals("index.version.created", nettyHttpRequest0.rawPath());
      assertEquals("index.version.created", nettyHttpRequest0.uri());
      assertEquals("index.number_of_shards", clusterName0.value());
      assertEquals(0L, clusterState0.version());
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState0.status());
      assertEquals("AQAAAAIAQACDAAAABAAAAA", clusterState0.stateUUID());
      assertFalse(clusterState0.wasReadFromDiff());
      assertEquals(0L, clusterState0.getVersion());
      assertEquals(1059L, clusterState1.getVersion());
      assertFalse(clusterState1.wasReadFromDiff());
      assertEquals("", clusterState1.stateUUID());
      assertEquals(1059L, clusterState1.version());
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState1.status());
      assertNotSame(defaultChannelPipeline1, defaultChannelPipeline0);
      assertSame(string0, string1);
      assertNotSame(clusterState0, clusterState1);
      assertNotSame(clusterState1, clusterState0);
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertNotNull(table0);
      
      Channel channel0 = defaultChannelPipeline0.getChannel();
      assertFalse(defaultChannelPipeline0.equals((Object)defaultChannelPipeline1));
      assertFalse(defaultChannelPipeline0.isAttached());
      assertNotSame(defaultChannelPipeline0, defaultChannelPipeline1);
      assertNull(channel0);
      
      ChannelSink channelSink0 = defaultChannelPipeline0.getSink();
      assertFalse(defaultChannelPipeline0.equals((Object)defaultChannelPipeline1));
      assertFalse(defaultChannelPipeline0.isAttached());
      assertNotSame(defaultChannelPipeline0, defaultChannelPipeline1);
      assertNotNull(channelSink0);
      
      RestChannel restChannel0 = null;
      long long1 = 43L;
      short short0 = restNodesAction0.calculatePercentage(long1, long1);
      assertEquals((short)100, short0);
      assertFalse(long1 == long0);
      assertEquals(1, indexMetaData0.getNumberOfShards());
      assertEquals("_na_", indexMetaData0.getIndexUUID());
      assertEquals(1, indexMetaData0.getTotalNumberOfShards());
      assertEquals(IndexMetaData.State.OPEN, indexMetaData0.getState());
      assertEquals(1L, indexMetaData0.getVersion());
      assertEquals(0, indexMetaData0.getNumberOfReplicas());
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      
      NettyHttpRequest nettyHttpRequest1 = new NettyHttpRequest(defaultHttpRequest0, channel0);
      assertFalse(nettyHttpRequest1.equals((Object)nettyHttpRequest0));
      assertFalse(defaultChannelPipeline0.equals((Object)defaultChannelPipeline1));
      assertEquals(1, indexMetaData0.getNumberOfShards());
      assertEquals("_na_", indexMetaData0.getIndexUUID());
      assertEquals(1, indexMetaData0.getTotalNumberOfShards());
      assertEquals(IndexMetaData.State.OPEN, indexMetaData0.getState());
      assertEquals(1L, indexMetaData0.getVersion());
      assertEquals(0, indexMetaData0.getNumberOfReplicas());
      assertEquals("index.version.created", nettyHttpRequest1.uri());
      assertEquals(RestRequest.Method.GET, nettyHttpRequest1.method());
      assertEquals("index.version.created", nettyHttpRequest1.rawPath());
      assertFalse(nettyHttpRequest1.hasContent());
      assertEquals("HTTP", httpVersion0.getProtocolName());
      assertEquals("HTTP/1.1", httpVersion0.toString());
      assertEquals(1, httpVersion0.getMajorVersion());
      assertEquals("HTTP/1.1", httpVersion0.getText());
      assertTrue(httpVersion0.isKeepAliveDefault());
      assertEquals(1, httpVersion0.getMinorVersion());
      assertEquals("GET", httpMethod0.getName());
      assertEquals("GET", httpMethod0.toString());
      assertEquals("index.version.created", defaultHttpRequest0.getUri());
      assertFalse(defaultChannelPipeline0.isAttached());
      assertNotNull(nettyHttpRequest1);
      
      // Undeclared exception!
      restNodesAction0.buildTable(nettyHttpRequest1, clusterStateResponse0, nodesInfoResponse0, nodesStatsResponse0);
  }
}
