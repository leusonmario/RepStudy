/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 09 06:06:40 GMT 2021
 */

package org.elasticsearch.rest.action.cat;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.net.InetSocketAddress;
import java.net.SocketAddress;
import java.nio.channels.SocketChannel;
import java.util.concurrent.ForkJoinPool;
import java.util.concurrent.ForkJoinTask;
import org.elasticsearch.cache.recycler.PageCacheRecycler;
import org.elasticsearch.client.Client;
import org.elasticsearch.client.node.NodeClient;
import org.elasticsearch.cluster.metadata.IndexMetaData;
import org.elasticsearch.cluster.metadata.MetaData;
import org.elasticsearch.common.Table;
import org.elasticsearch.common.component.Lifecycle;
import org.elasticsearch.common.network.NetworkService;
import org.elasticsearch.common.settings.Settings;
import org.elasticsearch.common.util.BigArrays;
import org.elasticsearch.http.netty.NettyHttpChannel;
import org.elasticsearch.http.netty.NettyHttpRequest;
import org.elasticsearch.http.netty.NettyHttpServerTransport;
import org.elasticsearch.index.fielddata.IndexFieldDataService;
import org.elasticsearch.index.mapper.MapperService;
import org.elasticsearch.indices.breaker.NoneCircuitBreakerService;
import org.elasticsearch.rest.RestController;
import org.elasticsearch.rest.RestFilter;
import org.elasticsearch.rest.RestFilterChain;
import org.elasticsearch.rest.RestRequest;
import org.elasticsearch.rest.action.cat.RestNodesAction;
import org.elasticsearch.script.ScriptContext;
import org.elasticsearch.search.lookup.SearchLookup;
import org.elasticsearch.search.lookup.SourceLookup;
import org.elasticsearch.threadpool.ThreadPool;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.net.MockInetSocketAddress;
import org.jboss.netty.channel.Channel;
import org.jboss.netty.channel.ChannelSink;
import org.jboss.netty.channel.DefaultChannelPipeline;
import org.jboss.netty.channel.local.DefaultLocalServerChannelFactory;
import org.jboss.netty.channel.local.LocalServerChannel;
import org.jboss.netty.channel.socket.nio.NioSocketChannel;
import org.jboss.netty.channel.socket.nio.NioWorker;
import org.jboss.netty.handler.codec.http.DefaultHttpRequest;
import org.jboss.netty.handler.codec.http.HttpMethod;
import org.jboss.netty.handler.codec.http.HttpRequest;
import org.jboss.netty.handler.codec.http.HttpVersion;
import org.jboss.netty.util.ThreadNameDeterminer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class RestNodesAction_ESTest extends RestNodesAction_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test0()  throws Throwable  {
      MetaData metaData0 = MetaData.EMPTY_META_DATA;
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertNotNull(metaData0);
      
      Settings settings0 = metaData0.settings();
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertNotNull(settings0);
      
      RestController restController0 = new RestController(settings0);
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertNotNull(restController0);
      
      ThreadPool threadPool0 = new ThreadPool(settings0);
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertNotNull(threadPool0);
      
      MapperService mapperService0 = null;
      IndexFieldDataService indexFieldDataService0 = null;
      String[] stringArray0 = new String[8];
      stringArray0[4] = metaData0.ALL;
      SearchLookup searchLookup0 = new SearchLookup(mapperService0, indexFieldDataService0, stringArray0);
      assertNotNull(searchLookup0);
      assertEquals(8, stringArray0.length);
      
      SourceLookup sourceLookup0 = searchLookup0.source();
      assertNull(sourceLookup0.sourceContentType());
      assertNotNull(sourceLookup0);
      assertEquals(8, stringArray0.length);
      
      NodeClient nodeClient0 = new NodeClient(settings0, threadPool0, sourceLookup0);
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertNull(sourceLookup0.sourceContentType());
      assertNotNull(nodeClient0);
      assertEquals(8, stringArray0.length);
      
      RestNodesAction restNodesAction0 = new RestNodesAction(settings0, restController0, nodeClient0);
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertNull(sourceLookup0.sourceContentType());
      assertNotNull(restNodesAction0);
      assertEquals(8, stringArray0.length);
      
      HttpVersion httpVersion0 = HttpVersion.HTTP_1_0;
      assertEquals("HTTP/1.0", httpVersion0.toString());
      assertEquals(0, httpVersion0.getMinorVersion());
      assertEquals("HTTP", httpVersion0.getProtocolName());
      assertFalse(httpVersion0.isKeepAliveDefault());
      assertEquals(1, httpVersion0.getMajorVersion());
      assertEquals("HTTP/1.0", httpVersion0.getText());
      assertNotNull(httpVersion0);
      
      HttpMethod httpMethod0 = HttpMethod.GET;
      assertEquals("GET", httpMethod0.getName());
      assertEquals("GET", httpMethod0.toString());
      assertNotNull(httpMethod0);
      
      DefaultHttpRequest defaultHttpRequest0 = new DefaultHttpRequest(httpVersion0, httpMethod0, stringArray0[4]);
      assertEquals("HTTP/1.0", httpVersion0.toString());
      assertEquals(0, httpVersion0.getMinorVersion());
      assertEquals("HTTP", httpVersion0.getProtocolName());
      assertFalse(httpVersion0.isKeepAliveDefault());
      assertEquals(1, httpVersion0.getMajorVersion());
      assertEquals("HTTP/1.0", httpVersion0.getText());
      assertEquals("GET", httpMethod0.getName());
      assertEquals("GET", httpMethod0.toString());
      assertEquals("_all", defaultHttpRequest0.getUri());
      assertNotNull(defaultHttpRequest0);
      assertEquals(8, stringArray0.length);
      
      DefaultLocalServerChannelFactory defaultLocalServerChannelFactory0 = new DefaultLocalServerChannelFactory();
      assertNotNull(defaultLocalServerChannelFactory0);
      
      DefaultChannelPipeline defaultChannelPipeline0 = new DefaultChannelPipeline();
      assertFalse(defaultChannelPipeline0.isAttached());
      assertNotNull(defaultChannelPipeline0);
      
      LocalServerChannel localServerChannel0 = defaultLocalServerChannelFactory0.newChannel(defaultChannelPipeline0);
      assertTrue(defaultChannelPipeline0.isAttached());
      assertTrue(localServerChannel0.isReadable());
      assertEquals(3, (int)localServerChannel0.getId());
      assertNotNull(localServerChannel0);
      
      NettyHttpRequest nettyHttpRequest0 = new NettyHttpRequest(defaultHttpRequest0, localServerChannel0);
      assertTrue(defaultChannelPipeline0.isAttached());
      assertTrue(localServerChannel0.isReadable());
      assertEquals(3, (int)localServerChannel0.getId());
      assertEquals("_all", nettyHttpRequest0.uri());
      assertEquals("_all", nettyHttpRequest0.rawPath());
      assertFalse(nettyHttpRequest0.hasContent());
      assertEquals(RestRequest.Method.GET, nettyHttpRequest0.method());
      assertEquals("HTTP/1.0", httpVersion0.toString());
      assertEquals(0, httpVersion0.getMinorVersion());
      assertEquals("HTTP", httpVersion0.getProtocolName());
      assertFalse(httpVersion0.isKeepAliveDefault());
      assertEquals(1, httpVersion0.getMajorVersion());
      assertEquals("HTTP/1.0", httpVersion0.getText());
      assertEquals("GET", httpMethod0.getName());
      assertEquals("GET", httpMethod0.toString());
      assertEquals("_all", defaultHttpRequest0.getUri());
      assertNotNull(nettyHttpRequest0);
      assertEquals(8, stringArray0.length);
      
      NetworkService networkService0 = new NetworkService(settings0);
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertNotNull(networkService0);
      
      boolean boolean0 = false;
      BigArrays bigArrays0 = BigArrays.NON_RECYCLING_INSTANCE;
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertNotNull(bigArrays0);
      
      NettyHttpServerTransport nettyHttpServerTransport0 = new NettyHttpServerTransport(settings0, networkService0, bigArrays0, threadPool0);
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals(Lifecycle.State.INITIALIZED, nettyHttpServerTransport0.lifecycleState());
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertNotNull(nettyHttpServerTransport0);
      
      NettyHttpChannel nettyHttpChannel0 = new NettyHttpChannel(nettyHttpServerTransport0, nettyHttpRequest0, boolean0);
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals("HTTP/1.0", httpVersion0.toString());
      assertEquals(0, httpVersion0.getMinorVersion());
      assertEquals("HTTP", httpVersion0.getProtocolName());
      assertFalse(httpVersion0.isKeepAliveDefault());
      assertEquals(1, httpVersion0.getMajorVersion());
      assertEquals("HTTP/1.0", httpVersion0.getText());
      assertEquals("GET", httpMethod0.getName());
      assertEquals("GET", httpMethod0.toString());
      assertEquals("_all", defaultHttpRequest0.getUri());
      assertTrue(defaultChannelPipeline0.isAttached());
      assertTrue(localServerChannel0.isReadable());
      assertEquals(3, (int)localServerChannel0.getId());
      assertEquals("_all", nettyHttpRequest0.uri());
      assertEquals("_all", nettyHttpRequest0.rawPath());
      assertFalse(nettyHttpRequest0.hasContent());
      assertEquals(RestRequest.Method.GET, nettyHttpRequest0.method());
      assertEquals(Lifecycle.State.INITIALIZED, nettyHttpServerTransport0.lifecycleState());
      assertFalse(nettyHttpChannel0.detailedErrorsEnabled());
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertNotNull(nettyHttpChannel0);
      assertEquals(8, stringArray0.length);
      
      // Undeclared exception!
      try { 
        restNodesAction0.doRequest(nettyHttpRequest0, nettyHttpChannel0, nodeClient0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // failed to parse / load source
         //
         verifyException("org.elasticsearch.search.lookup.SourceLookup", e);
      }
  }

  @Test(timeout = 11000)
  public void test1()  throws Throwable  {
      Settings settings0 = Settings.Builder.EMPTY_SETTINGS;
      assertNotNull(settings0);
      
      RestController restController0 = new RestController(settings0);
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertNotNull(restController0);
      
      Client client0 = null;
      RestNodesAction restNodesAction0 = new RestNodesAction(settings0, restController0, client0);
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertNotNull(restNodesAction0);
      
      StringBuilder stringBuilder0 = new StringBuilder();
      assertEquals("", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      restNodesAction0.documentation(stringBuilder0);
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertEquals("/_cat/nodes\n", stringBuilder0.toString());
      
      RestRequest restRequest0 = null;
      Table table0 = restNodesAction0.getTableWithHeader(restRequest0);
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertNotNull(table0);
  }

  @Test(timeout = 11000)
  public void test2()  throws Throwable  {
      Settings settings0 = Settings.EMPTY;
      assertNotNull(settings0);
      
      RestController restController0 = new RestController(settings0);
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertNotNull(restController0);
      
      Client client0 = null;
      RestNodesAction restNodesAction0 = new RestNodesAction(settings0, restController0, client0);
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertNotNull(restNodesAction0);
      
      int int0 = 0;
      StringBuilder stringBuilder0 = new StringBuilder(int0);
      assertEquals("", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      String string0 = "DPOOdh?";
      ScriptContext.Plugin scriptContext_Plugin0 = new ScriptContext.Plugin(string0, string0);
      assertEquals("DPOOdh?", scriptContext_Plugin0.getOperation());
      assertEquals("DPOOdh?", scriptContext_Plugin0.getPluginName());
      assertEquals("DPOOdh?_DPOOdh?", scriptContext_Plugin0.getKey());
      assertEquals("DPOOdh?_DPOOdh?", scriptContext_Plugin0.toString());
      assertNotNull(scriptContext_Plugin0);
      
      StringBuilder stringBuilder1 = stringBuilder0.insert(int0, (Object) scriptContext_Plugin0);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      assertEquals("DPOOdh?_DPOOdh?", stringBuilder0.toString());
      assertEquals("DPOOdh?", scriptContext_Plugin0.getOperation());
      assertEquals("DPOOdh?", scriptContext_Plugin0.getPluginName());
      assertEquals("DPOOdh?_DPOOdh?", scriptContext_Plugin0.getKey());
      assertEquals("DPOOdh?_DPOOdh?", scriptContext_Plugin0.toString());
      assertEquals("DPOOdh?_DPOOdh?", stringBuilder1.toString());
      assertNotNull(stringBuilder1);
      
      restNodesAction0.documentation(stringBuilder1);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertEquals("DPOOdh?_DPOOdh?/_cat/nodes\n", stringBuilder0.toString());
      assertEquals("DPOOdh?", scriptContext_Plugin0.getOperation());
      assertEquals("DPOOdh?", scriptContext_Plugin0.getPluginName());
      assertEquals("DPOOdh?_DPOOdh?", scriptContext_Plugin0.getKey());
      assertEquals("DPOOdh?_DPOOdh?", scriptContext_Plugin0.toString());
      assertEquals("DPOOdh?_DPOOdh?/_cat/nodes\n", stringBuilder1.toString());
      
      HttpVersion httpVersion0 = HttpVersion.HTTP_1_0;
      assertEquals("HTTP/1.0", httpVersion0.getText());
      assertEquals(0, httpVersion0.getMinorVersion());
      assertEquals("HTTP", httpVersion0.getProtocolName());
      assertEquals("HTTP/1.0", httpVersion0.toString());
      assertEquals(1, httpVersion0.getMajorVersion());
      assertFalse(httpVersion0.isKeepAliveDefault());
      assertNotNull(httpVersion0);
      
      String string1 = "wv,Ugk:c";
      // Undeclared exception!
      try { 
        HttpVersion.valueOf(string1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // invalid version format: WV,UGK:C
         //
         verifyException("org.jboss.netty.handler.codec.http.HttpVersion", e);
      }
  }

  @Test(timeout = 11000)
  public void test3()  throws Throwable  {
      IndexMetaData indexMetaData0 = IndexMetaData.PROTO;
      assertEquals(IndexMetaData.State.OPEN, indexMetaData0.getState());
      assertEquals(0, indexMetaData0.getNumberOfReplicas());
      assertEquals(1, indexMetaData0.getTotalNumberOfShards());
      assertEquals("_na_", indexMetaData0.getIndexUUID());
      assertEquals(1, indexMetaData0.getNumberOfShards());
      assertEquals(1L, indexMetaData0.getVersion());
      assertNotNull(indexMetaData0);
      
      Settings settings0 = indexMetaData0.getSettings();
      assertEquals(IndexMetaData.State.OPEN, indexMetaData0.getState());
      assertEquals(0, indexMetaData0.getNumberOfReplicas());
      assertEquals(1, indexMetaData0.getTotalNumberOfShards());
      assertEquals("_na_", indexMetaData0.getIndexUUID());
      assertEquals(1, indexMetaData0.getNumberOfShards());
      assertEquals(1L, indexMetaData0.getVersion());
      assertNotNull(settings0);
      
      Settings settings1 = IndexMetaData.addHumanReadableSettings(settings0);
      assertNotSame(settings0, settings1);
      assertNotSame(settings1, settings0);
      assertEquals(IndexMetaData.State.OPEN, indexMetaData0.getState());
      assertEquals(0, indexMetaData0.getNumberOfReplicas());
      assertEquals(1, indexMetaData0.getTotalNumberOfShards());
      assertEquals("_na_", indexMetaData0.getIndexUUID());
      assertEquals(1, indexMetaData0.getNumberOfShards());
      assertEquals(1L, indexMetaData0.getVersion());
      assertFalse(settings1.equals((Object)settings0));
      assertNotNull(settings1);
      
      RestController restController0 = null;
      Client client0 = null;
      RestNodesAction restNodesAction0 = null;
      try {
        restNodesAction0 = new RestNodesAction(settings1, restController0, client0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.rest.action.cat.RestNodesAction", e);
      }
  }

  @Test(timeout = 11000)
  public void test4()  throws Throwable  {
      Settings settings0 = Settings.EMPTY;
      assertNotNull(settings0);
      
      RestController restController0 = new RestController(settings0);
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertNotNull(restController0);
      
      Client client0 = null;
      RestNodesAction restNodesAction0 = new RestNodesAction(settings0, restController0, client0);
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertNotNull(restNodesAction0);
      
      NetworkService networkService0 = new NetworkService(settings0);
      assertNotNull(networkService0);
      
      BigArrays bigArrays0 = BigArrays.NON_RECYCLING_INSTANCE;
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertNotNull(bigArrays0);
      
      ThreadPool threadPool0 = new ThreadPool(settings0);
      assertNotNull(threadPool0);
      
      NettyHttpServerTransport nettyHttpServerTransport0 = new NettyHttpServerTransport(settings0, networkService0, bigArrays0, threadPool0);
      assertEquals(Lifecycle.State.INITIALIZED, nettyHttpServerTransport0.lifecycleState());
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertNotNull(nettyHttpServerTransport0);
      
      HttpVersion httpVersion0 = HttpVersion.HTTP_1_1;
      assertEquals(1, httpVersion0.getMajorVersion());
      assertEquals("HTTP", httpVersion0.getProtocolName());
      assertEquals("HTTP/1.1", httpVersion0.getText());
      assertEquals(1, httpVersion0.getMinorVersion());
      assertTrue(httpVersion0.isKeepAliveDefault());
      assertEquals("HTTP/1.1", httpVersion0.toString());
      assertNotNull(httpVersion0);
      
      String string0 = "C5mUl";
      HttpMethod httpMethod0 = HttpMethod.valueOf(string0);
      assertEquals("C5mUl", httpMethod0.toString());
      assertEquals("C5mUl", httpMethod0.getName());
      assertNotNull(httpMethod0);
      
      DefaultHttpRequest defaultHttpRequest0 = new DefaultHttpRequest(httpVersion0, httpMethod0, string0);
      assertEquals(1, httpVersion0.getMajorVersion());
      assertEquals("HTTP", httpVersion0.getProtocolName());
      assertEquals("HTTP/1.1", httpVersion0.getText());
      assertEquals(1, httpVersion0.getMinorVersion());
      assertTrue(httpVersion0.isKeepAliveDefault());
      assertEquals("HTTP/1.1", httpVersion0.toString());
      assertEquals("C5mUl", httpMethod0.toString());
      assertEquals("C5mUl", httpMethod0.getName());
      assertEquals("C5mUl", defaultHttpRequest0.getUri());
      assertNotNull(defaultHttpRequest0);
      
      Channel channel0 = null;
      NettyHttpRequest nettyHttpRequest0 = new NettyHttpRequest(defaultHttpRequest0, channel0);
      assertEquals(1, httpVersion0.getMajorVersion());
      assertEquals("HTTP", httpVersion0.getProtocolName());
      assertEquals("HTTP/1.1", httpVersion0.getText());
      assertEquals(1, httpVersion0.getMinorVersion());
      assertTrue(httpVersion0.isKeepAliveDefault());
      assertEquals("HTTP/1.1", httpVersion0.toString());
      assertEquals("C5mUl", httpMethod0.toString());
      assertEquals("C5mUl", httpMethod0.getName());
      assertEquals("C5mUl", defaultHttpRequest0.getUri());
      assertEquals("C5mUl", nettyHttpRequest0.uri());
      assertEquals("C5mUl", nettyHttpRequest0.rawPath());
      assertFalse(nettyHttpRequest0.hasContent());
      assertEquals(RestRequest.Method.GET, nettyHttpRequest0.method());
      assertNotNull(nettyHttpRequest0);
      
      boolean boolean0 = true;
      NettyHttpChannel nettyHttpChannel0 = new NettyHttpChannel(nettyHttpServerTransport0, nettyHttpRequest0, boolean0);
      assertEquals(Lifecycle.State.INITIALIZED, nettyHttpServerTransport0.lifecycleState());
      assertEquals(1, httpVersion0.getMajorVersion());
      assertEquals("HTTP", httpVersion0.getProtocolName());
      assertEquals("HTTP/1.1", httpVersion0.getText());
      assertEquals(1, httpVersion0.getMinorVersion());
      assertTrue(httpVersion0.isKeepAliveDefault());
      assertEquals("HTTP/1.1", httpVersion0.toString());
      assertEquals("C5mUl", httpMethod0.toString());
      assertEquals("C5mUl", httpMethod0.getName());
      assertEquals("C5mUl", defaultHttpRequest0.getUri());
      assertEquals("C5mUl", nettyHttpRequest0.uri());
      assertEquals("C5mUl", nettyHttpRequest0.rawPath());
      assertFalse(nettyHttpRequest0.hasContent());
      assertEquals(RestRequest.Method.GET, nettyHttpRequest0.method());
      assertTrue(nettyHttpChannel0.detailedErrorsEnabled());
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertNotNull(nettyHttpChannel0);
      
      RestRequest restRequest0 = nettyHttpChannel0.request();
      assertSame(restRequest0, nettyHttpRequest0);
      assertSame(nettyHttpRequest0, restRequest0);
      assertFalse(restRequest0.hasContent());
      assertEquals("C5mUl", restRequest0.rawPath());
      assertEquals("C5mUl", restRequest0.uri());
      assertEquals(RestRequest.Method.GET, restRequest0.method());
      assertEquals(Lifecycle.State.INITIALIZED, nettyHttpServerTransport0.lifecycleState());
      assertEquals(1, httpVersion0.getMajorVersion());
      assertEquals("HTTP", httpVersion0.getProtocolName());
      assertEquals("HTTP/1.1", httpVersion0.getText());
      assertEquals(1, httpVersion0.getMinorVersion());
      assertTrue(httpVersion0.isKeepAliveDefault());
      assertEquals("HTTP/1.1", httpVersion0.toString());
      assertEquals("C5mUl", httpMethod0.toString());
      assertEquals("C5mUl", httpMethod0.getName());
      assertEquals("C5mUl", defaultHttpRequest0.getUri());
      assertEquals("C5mUl", nettyHttpRequest0.uri());
      assertEquals("C5mUl", nettyHttpRequest0.rawPath());
      assertFalse(nettyHttpRequest0.hasContent());
      assertEquals(RestRequest.Method.GET, nettyHttpRequest0.method());
      assertTrue(nettyHttpChannel0.detailedErrorsEnabled());
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertNotNull(restRequest0);
      
      Table table0 = restNodesAction0.getTableWithHeader(restRequest0);
      assertSame(nettyHttpRequest0, restRequest0);
      assertSame(restRequest0, nettyHttpRequest0);
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertEquals(Lifecycle.State.INITIALIZED, nettyHttpServerTransport0.lifecycleState());
      assertEquals(1, httpVersion0.getMajorVersion());
      assertEquals("HTTP", httpVersion0.getProtocolName());
      assertEquals("HTTP/1.1", httpVersion0.getText());
      assertEquals(1, httpVersion0.getMinorVersion());
      assertTrue(httpVersion0.isKeepAliveDefault());
      assertEquals("HTTP/1.1", httpVersion0.toString());
      assertEquals("C5mUl", httpMethod0.toString());
      assertEquals("C5mUl", httpMethod0.getName());
      assertEquals("C5mUl", defaultHttpRequest0.getUri());
      assertEquals("C5mUl", nettyHttpRequest0.uri());
      assertEquals("C5mUl", nettyHttpRequest0.rawPath());
      assertFalse(nettyHttpRequest0.hasContent());
      assertEquals(RestRequest.Method.GET, nettyHttpRequest0.method());
      assertTrue(nettyHttpChannel0.detailedErrorsEnabled());
      assertFalse(restRequest0.hasContent());
      assertEquals("C5mUl", restRequest0.rawPath());
      assertEquals("C5mUl", restRequest0.uri());
      assertEquals(RestRequest.Method.GET, restRequest0.method());
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertNotNull(table0);
      
      StringBuilder stringBuilder0 = new StringBuilder();
      assertEquals("", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      int int0 = 0;
      NettyHttpServerTransport.SETTING_HTTP_NETTY_MAX_COMPOSITE_BUFFER_COMPONENTS = nettyHttpServerTransport0.SETTING_HTTP_NETTY_MAX_COMPOSITE_BUFFER_COMPONENTS;
      assertEquals(Lifecycle.State.INITIALIZED, nettyHttpServerTransport0.lifecycleState());
      
      char char0 = 'L';
      StringBuilder stringBuilder1 = stringBuilder0.insert(int0, char0);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      assertEquals("L", stringBuilder0.toString());
      assertEquals("L", stringBuilder1.toString());
      assertNotNull(stringBuilder1);
      
      restNodesAction0.documentation(stringBuilder0);
      assertSame(stringBuilder0, stringBuilder1);
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertEquals("L/_cat/nodes\n", stringBuilder0.toString());
      
      // Undeclared exception!
      try { 
        restNodesAction0.doRequest(nettyHttpRequest0, nettyHttpChannel0, client0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.rest.action.cat.RestNodesAction", e);
      }
  }

  @Test(timeout = 11000)
  public void test5()  throws Throwable  {
      MetaData metaData0 = MetaData.EMPTY_META_DATA;
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertNotNull(metaData0);
      
      Settings settings0 = metaData0.settings();
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertNotNull(settings0);
      
      Settings settings1 = IndexMetaData.addHumanReadableSettings(settings0);
      assertNotSame(settings0, settings1);
      assertNotSame(settings1, settings0);
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertTrue(settings1.equals((Object)settings0));
      assertNotNull(settings1);
      
      RestController restController0 = new RestController(settings0);
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertTrue(settings0.equals((Object)settings1));
      assertNotNull(restController0);
      
      Client client0 = null;
      RestNodesAction restNodesAction0 = new RestNodesAction(settings1, restController0, client0);
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertTrue(settings0.equals((Object)settings1));
      assertTrue(settings1.equals((Object)settings0));
      assertNotNull(restNodesAction0);
      
      RestRequest restRequest0 = null;
      Table table0 = restNodesAction0.getTableWithHeader(restRequest0);
      assertNotSame(settings0, settings1);
      assertNotSame(settings1, settings0);
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertTrue(settings0.equals((Object)settings1));
      assertTrue(settings1.equals((Object)settings0));
      assertNotNull(table0);
  }

  @Test(timeout = 11000)
  public void test6()  throws Throwable  {
      MetaData metaData0 = MetaData.EMPTY_META_DATA;
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertNotNull(metaData0);
      
      Settings settings0 = metaData0.settings();
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertNotNull(settings0);
      
      RestController restController0 = new RestController(settings0);
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertNotNull(restController0);
      
      ThreadPool threadPool0 = new ThreadPool(settings0);
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertNotNull(threadPool0);
      
      MapperService mapperService0 = null;
      IndexFieldDataService indexFieldDataService0 = null;
      String[] stringArray0 = new String[8];
      stringArray0[0] = metaData0.CONTEXT_MODE_GATEWAY;
      stringArray0[1] = metaData0.CONTEXT_MODE_GATEWAY;
      stringArray0[2] = metaData0.ALL;
      stringArray0[3] = metaData0.CONTEXT_MODE_PARAM;
      stringArray0[4] = metaData0.ALL;
      stringArray0[5] = metaData0.CONTEXT_MODE_GATEWAY;
      stringArray0[6] = metaData0.CONTEXT_MODE_PARAM;
      stringArray0[7] = metaData0.CONTEXT_MODE_GATEWAY;
      SearchLookup searchLookup0 = new SearchLookup(mapperService0, indexFieldDataService0, stringArray0);
      assertNotNull(searchLookup0);
      assertEquals(8, stringArray0.length);
      
      SourceLookup sourceLookup0 = searchLookup0.source();
      assertNull(sourceLookup0.sourceContentType());
      assertNotNull(sourceLookup0);
      assertEquals(8, stringArray0.length);
      
      NodeClient nodeClient0 = new NodeClient(settings0, threadPool0, sourceLookup0);
      assertNull(sourceLookup0.sourceContentType());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertNotNull(nodeClient0);
      assertEquals(8, stringArray0.length);
      
      RestNodesAction restNodesAction0 = new RestNodesAction(settings0, restController0, nodeClient0);
      assertNull(sourceLookup0.sourceContentType());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertNotNull(restNodesAction0);
      assertEquals(8, stringArray0.length);
      
      HttpVersion httpVersion0 = HttpVersion.HTTP_1_0;
      assertFalse(httpVersion0.isKeepAliveDefault());
      assertEquals(1, httpVersion0.getMajorVersion());
      assertEquals("HTTP", httpVersion0.getProtocolName());
      assertEquals("HTTP/1.0", httpVersion0.getText());
      assertEquals(0, httpVersion0.getMinorVersion());
      assertEquals("HTTP/1.0", httpVersion0.toString());
      assertNotNull(httpVersion0);
      
      HttpMethod httpMethod0 = HttpMethod.POST;
      assertEquals("POST", httpMethod0.getName());
      assertEquals("POST", httpMethod0.toString());
      assertNotNull(httpMethod0);
      
      String string0 = "UO*0-D2=";
      DefaultHttpRequest defaultHttpRequest0 = new DefaultHttpRequest(httpVersion0, httpMethod0, string0);
      assertFalse(httpVersion0.isKeepAliveDefault());
      assertEquals(1, httpVersion0.getMajorVersion());
      assertEquals("HTTP", httpVersion0.getProtocolName());
      assertEquals("HTTP/1.0", httpVersion0.getText());
      assertEquals(0, httpVersion0.getMinorVersion());
      assertEquals("HTTP/1.0", httpVersion0.toString());
      assertEquals("POST", httpMethod0.getName());
      assertEquals("POST", httpMethod0.toString());
      assertEquals("UO*0-D2=", defaultHttpRequest0.getUri());
      assertNotNull(defaultHttpRequest0);
      
      DefaultLocalServerChannelFactory defaultLocalServerChannelFactory0 = new DefaultLocalServerChannelFactory();
      assertNotNull(defaultLocalServerChannelFactory0);
      
      DefaultChannelPipeline defaultChannelPipeline0 = new DefaultChannelPipeline();
      assertFalse(defaultChannelPipeline0.isAttached());
      assertNotNull(defaultChannelPipeline0);
      
      LocalServerChannel localServerChannel0 = defaultLocalServerChannelFactory0.newChannel(defaultChannelPipeline0);
      assertTrue(defaultChannelPipeline0.isAttached());
      assertEquals(0, (int)localServerChannel0.getId());
      assertTrue(localServerChannel0.isReadable());
      assertNotNull(localServerChannel0);
      
      NettyHttpRequest nettyHttpRequest0 = new NettyHttpRequest(defaultHttpRequest0, localServerChannel0);
      assertFalse(httpVersion0.isKeepAliveDefault());
      assertEquals(1, httpVersion0.getMajorVersion());
      assertEquals("HTTP", httpVersion0.getProtocolName());
      assertEquals("HTTP/1.0", httpVersion0.getText());
      assertEquals(0, httpVersion0.getMinorVersion());
      assertEquals("HTTP/1.0", httpVersion0.toString());
      assertEquals("POST", httpMethod0.getName());
      assertEquals("POST", httpMethod0.toString());
      assertEquals("UO*0-D2=", defaultHttpRequest0.getUri());
      assertTrue(defaultChannelPipeline0.isAttached());
      assertEquals(0, (int)localServerChannel0.getId());
      assertTrue(localServerChannel0.isReadable());
      assertEquals(RestRequest.Method.POST, nettyHttpRequest0.method());
      assertEquals("UO*0-D2=", nettyHttpRequest0.uri());
      assertFalse(nettyHttpRequest0.hasContent());
      assertEquals("UO*0-D2=", nettyHttpRequest0.rawPath());
      assertNotNull(nettyHttpRequest0);
      
      NetworkService networkService0 = new NetworkService(settings0);
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertNotNull(networkService0);
      
      PageCacheRecycler pageCacheRecycler0 = new PageCacheRecycler(settings0, threadPool0);
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertNotNull(pageCacheRecycler0);
      
      NoneCircuitBreakerService noneCircuitBreakerService0 = new NoneCircuitBreakerService();
      assertEquals(Lifecycle.State.INITIALIZED, noneCircuitBreakerService0.lifecycleState());
      assertNotNull(noneCircuitBreakerService0);
      
      boolean boolean0 = true;
      BigArrays bigArrays0 = new BigArrays(pageCacheRecycler0, noneCircuitBreakerService0, boolean0);
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(Lifecycle.State.INITIALIZED, noneCircuitBreakerService0.lifecycleState());
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertNotNull(bigArrays0);
      
      NettyHttpServerTransport nettyHttpServerTransport0 = new NettyHttpServerTransport(settings0, networkService0, bigArrays0, threadPool0);
      assertEquals(Lifecycle.State.INITIALIZED, nettyHttpServerTransport0.lifecycleState());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(Lifecycle.State.INITIALIZED, noneCircuitBreakerService0.lifecycleState());
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertNotNull(nettyHttpServerTransport0);
      
      NettyHttpChannel nettyHttpChannel0 = new NettyHttpChannel(nettyHttpServerTransport0, nettyHttpRequest0, boolean0);
      assertEquals(Lifecycle.State.INITIALIZED, nettyHttpServerTransport0.lifecycleState());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertTrue(nettyHttpChannel0.detailedErrorsEnabled());
      assertFalse(httpVersion0.isKeepAliveDefault());
      assertEquals(1, httpVersion0.getMajorVersion());
      assertEquals("HTTP", httpVersion0.getProtocolName());
      assertEquals("HTTP/1.0", httpVersion0.getText());
      assertEquals(0, httpVersion0.getMinorVersion());
      assertEquals("HTTP/1.0", httpVersion0.toString());
      assertEquals("POST", httpMethod0.getName());
      assertEquals("POST", httpMethod0.toString());
      assertEquals("UO*0-D2=", defaultHttpRequest0.getUri());
      assertTrue(defaultChannelPipeline0.isAttached());
      assertEquals(0, (int)localServerChannel0.getId());
      assertTrue(localServerChannel0.isReadable());
      assertEquals(RestRequest.Method.POST, nettyHttpRequest0.method());
      assertEquals("UO*0-D2=", nettyHttpRequest0.uri());
      assertFalse(nettyHttpRequest0.hasContent());
      assertEquals("UO*0-D2=", nettyHttpRequest0.rawPath());
      assertEquals(Lifecycle.State.INITIALIZED, noneCircuitBreakerService0.lifecycleState());
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertNotNull(nettyHttpChannel0);
      
      // Undeclared exception!
      try { 
        restNodesAction0.doRequest(nettyHttpRequest0, nettyHttpChannel0, nodeClient0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // failed to parse / load source
         //
         verifyException("org.elasticsearch.search.lookup.SourceLookup", e);
      }
  }

  @Test(timeout = 11000)
  public void test7()  throws Throwable  {
      Settings settings0 = Settings.EMPTY;
      assertNotNull(settings0);
      
      RestController restController0 = new RestController(settings0);
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertNotNull(restController0);
      
      String string0 = "";
      String string1 = settings0.get(string0);
      assertNull(string1);
      
      Client client0 = null;
      RestNodesAction restNodesAction0 = new RestNodesAction(settings0, restController0, client0);
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertNotNull(restNodesAction0);
      
      RestRequest restRequest0 = null;
      Table table0 = restNodesAction0.getTableWithHeader(restRequest0);
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertNotNull(table0);
      
      RestFilter restFilter0 = mock(RestFilter.class, new ViolatedAssumptionAnswer());
      RestFilterChain restFilterChain0 = restController0.filterChainOrNull(restFilter0);
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertNull(restFilterChain0);
      
      // Undeclared exception!
      restNodesAction0.getTableWithHeader(restRequest0);
  }

  @Test(timeout = 11000)
  public void test8()  throws Throwable  {
      MetaData metaData0 = MetaData.EMPTY_META_DATA;
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals("_na_", metaData0.clusterUUID());
      assertNotNull(metaData0);
      
      Settings settings0 = metaData0.settings();
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals("_na_", metaData0.clusterUUID());
      assertNotNull(settings0);
      
      Settings settings1 = IndexMetaData.addHumanReadableSettings(settings0);
      assertNotSame(settings0, settings1);
      assertNotSame(settings1, settings0);
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals("_na_", metaData0.clusterUUID());
      assertTrue(settings1.equals((Object)settings0));
      assertNotNull(settings1);
      
      RestController restController0 = new RestController(settings0);
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertTrue(settings0.equals((Object)settings1));
      assertNotNull(restController0);
      
      Client client0 = null;
      RestNodesAction restNodesAction0 = new RestNodesAction(settings1, restController0, client0);
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertTrue(settings0.equals((Object)settings1));
      assertTrue(settings1.equals((Object)settings0));
      assertNotNull(restNodesAction0);
      
      StringBuilder stringBuilder0 = null;
      // Undeclared exception!
      try { 
        restNodesAction0.documentation(stringBuilder0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.rest.action.cat.RestNodesAction", e);
      }
  }
}
