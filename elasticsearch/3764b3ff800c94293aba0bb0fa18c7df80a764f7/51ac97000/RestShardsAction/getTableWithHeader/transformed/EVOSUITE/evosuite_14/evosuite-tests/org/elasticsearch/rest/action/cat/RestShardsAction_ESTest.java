/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 08 18:35:52 GMT 2021
 */

package org.elasticsearch.rest.action.cat;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.net.InetSocketAddress;
import java.net.SocketAddress;
import java.nio.channels.SocketChannel;
import java.util.concurrent.ScheduledThreadPoolExecutor;
import java.util.concurrent.ThreadPoolExecutor;
import org.apache.lucene.util.NamedThreadFactory;
import org.elasticsearch.action.admin.cluster.state.ClusterStateResponse;
import org.elasticsearch.action.admin.indices.stats.IndicesStatsResponse;
import org.elasticsearch.client.Client;
import org.elasticsearch.cluster.ClusterName;
import org.elasticsearch.cluster.ClusterState;
import org.elasticsearch.cluster.metadata.IndexMetaData;
import org.elasticsearch.cluster.metadata.MetaData;
import org.elasticsearch.common.Table;
import org.elasticsearch.common.bytes.BytesArray;
import org.elasticsearch.common.bytes.BytesReference;
import org.elasticsearch.common.component.Lifecycle;
import org.elasticsearch.common.component.LifecycleListener;
import org.elasticsearch.common.io.stream.StreamInput;
import org.elasticsearch.common.network.NetworkService;
import org.elasticsearch.common.settings.Settings;
import org.elasticsearch.common.util.BigArrays;
import org.elasticsearch.http.netty.NettyHttpChannel;
import org.elasticsearch.http.netty.NettyHttpRequest;
import org.elasticsearch.http.netty.NettyHttpServerTransport;
import org.elasticsearch.rest.RestController;
import org.elasticsearch.rest.RestRequest;
import org.elasticsearch.rest.action.cat.RestShardsAction;
import org.elasticsearch.threadpool.ThreadPool;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.net.MockInetSocketAddress;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.jboss.netty.channel.Channel;
import org.jboss.netty.channel.ChannelFactory;
import org.jboss.netty.channel.ChannelSink;
import org.jboss.netty.channel.DefaultChannelPipeline;
import org.jboss.netty.channel.local.DefaultLocalClientChannelFactory;
import org.jboss.netty.channel.local.DefaultLocalServerChannelFactory;
import org.jboss.netty.channel.local.LocalChannel;
import org.jboss.netty.channel.local.LocalServerChannel;
import org.jboss.netty.channel.socket.nio.NioSocketChannel;
import org.jboss.netty.channel.socket.nio.NioWorker;
import org.jboss.netty.handler.codec.http.DefaultHttpRequest;
import org.jboss.netty.handler.codec.http.HttpMethod;
import org.jboss.netty.handler.codec.http.HttpVersion;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class RestShardsAction_ESTest extends RestShardsAction_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test00()  throws Throwable  {
      Settings settings0 = Settings.Builder.EMPTY_SETTINGS;
      assertNotNull(settings0);
      
      RestController restController0 = new RestController(settings0);
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertNotNull(restController0);
      
      Client client0 = null;
      RestShardsAction restShardsAction0 = new RestShardsAction(settings0, restController0, client0);
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertNotNull(restShardsAction0);
      
      StringBuilder stringBuilder0 = new StringBuilder();
      assertEquals("", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      restShardsAction0.documentation(stringBuilder0);
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertEquals("/_cat/shards\n/_cat/shards/{index}\n", stringBuilder0.toString());
  }

  @Test(timeout = 11000)
  public void test01()  throws Throwable  {
      Settings settings0 = Settings.EMPTY;
      assertNotNull(settings0);
      
      Client client0 = null;
      boolean boolean0 = false;
      HttpVersion httpVersion0 = HttpVersion.HTTP_1_0;
      assertEquals(1, httpVersion0.getMajorVersion());
      assertEquals("HTTP/1.0", httpVersion0.toString());
      assertEquals(0, httpVersion0.getMinorVersion());
      assertEquals("HTTP", httpVersion0.getProtocolName());
      assertFalse(httpVersion0.isKeepAliveDefault());
      assertEquals("HTTP/1.0", httpVersion0.getText());
      assertNotNull(httpVersion0);
      
      HttpMethod httpMethod0 = HttpMethod.POST;
      assertEquals("POST", httpMethod0.getName());
      assertEquals("POST", httpMethod0.toString());
      assertNotNull(httpMethod0);
      
      String string0 = ".CLyyy?a";
      DefaultHttpRequest defaultHttpRequest0 = new DefaultHttpRequest(httpVersion0, httpMethod0, string0);
      assertEquals(1, httpVersion0.getMajorVersion());
      assertEquals("HTTP/1.0", httpVersion0.toString());
      assertEquals(0, httpVersion0.getMinorVersion());
      assertEquals("HTTP", httpVersion0.getProtocolName());
      assertFalse(httpVersion0.isKeepAliveDefault());
      assertEquals("HTTP/1.0", httpVersion0.getText());
      assertEquals("POST", httpMethod0.getName());
      assertEquals("POST", httpMethod0.toString());
      assertEquals(".CLyyy?a", defaultHttpRequest0.getUri());
      assertNotNull(defaultHttpRequest0);
      
      Channel channel0 = null;
      NettyHttpRequest nettyHttpRequest0 = new NettyHttpRequest(defaultHttpRequest0, channel0);
      assertEquals(1, httpVersion0.getMajorVersion());
      assertEquals("HTTP/1.0", httpVersion0.toString());
      assertEquals(0, httpVersion0.getMinorVersion());
      assertEquals("HTTP", httpVersion0.getProtocolName());
      assertFalse(httpVersion0.isKeepAliveDefault());
      assertEquals("HTTP/1.0", httpVersion0.getText());
      assertEquals("POST", httpMethod0.getName());
      assertEquals("POST", httpMethod0.toString());
      assertEquals(".CLyyy?a", defaultHttpRequest0.getUri());
      assertEquals(RestRequest.Method.POST, nettyHttpRequest0.method());
      assertEquals(".CLyyy?a", nettyHttpRequest0.uri());
      assertEquals(".CLyyy", nettyHttpRequest0.rawPath());
      assertFalse(nettyHttpRequest0.hasContent());
      assertNotNull(nettyHttpRequest0);
      
      RestController restController0 = new RestController(settings0);
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertNotNull(restController0);
      
      RestShardsAction restShardsAction0 = new RestShardsAction(settings0, restController0, client0);
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertNotNull(restShardsAction0);
      
      ClusterName clusterName0 = ClusterName.clusterNameFromSettings(settings0);
      assertEquals("elasticsearch", clusterName0.value());
      assertNotNull(clusterName0);
      
      ClusterState clusterState0 = ClusterState.PROTO;
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertFalse(clusterState0.wasReadFromDiff());
      assertEquals(0L, clusterState0.getVersion());
      assertEquals(0L, clusterState0.version());
      assertEquals("AAAAAAEAQACCAAAAAwAAAA", clusterState0.stateUUID());
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState0.status());
      assertNotNull(clusterState0);
      
      ClusterStateResponse clusterStateResponse0 = new ClusterStateResponse(clusterName0, clusterState0);
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertEquals("elasticsearch", clusterName0.value());
      assertFalse(clusterState0.wasReadFromDiff());
      assertEquals(0L, clusterState0.getVersion());
      assertEquals(0L, clusterState0.version());
      assertEquals("AAAAAAEAQACCAAAAAwAAAA", clusterState0.stateUUID());
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState0.status());
      assertNotNull(clusterStateResponse0);
      
      IndicesStatsResponse indicesStatsResponse0 = mock(IndicesStatsResponse.class, new ViolatedAssumptionAnswer());
      Table table0 = restShardsAction0.buildTable(nettyHttpRequest0, clusterStateResponse0, indicesStatsResponse0);
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertEquals(1, httpVersion0.getMajorVersion());
      assertEquals("HTTP/1.0", httpVersion0.toString());
      assertEquals(0, httpVersion0.getMinorVersion());
      assertEquals("HTTP", httpVersion0.getProtocolName());
      assertFalse(httpVersion0.isKeepAliveDefault());
      assertEquals("HTTP/1.0", httpVersion0.getText());
      assertEquals("POST", httpMethod0.getName());
      assertEquals("POST", httpMethod0.toString());
      assertEquals(".CLyyy?a", defaultHttpRequest0.getUri());
      assertEquals(RestRequest.Method.POST, nettyHttpRequest0.method());
      assertEquals(".CLyyy?a", nettyHttpRequest0.uri());
      assertEquals(".CLyyy", nettyHttpRequest0.rawPath());
      assertFalse(nettyHttpRequest0.hasContent());
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertEquals("elasticsearch", clusterName0.value());
      assertFalse(clusterState0.wasReadFromDiff());
      assertEquals(0L, clusterState0.getVersion());
      assertEquals(0L, clusterState0.version());
      assertEquals("AAAAAAEAQACCAAAAAwAAAA", clusterState0.stateUUID());
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState0.status());
      assertNotNull(table0);
      
      NettyHttpServerTransport nettyHttpServerTransport0 = null;
      NettyHttpChannel nettyHttpChannel0 = new NettyHttpChannel(nettyHttpServerTransport0, nettyHttpRequest0, boolean0);
      assertFalse(nettyHttpChannel0.detailedErrorsEnabled());
      assertEquals(1, httpVersion0.getMajorVersion());
      assertEquals("HTTP/1.0", httpVersion0.toString());
      assertEquals(0, httpVersion0.getMinorVersion());
      assertEquals("HTTP", httpVersion0.getProtocolName());
      assertFalse(httpVersion0.isKeepAliveDefault());
      assertEquals("HTTP/1.0", httpVersion0.getText());
      assertEquals("POST", httpMethod0.getName());
      assertEquals("POST", httpMethod0.toString());
      assertEquals(".CLyyy?a", defaultHttpRequest0.getUri());
      assertEquals(RestRequest.Method.POST, nettyHttpRequest0.method());
      assertEquals(".CLyyy?a", nettyHttpRequest0.uri());
      assertEquals(".CLyyy", nettyHttpRequest0.rawPath());
      assertFalse(nettyHttpRequest0.hasContent());
      assertNotNull(nettyHttpChannel0);
      
      // Undeclared exception!
      try { 
        restShardsAction0.doRequest(nettyHttpRequest0, nettyHttpChannel0, client0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.rest.action.cat.RestShardsAction", e);
      }
  }

  @Test(timeout = 11000)
  public void test02()  throws Throwable  {
      Settings settings0 = Settings.Builder.EMPTY_SETTINGS;
      assertNotNull(settings0);
      
      Client client0 = null;
      HttpVersion httpVersion0 = HttpVersion.HTTP_1_0;
      assertFalse(httpVersion0.isKeepAliveDefault());
      assertEquals(1, httpVersion0.getMajorVersion());
      assertEquals("HTTP", httpVersion0.getProtocolName());
      assertEquals("HTTP/1.0", httpVersion0.getText());
      assertEquals("HTTP/1.0", httpVersion0.toString());
      assertEquals(0, httpVersion0.getMinorVersion());
      assertNotNull(httpVersion0);
      
      HttpMethod httpMethod0 = HttpMethod.GET;
      assertEquals("GET", httpMethod0.getName());
      assertEquals("GET", httpMethod0.toString());
      assertNotNull(httpMethod0);
      
      String string0 = "nv<=mzUOiI{M9)";
      DefaultHttpRequest defaultHttpRequest0 = new DefaultHttpRequest(httpVersion0, httpMethod0, string0);
      assertFalse(httpVersion0.isKeepAliveDefault());
      assertEquals(1, httpVersion0.getMajorVersion());
      assertEquals("HTTP", httpVersion0.getProtocolName());
      assertEquals("HTTP/1.0", httpVersion0.getText());
      assertEquals("HTTP/1.0", httpVersion0.toString());
      assertEquals(0, httpVersion0.getMinorVersion());
      assertEquals("GET", httpMethod0.getName());
      assertEquals("GET", httpMethod0.toString());
      assertEquals("nv<=mzUOiI{M9)", defaultHttpRequest0.getUri());
      assertNotNull(defaultHttpRequest0);
      
      Channel channel0 = null;
      NettyHttpRequest nettyHttpRequest0 = new NettyHttpRequest(defaultHttpRequest0, channel0);
      assertFalse(httpVersion0.isKeepAliveDefault());
      assertEquals(1, httpVersion0.getMajorVersion());
      assertEquals("HTTP", httpVersion0.getProtocolName());
      assertEquals("HTTP/1.0", httpVersion0.getText());
      assertEquals("HTTP/1.0", httpVersion0.toString());
      assertEquals(0, httpVersion0.getMinorVersion());
      assertEquals("GET", httpMethod0.getName());
      assertEquals("GET", httpMethod0.toString());
      assertEquals("nv<=mzUOiI{M9)", defaultHttpRequest0.getUri());
      assertEquals(RestRequest.Method.GET, nettyHttpRequest0.method());
      assertEquals("nv<=mzUOiI{M9)", nettyHttpRequest0.rawPath());
      assertEquals("nv<=mzUOiI{M9)", nettyHttpRequest0.uri());
      assertFalse(nettyHttpRequest0.hasContent());
      assertNotNull(nettyHttpRequest0);
      
      RestController restController0 = new RestController(settings0);
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertNotNull(restController0);
      
      RestShardsAction restShardsAction0 = new RestShardsAction(settings0, restController0, client0);
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertNotNull(restShardsAction0);
      
      ClusterName clusterName0 = new ClusterName(string0);
      assertEquals("nv<=mzUOiI{M9)", clusterName0.value());
      assertNotNull(clusterName0);
      
      ClusterState clusterState0 = ClusterState.PROTO;
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertFalse(clusterState0.wasReadFromDiff());
      assertEquals(0L, clusterState0.version());
      assertEquals("AAAAAAEAQACCAAAAAwAAAA", clusterState0.stateUUID());
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState0.status());
      assertEquals(0L, clusterState0.getVersion());
      assertNotNull(clusterState0);
      
      ClusterStateResponse clusterStateResponse0 = new ClusterStateResponse(clusterName0, clusterState0);
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertEquals("nv<=mzUOiI{M9)", clusterName0.value());
      assertFalse(clusterState0.wasReadFromDiff());
      assertEquals(0L, clusterState0.version());
      assertEquals("AAAAAAEAQACCAAAAAwAAAA", clusterState0.stateUUID());
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState0.status());
      assertEquals(0L, clusterState0.getVersion());
      assertNotNull(clusterStateResponse0);
      
      IndicesStatsResponse indicesStatsResponse0 = mock(IndicesStatsResponse.class, new ViolatedAssumptionAnswer());
      Table table0 = restShardsAction0.buildTable(nettyHttpRequest0, clusterStateResponse0, indicesStatsResponse0);
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertFalse(httpVersion0.isKeepAliveDefault());
      assertEquals(1, httpVersion0.getMajorVersion());
      assertEquals("HTTP", httpVersion0.getProtocolName());
      assertEquals("HTTP/1.0", httpVersion0.getText());
      assertEquals("HTTP/1.0", httpVersion0.toString());
      assertEquals(0, httpVersion0.getMinorVersion());
      assertEquals("GET", httpMethod0.getName());
      assertEquals("GET", httpMethod0.toString());
      assertEquals("nv<=mzUOiI{M9)", defaultHttpRequest0.getUri());
      assertEquals(RestRequest.Method.GET, nettyHttpRequest0.method());
      assertEquals("nv<=mzUOiI{M9)", nettyHttpRequest0.rawPath());
      assertEquals("nv<=mzUOiI{M9)", nettyHttpRequest0.uri());
      assertFalse(nettyHttpRequest0.hasContent());
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertEquals("nv<=mzUOiI{M9)", clusterName0.value());
      assertFalse(clusterState0.wasReadFromDiff());
      assertEquals(0L, clusterState0.version());
      assertEquals("AAAAAAEAQACCAAAAAwAAAA", clusterState0.stateUUID());
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState0.status());
      assertEquals(0L, clusterState0.getVersion());
      assertNotNull(table0);
  }

  @Test(timeout = 11000)
  public void test03()  throws Throwable  {
      MetaData metaData0 = MetaData.EMPTY_META_DATA;
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertNotNull(metaData0);
      
      Settings settings0 = metaData0.persistentSettings();
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertNotNull(settings0);
      
      RestController restController0 = new RestController(settings0);
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertNotNull(restController0);
      
      Client client0 = null;
      RestShardsAction restShardsAction0 = new RestShardsAction(settings0, restController0, client0);
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertNotNull(restShardsAction0);
  }

  @Test(timeout = 11000)
  public void test04()  throws Throwable  {
      Settings settings0 = Settings.EMPTY;
      assertNotNull(settings0);
      
      Settings settings1 = IndexMetaData.addHumanReadableSettings(settings0);
      assertTrue(settings1.equals((Object)settings0));
      assertNotSame(settings0, settings1);
      assertNotSame(settings1, settings0);
      assertNotNull(settings1);
      
      RestController restController0 = null;
      Client client0 = null;
      RestShardsAction restShardsAction0 = null;
      try {
        restShardsAction0 = new RestShardsAction(settings1, restController0, client0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.rest.action.cat.RestShardsAction", e);
      }
  }

  @Test(timeout = 11000)
  public void test05()  throws Throwable  {
      Settings settings0 = Settings.Builder.EMPTY_SETTINGS;
      assertNotNull(settings0);
      
      RestController restController0 = new RestController(settings0);
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertNotNull(restController0);
      
      Client client0 = null;
      RestShardsAction restShardsAction0 = new RestShardsAction(settings0, restController0, client0);
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertNotNull(restShardsAction0);
      
      HttpVersion httpVersion0 = HttpVersion.HTTP_1_1;
      assertTrue(httpVersion0.isKeepAliveDefault());
      assertEquals("HTTP/1.1", httpVersion0.toString());
      assertEquals("HTTP/1.1", httpVersion0.getText());
      assertEquals(1, httpVersion0.getMinorVersion());
      assertEquals(1, httpVersion0.getMajorVersion());
      assertEquals("HTTP", httpVersion0.getProtocolName());
      assertNotNull(httpVersion0);
      
      HttpMethod httpMethod0 = HttpMethod.CONNECT;
      assertEquals("CONNECT", httpMethod0.toString());
      assertEquals("CONNECT", httpMethod0.getName());
      assertNotNull(httpMethod0);
      
      String string0 = "=%;C=s/@L$k$>";
      DefaultHttpRequest defaultHttpRequest0 = new DefaultHttpRequest(httpVersion0, httpMethod0, string0);
      assertTrue(httpVersion0.isKeepAliveDefault());
      assertEquals("HTTP/1.1", httpVersion0.toString());
      assertEquals("HTTP/1.1", httpVersion0.getText());
      assertEquals(1, httpVersion0.getMinorVersion());
      assertEquals(1, httpVersion0.getMajorVersion());
      assertEquals("HTTP", httpVersion0.getProtocolName());
      assertEquals("CONNECT", httpMethod0.toString());
      assertEquals("CONNECT", httpMethod0.getName());
      assertEquals("=%;C=s/@L$k$>", defaultHttpRequest0.getUri());
      assertNotNull(defaultHttpRequest0);
      
      DefaultChannelPipeline defaultChannelPipeline0 = new DefaultChannelPipeline();
      assertFalse(defaultChannelPipeline0.isAttached());
      assertNotNull(defaultChannelPipeline0);
      
      Channel channel0 = defaultChannelPipeline0.getChannel();
      assertFalse(defaultChannelPipeline0.isAttached());
      assertNull(channel0);
      
      NettyHttpRequest nettyHttpRequest0 = new NettyHttpRequest(defaultHttpRequest0, channel0);
      assertTrue(httpVersion0.isKeepAliveDefault());
      assertEquals("HTTP/1.1", httpVersion0.toString());
      assertEquals("HTTP/1.1", httpVersion0.getText());
      assertEquals(1, httpVersion0.getMinorVersion());
      assertEquals(1, httpVersion0.getMajorVersion());
      assertEquals("HTTP", httpVersion0.getProtocolName());
      assertEquals("CONNECT", httpMethod0.toString());
      assertEquals("CONNECT", httpMethod0.getName());
      assertEquals("=%;C=s/@L$k$>", defaultHttpRequest0.getUri());
      assertFalse(defaultChannelPipeline0.isAttached());
      assertEquals("=%;C=s/@L$k$>", nettyHttpRequest0.rawPath());
      assertEquals("=%;C=s/@L$k$>", nettyHttpRequest0.uri());
      assertEquals(RestRequest.Method.GET, nettyHttpRequest0.method());
      assertFalse(nettyHttpRequest0.hasContent());
      assertNotNull(nettyHttpRequest0);
      
      ClusterStateResponse clusterStateResponse0 = new ClusterStateResponse();
      assertNotNull(clusterStateResponse0);
      
      IndicesStatsResponse indicesStatsResponse0 = mock(IndicesStatsResponse.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        restShardsAction0.buildTable(nettyHttpRequest0, clusterStateResponse0, indicesStatsResponse0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.rest.action.cat.RestShardsAction", e);
      }
  }

  @Test(timeout = 11000)
  public void test06()  throws Throwable  {
      MetaData metaData0 = MetaData.PROTO;
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0, metaData0.getNumberOfShards());
      assertNotNull(metaData0);
      
      Settings settings0 = metaData0.persistentSettings();
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0, metaData0.getNumberOfShards());
      assertNotNull(settings0);
      
      RestController restController0 = new RestController(settings0);
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertNotNull(restController0);
      
      Client client0 = null;
      RestShardsAction restShardsAction0 = new RestShardsAction(settings0, restController0, client0);
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertNotNull(restShardsAction0);
      
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) metaData0.ALL);
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals("_all", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      StringBuilder stringBuilder1 = stringBuilder0.append((CharSequence) metaData0.CONTEXT_MODE_PARAM);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals("_allcontext_mode", stringBuilder0.toString());
      assertEquals("_allcontext_mode", stringBuilder1.toString());
      assertNotNull(stringBuilder1);
      
      char[] charArray0 = new char[5];
      char char0 = 'R';
      charArray0[0] = char0;
      char char1 = 'c';
      charArray0[1] = char1;
      char char2 = 'n';
      charArray0[2] = char2;
      char char3 = '3';
      charArray0[3] = char3;
      char char4 = 'E';
      charArray0[4] = char4;
      StringBuilder stringBuilder2 = stringBuilder1.append(charArray0);
      assertArrayEquals(new char[] {'R', 'c', 'n', '3', 'E'}, charArray0);
      assertSame(stringBuilder2, stringBuilder1);
      assertSame(stringBuilder2, stringBuilder0);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder1, stringBuilder2);
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals("_allcontext_modeRcn3E", stringBuilder2.toString());
      assertEquals("_allcontext_modeRcn3E", stringBuilder0.toString());
      assertEquals("_allcontext_modeRcn3E", stringBuilder1.toString());
      assertNotNull(stringBuilder2);
      assertEquals(5, charArray0.length);
      
      int int0 = 1;
      StringBuilder stringBuilder3 = stringBuilder2.insert(int0, (float) int0);
      assertArrayEquals(new char[] {'R', 'c', 'n', '3', 'E'}, charArray0);
      assertSame(stringBuilder2, stringBuilder1);
      assertSame(stringBuilder2, stringBuilder3);
      assertSame(stringBuilder2, stringBuilder0);
      assertSame(stringBuilder3, stringBuilder1);
      assertSame(stringBuilder3, stringBuilder0);
      assertSame(stringBuilder3, stringBuilder2);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder0, stringBuilder3);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder1, stringBuilder3);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder1, stringBuilder2);
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals("_1.0allcontext_modeRcn3E", stringBuilder2.toString());
      assertEquals("_1.0allcontext_modeRcn3E", stringBuilder3.toString());
      assertEquals("_1.0allcontext_modeRcn3E", stringBuilder0.toString());
      assertEquals("_1.0allcontext_modeRcn3E", stringBuilder1.toString());
      assertNotNull(stringBuilder3);
      assertEquals(5, charArray0.length);
      
      int int1 = 882;
      StringBuilder stringBuilder4 = stringBuilder3.delete(int0, int1);
      assertArrayEquals(new char[] {'R', 'c', 'n', '3', 'E'}, charArray0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertSame(stringBuilder2, stringBuilder4);
      assertSame(stringBuilder2, stringBuilder1);
      assertSame(stringBuilder2, stringBuilder3);
      assertSame(stringBuilder2, stringBuilder0);
      assertSame(stringBuilder3, stringBuilder1);
      assertSame(stringBuilder3, stringBuilder4);
      assertSame(stringBuilder3, stringBuilder0);
      assertSame(stringBuilder3, stringBuilder2);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder0, stringBuilder3);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder0, stringBuilder4);
      assertSame(stringBuilder4, stringBuilder1);
      assertSame(stringBuilder4, stringBuilder3);
      assertSame(stringBuilder4, stringBuilder0);
      assertSame(stringBuilder4, stringBuilder2);
      assertSame(stringBuilder1, stringBuilder3);
      assertSame(stringBuilder1, stringBuilder4);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder1, stringBuilder2);
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals("_", stringBuilder2.toString());
      assertEquals("_", stringBuilder3.toString());
      assertEquals("_", stringBuilder0.toString());
      assertEquals("_", stringBuilder4.toString());
      assertEquals("_", stringBuilder1.toString());
      assertNotNull(stringBuilder4);
      assertEquals(5, charArray0.length);
      
      restShardsAction0.documentation(stringBuilder4);
      assertArrayEquals(new char[] {'R', 'c', 'n', '3', 'E'}, charArray0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertSame(stringBuilder2, stringBuilder4);
      assertSame(stringBuilder2, stringBuilder1);
      assertSame(stringBuilder2, stringBuilder3);
      assertSame(stringBuilder2, stringBuilder0);
      assertSame(stringBuilder3, stringBuilder1);
      assertSame(stringBuilder3, stringBuilder4);
      assertSame(stringBuilder3, stringBuilder0);
      assertSame(stringBuilder3, stringBuilder2);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder0, stringBuilder3);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder0, stringBuilder4);
      assertSame(stringBuilder4, stringBuilder1);
      assertSame(stringBuilder4, stringBuilder3);
      assertSame(stringBuilder4, stringBuilder0);
      assertSame(stringBuilder4, stringBuilder2);
      assertSame(stringBuilder1, stringBuilder3);
      assertSame(stringBuilder1, stringBuilder4);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder1, stringBuilder2);
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals("_/_cat/shards\n/_cat/shards/{index}\n", stringBuilder2.toString());
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertEquals("_/_cat/shards\n/_cat/shards/{index}\n", stringBuilder3.toString());
      assertEquals("_/_cat/shards\n/_cat/shards/{index}\n", stringBuilder0.toString());
      assertEquals("_/_cat/shards\n/_cat/shards/{index}\n", stringBuilder4.toString());
      assertEquals("_/_cat/shards\n/_cat/shards/{index}\n", stringBuilder1.toString());
      assertEquals(5, charArray0.length);
  }

  @Test(timeout = 11000)
  public void test07()  throws Throwable  {
      Settings settings0 = Settings.Builder.EMPTY_SETTINGS;
      assertNotNull(settings0);
      
      IndexMetaData indexMetaData0 = IndexMetaData.PROTO;
      assertEquals(1, indexMetaData0.getTotalNumberOfShards());
      assertEquals(1, indexMetaData0.getNumberOfShards());
      assertEquals("_na_", indexMetaData0.getIndexUUID());
      assertEquals(0, indexMetaData0.getNumberOfReplicas());
      assertEquals(1L, indexMetaData0.getVersion());
      assertEquals(IndexMetaData.State.OPEN, indexMetaData0.getState());
      assertNotNull(indexMetaData0);
      
      Settings settings1 = indexMetaData0.getSettings();
      assertFalse(settings1.equals((Object)settings0));
      assertNotSame(settings1, settings0);
      assertEquals(1, indexMetaData0.getTotalNumberOfShards());
      assertEquals(1, indexMetaData0.getNumberOfShards());
      assertEquals("_na_", indexMetaData0.getIndexUUID());
      assertEquals(0, indexMetaData0.getNumberOfReplicas());
      assertEquals(1L, indexMetaData0.getVersion());
      assertEquals(IndexMetaData.State.OPEN, indexMetaData0.getState());
      assertNotNull(settings1);
      
      RestController restController0 = new RestController(settings1);
      assertFalse(settings1.equals((Object)settings0));
      assertEquals(1, indexMetaData0.getTotalNumberOfShards());
      assertEquals(1, indexMetaData0.getNumberOfShards());
      assertEquals("_na_", indexMetaData0.getIndexUUID());
      assertEquals(0, indexMetaData0.getNumberOfReplicas());
      assertEquals(1L, indexMetaData0.getVersion());
      assertEquals(IndexMetaData.State.OPEN, indexMetaData0.getState());
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertNotNull(restController0);
      
      Client client0 = null;
      LifecycleListener lifecycleListener0 = mock(LifecycleListener.class, new ViolatedAssumptionAnswer());
      restController0.addLifecycleListener(lifecycleListener0);
      assertFalse(settings1.equals((Object)settings0));
      assertNotSame(settings1, settings0);
      assertEquals(1, indexMetaData0.getTotalNumberOfShards());
      assertEquals(1, indexMetaData0.getNumberOfShards());
      assertEquals("_na_", indexMetaData0.getIndexUUID());
      assertEquals(0, indexMetaData0.getNumberOfReplicas());
      assertEquals(1L, indexMetaData0.getVersion());
      assertEquals(IndexMetaData.State.OPEN, indexMetaData0.getState());
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      
      RestShardsAction restShardsAction0 = new RestShardsAction(settings0, restController0, client0);
      assertFalse(settings0.equals((Object)settings1));
      assertFalse(settings1.equals((Object)settings0));
      assertEquals(1, indexMetaData0.getTotalNumberOfShards());
      assertEquals(1, indexMetaData0.getNumberOfShards());
      assertEquals("_na_", indexMetaData0.getIndexUUID());
      assertEquals(0, indexMetaData0.getNumberOfReplicas());
      assertEquals(1L, indexMetaData0.getVersion());
      assertEquals(IndexMetaData.State.OPEN, indexMetaData0.getState());
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertNotNull(restShardsAction0);
      
      StringBuilder stringBuilder0 = null;
      // Undeclared exception!
      try { 
        restShardsAction0.documentation(stringBuilder0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.rest.action.cat.RestShardsAction", e);
      }
  }

  @Test(timeout = 11000)
  public void test08()  throws Throwable  {
      Settings settings0 = Settings.EMPTY;
      assertNotNull(settings0);
      
      RestController restController0 = new RestController(settings0);
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertNotNull(restController0);
      
      Client client0 = null;
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = true;
      boolean boolean1 = false;
      boolean boolean2 = FileSystemHandling.setPermissions(evoSuiteFile0, boolean0, boolean1, boolean0);
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      RestShardsAction restShardsAction0 = new RestShardsAction(settings0, restController0, client0);
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertNotNull(restShardsAction0);
      
      String string0 = "dgM&>=C@Fal";
      int int0 = 0;
      boolean boolean3 = true;
      String[] stringArray0 = new String[4];
      stringArray0[0] = string0;
      stringArray0[1] = string0;
      stringArray0[2] = string0;
      stringArray0[3] = string0;
      restController0.registerRelevantHeaders(stringArray0);
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertEquals(4, stringArray0.length);
      
      HttpVersion httpVersion0 = new HttpVersion(string0, int0, int0, boolean3);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertEquals(0, httpVersion0.getMinorVersion());
      assertTrue(httpVersion0.isKeepAliveDefault());
      assertEquals("DGM&>=C@FAL/0.0", httpVersion0.toString());
      assertEquals("DGM&>=C@FAL", httpVersion0.getProtocolName());
      assertEquals("DGM&>=C@FAL/0.0", httpVersion0.getText());
      assertEquals(0, httpVersion0.getMajorVersion());
      assertNotNull(httpVersion0);
      
      HttpMethod httpMethod0 = HttpMethod.valueOf(string0);
      assertEquals("dgM&>=C@Fal", httpMethod0.toString());
      assertEquals("dgM&>=C@Fal", httpMethod0.getName());
      assertNotNull(httpMethod0);
      
      String string1 = "";
      DefaultHttpRequest defaultHttpRequest0 = new DefaultHttpRequest(httpVersion0, httpMethod0, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertEquals(0, httpVersion0.getMinorVersion());
      assertTrue(httpVersion0.isKeepAliveDefault());
      assertEquals("DGM&>=C@FAL/0.0", httpVersion0.toString());
      assertEquals("DGM&>=C@FAL", httpVersion0.getProtocolName());
      assertEquals("DGM&>=C@FAL/0.0", httpVersion0.getText());
      assertEquals(0, httpVersion0.getMajorVersion());
      assertEquals("dgM&>=C@Fal", httpMethod0.toString());
      assertEquals("dgM&>=C@Fal", httpMethod0.getName());
      assertEquals("", defaultHttpRequest0.getUri());
      assertNotNull(defaultHttpRequest0);
      
      DefaultChannelPipeline defaultChannelPipeline0 = new DefaultChannelPipeline();
      assertFalse(defaultChannelPipeline0.isAttached());
      assertNotNull(defaultChannelPipeline0);
      
      Channel channel0 = defaultChannelPipeline0.getChannel();
      assertFalse(defaultChannelPipeline0.isAttached());
      assertNull(channel0);
      
      NettyHttpRequest nettyHttpRequest0 = new NettyHttpRequest(defaultHttpRequest0, channel0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertEquals(0, httpVersion0.getMinorVersion());
      assertTrue(httpVersion0.isKeepAliveDefault());
      assertEquals("DGM&>=C@FAL/0.0", httpVersion0.toString());
      assertEquals("DGM&>=C@FAL", httpVersion0.getProtocolName());
      assertEquals("DGM&>=C@FAL/0.0", httpVersion0.getText());
      assertEquals(0, httpVersion0.getMajorVersion());
      assertEquals("dgM&>=C@Fal", httpMethod0.toString());
      assertEquals("dgM&>=C@Fal", httpMethod0.getName());
      assertEquals("", defaultHttpRequest0.getUri());
      assertFalse(defaultChannelPipeline0.isAttached());
      assertEquals(RestRequest.Method.GET, nettyHttpRequest0.method());
      assertEquals("", nettyHttpRequest0.rawPath());
      assertFalse(nettyHttpRequest0.hasContent());
      assertEquals("", nettyHttpRequest0.uri());
      assertNotNull(nettyHttpRequest0);
      
      Table table0 = restShardsAction0.getTableWithHeader(nettyHttpRequest0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertEquals(0, httpVersion0.getMinorVersion());
      assertTrue(httpVersion0.isKeepAliveDefault());
      assertEquals("DGM&>=C@FAL/0.0", httpVersion0.toString());
      assertEquals("DGM&>=C@FAL", httpVersion0.getProtocolName());
      assertEquals("DGM&>=C@FAL/0.0", httpVersion0.getText());
      assertEquals(0, httpVersion0.getMajorVersion());
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertEquals("dgM&>=C@Fal", httpMethod0.toString());
      assertEquals("dgM&>=C@Fal", httpMethod0.getName());
      assertEquals("", defaultHttpRequest0.getUri());
      assertFalse(defaultChannelPipeline0.isAttached());
      assertEquals(RestRequest.Method.GET, nettyHttpRequest0.method());
      assertEquals("", nettyHttpRequest0.rawPath());
      assertFalse(nettyHttpRequest0.hasContent());
      assertEquals("", nettyHttpRequest0.uri());
      assertNotNull(table0);
  }

  @Test(timeout = 11000)
  public void test09()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertFalse(boolean0);
      assertEquals(1, byteArray0.length);
      
      int int0 = 684;
      BytesArray bytesArray0 = new BytesArray(byteArray0, int0, int0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(684, bytesArray0.length());
      assertEquals(684, bytesArray0.arrayOffset());
      assertTrue(bytesArray0.hasArray());
      assertNotNull(bytesArray0);
      assertEquals(1, byteArray0.length);
      
      StreamInput streamInput0 = StreamInput.wrap((BytesReference) bytesArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(684, bytesArray0.length());
      assertEquals(684, bytesArray0.arrayOffset());
      assertTrue(bytesArray0.hasArray());
      assertNotNull(streamInput0);
      assertEquals(1, byteArray0.length);
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Settings settings0 = Settings.Builder.EMPTY_SETTINGS;
      assertNotNull(settings0);
      
      RestController restController0 = new RestController(settings0);
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertNotNull(restController0);
      
      Client client0 = null;
      RestShardsAction restShardsAction0 = new RestShardsAction(settings0, restController0, client0);
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertNotNull(restShardsAction0);
      
      StringBuilder stringBuilder0 = new StringBuilder();
      assertEquals("", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      restShardsAction0.documentation(stringBuilder0);
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertEquals("/_cat/shards\n/_cat/shards/{index}\n", stringBuilder0.toString());
      
      HttpVersion httpVersion0 = HttpVersion.HTTP_1_1;
      assertEquals(1, httpVersion0.getMajorVersion());
      assertEquals("HTTP", httpVersion0.getProtocolName());
      assertEquals("HTTP/1.1", httpVersion0.getText());
      assertTrue(httpVersion0.isKeepAliveDefault());
      assertEquals("HTTP/1.1", httpVersion0.toString());
      assertEquals(1, httpVersion0.getMinorVersion());
      assertNotNull(httpVersion0);
      
      HttpMethod httpMethod0 = HttpMethod.GET;
      assertEquals("GET", httpMethod0.getName());
      assertEquals("GET", httpMethod0.toString());
      assertNotNull(httpMethod0);
      
      String string0 = "VPkI6&T5j8y:";
      DefaultHttpRequest defaultHttpRequest0 = new DefaultHttpRequest(httpVersion0, httpMethod0, string0);
      assertEquals("VPkI6&T5j8y:", defaultHttpRequest0.getUri());
      assertEquals(1, httpVersion0.getMajorVersion());
      assertEquals("HTTP", httpVersion0.getProtocolName());
      assertEquals("HTTP/1.1", httpVersion0.getText());
      assertTrue(httpVersion0.isKeepAliveDefault());
      assertEquals("HTTP/1.1", httpVersion0.toString());
      assertEquals(1, httpVersion0.getMinorVersion());
      assertEquals("GET", httpMethod0.getName());
      assertEquals("GET", httpMethod0.toString());
      assertNotNull(defaultHttpRequest0);
      
      DefaultLocalServerChannelFactory defaultLocalServerChannelFactory0 = new DefaultLocalServerChannelFactory();
      assertNotNull(defaultLocalServerChannelFactory0);
      
      DefaultChannelPipeline defaultChannelPipeline0 = new DefaultChannelPipeline();
      assertFalse(defaultChannelPipeline0.isAttached());
      assertNotNull(defaultChannelPipeline0);
      
      defaultLocalServerChannelFactory0.releaseExternalResources();
      LocalServerChannel localServerChannel0 = defaultLocalServerChannelFactory0.newChannel(defaultChannelPipeline0);
      assertTrue(defaultChannelPipeline0.isAttached());
      assertTrue(localServerChannel0.isReadable());
      assertEquals(0, (int)localServerChannel0.getId());
      assertNotNull(localServerChannel0);
      
      NettyHttpRequest nettyHttpRequest0 = new NettyHttpRequest(defaultHttpRequest0, localServerChannel0);
      assertEquals("VPkI6&T5j8y:", defaultHttpRequest0.getUri());
      assertTrue(defaultChannelPipeline0.isAttached());
      assertTrue(localServerChannel0.isReadable());
      assertEquals(0, (int)localServerChannel0.getId());
      assertEquals("VPkI6&T5j8y:", nettyHttpRequest0.rawPath());
      assertFalse(nettyHttpRequest0.hasContent());
      assertEquals(RestRequest.Method.GET, nettyHttpRequest0.method());
      assertEquals("VPkI6&T5j8y:", nettyHttpRequest0.uri());
      assertEquals(1, httpVersion0.getMajorVersion());
      assertEquals("HTTP", httpVersion0.getProtocolName());
      assertEquals("HTTP/1.1", httpVersion0.getText());
      assertTrue(httpVersion0.isKeepAliveDefault());
      assertEquals("HTTP/1.1", httpVersion0.toString());
      assertEquals(1, httpVersion0.getMinorVersion());
      assertEquals("GET", httpMethod0.getName());
      assertEquals("GET", httpMethod0.toString());
      assertNotNull(nettyHttpRequest0);
      
      ClusterStateResponse clusterStateResponse0 = new ClusterStateResponse();
      assertNotNull(clusterStateResponse0);
      
      IndicesStatsResponse indicesStatsResponse0 = mock(IndicesStatsResponse.class, new ViolatedAssumptionAnswer());
      Table table0 = restShardsAction0.getTableWithHeader(nettyHttpRequest0);
      assertEquals("VPkI6&T5j8y:", defaultHttpRequest0.getUri());
      assertTrue(defaultChannelPipeline0.isAttached());
      assertTrue(localServerChannel0.isReadable());
      assertEquals(0, (int)localServerChannel0.getId());
      assertEquals("VPkI6&T5j8y:", nettyHttpRequest0.rawPath());
      assertFalse(nettyHttpRequest0.hasContent());
      assertEquals(RestRequest.Method.GET, nettyHttpRequest0.method());
      assertEquals("VPkI6&T5j8y:", nettyHttpRequest0.uri());
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertEquals(1, httpVersion0.getMajorVersion());
      assertEquals("HTTP", httpVersion0.getProtocolName());
      assertEquals("HTTP/1.1", httpVersion0.getText());
      assertTrue(httpVersion0.isKeepAliveDefault());
      assertEquals("HTTP/1.1", httpVersion0.toString());
      assertEquals(1, httpVersion0.getMinorVersion());
      assertEquals("GET", httpMethod0.getName());
      assertEquals("GET", httpMethod0.toString());
      assertNotNull(table0);
      
      // Undeclared exception!
      restShardsAction0.buildTable(nettyHttpRequest0, clusterStateResponse0, indicesStatsResponse0);
  }

  @Test(timeout = 11000)
  public void test10()  throws Throwable  {
      Settings settings0 = Settings.Builder.EMPTY_SETTINGS;
      assertNotNull(settings0);
      
      MetaData metaData0 = MetaData.PROTO;
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0L, metaData0.version());
      assertNotNull(metaData0);
      
      Settings settings1 = metaData0.persistentSettings();
      assertSame(settings1, settings0);
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0L, metaData0.version());
      assertNotNull(settings1);
      
      RestController restController0 = new RestController(settings1);
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0L, metaData0.version());
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertNotNull(restController0);
      
      Client client0 = null;
      RestShardsAction restShardsAction0 = new RestShardsAction(settings0, restController0, client0);
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0L, metaData0.version());
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertNotNull(restShardsAction0);
      
      boolean boolean0 = false;
      HttpVersion httpVersion0 = HttpVersion.HTTP_1_0;
      assertEquals(1, httpVersion0.getMajorVersion());
      assertEquals("HTTP/1.0", httpVersion0.toString());
      assertEquals("HTTP", httpVersion0.getProtocolName());
      assertEquals("HTTP/1.0", httpVersion0.getText());
      assertEquals(0, httpVersion0.getMinorVersion());
      assertFalse(httpVersion0.isKeepAliveDefault());
      assertNotNull(httpVersion0);
      
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean1 = FileSystemHandling.appendLineToFile(evoSuiteFile0, metaData0.CONTEXT_MODE_GATEWAY);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0L, metaData0.version());
      
      HttpMethod httpMethod0 = HttpMethod.PATCH;
      assertEquals("PATCH", httpMethod0.getName());
      assertEquals("PATCH", httpMethod0.toString());
      assertNotNull(httpMethod0);
      
      String string0 = "c,]";
      DefaultHttpRequest defaultHttpRequest0 = new DefaultHttpRequest(httpVersion0, httpMethod0, string0);
      assertEquals(1, httpVersion0.getMajorVersion());
      assertEquals("HTTP/1.0", httpVersion0.toString());
      assertEquals("HTTP", httpVersion0.getProtocolName());
      assertEquals("HTTP/1.0", httpVersion0.getText());
      assertEquals(0, httpVersion0.getMinorVersion());
      assertFalse(httpVersion0.isKeepAliveDefault());
      assertEquals("PATCH", httpMethod0.getName());
      assertEquals("PATCH", httpMethod0.toString());
      assertEquals("c,]", defaultHttpRequest0.getUri());
      assertNotNull(defaultHttpRequest0);
      
      Channel channel0 = null;
      NettyHttpRequest nettyHttpRequest0 = new NettyHttpRequest(defaultHttpRequest0, channel0);
      assertEquals(1, httpVersion0.getMajorVersion());
      assertEquals("HTTP/1.0", httpVersion0.toString());
      assertEquals("HTTP", httpVersion0.getProtocolName());
      assertEquals("HTTP/1.0", httpVersion0.getText());
      assertEquals(0, httpVersion0.getMinorVersion());
      assertFalse(httpVersion0.isKeepAliveDefault());
      assertEquals("PATCH", httpMethod0.getName());
      assertEquals("PATCH", httpMethod0.toString());
      assertEquals("c,]", defaultHttpRequest0.getUri());
      assertFalse(nettyHttpRequest0.hasContent());
      assertEquals(RestRequest.Method.GET, nettyHttpRequest0.method());
      assertEquals("c,]", nettyHttpRequest0.uri());
      assertEquals("c,]", nettyHttpRequest0.rawPath());
      assertNotNull(nettyHttpRequest0);
      
      NetworkService networkService0 = new NetworkService(settings0);
      assertNotNull(networkService0);
      
      BigArrays bigArrays0 = BigArrays.NON_RECYCLING_INSTANCE;
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertNotNull(bigArrays0);
      
      ThreadPool threadPool0 = new ThreadPool(string0);
      assertNotNull(threadPool0);
      
      NettyHttpServerTransport nettyHttpServerTransport0 = new NettyHttpServerTransport(settings1, networkService0, bigArrays0, threadPool0);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0L, metaData0.version());
      assertEquals(Lifecycle.State.INITIALIZED, nettyHttpServerTransport0.lifecycleState());
      assertNotNull(nettyHttpServerTransport0);
      
      boolean boolean2 = false;
      NettyHttpChannel nettyHttpChannel0 = new NettyHttpChannel(nettyHttpServerTransport0, nettyHttpRequest0, boolean2);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertTrue(boolean2 == boolean1);
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0L, metaData0.version());
      assertEquals(Lifecycle.State.INITIALIZED, nettyHttpServerTransport0.lifecycleState());
      assertFalse(nettyHttpChannel0.detailedErrorsEnabled());
      assertEquals(1, httpVersion0.getMajorVersion());
      assertEquals("HTTP/1.0", httpVersion0.toString());
      assertEquals("HTTP", httpVersion0.getProtocolName());
      assertEquals("HTTP/1.0", httpVersion0.getText());
      assertEquals(0, httpVersion0.getMinorVersion());
      assertFalse(httpVersion0.isKeepAliveDefault());
      assertEquals("PATCH", httpMethod0.getName());
      assertEquals("PATCH", httpMethod0.toString());
      assertEquals("c,]", defaultHttpRequest0.getUri());
      assertFalse(nettyHttpRequest0.hasContent());
      assertEquals(RestRequest.Method.GET, nettyHttpRequest0.method());
      assertEquals("c,]", nettyHttpRequest0.uri());
      assertEquals("c,]", nettyHttpRequest0.rawPath());
      assertNotNull(nettyHttpChannel0);
      
      // Undeclared exception!
      try { 
        restShardsAction0.doRequest(nettyHttpRequest0, nettyHttpChannel0, client0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.rest.action.cat.RestShardsAction", e);
      }
  }

  @Test(timeout = 11000)
  public void test11()  throws Throwable  {
      Settings settings0 = Settings.Builder.EMPTY_SETTINGS;
      assertNotNull(settings0);
      
      Client client0 = null;
      boolean boolean0 = false;
      HttpVersion httpVersion0 = HttpVersion.HTTP_1_0;
      assertEquals(0, httpVersion0.getMinorVersion());
      assertEquals("HTTP/1.0", httpVersion0.toString());
      assertEquals("HTTP", httpVersion0.getProtocolName());
      assertFalse(httpVersion0.isKeepAliveDefault());
      assertEquals(1, httpVersion0.getMajorVersion());
      assertEquals("HTTP/1.0", httpVersion0.getText());
      assertNotNull(httpVersion0);
      
      EvoSuiteFile evoSuiteFile0 = null;
      HttpMethod httpMethod0 = HttpMethod.PATCH;
      assertEquals("PATCH", httpMethod0.getName());
      assertEquals("PATCH", httpMethod0.toString());
      assertNotNull(httpMethod0);
      
      String string0 = "c,]";
      DefaultHttpRequest defaultHttpRequest0 = new DefaultHttpRequest(httpVersion0, httpMethod0, string0);
      assertEquals(0, httpVersion0.getMinorVersion());
      assertEquals("HTTP/1.0", httpVersion0.toString());
      assertEquals("HTTP", httpVersion0.getProtocolName());
      assertFalse(httpVersion0.isKeepAliveDefault());
      assertEquals(1, httpVersion0.getMajorVersion());
      assertEquals("HTTP/1.0", httpVersion0.getText());
      assertEquals("PATCH", httpMethod0.getName());
      assertEquals("PATCH", httpMethod0.toString());
      assertEquals("c,]", defaultHttpRequest0.getUri());
      assertNotNull(defaultHttpRequest0);
      
      Channel channel0 = null;
      NettyHttpRequest nettyHttpRequest0 = new NettyHttpRequest(defaultHttpRequest0, channel0);
      assertEquals(0, httpVersion0.getMinorVersion());
      assertEquals("HTTP/1.0", httpVersion0.toString());
      assertEquals("HTTP", httpVersion0.getProtocolName());
      assertFalse(httpVersion0.isKeepAliveDefault());
      assertEquals(1, httpVersion0.getMajorVersion());
      assertEquals("HTTP/1.0", httpVersion0.getText());
      assertEquals("PATCH", httpMethod0.getName());
      assertEquals("PATCH", httpMethod0.toString());
      assertEquals("c,]", defaultHttpRequest0.getUri());
      assertEquals(RestRequest.Method.GET, nettyHttpRequest0.method());
      assertEquals("c,]", nettyHttpRequest0.rawPath());
      assertEquals("c,]", nettyHttpRequest0.uri());
      assertFalse(nettyHttpRequest0.hasContent());
      assertNotNull(nettyHttpRequest0);
      
      HttpMethod httpMethod1 = HttpMethod.valueOf(string0);
      assertFalse(httpMethod1.equals((Object)httpMethod0));
      assertNotSame(httpMethod1, httpMethod0);
      assertEquals("c,]", httpMethod1.toString());
      assertEquals("c,]", httpMethod1.getName());
      assertNotNull(httpMethod1);
      
      BigArrays bigArrays0 = BigArrays.NON_RECYCLING_INSTANCE;
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertNotNull(bigArrays0);
      
      ThreadPool threadPool0 = new ThreadPool(string0);
      assertNotNull(threadPool0);
      
      RestController restController0 = new RestController(settings0);
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertNotNull(restController0);
      
      RestShardsAction restShardsAction0 = new RestShardsAction(settings0, restController0, client0);
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertNotNull(restShardsAction0);
      
      ClusterName clusterName0 = ClusterName.clusterNameFromSettings(settings0);
      assertEquals("elasticsearch", clusterName0.value());
      assertNotNull(clusterName0);
      
      ClusterState clusterState0 = ClusterState.PROTO;
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertEquals(0L, clusterState0.getVersion());
      assertEquals(0L, clusterState0.version());
      assertFalse(clusterState0.wasReadFromDiff());
      assertEquals("AAAAAAEAQACCAAAAAwAAAA", clusterState0.stateUUID());
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState0.status());
      assertNotNull(clusterState0);
      
      ClusterStateResponse clusterStateResponse0 = new ClusterStateResponse(clusterName0, clusterState0);
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertEquals(0L, clusterState0.getVersion());
      assertEquals(0L, clusterState0.version());
      assertFalse(clusterState0.wasReadFromDiff());
      assertEquals("AAAAAAEAQACCAAAAAwAAAA", clusterState0.stateUUID());
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState0.status());
      assertEquals("elasticsearch", clusterName0.value());
      assertNotNull(clusterStateResponse0);
      
      IndicesStatsResponse indicesStatsResponse0 = mock(IndicesStatsResponse.class, new ViolatedAssumptionAnswer());
      Table table0 = restShardsAction0.buildTable(nettyHttpRequest0, clusterStateResponse0, indicesStatsResponse0);
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertFalse(httpMethod0.equals((Object)httpMethod1));
      assertNotSame(httpMethod0, httpMethod1);
      assertEquals(0L, clusterState0.getVersion());
      assertEquals(0L, clusterState0.version());
      assertFalse(clusterState0.wasReadFromDiff());
      assertEquals("AAAAAAEAQACCAAAAAwAAAA", clusterState0.stateUUID());
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState0.status());
      assertEquals(0, httpVersion0.getMinorVersion());
      assertEquals("HTTP/1.0", httpVersion0.toString());
      assertEquals("HTTP", httpVersion0.getProtocolName());
      assertFalse(httpVersion0.isKeepAliveDefault());
      assertEquals(1, httpVersion0.getMajorVersion());
      assertEquals("HTTP/1.0", httpVersion0.getText());
      assertEquals("PATCH", httpMethod0.getName());
      assertEquals("PATCH", httpMethod0.toString());
      assertEquals("c,]", defaultHttpRequest0.getUri());
      assertEquals(RestRequest.Method.GET, nettyHttpRequest0.method());
      assertEquals("c,]", nettyHttpRequest0.rawPath());
      assertEquals("c,]", nettyHttpRequest0.uri());
      assertFalse(nettyHttpRequest0.hasContent());
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertEquals("elasticsearch", clusterName0.value());
      assertNotNull(table0);
      
      NettyHttpServerTransport nettyHttpServerTransport0 = null;
      boolean boolean1 = true;
      NettyHttpChannel nettyHttpChannel0 = new NettyHttpChannel(nettyHttpServerTransport0, nettyHttpRequest0, boolean1);
      assertFalse(boolean1 == boolean0);
      assertFalse(httpMethod0.equals((Object)httpMethod1));
      assertEquals(0, httpVersion0.getMinorVersion());
      assertEquals("HTTP/1.0", httpVersion0.toString());
      assertEquals("HTTP", httpVersion0.getProtocolName());
      assertFalse(httpVersion0.isKeepAliveDefault());
      assertEquals(1, httpVersion0.getMajorVersion());
      assertEquals("HTTP/1.0", httpVersion0.getText());
      assertEquals("PATCH", httpMethod0.getName());
      assertEquals("PATCH", httpMethod0.toString());
      assertTrue(nettyHttpChannel0.detailedErrorsEnabled());
      assertEquals("c,]", defaultHttpRequest0.getUri());
      assertEquals(RestRequest.Method.GET, nettyHttpRequest0.method());
      assertEquals("c,]", nettyHttpRequest0.rawPath());
      assertEquals("c,]", nettyHttpRequest0.uri());
      assertFalse(nettyHttpRequest0.hasContent());
      assertNotNull(nettyHttpChannel0);
      
      // Undeclared exception!
      try { 
        restShardsAction0.doRequest(nettyHttpRequest0, nettyHttpChannel0, client0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.rest.action.cat.RestShardsAction", e);
      }
  }

  @Test(timeout = 11000)
  public void test12()  throws Throwable  {
      Settings settings0 = Settings.Builder.EMPTY_SETTINGS;
      assertNotNull(settings0);
      
      Client client0 = null;
      boolean boolean0 = false;
      HttpVersion httpVersion0 = HttpVersion.HTTP_1_0;
      assertEquals("HTTP/1.0", httpVersion0.getText());
      assertEquals(0, httpVersion0.getMinorVersion());
      assertEquals(1, httpVersion0.getMajorVersion());
      assertEquals("HTTP", httpVersion0.getProtocolName());
      assertEquals("HTTP/1.0", httpVersion0.toString());
      assertFalse(httpVersion0.isKeepAliveDefault());
      assertNotNull(httpVersion0);
      
      EvoSuiteFile evoSuiteFile0 = null;
      HttpMethod httpMethod0 = HttpMethod.PATCH;
      assertEquals("PATCH", httpMethod0.toString());
      assertEquals("PATCH", httpMethod0.getName());
      assertNotNull(httpMethod0);
      
      String string0 = "c,]";
      DefaultHttpRequest defaultHttpRequest0 = new DefaultHttpRequest(httpVersion0, httpMethod0, string0);
      assertEquals("HTTP/1.0", httpVersion0.getText());
      assertEquals(0, httpVersion0.getMinorVersion());
      assertEquals(1, httpVersion0.getMajorVersion());
      assertEquals("HTTP", httpVersion0.getProtocolName());
      assertEquals("HTTP/1.0", httpVersion0.toString());
      assertFalse(httpVersion0.isKeepAliveDefault());
      assertEquals("PATCH", httpMethod0.toString());
      assertEquals("PATCH", httpMethod0.getName());
      assertEquals("c,]", defaultHttpRequest0.getUri());
      assertNotNull(defaultHttpRequest0);
      
      Channel channel0 = null;
      defaultHttpRequest0.setMethod(httpMethod0);
      assertEquals("HTTP/1.0", httpVersion0.getText());
      assertEquals(0, httpVersion0.getMinorVersion());
      assertEquals(1, httpVersion0.getMajorVersion());
      assertEquals("HTTP", httpVersion0.getProtocolName());
      assertEquals("HTTP/1.0", httpVersion0.toString());
      assertFalse(httpVersion0.isKeepAliveDefault());
      assertEquals("PATCH", httpMethod0.toString());
      assertEquals("PATCH", httpMethod0.getName());
      assertEquals("c,]", defaultHttpRequest0.getUri());
      
      NettyHttpRequest nettyHttpRequest0 = new NettyHttpRequest(defaultHttpRequest0, channel0);
      assertEquals("HTTP/1.0", httpVersion0.getText());
      assertEquals(0, httpVersion0.getMinorVersion());
      assertEquals(1, httpVersion0.getMajorVersion());
      assertEquals("HTTP", httpVersion0.getProtocolName());
      assertEquals("HTTP/1.0", httpVersion0.toString());
      assertFalse(httpVersion0.isKeepAliveDefault());
      assertEquals("PATCH", httpMethod0.toString());
      assertEquals("PATCH", httpMethod0.getName());
      assertEquals("c,]", defaultHttpRequest0.getUri());
      assertFalse(nettyHttpRequest0.hasContent());
      assertEquals("c,]", nettyHttpRequest0.rawPath());
      assertEquals(RestRequest.Method.GET, nettyHttpRequest0.method());
      assertEquals("c,]", nettyHttpRequest0.uri());
      assertNotNull(nettyHttpRequest0);
      
      HttpMethod httpMethod1 = HttpMethod.valueOf(string0);
      assertFalse(httpMethod1.equals((Object)httpMethod0));
      assertNotSame(httpMethod1, httpMethod0);
      assertEquals("c,]", httpMethod1.getName());
      assertEquals("c,]", httpMethod1.toString());
      assertNotNull(httpMethod1);
      
      BigArrays bigArrays0 = BigArrays.NON_RECYCLING_INSTANCE;
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertNotNull(bigArrays0);
      
      ThreadPool threadPool0 = new ThreadPool(string0);
      assertNotNull(threadPool0);
      
      RestController restController0 = new RestController(settings0);
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertNotNull(restController0);
      
      RestShardsAction restShardsAction0 = new RestShardsAction(settings0, restController0, client0);
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertNotNull(restShardsAction0);
      
      ClusterName clusterName0 = ClusterName.clusterNameFromSettings(settings0);
      assertEquals("elasticsearch", clusterName0.value());
      assertNotNull(clusterName0);
      
      ClusterState clusterState0 = ClusterState.PROTO;
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertEquals(0L, clusterState0.getVersion());
      assertEquals("AAAAAAEAQACCAAAAAwAAAA", clusterState0.stateUUID());
      assertEquals(0L, clusterState0.version());
      assertFalse(clusterState0.wasReadFromDiff());
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState0.status());
      assertNotNull(clusterState0);
      
      boolean boolean1 = true;
      defaultHttpRequest0.setChunked(boolean1);
      assertFalse(boolean1 == boolean0);
      assertFalse(httpMethod0.equals((Object)httpMethod1));
      assertNotSame(httpMethod0, httpMethod1);
      assertEquals("HTTP/1.0", httpVersion0.getText());
      assertEquals(0, httpVersion0.getMinorVersion());
      assertEquals(1, httpVersion0.getMajorVersion());
      assertEquals("HTTP", httpVersion0.getProtocolName());
      assertEquals("HTTP/1.0", httpVersion0.toString());
      assertFalse(httpVersion0.isKeepAliveDefault());
      assertEquals("PATCH", httpMethod0.toString());
      assertEquals("PATCH", httpMethod0.getName());
      assertEquals("c,]", defaultHttpRequest0.getUri());
      
      ClusterStateResponse clusterStateResponse0 = new ClusterStateResponse(clusterName0, clusterState0);
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertEquals("elasticsearch", clusterName0.value());
      assertEquals(0L, clusterState0.getVersion());
      assertEquals("AAAAAAEAQACCAAAAAwAAAA", clusterState0.stateUUID());
      assertEquals(0L, clusterState0.version());
      assertFalse(clusterState0.wasReadFromDiff());
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState0.status());
      assertNotNull(clusterStateResponse0);
      
      IndicesStatsResponse indicesStatsResponse0 = mock(IndicesStatsResponse.class, new ViolatedAssumptionAnswer());
      Table table0 = restShardsAction0.buildTable(nettyHttpRequest0, clusterStateResponse0, indicesStatsResponse0);
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertFalse(httpMethod0.equals((Object)httpMethod1));
      assertNotSame(httpMethod0, httpMethod1);
      assertEquals("elasticsearch", clusterName0.value());
      assertEquals(0L, clusterState0.getVersion());
      assertEquals("AAAAAAEAQACCAAAAAwAAAA", clusterState0.stateUUID());
      assertEquals(0L, clusterState0.version());
      assertFalse(clusterState0.wasReadFromDiff());
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState0.status());
      assertEquals("HTTP/1.0", httpVersion0.getText());
      assertEquals(0, httpVersion0.getMinorVersion());
      assertEquals(1, httpVersion0.getMajorVersion());
      assertEquals("HTTP", httpVersion0.getProtocolName());
      assertEquals("HTTP/1.0", httpVersion0.toString());
      assertFalse(httpVersion0.isKeepAliveDefault());
      assertEquals("PATCH", httpMethod0.toString());
      assertEquals("PATCH", httpMethod0.getName());
      assertEquals("c,]", defaultHttpRequest0.getUri());
      assertFalse(nettyHttpRequest0.hasContent());
      assertEquals("c,]", nettyHttpRequest0.rawPath());
      assertEquals(RestRequest.Method.GET, nettyHttpRequest0.method());
      assertEquals("c,]", nettyHttpRequest0.uri());
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertNotNull(table0);
      
      NettyHttpServerTransport nettyHttpServerTransport0 = null;
      boolean boolean2 = true;
      NettyHttpChannel nettyHttpChannel0 = new NettyHttpChannel(nettyHttpServerTransport0, nettyHttpRequest0, boolean2);
      assertFalse(httpMethod0.equals((Object)httpMethod1));
      assertFalse(boolean2 == boolean0);
      assertEquals("HTTP/1.0", httpVersion0.getText());
      assertEquals(0, httpVersion0.getMinorVersion());
      assertEquals(1, httpVersion0.getMajorVersion());
      assertEquals("HTTP", httpVersion0.getProtocolName());
      assertEquals("HTTP/1.0", httpVersion0.toString());
      assertFalse(httpVersion0.isKeepAliveDefault());
      assertEquals("PATCH", httpMethod0.toString());
      assertEquals("PATCH", httpMethod0.getName());
      assertEquals("c,]", defaultHttpRequest0.getUri());
      assertTrue(nettyHttpChannel0.detailedErrorsEnabled());
      assertFalse(nettyHttpRequest0.hasContent());
      assertEquals("c,]", nettyHttpRequest0.rawPath());
      assertEquals(RestRequest.Method.GET, nettyHttpRequest0.method());
      assertEquals("c,]", nettyHttpRequest0.uri());
      assertNotNull(nettyHttpChannel0);
      
      // Undeclared exception!
      restShardsAction0.getTableWithHeader(nettyHttpRequest0);
  }
}
